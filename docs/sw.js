globalThis.global = globalThis; globalThis.window = globalThis;
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/@comunica/types/lib/Bindings.js
var require_Bindings = __commonJS({
  "node_modules/@comunica/types/lib/Bindings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/IActionContext.js
var require_IActionContext = __commonJS({
  "node_modules/@comunica/types/lib/IActionContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/IAggregatedStore.js
var require_IAggregatedStore = __commonJS({
  "node_modules/@comunica/types/lib/IAggregatedStore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/ICliArgsHandler.js
var require_ICliArgsHandler = __commonJS({
  "node_modules/@comunica/types/lib/ICliArgsHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/IDataDestination.js
var require_IDataDestination = __commonJS({
  "node_modules/@comunica/types/lib/IDataDestination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/IDataSource.js
var require_IDataSource = __commonJS({
  "node_modules/@comunica/types/lib/IDataSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/IJoinEntry.js
var require_IJoinEntry = __commonJS({
  "node_modules/@comunica/types/lib/IJoinEntry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/IMetadata.js
var require_IMetadata = __commonJS({
  "node_modules/@comunica/types/lib/IMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/IPhysicalQueryPlanLogger.js
var require_IPhysicalQueryPlanLogger = __commonJS({
  "node_modules/@comunica/types/lib/IPhysicalQueryPlanLogger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/IProxyHandler.js
var require_IProxyHandler = __commonJS({
  "node_modules/@comunica/types/lib/IProxyHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/IQueryContext.js
var require_IQueryContext = __commonJS({
  "node_modules/@comunica/types/lib/IQueryContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/IQueryEngine.js
var require_IQueryEngine = __commonJS({
  "node_modules/@comunica/types/lib/IQueryEngine.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/IQueryOperationResult.js
var require_IQueryOperationResult = __commonJS({
  "node_modules/@comunica/types/lib/IQueryOperationResult.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/types/lib/Logger.js
var require_Logger = __commonJS({
  "node_modules/@comunica/types/lib/Logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Logger = void 0;
    var Logger = class _Logger {
      /**
       * Convert a string-based logging level to a numerical logging level.
       * @param level A string-based logging level
       * @return The numerical logging level, or undefined.
       */
      static getLevelOrdinal(level) {
        return _Logger.LEVELS[level];
      }
    };
    exports.Logger = Logger;
    Logger.LEVELS = {
      trace: 0,
      debug: 1,
      info: 2,
      warn: 3,
      error: 4,
      fatal: 5
    };
  }
});

// node_modules/@comunica/types/lib/index.js
var require_lib = __commonJS({
  "node_modules/@comunica/types/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Bindings(), exports);
    __exportStar(require_IActionContext(), exports);
    __exportStar(require_IAggregatedStore(), exports);
    __exportStar(require_ICliArgsHandler(), exports);
    __exportStar(require_IDataDestination(), exports);
    __exportStar(require_IDataSource(), exports);
    __exportStar(require_IJoinEntry(), exports);
    __exportStar(require_IMetadata(), exports);
    __exportStar(require_IPhysicalQueryPlanLogger(), exports);
    __exportStar(require_IProxyHandler(), exports);
    __exportStar(require_IQueryContext(), exports);
    __exportStar(require_IQueryEngine(), exports);
    __exportStar(require_IQueryOperationResult(), exports);
    __exportStar(require_Logger(), exports);
  }
});

// node_modules/immutable/dist/immutable.js
var require_immutable = __commonJS({
  "node_modules/immutable/dist/immutable.js"(exports, module) {
    (function(global2, factory3) {
      typeof exports === "object" && typeof module !== "undefined" ? factory3(exports) : typeof define === "function" && define.amd ? define(["exports"], factory3) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory3(global2.Immutable = {}));
    })(exports, function(exports2) {
      "use strict";
      var DELETE = "delete";
      var SHIFT = 5;
      var SIZE = 1 << SHIFT;
      var MASK = SIZE - 1;
      var NOT_SET = {};
      function MakeRef() {
        return { value: false };
      }
      function SetRef(ref) {
        if (ref) {
          ref.value = true;
        }
      }
      function OwnerID() {
      }
      function ensureSize(iter) {
        if (iter.size === void 0) {
          iter.size = iter.__iterate(returnTrue);
        }
        return iter.size;
      }
      function wrapIndex(iter, index) {
        if (typeof index !== "number") {
          var uint32Index = index >>> 0;
          if ("" + uint32Index !== index || uint32Index === 4294967295) {
            return NaN;
          }
          index = uint32Index;
        }
        return index < 0 ? ensureSize(iter) + index : index;
      }
      function returnTrue() {
        return true;
      }
      function wholeSlice(begin, end, size) {
        return (begin === 0 && !isNeg(begin) || size !== void 0 && begin <= -size) && (end === void 0 || size !== void 0 && end >= size);
      }
      function resolveBegin(begin, size) {
        return resolveIndex(begin, size, 0);
      }
      function resolveEnd(end, size) {
        return resolveIndex(end, size, size);
      }
      function resolveIndex(index, size, defaultIndex) {
        return index === void 0 ? defaultIndex : isNeg(index) ? size === Infinity ? size : Math.max(0, size + index) | 0 : size === void 0 || size === index ? index : Math.min(size, index) | 0;
      }
      function isNeg(value) {
        return value < 0 || value === 0 && 1 / value === -Infinity;
      }
      var IS_COLLECTION_SYMBOL = "@@__IMMUTABLE_ITERABLE__@@";
      function isCollection(maybeCollection) {
        return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);
      }
      var IS_KEYED_SYMBOL = "@@__IMMUTABLE_KEYED__@@";
      function isKeyed(maybeKeyed) {
        return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);
      }
      var IS_INDEXED_SYMBOL = "@@__IMMUTABLE_INDEXED__@@";
      function isIndexed(maybeIndexed) {
        return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);
      }
      function isAssociative(maybeAssociative) {
        return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
      }
      var Collection = function Collection2(value) {
        return isCollection(value) ? value : Seq(value);
      };
      var KeyedCollection = /* @__PURE__ */ function(Collection2) {
        function KeyedCollection2(value) {
          return isKeyed(value) ? value : KeyedSeq(value);
        }
        if (Collection2)
          KeyedCollection2.__proto__ = Collection2;
        KeyedCollection2.prototype = Object.create(Collection2 && Collection2.prototype);
        KeyedCollection2.prototype.constructor = KeyedCollection2;
        return KeyedCollection2;
      }(Collection);
      var IndexedCollection = /* @__PURE__ */ function(Collection2) {
        function IndexedCollection2(value) {
          return isIndexed(value) ? value : IndexedSeq(value);
        }
        if (Collection2)
          IndexedCollection2.__proto__ = Collection2;
        IndexedCollection2.prototype = Object.create(Collection2 && Collection2.prototype);
        IndexedCollection2.prototype.constructor = IndexedCollection2;
        return IndexedCollection2;
      }(Collection);
      var SetCollection = /* @__PURE__ */ function(Collection2) {
        function SetCollection2(value) {
          return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);
        }
        if (Collection2)
          SetCollection2.__proto__ = Collection2;
        SetCollection2.prototype = Object.create(Collection2 && Collection2.prototype);
        SetCollection2.prototype.constructor = SetCollection2;
        return SetCollection2;
      }(Collection);
      Collection.Keyed = KeyedCollection;
      Collection.Indexed = IndexedCollection;
      Collection.Set = SetCollection;
      var IS_SEQ_SYMBOL = "@@__IMMUTABLE_SEQ__@@";
      function isSeq(maybeSeq) {
        return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);
      }
      var IS_RECORD_SYMBOL = "@@__IMMUTABLE_RECORD__@@";
      function isRecord(maybeRecord) {
        return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);
      }
      function isImmutable(maybeImmutable) {
        return isCollection(maybeImmutable) || isRecord(maybeImmutable);
      }
      var IS_ORDERED_SYMBOL = "@@__IMMUTABLE_ORDERED__@@";
      function isOrdered(maybeOrdered) {
        return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);
      }
      var ITERATE_KEYS = 0;
      var ITERATE_VALUES = 1;
      var ITERATE_ENTRIES = 2;
      var REAL_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;
      var Iterator = function Iterator2(next) {
        this.next = next;
      };
      Iterator.prototype.toString = function toString2() {
        return "[Iterator]";
      };
      Iterator.KEYS = ITERATE_KEYS;
      Iterator.VALUES = ITERATE_VALUES;
      Iterator.ENTRIES = ITERATE_ENTRIES;
      Iterator.prototype.inspect = Iterator.prototype.toSource = function() {
        return this.toString();
      };
      Iterator.prototype[ITERATOR_SYMBOL] = function() {
        return this;
      };
      function iteratorValue(type, k, v, iteratorResult) {
        var value = type === 0 ? k : type === 1 ? v : [k, v];
        iteratorResult ? iteratorResult.value = value : iteratorResult = {
          value,
          done: false
        };
        return iteratorResult;
      }
      function iteratorDone() {
        return { value: void 0, done: true };
      }
      function hasIterator(maybeIterable) {
        if (Array.isArray(maybeIterable)) {
          return true;
        }
        return !!getIteratorFn(maybeIterable);
      }
      function isIterator(maybeIterator) {
        return maybeIterator && typeof maybeIterator.next === "function";
      }
      function getIterator(iterable) {
        var iteratorFn = getIteratorFn(iterable);
        return iteratorFn && iteratorFn.call(iterable);
      }
      function getIteratorFn(iterable) {
        var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      function isEntriesIterable(maybeIterable) {
        var iteratorFn = getIteratorFn(maybeIterable);
        return iteratorFn && iteratorFn === maybeIterable.entries;
      }
      function isKeysIterable(maybeIterable) {
        var iteratorFn = getIteratorFn(maybeIterable);
        return iteratorFn && iteratorFn === maybeIterable.keys;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function isArrayLike(value) {
        if (Array.isArray(value) || typeof value === "string") {
          return true;
        }
        return value && typeof value === "object" && Number.isInteger(value.length) && value.length >= 0 && (value.length === 0 ? (
          // Only {length: 0} is considered Array-like.
          Object.keys(value).length === 1
        ) : (
          // An object is only Array-like if it has a property where the last value
          // in the array-like may be found (which could be undefined).
          value.hasOwnProperty(value.length - 1)
        ));
      }
      var Seq = /* @__PURE__ */ function(Collection2) {
        function Seq2(value) {
          return value === void 0 || value === null ? emptySequence() : isImmutable(value) ? value.toSeq() : seqFromValue(value);
        }
        if (Collection2)
          Seq2.__proto__ = Collection2;
        Seq2.prototype = Object.create(Collection2 && Collection2.prototype);
        Seq2.prototype.constructor = Seq2;
        Seq2.prototype.toSeq = function toSeq() {
          return this;
        };
        Seq2.prototype.toString = function toString2() {
          return this.__toString("Seq {", "}");
        };
        Seq2.prototype.cacheResult = function cacheResult() {
          if (!this._cache && this.__iterateUncached) {
            this._cache = this.entrySeq().toArray();
            this.size = this._cache.length;
          }
          return this;
        };
        Seq2.prototype.__iterate = function __iterate(fn, reverse) {
          var cache = this._cache;
          if (cache) {
            var size = cache.length;
            var i2 = 0;
            while (i2 !== size) {
              var entry = cache[reverse ? size - ++i2 : i2++];
              if (fn(entry[1], entry[0], this) === false) {
                break;
              }
            }
            return i2;
          }
          return this.__iterateUncached(fn, reverse);
        };
        Seq2.prototype.__iterator = function __iterator(type, reverse) {
          var cache = this._cache;
          if (cache) {
            var size = cache.length;
            var i2 = 0;
            return new Iterator(function() {
              if (i2 === size) {
                return iteratorDone();
              }
              var entry = cache[reverse ? size - ++i2 : i2++];
              return iteratorValue(type, entry[0], entry[1]);
            });
          }
          return this.__iteratorUncached(type, reverse);
        };
        return Seq2;
      }(Collection);
      var KeyedSeq = /* @__PURE__ */ function(Seq2) {
        function KeyedSeq2(value) {
          return value === void 0 || value === null ? emptySequence().toKeyedSeq() : isCollection(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : isRecord(value) ? value.toSeq() : keyedSeqFromValue(value);
        }
        if (Seq2)
          KeyedSeq2.__proto__ = Seq2;
        KeyedSeq2.prototype = Object.create(Seq2 && Seq2.prototype);
        KeyedSeq2.prototype.constructor = KeyedSeq2;
        KeyedSeq2.prototype.toKeyedSeq = function toKeyedSeq() {
          return this;
        };
        return KeyedSeq2;
      }(Seq);
      var IndexedSeq = /* @__PURE__ */ function(Seq2) {
        function IndexedSeq2(value) {
          return value === void 0 || value === null ? emptySequence() : isCollection(value) ? isKeyed(value) ? value.entrySeq() : value.toIndexedSeq() : isRecord(value) ? value.toSeq().entrySeq() : indexedSeqFromValue(value);
        }
        if (Seq2)
          IndexedSeq2.__proto__ = Seq2;
        IndexedSeq2.prototype = Object.create(Seq2 && Seq2.prototype);
        IndexedSeq2.prototype.constructor = IndexedSeq2;
        IndexedSeq2.of = function of() {
          return IndexedSeq2(arguments);
        };
        IndexedSeq2.prototype.toIndexedSeq = function toIndexedSeq() {
          return this;
        };
        IndexedSeq2.prototype.toString = function toString2() {
          return this.__toString("Seq [", "]");
        };
        return IndexedSeq2;
      }(Seq);
      var SetSeq = /* @__PURE__ */ function(Seq2) {
        function SetSeq2(value) {
          return (isCollection(value) && !isAssociative(value) ? value : IndexedSeq(value)).toSetSeq();
        }
        if (Seq2)
          SetSeq2.__proto__ = Seq2;
        SetSeq2.prototype = Object.create(Seq2 && Seq2.prototype);
        SetSeq2.prototype.constructor = SetSeq2;
        SetSeq2.of = function of() {
          return SetSeq2(arguments);
        };
        SetSeq2.prototype.toSetSeq = function toSetSeq() {
          return this;
        };
        return SetSeq2;
      }(Seq);
      Seq.isSeq = isSeq;
      Seq.Keyed = KeyedSeq;
      Seq.Set = SetSeq;
      Seq.Indexed = IndexedSeq;
      Seq.prototype[IS_SEQ_SYMBOL] = true;
      var ArraySeq = /* @__PURE__ */ function(IndexedSeq2) {
        function ArraySeq2(array) {
          this._array = array;
          this.size = array.length;
        }
        if (IndexedSeq2)
          ArraySeq2.__proto__ = IndexedSeq2;
        ArraySeq2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
        ArraySeq2.prototype.constructor = ArraySeq2;
        ArraySeq2.prototype.get = function get2(index, notSetValue) {
          return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
        };
        ArraySeq2.prototype.__iterate = function __iterate(fn, reverse) {
          var array = this._array;
          var size = array.length;
          var i2 = 0;
          while (i2 !== size) {
            var ii = reverse ? size - ++i2 : i2++;
            if (fn(array[ii], ii, this) === false) {
              break;
            }
          }
          return i2;
        };
        ArraySeq2.prototype.__iterator = function __iterator(type, reverse) {
          var array = this._array;
          var size = array.length;
          var i2 = 0;
          return new Iterator(function() {
            if (i2 === size) {
              return iteratorDone();
            }
            var ii = reverse ? size - ++i2 : i2++;
            return iteratorValue(type, ii, array[ii]);
          });
        };
        return ArraySeq2;
      }(IndexedSeq);
      var ObjectSeq = /* @__PURE__ */ function(KeyedSeq2) {
        function ObjectSeq2(object) {
          var keys = Object.keys(object).concat(
            Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : []
          );
          this._object = object;
          this._keys = keys;
          this.size = keys.length;
        }
        if (KeyedSeq2)
          ObjectSeq2.__proto__ = KeyedSeq2;
        ObjectSeq2.prototype = Object.create(KeyedSeq2 && KeyedSeq2.prototype);
        ObjectSeq2.prototype.constructor = ObjectSeq2;
        ObjectSeq2.prototype.get = function get2(key, notSetValue) {
          if (notSetValue !== void 0 && !this.has(key)) {
            return notSetValue;
          }
          return this._object[key];
        };
        ObjectSeq2.prototype.has = function has2(key) {
          return hasOwnProperty.call(this._object, key);
        };
        ObjectSeq2.prototype.__iterate = function __iterate(fn, reverse) {
          var object = this._object;
          var keys = this._keys;
          var size = keys.length;
          var i2 = 0;
          while (i2 !== size) {
            var key = keys[reverse ? size - ++i2 : i2++];
            if (fn(object[key], key, this) === false) {
              break;
            }
          }
          return i2;
        };
        ObjectSeq2.prototype.__iterator = function __iterator(type, reverse) {
          var object = this._object;
          var keys = this._keys;
          var size = keys.length;
          var i2 = 0;
          return new Iterator(function() {
            if (i2 === size) {
              return iteratorDone();
            }
            var key = keys[reverse ? size - ++i2 : i2++];
            return iteratorValue(type, key, object[key]);
          });
        };
        return ObjectSeq2;
      }(KeyedSeq);
      ObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;
      var CollectionSeq = /* @__PURE__ */ function(IndexedSeq2) {
        function CollectionSeq2(collection) {
          this._collection = collection;
          this.size = collection.length || collection.size;
        }
        if (IndexedSeq2)
          CollectionSeq2.__proto__ = IndexedSeq2;
        CollectionSeq2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
        CollectionSeq2.prototype.constructor = CollectionSeq2;
        CollectionSeq2.prototype.__iterateUncached = function __iterateUncached(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var collection = this._collection;
          var iterator = getIterator(collection);
          var iterations = 0;
          if (isIterator(iterator)) {
            var step;
            while (!(step = iterator.next()).done) {
              if (fn(step.value, iterations++, this) === false) {
                break;
              }
            }
          }
          return iterations;
        };
        CollectionSeq2.prototype.__iteratorUncached = function __iteratorUncached(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var collection = this._collection;
          var iterator = getIterator(collection);
          if (!isIterator(iterator)) {
            return new Iterator(iteratorDone);
          }
          var iterations = 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, iterations++, step.value);
          });
        };
        return CollectionSeq2;
      }(IndexedSeq);
      var EMPTY_SEQ;
      function emptySequence() {
        return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
      }
      function keyedSeqFromValue(value) {
        var seq = maybeIndexedSeqFromValue(value);
        if (seq) {
          return seq.fromEntrySeq();
        }
        if (typeof value === "object") {
          return new ObjectSeq(value);
        }
        throw new TypeError(
          "Expected Array or collection object of [k, v] entries, or keyed object: " + value
        );
      }
      function indexedSeqFromValue(value) {
        var seq = maybeIndexedSeqFromValue(value);
        if (seq) {
          return seq;
        }
        throw new TypeError(
          "Expected Array or collection object of values: " + value
        );
      }
      function seqFromValue(value) {
        var seq = maybeIndexedSeqFromValue(value);
        if (seq) {
          return isEntriesIterable(value) ? seq.fromEntrySeq() : isKeysIterable(value) ? seq.toSetSeq() : seq;
        }
        if (typeof value === "object") {
          return new ObjectSeq(value);
        }
        throw new TypeError(
          "Expected Array or collection object of values, or keyed object: " + value
        );
      }
      function maybeIndexedSeqFromValue(value) {
        return isArrayLike(value) ? new ArraySeq(value) : hasIterator(value) ? new CollectionSeq(value) : void 0;
      }
      var IS_MAP_SYMBOL = "@@__IMMUTABLE_MAP__@@";
      function isMap(maybeMap) {
        return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);
      }
      function isOrderedMap(maybeOrderedMap) {
        return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
      }
      function isValueObject(maybeValue) {
        return Boolean(
          maybeValue && typeof maybeValue.equals === "function" && typeof maybeValue.hashCode === "function"
        );
      }
      function is(valueA, valueB) {
        if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
          return true;
        }
        if (!valueA || !valueB) {
          return false;
        }
        if (typeof valueA.valueOf === "function" && typeof valueB.valueOf === "function") {
          valueA = valueA.valueOf();
          valueB = valueB.valueOf();
          if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
            return true;
          }
          if (!valueA || !valueB) {
            return false;
          }
        }
        return !!(isValueObject(valueA) && isValueObject(valueB) && valueA.equals(valueB));
      }
      var imul = typeof Math.imul === "function" && Math.imul(4294967295, 2) === -2 ? Math.imul : function imul2(a, b) {
        a |= 0;
        b |= 0;
        var c = a & 65535;
        var d = b & 65535;
        return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0;
      };
      function smi(i32) {
        return i32 >>> 1 & 1073741824 | i32 & 3221225471;
      }
      var defaultValueOf = Object.prototype.valueOf;
      function hash(o) {
        if (o == null) {
          return hashNullish(o);
        }
        if (typeof o.hashCode === "function") {
          return smi(o.hashCode(o));
        }
        var v = valueOf(o);
        if (v == null) {
          return hashNullish(v);
        }
        switch (typeof v) {
          case "boolean":
            return v ? 1108378657 : 1108378656;
          case "number":
            return hashNumber(v);
          case "string":
            return v.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(v) : hashString(v);
          case "object":
          case "function":
            return hashJSObj(v);
          case "symbol":
            return hashSymbol(v);
          default:
            if (typeof v.toString === "function") {
              return hashString(v.toString());
            }
            throw new Error("Value type " + typeof v + " cannot be hashed.");
        }
      }
      function hashNullish(nullish) {
        return nullish === null ? 1108378658 : (
          /* undefined */
          1108378659
        );
      }
      function hashNumber(n) {
        if (n !== n || n === Infinity) {
          return 0;
        }
        var hash2 = n | 0;
        if (hash2 !== n) {
          hash2 ^= n * 4294967295;
        }
        while (n > 4294967295) {
          n /= 4294967295;
          hash2 ^= n;
        }
        return smi(hash2);
      }
      function cachedHashString(string) {
        var hashed = stringHashCache[string];
        if (hashed === void 0) {
          hashed = hashString(string);
          if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
            STRING_HASH_CACHE_SIZE = 0;
            stringHashCache = {};
          }
          STRING_HASH_CACHE_SIZE++;
          stringHashCache[string] = hashed;
        }
        return hashed;
      }
      function hashString(string) {
        var hashed = 0;
        for (var ii = 0; ii < string.length; ii++) {
          hashed = 31 * hashed + string.charCodeAt(ii) | 0;
        }
        return smi(hashed);
      }
      function hashSymbol(sym) {
        var hashed = symbolMap[sym];
        if (hashed !== void 0) {
          return hashed;
        }
        hashed = nextHash();
        symbolMap[sym] = hashed;
        return hashed;
      }
      function hashJSObj(obj) {
        var hashed;
        if (usingWeakMap) {
          hashed = weakMap.get(obj);
          if (hashed !== void 0) {
            return hashed;
          }
        }
        hashed = obj[UID_HASH_KEY];
        if (hashed !== void 0) {
          return hashed;
        }
        if (!canDefineProperty) {
          hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
          if (hashed !== void 0) {
            return hashed;
          }
          hashed = getIENodeHash(obj);
          if (hashed !== void 0) {
            return hashed;
          }
        }
        hashed = nextHash();
        if (usingWeakMap) {
          weakMap.set(obj, hashed);
        } else if (isExtensible !== void 0 && isExtensible(obj) === false) {
          throw new Error("Non-extensible objects are not allowed as keys.");
        } else if (canDefineProperty) {
          Object.defineProperty(obj, UID_HASH_KEY, {
            enumerable: false,
            configurable: false,
            writable: false,
            value: hashed
          });
        } else if (obj.propertyIsEnumerable !== void 0 && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
          obj.propertyIsEnumerable = function() {
            return this.constructor.prototype.propertyIsEnumerable.apply(
              this,
              arguments
            );
          };
          obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;
        } else if (obj.nodeType !== void 0) {
          obj[UID_HASH_KEY] = hashed;
        } else {
          throw new Error("Unable to set a non-enumerable property on object.");
        }
        return hashed;
      }
      var isExtensible = Object.isExtensible;
      var canDefineProperty = function() {
        try {
          Object.defineProperty({}, "@", {});
          return true;
        } catch (e) {
          return false;
        }
      }();
      function getIENodeHash(node) {
        if (node && node.nodeType > 0) {
          switch (node.nodeType) {
            case 1:
              return node.uniqueID;
            case 9:
              return node.documentElement && node.documentElement.uniqueID;
          }
        }
      }
      function valueOf(obj) {
        return obj.valueOf !== defaultValueOf && typeof obj.valueOf === "function" ? obj.valueOf(obj) : obj;
      }
      function nextHash() {
        var nextHash2 = ++_objHashUID;
        if (_objHashUID & 1073741824) {
          _objHashUID = 0;
        }
        return nextHash2;
      }
      var usingWeakMap = typeof WeakMap === "function";
      var weakMap;
      if (usingWeakMap) {
        weakMap = /* @__PURE__ */ new WeakMap();
      }
      var symbolMap = /* @__PURE__ */ Object.create(null);
      var _objHashUID = 0;
      var UID_HASH_KEY = "__immutablehash__";
      if (typeof Symbol === "function") {
        UID_HASH_KEY = Symbol(UID_HASH_KEY);
      }
      var STRING_HASH_CACHE_MIN_STRLEN = 16;
      var STRING_HASH_CACHE_MAX_SIZE = 255;
      var STRING_HASH_CACHE_SIZE = 0;
      var stringHashCache = {};
      var ToKeyedSequence = /* @__PURE__ */ function(KeyedSeq2) {
        function ToKeyedSequence2(indexed, useKeys) {
          this._iter = indexed;
          this._useKeys = useKeys;
          this.size = indexed.size;
        }
        if (KeyedSeq2)
          ToKeyedSequence2.__proto__ = KeyedSeq2;
        ToKeyedSequence2.prototype = Object.create(KeyedSeq2 && KeyedSeq2.prototype);
        ToKeyedSequence2.prototype.constructor = ToKeyedSequence2;
        ToKeyedSequence2.prototype.get = function get2(key, notSetValue) {
          return this._iter.get(key, notSetValue);
        };
        ToKeyedSequence2.prototype.has = function has2(key) {
          return this._iter.has(key);
        };
        ToKeyedSequence2.prototype.valueSeq = function valueSeq() {
          return this._iter.valueSeq();
        };
        ToKeyedSequence2.prototype.reverse = function reverse() {
          var this$1$1 = this;
          var reversedSequence = reverseFactory(this, true);
          if (!this._useKeys) {
            reversedSequence.valueSeq = function() {
              return this$1$1._iter.toSeq().reverse();
            };
          }
          return reversedSequence;
        };
        ToKeyedSequence2.prototype.map = function map(mapper, context) {
          var this$1$1 = this;
          var mappedSequence = mapFactory(this, mapper, context);
          if (!this._useKeys) {
            mappedSequence.valueSeq = function() {
              return this$1$1._iter.toSeq().map(mapper, context);
            };
          }
          return mappedSequence;
        };
        ToKeyedSequence2.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1$1 = this;
          return this._iter.__iterate(function(v, k) {
            return fn(v, k, this$1$1);
          }, reverse);
        };
        ToKeyedSequence2.prototype.__iterator = function __iterator(type, reverse) {
          return this._iter.__iterator(type, reverse);
        };
        return ToKeyedSequence2;
      }(KeyedSeq);
      ToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;
      var ToIndexedSequence = /* @__PURE__ */ function(IndexedSeq2) {
        function ToIndexedSequence2(iter) {
          this._iter = iter;
          this.size = iter.size;
        }
        if (IndexedSeq2)
          ToIndexedSequence2.__proto__ = IndexedSeq2;
        ToIndexedSequence2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
        ToIndexedSequence2.prototype.constructor = ToIndexedSequence2;
        ToIndexedSequence2.prototype.includes = function includes(value) {
          return this._iter.includes(value);
        };
        ToIndexedSequence2.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1$1 = this;
          var i2 = 0;
          reverse && ensureSize(this);
          return this._iter.__iterate(
            function(v) {
              return fn(v, reverse ? this$1$1.size - ++i2 : i2++, this$1$1);
            },
            reverse
          );
        };
        ToIndexedSequence2.prototype.__iterator = function __iterator(type, reverse) {
          var this$1$1 = this;
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var i2 = 0;
          reverse && ensureSize(this);
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(
              type,
              reverse ? this$1$1.size - ++i2 : i2++,
              step.value,
              step
            );
          });
        };
        return ToIndexedSequence2;
      }(IndexedSeq);
      var ToSetSequence = /* @__PURE__ */ function(SetSeq2) {
        function ToSetSequence2(iter) {
          this._iter = iter;
          this.size = iter.size;
        }
        if (SetSeq2)
          ToSetSequence2.__proto__ = SetSeq2;
        ToSetSequence2.prototype = Object.create(SetSeq2 && SetSeq2.prototype);
        ToSetSequence2.prototype.constructor = ToSetSequence2;
        ToSetSequence2.prototype.has = function has2(key) {
          return this._iter.includes(key);
        };
        ToSetSequence2.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1$1 = this;
          return this._iter.__iterate(function(v) {
            return fn(v, v, this$1$1);
          }, reverse);
        };
        ToSetSequence2.prototype.__iterator = function __iterator(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, step.value, step.value, step);
          });
        };
        return ToSetSequence2;
      }(SetSeq);
      var FromEntriesSequence = /* @__PURE__ */ function(KeyedSeq2) {
        function FromEntriesSequence2(entries) {
          this._iter = entries;
          this.size = entries.size;
        }
        if (KeyedSeq2)
          FromEntriesSequence2.__proto__ = KeyedSeq2;
        FromEntriesSequence2.prototype = Object.create(KeyedSeq2 && KeyedSeq2.prototype);
        FromEntriesSequence2.prototype.constructor = FromEntriesSequence2;
        FromEntriesSequence2.prototype.entrySeq = function entrySeq() {
          return this._iter.toSeq();
        };
        FromEntriesSequence2.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1$1 = this;
          return this._iter.__iterate(function(entry) {
            if (entry) {
              validateEntry(entry);
              var indexedCollection = isCollection(entry);
              return fn(
                indexedCollection ? entry.get(1) : entry[1],
                indexedCollection ? entry.get(0) : entry[0],
                this$1$1
              );
            }
          }, reverse);
        };
        FromEntriesSequence2.prototype.__iterator = function __iterator(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function() {
            while (true) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              if (entry) {
                validateEntry(entry);
                var indexedCollection = isCollection(entry);
                return iteratorValue(
                  type,
                  indexedCollection ? entry.get(0) : entry[0],
                  indexedCollection ? entry.get(1) : entry[1],
                  step
                );
              }
            }
          });
        };
        return FromEntriesSequence2;
      }(KeyedSeq);
      ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;
      function flipFactory(collection) {
        var flipSequence = makeSequence(collection);
        flipSequence._iter = collection;
        flipSequence.size = collection.size;
        flipSequence.flip = function() {
          return collection;
        };
        flipSequence.reverse = function() {
          var reversedSequence = collection.reverse.apply(this);
          reversedSequence.flip = function() {
            return collection.reverse();
          };
          return reversedSequence;
        };
        flipSequence.has = function(key) {
          return collection.includes(key);
        };
        flipSequence.includes = function(key) {
          return collection.has(key);
        };
        flipSequence.cacheResult = cacheResultThrough;
        flipSequence.__iterateUncached = function(fn, reverse) {
          var this$1$1 = this;
          return collection.__iterate(function(v, k) {
            return fn(k, v, this$1$1) !== false;
          }, reverse);
        };
        flipSequence.__iteratorUncached = function(type, reverse) {
          if (type === ITERATE_ENTRIES) {
            var iterator = collection.__iterator(type, reverse);
            return new Iterator(function() {
              var step = iterator.next();
              if (!step.done) {
                var k = step.value[0];
                step.value[0] = step.value[1];
                step.value[1] = k;
              }
              return step;
            });
          }
          return collection.__iterator(
            type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
            reverse
          );
        };
        return flipSequence;
      }
      function mapFactory(collection, mapper, context) {
        var mappedSequence = makeSequence(collection);
        mappedSequence.size = collection.size;
        mappedSequence.has = function(key) {
          return collection.has(key);
        };
        mappedSequence.get = function(key, notSetValue) {
          var v = collection.get(key, NOT_SET);
          return v === NOT_SET ? notSetValue : mapper.call(context, v, key, collection);
        };
        mappedSequence.__iterateUncached = function(fn, reverse) {
          var this$1$1 = this;
          return collection.__iterate(
            function(v, k, c) {
              return fn(mapper.call(context, v, k, c), k, this$1$1) !== false;
            },
            reverse
          );
        };
        mappedSequence.__iteratorUncached = function(type, reverse) {
          var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
          return new Iterator(function() {
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            var key = entry[0];
            return iteratorValue(
              type,
              key,
              mapper.call(context, entry[1], key, collection),
              step
            );
          });
        };
        return mappedSequence;
      }
      function reverseFactory(collection, useKeys) {
        var this$1$1 = this;
        var reversedSequence = makeSequence(collection);
        reversedSequence._iter = collection;
        reversedSequence.size = collection.size;
        reversedSequence.reverse = function() {
          return collection;
        };
        if (collection.flip) {
          reversedSequence.flip = function() {
            var flipSequence = flipFactory(collection);
            flipSequence.reverse = function() {
              return collection.flip();
            };
            return flipSequence;
          };
        }
        reversedSequence.get = function(key, notSetValue) {
          return collection.get(useKeys ? key : -1 - key, notSetValue);
        };
        reversedSequence.has = function(key) {
          return collection.has(useKeys ? key : -1 - key);
        };
        reversedSequence.includes = function(value) {
          return collection.includes(value);
        };
        reversedSequence.cacheResult = cacheResultThrough;
        reversedSequence.__iterate = function(fn, reverse) {
          var this$1$12 = this;
          var i2 = 0;
          reverse && ensureSize(collection);
          return collection.__iterate(
            function(v, k) {
              return fn(v, useKeys ? k : reverse ? this$1$12.size - ++i2 : i2++, this$1$12);
            },
            !reverse
          );
        };
        reversedSequence.__iterator = function(type, reverse) {
          var i2 = 0;
          reverse && ensureSize(collection);
          var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);
          return new Iterator(function() {
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            return iteratorValue(
              type,
              useKeys ? entry[0] : reverse ? this$1$1.size - ++i2 : i2++,
              entry[1],
              step
            );
          });
        };
        return reversedSequence;
      }
      function filterFactory(collection, predicate, context, useKeys) {
        var filterSequence = makeSequence(collection);
        if (useKeys) {
          filterSequence.has = function(key) {
            var v = collection.get(key, NOT_SET);
            return v !== NOT_SET && !!predicate.call(context, v, key, collection);
          };
          filterSequence.get = function(key, notSetValue) {
            var v = collection.get(key, NOT_SET);
            return v !== NOT_SET && predicate.call(context, v, key, collection) ? v : notSetValue;
          };
        }
        filterSequence.__iterateUncached = function(fn, reverse) {
          var this$1$1 = this;
          var iterations = 0;
          collection.__iterate(function(v, k, c) {
            if (predicate.call(context, v, k, c)) {
              iterations++;
              return fn(v, useKeys ? k : iterations - 1, this$1$1);
            }
          }, reverse);
          return iterations;
        };
        filterSequence.__iteratorUncached = function(type, reverse) {
          var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
          var iterations = 0;
          return new Iterator(function() {
            while (true) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              var key = entry[0];
              var value = entry[1];
              if (predicate.call(context, value, key, collection)) {
                return iteratorValue(type, useKeys ? key : iterations++, value, step);
              }
            }
          });
        };
        return filterSequence;
      }
      function countByFactory(collection, grouper, context) {
        var groups = Map2().asMutable();
        collection.__iterate(function(v, k) {
          groups.update(grouper.call(context, v, k, collection), 0, function(a) {
            return a + 1;
          });
        });
        return groups.asImmutable();
      }
      function groupByFactory(collection, grouper, context) {
        var isKeyedIter = isKeyed(collection);
        var groups = (isOrdered(collection) ? OrderedMap() : Map2()).asMutable();
        collection.__iterate(function(v, k) {
          groups.update(
            grouper.call(context, v, k, collection),
            function(a) {
              return a = a || [], a.push(isKeyedIter ? [k, v] : v), a;
            }
          );
        });
        var coerce = collectionClass(collection);
        return groups.map(function(arr) {
          return reify(collection, coerce(arr));
        }).asImmutable();
      }
      function partitionFactory(collection, predicate, context) {
        var isKeyedIter = isKeyed(collection);
        var groups = [[], []];
        collection.__iterate(function(v, k) {
          groups[predicate.call(context, v, k, collection) ? 1 : 0].push(
            isKeyedIter ? [k, v] : v
          );
        });
        var coerce = collectionClass(collection);
        return groups.map(function(arr) {
          return reify(collection, coerce(arr));
        });
      }
      function sliceFactory(collection, begin, end, useKeys) {
        var originalSize = collection.size;
        if (wholeSlice(begin, end, originalSize)) {
          return collection;
        }
        var resolvedBegin = resolveBegin(begin, originalSize);
        var resolvedEnd = resolveEnd(end, originalSize);
        if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
          return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);
        }
        var resolvedSize = resolvedEnd - resolvedBegin;
        var sliceSize;
        if (resolvedSize === resolvedSize) {
          sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
        }
        var sliceSeq = makeSequence(collection);
        sliceSeq.size = sliceSize === 0 ? sliceSize : collection.size && sliceSize || void 0;
        if (!useKeys && isSeq(collection) && sliceSize >= 0) {
          sliceSeq.get = function(index, notSetValue) {
            index = wrapIndex(this, index);
            return index >= 0 && index < sliceSize ? collection.get(index + resolvedBegin, notSetValue) : notSetValue;
          };
        }
        sliceSeq.__iterateUncached = function(fn, reverse) {
          var this$1$1 = this;
          if (sliceSize === 0) {
            return 0;
          }
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var skipped = 0;
          var isSkipping = true;
          var iterations = 0;
          collection.__iterate(function(v, k) {
            if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
              iterations++;
              return fn(v, useKeys ? k : iterations - 1, this$1$1) !== false && iterations !== sliceSize;
            }
          });
          return iterations;
        };
        sliceSeq.__iteratorUncached = function(type, reverse) {
          if (sliceSize !== 0 && reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          if (sliceSize === 0) {
            return new Iterator(iteratorDone);
          }
          var iterator = collection.__iterator(type, reverse);
          var skipped = 0;
          var iterations = 0;
          return new Iterator(function() {
            while (skipped++ < resolvedBegin) {
              iterator.next();
            }
            if (++iterations > sliceSize) {
              return iteratorDone();
            }
            var step = iterator.next();
            if (useKeys || type === ITERATE_VALUES || step.done) {
              return step;
            }
            if (type === ITERATE_KEYS) {
              return iteratorValue(type, iterations - 1, void 0, step);
            }
            return iteratorValue(type, iterations - 1, step.value[1], step);
          });
        };
        return sliceSeq;
      }
      function takeWhileFactory(collection, predicate, context) {
        var takeSequence = makeSequence(collection);
        takeSequence.__iterateUncached = function(fn, reverse) {
          var this$1$1 = this;
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterations = 0;
          collection.__iterate(
            function(v, k, c) {
              return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1$1);
            }
          );
          return iterations;
        };
        takeSequence.__iteratorUncached = function(type, reverse) {
          var this$1$1 = this;
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
          var iterating = true;
          return new Iterator(function() {
            if (!iterating) {
              return iteratorDone();
            }
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            var k = entry[0];
            var v = entry[1];
            if (!predicate.call(context, v, k, this$1$1)) {
              iterating = false;
              return iteratorDone();
            }
            return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
          });
        };
        return takeSequence;
      }
      function skipWhileFactory(collection, predicate, context, useKeys) {
        var skipSequence = makeSequence(collection);
        skipSequence.__iterateUncached = function(fn, reverse) {
          var this$1$1 = this;
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var isSkipping = true;
          var iterations = 0;
          collection.__iterate(function(v, k, c) {
            if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
              iterations++;
              return fn(v, useKeys ? k : iterations - 1, this$1$1);
            }
          });
          return iterations;
        };
        skipSequence.__iteratorUncached = function(type, reverse) {
          var this$1$1 = this;
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
          var skipping = true;
          var iterations = 0;
          return new Iterator(function() {
            var step;
            var k;
            var v;
            do {
              step = iterator.next();
              if (step.done) {
                if (useKeys || type === ITERATE_VALUES) {
                  return step;
                }
                if (type === ITERATE_KEYS) {
                  return iteratorValue(type, iterations++, void 0, step);
                }
                return iteratorValue(type, iterations++, step.value[1], step);
              }
              var entry = step.value;
              k = entry[0];
              v = entry[1];
              skipping && (skipping = predicate.call(context, v, k, this$1$1));
            } while (skipping);
            return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
          });
        };
        return skipSequence;
      }
      function concatFactory(collection, values) {
        var isKeyedCollection = isKeyed(collection);
        var iters = [collection].concat(values).map(function(v) {
          if (!isCollection(v)) {
            v = isKeyedCollection ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
          } else if (isKeyedCollection) {
            v = KeyedCollection(v);
          }
          return v;
        }).filter(function(v) {
          return v.size !== 0;
        });
        if (iters.length === 0) {
          return collection;
        }
        if (iters.length === 1) {
          var singleton = iters[0];
          if (singleton === collection || isKeyedCollection && isKeyed(singleton) || isIndexed(collection) && isIndexed(singleton)) {
            return singleton;
          }
        }
        var concatSeq = new ArraySeq(iters);
        if (isKeyedCollection) {
          concatSeq = concatSeq.toKeyedSeq();
        } else if (!isIndexed(collection)) {
          concatSeq = concatSeq.toSetSeq();
        }
        concatSeq = concatSeq.flatten(true);
        concatSeq.size = iters.reduce(function(sum, seq) {
          if (sum !== void 0) {
            var size = seq.size;
            if (size !== void 0) {
              return sum + size;
            }
          }
        }, 0);
        return concatSeq;
      }
      function flattenFactory(collection, depth, useKeys) {
        var flatSequence = makeSequence(collection);
        flatSequence.__iterateUncached = function(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterations = 0;
          var stopped = false;
          function flatDeep(iter, currentDepth) {
            iter.__iterate(function(v, k) {
              if ((!depth || currentDepth < depth) && isCollection(v)) {
                flatDeep(v, currentDepth + 1);
              } else {
                iterations++;
                if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {
                  stopped = true;
                }
              }
              return !stopped;
            }, reverse);
          }
          flatDeep(collection, 0);
          return iterations;
        };
        flatSequence.__iteratorUncached = function(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = collection.__iterator(type, reverse);
          var stack = [];
          var iterations = 0;
          return new Iterator(function() {
            while (iterator) {
              var step = iterator.next();
              if (step.done !== false) {
                iterator = stack.pop();
                continue;
              }
              var v = step.value;
              if (type === ITERATE_ENTRIES) {
                v = v[1];
              }
              if ((!depth || stack.length < depth) && isCollection(v)) {
                stack.push(iterator);
                iterator = v.__iterator(type, reverse);
              } else {
                return useKeys ? step : iteratorValue(type, iterations++, v, step);
              }
            }
            return iteratorDone();
          });
        };
        return flatSequence;
      }
      function flatMapFactory(collection, mapper, context) {
        var coerce = collectionClass(collection);
        return collection.toSeq().map(function(v, k) {
          return coerce(mapper.call(context, v, k, collection));
        }).flatten(true);
      }
      function interposeFactory(collection, separator) {
        var interposedSequence = makeSequence(collection);
        interposedSequence.size = collection.size && collection.size * 2 - 1;
        interposedSequence.__iterateUncached = function(fn, reverse) {
          var this$1$1 = this;
          var iterations = 0;
          collection.__iterate(
            function(v) {
              return (!iterations || fn(separator, iterations++, this$1$1) !== false) && fn(v, iterations++, this$1$1) !== false;
            },
            reverse
          );
          return iterations;
        };
        interposedSequence.__iteratorUncached = function(type, reverse) {
          var iterator = collection.__iterator(ITERATE_VALUES, reverse);
          var iterations = 0;
          var step;
          return new Iterator(function() {
            if (!step || iterations % 2) {
              step = iterator.next();
              if (step.done) {
                return step;
              }
            }
            return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);
          });
        };
        return interposedSequence;
      }
      function sortFactory(collection, comparator, mapper) {
        if (!comparator) {
          comparator = defaultComparator;
        }
        var isKeyedCollection = isKeyed(collection);
        var index = 0;
        var entries = collection.toSeq().map(function(v, k) {
          return [k, v, index++, mapper ? mapper(v, k, collection) : v];
        }).valueSeq().toArray();
        entries.sort(function(a, b) {
          return comparator(a[3], b[3]) || a[2] - b[2];
        }).forEach(
          isKeyedCollection ? function(v, i2) {
            entries[i2].length = 2;
          } : function(v, i2) {
            entries[i2] = v[1];
          }
        );
        return isKeyedCollection ? KeyedSeq(entries) : isIndexed(collection) ? IndexedSeq(entries) : SetSeq(entries);
      }
      function maxFactory(collection, comparator, mapper) {
        if (!comparator) {
          comparator = defaultComparator;
        }
        if (mapper) {
          var entry = collection.toSeq().map(function(v, k) {
            return [v, mapper(v, k, collection)];
          }).reduce(function(a, b) {
            return maxCompare(comparator, a[1], b[1]) ? b : a;
          });
          return entry && entry[0];
        }
        return collection.reduce(function(a, b) {
          return maxCompare(comparator, a, b) ? b : a;
        });
      }
      function maxCompare(comparator, a, b) {
        var comp = comparator(b, a);
        return comp === 0 && b !== a && (b === void 0 || b === null || b !== b) || comp > 0;
      }
      function zipWithFactory(keyIter, zipper, iters, zipAll) {
        var zipSequence = makeSequence(keyIter);
        var sizes = new ArraySeq(iters).map(function(i2) {
          return i2.size;
        });
        zipSequence.size = zipAll ? sizes.max() : sizes.min();
        zipSequence.__iterate = function(fn, reverse) {
          var iterator = this.__iterator(ITERATE_VALUES, reverse);
          var step;
          var iterations = 0;
          while (!(step = iterator.next()).done) {
            if (fn(step.value, iterations++, this) === false) {
              break;
            }
          }
          return iterations;
        };
        zipSequence.__iteratorUncached = function(type, reverse) {
          var iterators = iters.map(
            function(i2) {
              return i2 = Collection(i2), getIterator(reverse ? i2.reverse() : i2);
            }
          );
          var iterations = 0;
          var isDone = false;
          return new Iterator(function() {
            var steps;
            if (!isDone) {
              steps = iterators.map(function(i2) {
                return i2.next();
              });
              isDone = zipAll ? steps.every(function(s) {
                return s.done;
              }) : steps.some(function(s) {
                return s.done;
              });
            }
            if (isDone) {
              return iteratorDone();
            }
            return iteratorValue(
              type,
              iterations++,
              zipper.apply(
                null,
                steps.map(function(s) {
                  return s.value;
                })
              )
            );
          });
        };
        return zipSequence;
      }
      function reify(iter, seq) {
        return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);
      }
      function validateEntry(entry) {
        if (entry !== Object(entry)) {
          throw new TypeError("Expected [K, V] tuple: " + entry);
        }
      }
      function collectionClass(collection) {
        return isKeyed(collection) ? KeyedCollection : isIndexed(collection) ? IndexedCollection : SetCollection;
      }
      function makeSequence(collection) {
        return Object.create(
          (isKeyed(collection) ? KeyedSeq : isIndexed(collection) ? IndexedSeq : SetSeq).prototype
        );
      }
      function cacheResultThrough() {
        if (this._iter.cacheResult) {
          this._iter.cacheResult();
          this.size = this._iter.size;
          return this;
        }
        return Seq.prototype.cacheResult.call(this);
      }
      function defaultComparator(a, b) {
        if (a === void 0 && b === void 0) {
          return 0;
        }
        if (a === void 0) {
          return 1;
        }
        if (b === void 0) {
          return -1;
        }
        return a > b ? 1 : a < b ? -1 : 0;
      }
      function arrCopy(arr, offset) {
        offset = offset || 0;
        var len = Math.max(0, arr.length - offset);
        var newArr = new Array(len);
        for (var ii = 0; ii < len; ii++) {
          newArr[ii] = arr[ii + offset];
        }
        return newArr;
      }
      function invariant(condition, error2) {
        if (!condition) {
          throw new Error(error2);
        }
      }
      function assertNotInfinite(size) {
        invariant(
          size !== Infinity,
          "Cannot perform this action with an infinite size."
        );
      }
      function coerceKeyPath(keyPath) {
        if (isArrayLike(keyPath) && typeof keyPath !== "string") {
          return keyPath;
        }
        if (isOrdered(keyPath)) {
          return keyPath.toArray();
        }
        throw new TypeError(
          "Invalid keyPath: expected Ordered Collection or Array: " + keyPath
        );
      }
      var toString = Object.prototype.toString;
      function isPlainObject(value) {
        if (!value || typeof value !== "object" || toString.call(value) !== "[object Object]") {
          return false;
        }
        var proto = Object.getPrototypeOf(value);
        if (proto === null) {
          return true;
        }
        var parentProto = proto;
        var nextProto = Object.getPrototypeOf(proto);
        while (nextProto !== null) {
          parentProto = nextProto;
          nextProto = Object.getPrototypeOf(parentProto);
        }
        return parentProto === proto;
      }
      function isDataStructure(value) {
        return typeof value === "object" && (isImmutable(value) || Array.isArray(value) || isPlainObject(value));
      }
      function quoteString(value) {
        try {
          return typeof value === "string" ? JSON.stringify(value) : String(value);
        } catch (_ignoreError) {
          return JSON.stringify(value);
        }
      }
      function has(collection, key) {
        return isImmutable(collection) ? collection.has(key) : isDataStructure(collection) && hasOwnProperty.call(collection, key);
      }
      function get(collection, key, notSetValue) {
        return isImmutable(collection) ? collection.get(key, notSetValue) : !has(collection, key) ? notSetValue : typeof collection.get === "function" ? collection.get(key) : collection[key];
      }
      function shallowCopy(from) {
        if (Array.isArray(from)) {
          return arrCopy(from);
        }
        var to = {};
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        return to;
      }
      function remove(collection, key) {
        if (!isDataStructure(collection)) {
          throw new TypeError(
            "Cannot update non-data-structure value: " + collection
          );
        }
        if (isImmutable(collection)) {
          if (!collection.remove) {
            throw new TypeError(
              "Cannot update immutable value without .remove() method: " + collection
            );
          }
          return collection.remove(key);
        }
        if (!hasOwnProperty.call(collection, key)) {
          return collection;
        }
        var collectionCopy = shallowCopy(collection);
        if (Array.isArray(collectionCopy)) {
          collectionCopy.splice(key, 1);
        } else {
          delete collectionCopy[key];
        }
        return collectionCopy;
      }
      function set(collection, key, value) {
        if (!isDataStructure(collection)) {
          throw new TypeError(
            "Cannot update non-data-structure value: " + collection
          );
        }
        if (isImmutable(collection)) {
          if (!collection.set) {
            throw new TypeError(
              "Cannot update immutable value without .set() method: " + collection
            );
          }
          return collection.set(key, value);
        }
        if (hasOwnProperty.call(collection, key) && value === collection[key]) {
          return collection;
        }
        var collectionCopy = shallowCopy(collection);
        collectionCopy[key] = value;
        return collectionCopy;
      }
      function updateIn$1(collection, keyPath, notSetValue, updater) {
        if (!updater) {
          updater = notSetValue;
          notSetValue = void 0;
        }
        var updatedValue = updateInDeeply(
          isImmutable(collection),
          collection,
          coerceKeyPath(keyPath),
          0,
          notSetValue,
          updater
        );
        return updatedValue === NOT_SET ? notSetValue : updatedValue;
      }
      function updateInDeeply(inImmutable, existing, keyPath, i2, notSetValue, updater) {
        var wasNotSet = existing === NOT_SET;
        if (i2 === keyPath.length) {
          var existingValue = wasNotSet ? notSetValue : existing;
          var newValue = updater(existingValue);
          return newValue === existingValue ? existing : newValue;
        }
        if (!wasNotSet && !isDataStructure(existing)) {
          throw new TypeError(
            "Cannot update within non-data-structure value in path [" + keyPath.slice(0, i2).map(quoteString) + "]: " + existing
          );
        }
        var key = keyPath[i2];
        var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);
        var nextUpdated = updateInDeeply(
          nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),
          nextExisting,
          keyPath,
          i2 + 1,
          notSetValue,
          updater
        );
        return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? remove(existing, key) : set(
          wasNotSet ? inImmutable ? emptyMap() : {} : existing,
          key,
          nextUpdated
        );
      }
      function setIn$1(collection, keyPath, value) {
        return updateIn$1(collection, keyPath, NOT_SET, function() {
          return value;
        });
      }
      function setIn(keyPath, v) {
        return setIn$1(this, keyPath, v);
      }
      function removeIn(collection, keyPath) {
        return updateIn$1(collection, keyPath, function() {
          return NOT_SET;
        });
      }
      function deleteIn(keyPath) {
        return removeIn(this, keyPath);
      }
      function update$1(collection, key, notSetValue, updater) {
        return updateIn$1(collection, [key], notSetValue, updater);
      }
      function update(key, notSetValue, updater) {
        return arguments.length === 1 ? key(this) : update$1(this, key, notSetValue, updater);
      }
      function updateIn(keyPath, notSetValue, updater) {
        return updateIn$1(this, keyPath, notSetValue, updater);
      }
      function merge$1() {
        var iters = [], len = arguments.length;
        while (len--)
          iters[len] = arguments[len];
        return mergeIntoKeyedWith(this, iters);
      }
      function mergeWith$1(merger) {
        var iters = [], len = arguments.length - 1;
        while (len-- > 0)
          iters[len] = arguments[len + 1];
        if (typeof merger !== "function") {
          throw new TypeError("Invalid merger function: " + merger);
        }
        return mergeIntoKeyedWith(this, iters, merger);
      }
      function mergeIntoKeyedWith(collection, collections, merger) {
        var iters = [];
        for (var ii = 0; ii < collections.length; ii++) {
          var collection$1 = KeyedCollection(collections[ii]);
          if (collection$1.size !== 0) {
            iters.push(collection$1);
          }
        }
        if (iters.length === 0) {
          return collection;
        }
        if (collection.toSeq().size === 0 && !collection.__ownerID && iters.length === 1) {
          return collection.constructor(iters[0]);
        }
        return collection.withMutations(function(collection2) {
          var mergeIntoCollection = merger ? function(value, key) {
            update$1(
              collection2,
              key,
              NOT_SET,
              function(oldVal) {
                return oldVal === NOT_SET ? value : merger(oldVal, value, key);
              }
            );
          } : function(value, key) {
            collection2.set(key, value);
          };
          for (var ii2 = 0; ii2 < iters.length; ii2++) {
            iters[ii2].forEach(mergeIntoCollection);
          }
        });
      }
      function merge(collection) {
        var sources = [], len = arguments.length - 1;
        while (len-- > 0)
          sources[len] = arguments[len + 1];
        return mergeWithSources(collection, sources);
      }
      function mergeWith(merger, collection) {
        var sources = [], len = arguments.length - 2;
        while (len-- > 0)
          sources[len] = arguments[len + 2];
        return mergeWithSources(collection, sources, merger);
      }
      function mergeDeep$1(collection) {
        var sources = [], len = arguments.length - 1;
        while (len-- > 0)
          sources[len] = arguments[len + 1];
        return mergeDeepWithSources(collection, sources);
      }
      function mergeDeepWith$1(merger, collection) {
        var sources = [], len = arguments.length - 2;
        while (len-- > 0)
          sources[len] = arguments[len + 2];
        return mergeDeepWithSources(collection, sources, merger);
      }
      function mergeDeepWithSources(collection, sources, merger) {
        return mergeWithSources(collection, sources, deepMergerWith(merger));
      }
      function mergeWithSources(collection, sources, merger) {
        if (!isDataStructure(collection)) {
          throw new TypeError(
            "Cannot merge into non-data-structure value: " + collection
          );
        }
        if (isImmutable(collection)) {
          return typeof merger === "function" && collection.mergeWith ? collection.mergeWith.apply(collection, [merger].concat(sources)) : collection.merge ? collection.merge.apply(collection, sources) : collection.concat.apply(collection, sources);
        }
        var isArray = Array.isArray(collection);
        var merged = collection;
        var Collection2 = isArray ? IndexedCollection : KeyedCollection;
        var mergeItem = isArray ? function(value) {
          if (merged === collection) {
            merged = shallowCopy(merged);
          }
          merged.push(value);
        } : function(value, key) {
          var hasVal = hasOwnProperty.call(merged, key);
          var nextVal = hasVal && merger ? merger(merged[key], value, key) : value;
          if (!hasVal || nextVal !== merged[key]) {
            if (merged === collection) {
              merged = shallowCopy(merged);
            }
            merged[key] = nextVal;
          }
        };
        for (var i2 = 0; i2 < sources.length; i2++) {
          Collection2(sources[i2]).forEach(mergeItem);
        }
        return merged;
      }
      function deepMergerWith(merger) {
        function deepMerger(oldValue, newValue, key) {
          return isDataStructure(oldValue) && isDataStructure(newValue) && areMergeable(oldValue, newValue) ? mergeWithSources(oldValue, [newValue], deepMerger) : merger ? merger(oldValue, newValue, key) : newValue;
        }
        return deepMerger;
      }
      function areMergeable(oldDataStructure, newDataStructure) {
        var oldSeq = Seq(oldDataStructure);
        var newSeq = Seq(newDataStructure);
        return isIndexed(oldSeq) === isIndexed(newSeq) && isKeyed(oldSeq) === isKeyed(newSeq);
      }
      function mergeDeep() {
        var iters = [], len = arguments.length;
        while (len--)
          iters[len] = arguments[len];
        return mergeDeepWithSources(this, iters);
      }
      function mergeDeepWith(merger) {
        var iters = [], len = arguments.length - 1;
        while (len-- > 0)
          iters[len] = arguments[len + 1];
        return mergeDeepWithSources(this, iters, merger);
      }
      function mergeIn(keyPath) {
        var iters = [], len = arguments.length - 1;
        while (len-- > 0)
          iters[len] = arguments[len + 1];
        return updateIn$1(this, keyPath, emptyMap(), function(m) {
          return mergeWithSources(m, iters);
        });
      }
      function mergeDeepIn(keyPath) {
        var iters = [], len = arguments.length - 1;
        while (len-- > 0)
          iters[len] = arguments[len + 1];
        return updateIn$1(
          this,
          keyPath,
          emptyMap(),
          function(m) {
            return mergeDeepWithSources(m, iters);
          }
        );
      }
      function withMutations(fn) {
        var mutable = this.asMutable();
        fn(mutable);
        return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
      }
      function asMutable() {
        return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
      }
      function asImmutable() {
        return this.__ensureOwner();
      }
      function wasAltered() {
        return this.__altered;
      }
      var Map2 = /* @__PURE__ */ function(KeyedCollection2) {
        function Map3(value) {
          return value === void 0 || value === null ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function(map) {
            var iter = KeyedCollection2(value);
            assertNotInfinite(iter.size);
            iter.forEach(function(v, k) {
              return map.set(k, v);
            });
          });
        }
        if (KeyedCollection2)
          Map3.__proto__ = KeyedCollection2;
        Map3.prototype = Object.create(KeyedCollection2 && KeyedCollection2.prototype);
        Map3.prototype.constructor = Map3;
        Map3.of = function of() {
          var keyValues = [], len = arguments.length;
          while (len--)
            keyValues[len] = arguments[len];
          return emptyMap().withMutations(function(map) {
            for (var i2 = 0; i2 < keyValues.length; i2 += 2) {
              if (i2 + 1 >= keyValues.length) {
                throw new Error("Missing value for key: " + keyValues[i2]);
              }
              map.set(keyValues[i2], keyValues[i2 + 1]);
            }
          });
        };
        Map3.prototype.toString = function toString2() {
          return this.__toString("Map {", "}");
        };
        Map3.prototype.get = function get2(k, notSetValue) {
          return this._root ? this._root.get(0, void 0, k, notSetValue) : notSetValue;
        };
        Map3.prototype.set = function set2(k, v) {
          return updateMap(this, k, v);
        };
        Map3.prototype.remove = function remove2(k) {
          return updateMap(this, k, NOT_SET);
        };
        Map3.prototype.deleteAll = function deleteAll(keys) {
          var collection = Collection(keys);
          if (collection.size === 0) {
            return this;
          }
          return this.withMutations(function(map) {
            collection.forEach(function(key) {
              return map.remove(key);
            });
          });
        };
        Map3.prototype.clear = function clear() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._root = null;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyMap();
        };
        Map3.prototype.sort = function sort(comparator) {
          return OrderedMap(sortFactory(this, comparator));
        };
        Map3.prototype.sortBy = function sortBy(mapper, comparator) {
          return OrderedMap(sortFactory(this, comparator, mapper));
        };
        Map3.prototype.map = function map(mapper, context) {
          var this$1$1 = this;
          return this.withMutations(function(map2) {
            map2.forEach(function(value, key) {
              map2.set(key, mapper.call(context, value, key, this$1$1));
            });
          });
        };
        Map3.prototype.__iterator = function __iterator(type, reverse) {
          return new MapIterator(this, type, reverse);
        };
        Map3.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1$1 = this;
          var iterations = 0;
          this._root && this._root.iterate(function(entry) {
            iterations++;
            return fn(entry[1], entry[0], this$1$1);
          }, reverse);
          return iterations;
        };
        Map3.prototype.__ensureOwner = function __ensureOwner(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            if (this.size === 0) {
              return emptyMap();
            }
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeMap(this.size, this._root, ownerID, this.__hash);
        };
        return Map3;
      }(KeyedCollection);
      Map2.isMap = isMap;
      var MapPrototype = Map2.prototype;
      MapPrototype[IS_MAP_SYMBOL] = true;
      MapPrototype[DELETE] = MapPrototype.remove;
      MapPrototype.removeAll = MapPrototype.deleteAll;
      MapPrototype.setIn = setIn;
      MapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;
      MapPrototype.update = update;
      MapPrototype.updateIn = updateIn;
      MapPrototype.merge = MapPrototype.concat = merge$1;
      MapPrototype.mergeWith = mergeWith$1;
      MapPrototype.mergeDeep = mergeDeep;
      MapPrototype.mergeDeepWith = mergeDeepWith;
      MapPrototype.mergeIn = mergeIn;
      MapPrototype.mergeDeepIn = mergeDeepIn;
      MapPrototype.withMutations = withMutations;
      MapPrototype.wasAltered = wasAltered;
      MapPrototype.asImmutable = asImmutable;
      MapPrototype["@@transducer/init"] = MapPrototype.asMutable = asMutable;
      MapPrototype["@@transducer/step"] = function(result, arr) {
        return result.set(arr[0], arr[1]);
      };
      MapPrototype["@@transducer/result"] = function(obj) {
        return obj.asImmutable();
      };
      var ArrayMapNode = function ArrayMapNode2(ownerID, entries) {
        this.ownerID = ownerID;
        this.entries = entries;
      };
      ArrayMapNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
        var entries = this.entries;
        for (var ii = 0, len = entries.length; ii < len; ii++) {
          if (is(key, entries[ii][0])) {
            return entries[ii][1];
          }
        }
        return notSetValue;
      };
      ArrayMapNode.prototype.update = function update2(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        var removed = value === NOT_SET;
        var entries = this.entries;
        var idx = 0;
        var len = entries.length;
        for (; idx < len; idx++) {
          if (is(key, entries[idx][0])) {
            break;
          }
        }
        var exists = idx < len;
        if (exists ? entries[idx][1] === value : removed) {
          return this;
        }
        SetRef(didAlter);
        (removed || !exists) && SetRef(didChangeSize);
        if (removed && entries.length === 1) {
          return;
        }
        if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
          return createNodes(ownerID, entries, key, value);
        }
        var isEditable = ownerID && ownerID === this.ownerID;
        var newEntries = isEditable ? entries : arrCopy(entries);
        if (exists) {
          if (removed) {
            idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
          } else {
            newEntries[idx] = [key, value];
          }
        } else {
          newEntries.push([key, value]);
        }
        if (isEditable) {
          this.entries = newEntries;
          return this;
        }
        return new ArrayMapNode(ownerID, newEntries);
      };
      var BitmapIndexedNode = function BitmapIndexedNode2(ownerID, bitmap, nodes) {
        this.ownerID = ownerID;
        this.bitmap = bitmap;
        this.nodes = nodes;
      };
      BitmapIndexedNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
        if (keyHash === void 0) {
          keyHash = hash(key);
        }
        var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
        var bitmap = this.bitmap;
        return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(
          shift + SHIFT,
          keyHash,
          key,
          notSetValue
        );
      };
      BitmapIndexedNode.prototype.update = function update2(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        if (keyHash === void 0) {
          keyHash = hash(key);
        }
        var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
        var bit = 1 << keyHashFrag;
        var bitmap = this.bitmap;
        var exists = (bitmap & bit) !== 0;
        if (!exists && value === NOT_SET) {
          return this;
        }
        var idx = popCount(bitmap & bit - 1);
        var nodes = this.nodes;
        var node = exists ? nodes[idx] : void 0;
        var newNode = updateNode(
          node,
          ownerID,
          shift + SHIFT,
          keyHash,
          key,
          value,
          didChangeSize,
          didAlter
        );
        if (newNode === node) {
          return this;
        }
        if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
          return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
        }
        if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
          return nodes[idx ^ 1];
        }
        if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
          return newNode;
        }
        var isEditable = ownerID && ownerID === this.ownerID;
        var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
        var newNodes = exists ? newNode ? setAt(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);
        if (isEditable) {
          this.bitmap = newBitmap;
          this.nodes = newNodes;
          return this;
        }
        return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
      };
      var HashArrayMapNode = function HashArrayMapNode2(ownerID, count, nodes) {
        this.ownerID = ownerID;
        this.count = count;
        this.nodes = nodes;
      };
      HashArrayMapNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
        if (keyHash === void 0) {
          keyHash = hash(key);
        }
        var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
        var node = this.nodes[idx];
        return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
      };
      HashArrayMapNode.prototype.update = function update2(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        if (keyHash === void 0) {
          keyHash = hash(key);
        }
        var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
        var removed = value === NOT_SET;
        var nodes = this.nodes;
        var node = nodes[idx];
        if (removed && !node) {
          return this;
        }
        var newNode = updateNode(
          node,
          ownerID,
          shift + SHIFT,
          keyHash,
          key,
          value,
          didChangeSize,
          didAlter
        );
        if (newNode === node) {
          return this;
        }
        var newCount = this.count;
        if (!node) {
          newCount++;
        } else if (!newNode) {
          newCount--;
          if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
            return packNodes(ownerID, nodes, newCount, idx);
          }
        }
        var isEditable = ownerID && ownerID === this.ownerID;
        var newNodes = setAt(nodes, idx, newNode, isEditable);
        if (isEditable) {
          this.count = newCount;
          this.nodes = newNodes;
          return this;
        }
        return new HashArrayMapNode(ownerID, newCount, newNodes);
      };
      var HashCollisionNode = function HashCollisionNode2(ownerID, keyHash, entries) {
        this.ownerID = ownerID;
        this.keyHash = keyHash;
        this.entries = entries;
      };
      HashCollisionNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
        var entries = this.entries;
        for (var ii = 0, len = entries.length; ii < len; ii++) {
          if (is(key, entries[ii][0])) {
            return entries[ii][1];
          }
        }
        return notSetValue;
      };
      HashCollisionNode.prototype.update = function update2(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        if (keyHash === void 0) {
          keyHash = hash(key);
        }
        var removed = value === NOT_SET;
        if (keyHash !== this.keyHash) {
          if (removed) {
            return this;
          }
          SetRef(didAlter);
          SetRef(didChangeSize);
          return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
        }
        var entries = this.entries;
        var idx = 0;
        var len = entries.length;
        for (; idx < len; idx++) {
          if (is(key, entries[idx][0])) {
            break;
          }
        }
        var exists = idx < len;
        if (exists ? entries[idx][1] === value : removed) {
          return this;
        }
        SetRef(didAlter);
        (removed || !exists) && SetRef(didChangeSize);
        if (removed && len === 2) {
          return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
        }
        var isEditable = ownerID && ownerID === this.ownerID;
        var newEntries = isEditable ? entries : arrCopy(entries);
        if (exists) {
          if (removed) {
            idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
          } else {
            newEntries[idx] = [key, value];
          }
        } else {
          newEntries.push([key, value]);
        }
        if (isEditable) {
          this.entries = newEntries;
          return this;
        }
        return new HashCollisionNode(ownerID, this.keyHash, newEntries);
      };
      var ValueNode = function ValueNode2(ownerID, keyHash, entry) {
        this.ownerID = ownerID;
        this.keyHash = keyHash;
        this.entry = entry;
      };
      ValueNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
        return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
      };
      ValueNode.prototype.update = function update2(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        var removed = value === NOT_SET;
        var keyMatch = is(key, this.entry[0]);
        if (keyMatch ? value === this.entry[1] : removed) {
          return this;
        }
        SetRef(didAlter);
        if (removed) {
          SetRef(didChangeSize);
          return;
        }
        if (keyMatch) {
          if (ownerID && ownerID === this.ownerID) {
            this.entry[1] = value;
            return this;
          }
          return new ValueNode(ownerID, this.keyHash, [key, value]);
        }
        SetRef(didChangeSize);
        return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
      };
      ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(fn, reverse) {
        var entries = this.entries;
        for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
          if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
            return false;
          }
        }
      };
      BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(fn, reverse) {
        var nodes = this.nodes;
        for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
          var node = nodes[reverse ? maxIndex - ii : ii];
          if (node && node.iterate(fn, reverse) === false) {
            return false;
          }
        }
      };
      ValueNode.prototype.iterate = function(fn, reverse) {
        return fn(this.entry);
      };
      var MapIterator = /* @__PURE__ */ function(Iterator2) {
        function MapIterator2(map, type, reverse) {
          this._type = type;
          this._reverse = reverse;
          this._stack = map._root && mapIteratorFrame(map._root);
        }
        if (Iterator2)
          MapIterator2.__proto__ = Iterator2;
        MapIterator2.prototype = Object.create(Iterator2 && Iterator2.prototype);
        MapIterator2.prototype.constructor = MapIterator2;
        MapIterator2.prototype.next = function next() {
          var type = this._type;
          var stack = this._stack;
          while (stack) {
            var node = stack.node;
            var index = stack.index++;
            var maxIndex = void 0;
            if (node.entry) {
              if (index === 0) {
                return mapIteratorValue(type, node.entry);
              }
            } else if (node.entries) {
              maxIndex = node.entries.length - 1;
              if (index <= maxIndex) {
                return mapIteratorValue(
                  type,
                  node.entries[this._reverse ? maxIndex - index : index]
                );
              }
            } else {
              maxIndex = node.nodes.length - 1;
              if (index <= maxIndex) {
                var subNode = node.nodes[this._reverse ? maxIndex - index : index];
                if (subNode) {
                  if (subNode.entry) {
                    return mapIteratorValue(type, subNode.entry);
                  }
                  stack = this._stack = mapIteratorFrame(subNode, stack);
                }
                continue;
              }
            }
            stack = this._stack = this._stack.__prev;
          }
          return iteratorDone();
        };
        return MapIterator2;
      }(Iterator);
      function mapIteratorValue(type, entry) {
        return iteratorValue(type, entry[0], entry[1]);
      }
      function mapIteratorFrame(node, prev) {
        return {
          node,
          index: 0,
          __prev: prev
        };
      }
      function makeMap(size, root, ownerID, hash2) {
        var map = Object.create(MapPrototype);
        map.size = size;
        map._root = root;
        map.__ownerID = ownerID;
        map.__hash = hash2;
        map.__altered = false;
        return map;
      }
      var EMPTY_MAP;
      function emptyMap() {
        return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
      }
      function updateMap(map, k, v) {
        var newRoot;
        var newSize;
        if (!map._root) {
          if (v === NOT_SET) {
            return map;
          }
          newSize = 1;
          newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
        } else {
          var didChangeSize = MakeRef();
          var didAlter = MakeRef();
          newRoot = updateNode(
            map._root,
            map.__ownerID,
            0,
            void 0,
            k,
            v,
            didChangeSize,
            didAlter
          );
          if (!didAlter.value) {
            return map;
          }
          newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
        }
        if (map.__ownerID) {
          map.size = newSize;
          map._root = newRoot;
          map.__hash = void 0;
          map.__altered = true;
          return map;
        }
        return newRoot ? makeMap(newSize, newRoot) : emptyMap();
      }
      function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
        if (!node) {
          if (value === NOT_SET) {
            return node;
          }
          SetRef(didAlter);
          SetRef(didChangeSize);
          return new ValueNode(ownerID, keyHash, [key, value]);
        }
        return node.update(
          ownerID,
          shift,
          keyHash,
          key,
          value,
          didChangeSize,
          didAlter
        );
      }
      function isLeafNode(node) {
        return node.constructor === ValueNode || node.constructor === HashCollisionNode;
      }
      function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
        if (node.keyHash === keyHash) {
          return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
        }
        var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
        var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
        var newNode;
        var nodes = idx1 === idx2 ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);
        return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
      }
      function createNodes(ownerID, entries, key, value) {
        if (!ownerID) {
          ownerID = new OwnerID();
        }
        var node = new ValueNode(ownerID, hash(key), [key, value]);
        for (var ii = 0; ii < entries.length; ii++) {
          var entry = entries[ii];
          node = node.update(ownerID, 0, void 0, entry[0], entry[1]);
        }
        return node;
      }
      function packNodes(ownerID, nodes, count, excluding) {
        var bitmap = 0;
        var packedII = 0;
        var packedNodes = new Array(count);
        for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
          var node = nodes[ii];
          if (node !== void 0 && ii !== excluding) {
            bitmap |= bit;
            packedNodes[packedII++] = node;
          }
        }
        return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
      }
      function expandNodes(ownerID, nodes, bitmap, including, node) {
        var count = 0;
        var expandedNodes = new Array(SIZE);
        for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
          expandedNodes[ii] = bitmap & 1 ? nodes[count++] : void 0;
        }
        expandedNodes[including] = node;
        return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
      }
      function popCount(x) {
        x -= x >> 1 & 1431655765;
        x = (x & 858993459) + (x >> 2 & 858993459);
        x = x + (x >> 4) & 252645135;
        x += x >> 8;
        x += x >> 16;
        return x & 127;
      }
      function setAt(array, idx, val, canEdit) {
        var newArray = canEdit ? array : arrCopy(array);
        newArray[idx] = val;
        return newArray;
      }
      function spliceIn(array, idx, val, canEdit) {
        var newLen = array.length + 1;
        if (canEdit && idx + 1 === newLen) {
          array[idx] = val;
          return array;
        }
        var newArray = new Array(newLen);
        var after = 0;
        for (var ii = 0; ii < newLen; ii++) {
          if (ii === idx) {
            newArray[ii] = val;
            after = -1;
          } else {
            newArray[ii] = array[ii + after];
          }
        }
        return newArray;
      }
      function spliceOut(array, idx, canEdit) {
        var newLen = array.length - 1;
        if (canEdit && idx === newLen) {
          array.pop();
          return array;
        }
        var newArray = new Array(newLen);
        var after = 0;
        for (var ii = 0; ii < newLen; ii++) {
          if (ii === idx) {
            after = 1;
          }
          newArray[ii] = array[ii + after];
        }
        return newArray;
      }
      var MAX_ARRAY_MAP_SIZE = SIZE / 4;
      var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
      var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;
      var IS_LIST_SYMBOL = "@@__IMMUTABLE_LIST__@@";
      function isList(maybeList) {
        return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);
      }
      var List = /* @__PURE__ */ function(IndexedCollection2) {
        function List2(value) {
          var empty = emptyList();
          if (value === void 0 || value === null) {
            return empty;
          }
          if (isList(value)) {
            return value;
          }
          var iter = IndexedCollection2(value);
          var size = iter.size;
          if (size === 0) {
            return empty;
          }
          assertNotInfinite(size);
          if (size > 0 && size < SIZE) {
            return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
          }
          return empty.withMutations(function(list) {
            list.setSize(size);
            iter.forEach(function(v, i2) {
              return list.set(i2, v);
            });
          });
        }
        if (IndexedCollection2)
          List2.__proto__ = IndexedCollection2;
        List2.prototype = Object.create(IndexedCollection2 && IndexedCollection2.prototype);
        List2.prototype.constructor = List2;
        List2.of = function of() {
          return this(arguments);
        };
        List2.prototype.toString = function toString2() {
          return this.__toString("List [", "]");
        };
        List2.prototype.get = function get2(index, notSetValue) {
          index = wrapIndex(this, index);
          if (index >= 0 && index < this.size) {
            index += this._origin;
            var node = listNodeFor(this, index);
            return node && node.array[index & MASK];
          }
          return notSetValue;
        };
        List2.prototype.set = function set2(index, value) {
          return updateList(this, index, value);
        };
        List2.prototype.remove = function remove2(index) {
          return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
        };
        List2.prototype.insert = function insert(index, value) {
          return this.splice(index, 0, value);
        };
        List2.prototype.clear = function clear() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = this._origin = this._capacity = 0;
            this._level = SHIFT;
            this._root = this._tail = this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyList();
        };
        List2.prototype.push = function push() {
          var values = arguments;
          var oldSize = this.size;
          return this.withMutations(function(list) {
            setListBounds(list, 0, oldSize + values.length);
            for (var ii = 0; ii < values.length; ii++) {
              list.set(oldSize + ii, values[ii]);
            }
          });
        };
        List2.prototype.pop = function pop() {
          return setListBounds(this, 0, -1);
        };
        List2.prototype.unshift = function unshift() {
          var values = arguments;
          return this.withMutations(function(list) {
            setListBounds(list, -values.length);
            for (var ii = 0; ii < values.length; ii++) {
              list.set(ii, values[ii]);
            }
          });
        };
        List2.prototype.shift = function shift() {
          return setListBounds(this, 1);
        };
        List2.prototype.concat = function concat() {
          var arguments$1 = arguments;
          var seqs = [];
          for (var i2 = 0; i2 < arguments.length; i2++) {
            var argument = arguments$1[i2];
            var seq = IndexedCollection2(
              typeof argument !== "string" && hasIterator(argument) ? argument : [argument]
            );
            if (seq.size !== 0) {
              seqs.push(seq);
            }
          }
          if (seqs.length === 0) {
            return this;
          }
          if (this.size === 0 && !this.__ownerID && seqs.length === 1) {
            return this.constructor(seqs[0]);
          }
          return this.withMutations(function(list) {
            seqs.forEach(function(seq2) {
              return seq2.forEach(function(value) {
                return list.push(value);
              });
            });
          });
        };
        List2.prototype.setSize = function setSize(size) {
          return setListBounds(this, 0, size);
        };
        List2.prototype.map = function map(mapper, context) {
          var this$1$1 = this;
          return this.withMutations(function(list) {
            for (var i2 = 0; i2 < this$1$1.size; i2++) {
              list.set(i2, mapper.call(context, list.get(i2), i2, this$1$1));
            }
          });
        };
        List2.prototype.slice = function slice(begin, end) {
          var size = this.size;
          if (wholeSlice(begin, end, size)) {
            return this;
          }
          return setListBounds(
            this,
            resolveBegin(begin, size),
            resolveEnd(end, size)
          );
        };
        List2.prototype.__iterator = function __iterator(type, reverse) {
          var index = reverse ? this.size : 0;
          var values = iterateList(this, reverse);
          return new Iterator(function() {
            var value = values();
            return value === DONE ? iteratorDone() : iteratorValue(type, reverse ? --index : index++, value);
          });
        };
        List2.prototype.__iterate = function __iterate(fn, reverse) {
          var index = reverse ? this.size : 0;
          var values = iterateList(this, reverse);
          var value;
          while ((value = values()) !== DONE) {
            if (fn(value, reverse ? --index : index++, this) === false) {
              break;
            }
          }
          return index;
        };
        List2.prototype.__ensureOwner = function __ensureOwner(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            if (this.size === 0) {
              return emptyList();
            }
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeList(
            this._origin,
            this._capacity,
            this._level,
            this._root,
            this._tail,
            ownerID,
            this.__hash
          );
        };
        return List2;
      }(IndexedCollection);
      List.isList = isList;
      var ListPrototype = List.prototype;
      ListPrototype[IS_LIST_SYMBOL] = true;
      ListPrototype[DELETE] = ListPrototype.remove;
      ListPrototype.merge = ListPrototype.concat;
      ListPrototype.setIn = setIn;
      ListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;
      ListPrototype.update = update;
      ListPrototype.updateIn = updateIn;
      ListPrototype.mergeIn = mergeIn;
      ListPrototype.mergeDeepIn = mergeDeepIn;
      ListPrototype.withMutations = withMutations;
      ListPrototype.wasAltered = wasAltered;
      ListPrototype.asImmutable = asImmutable;
      ListPrototype["@@transducer/init"] = ListPrototype.asMutable = asMutable;
      ListPrototype["@@transducer/step"] = function(result, arr) {
        return result.push(arr);
      };
      ListPrototype["@@transducer/result"] = function(obj) {
        return obj.asImmutable();
      };
      var VNode = function VNode2(array, ownerID) {
        this.array = array;
        this.ownerID = ownerID;
      };
      VNode.prototype.removeBefore = function removeBefore(ownerID, level, index) {
        if (index === level ? 1 << level : this.array.length === 0) {
          return this;
        }
        var originIndex = index >>> level & MASK;
        if (originIndex >= this.array.length) {
          return new VNode([], ownerID);
        }
        var removingFirst = originIndex === 0;
        var newChild;
        if (level > 0) {
          var oldChild = this.array[originIndex];
          newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
          if (newChild === oldChild && removingFirst) {
            return this;
          }
        }
        if (removingFirst && !newChild) {
          return this;
        }
        var editable = editableVNode(this, ownerID);
        if (!removingFirst) {
          for (var ii = 0; ii < originIndex; ii++) {
            editable.array[ii] = void 0;
          }
        }
        if (newChild) {
          editable.array[originIndex] = newChild;
        }
        return editable;
      };
      VNode.prototype.removeAfter = function removeAfter(ownerID, level, index) {
        if (index === (level ? 1 << level : 0) || this.array.length === 0) {
          return this;
        }
        var sizeIndex = index - 1 >>> level & MASK;
        if (sizeIndex >= this.array.length) {
          return this;
        }
        var newChild;
        if (level > 0) {
          var oldChild = this.array[sizeIndex];
          newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
          if (newChild === oldChild && sizeIndex === this.array.length - 1) {
            return this;
          }
        }
        var editable = editableVNode(this, ownerID);
        editable.array.splice(sizeIndex + 1);
        if (newChild) {
          editable.array[sizeIndex] = newChild;
        }
        return editable;
      };
      var DONE = {};
      function iterateList(list, reverse) {
        var left = list._origin;
        var right = list._capacity;
        var tailPos = getTailOffset(right);
        var tail = list._tail;
        return iterateNodeOrLeaf(list._root, list._level, 0);
        function iterateNodeOrLeaf(node, level, offset) {
          return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);
        }
        function iterateLeaf(node, offset) {
          var array = offset === tailPos ? tail && tail.array : node && node.array;
          var from = offset > left ? 0 : left - offset;
          var to = right - offset;
          if (to > SIZE) {
            to = SIZE;
          }
          return function() {
            if (from === to) {
              return DONE;
            }
            var idx = reverse ? --to : from++;
            return array && array[idx];
          };
        }
        function iterateNode(node, level, offset) {
          var values;
          var array = node && node.array;
          var from = offset > left ? 0 : left - offset >> level;
          var to = (right - offset >> level) + 1;
          if (to > SIZE) {
            to = SIZE;
          }
          return function() {
            while (true) {
              if (values) {
                var value = values();
                if (value !== DONE) {
                  return value;
                }
                values = null;
              }
              if (from === to) {
                return DONE;
              }
              var idx = reverse ? --to : from++;
              values = iterateNodeOrLeaf(
                array && array[idx],
                level - SHIFT,
                offset + (idx << level)
              );
            }
          };
        }
      }
      function makeList(origin, capacity, level, root, tail, ownerID, hash2) {
        var list = Object.create(ListPrototype);
        list.size = capacity - origin;
        list._origin = origin;
        list._capacity = capacity;
        list._level = level;
        list._root = root;
        list._tail = tail;
        list.__ownerID = ownerID;
        list.__hash = hash2;
        list.__altered = false;
        return list;
      }
      var EMPTY_LIST;
      function emptyList() {
        return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
      }
      function updateList(list, index, value) {
        index = wrapIndex(list, index);
        if (index !== index) {
          return list;
        }
        if (index >= list.size || index < 0) {
          return list.withMutations(function(list2) {
            index < 0 ? setListBounds(list2, index).set(0, value) : setListBounds(list2, 0, index + 1).set(index, value);
          });
        }
        index += list._origin;
        var newTail = list._tail;
        var newRoot = list._root;
        var didAlter = MakeRef();
        if (index >= getTailOffset(list._capacity)) {
          newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
        } else {
          newRoot = updateVNode(
            newRoot,
            list.__ownerID,
            list._level,
            index,
            value,
            didAlter
          );
        }
        if (!didAlter.value) {
          return list;
        }
        if (list.__ownerID) {
          list._root = newRoot;
          list._tail = newTail;
          list.__hash = void 0;
          list.__altered = true;
          return list;
        }
        return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
      }
      function updateVNode(node, ownerID, level, index, value, didAlter) {
        var idx = index >>> level & MASK;
        var nodeHas = node && idx < node.array.length;
        if (!nodeHas && value === void 0) {
          return node;
        }
        var newNode;
        if (level > 0) {
          var lowerNode = node && node.array[idx];
          var newLowerNode = updateVNode(
            lowerNode,
            ownerID,
            level - SHIFT,
            index,
            value,
            didAlter
          );
          if (newLowerNode === lowerNode) {
            return node;
          }
          newNode = editableVNode(node, ownerID);
          newNode.array[idx] = newLowerNode;
          return newNode;
        }
        if (nodeHas && node.array[idx] === value) {
          return node;
        }
        if (didAlter) {
          SetRef(didAlter);
        }
        newNode = editableVNode(node, ownerID);
        if (value === void 0 && idx === newNode.array.length - 1) {
          newNode.array.pop();
        } else {
          newNode.array[idx] = value;
        }
        return newNode;
      }
      function editableVNode(node, ownerID) {
        if (ownerID && node && ownerID === node.ownerID) {
          return node;
        }
        return new VNode(node ? node.array.slice() : [], ownerID);
      }
      function listNodeFor(list, rawIndex) {
        if (rawIndex >= getTailOffset(list._capacity)) {
          return list._tail;
        }
        if (rawIndex < 1 << list._level + SHIFT) {
          var node = list._root;
          var level = list._level;
          while (node && level > 0) {
            node = node.array[rawIndex >>> level & MASK];
            level -= SHIFT;
          }
          return node;
        }
      }
      function setListBounds(list, begin, end) {
        if (begin !== void 0) {
          begin |= 0;
        }
        if (end !== void 0) {
          end |= 0;
        }
        var owner = list.__ownerID || new OwnerID();
        var oldOrigin = list._origin;
        var oldCapacity = list._capacity;
        var newOrigin = oldOrigin + begin;
        var newCapacity = end === void 0 ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
        if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
          return list;
        }
        if (newOrigin >= newCapacity) {
          return list.clear();
        }
        var newLevel = list._level;
        var newRoot = list._root;
        var offsetShift = 0;
        while (newOrigin + offsetShift < 0) {
          newRoot = new VNode(
            newRoot && newRoot.array.length ? [void 0, newRoot] : [],
            owner
          );
          newLevel += SHIFT;
          offsetShift += 1 << newLevel;
        }
        if (offsetShift) {
          newOrigin += offsetShift;
          oldOrigin += offsetShift;
          newCapacity += offsetShift;
          oldCapacity += offsetShift;
        }
        var oldTailOffset = getTailOffset(oldCapacity);
        var newTailOffset = getTailOffset(newCapacity);
        while (newTailOffset >= 1 << newLevel + SHIFT) {
          newRoot = new VNode(
            newRoot && newRoot.array.length ? [newRoot] : [],
            owner
          );
          newLevel += SHIFT;
        }
        var oldTail = list._tail;
        var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;
        if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
          newRoot = editableVNode(newRoot, owner);
          var node = newRoot;
          for (var level = newLevel; level > SHIFT; level -= SHIFT) {
            var idx = oldTailOffset >>> level & MASK;
            node = node.array[idx] = editableVNode(node.array[idx], owner);
          }
          node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
        }
        if (newCapacity < oldCapacity) {
          newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
        }
        if (newOrigin >= newTailOffset) {
          newOrigin -= newTailOffset;
          newCapacity -= newTailOffset;
          newLevel = SHIFT;
          newRoot = null;
          newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
        } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
          offsetShift = 0;
          while (newRoot) {
            var beginIndex = newOrigin >>> newLevel & MASK;
            if (beginIndex !== newTailOffset >>> newLevel & MASK) {
              break;
            }
            if (beginIndex) {
              offsetShift += (1 << newLevel) * beginIndex;
            }
            newLevel -= SHIFT;
            newRoot = newRoot.array[beginIndex];
          }
          if (newRoot && newOrigin > oldOrigin) {
            newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
          }
          if (newRoot && newTailOffset < oldTailOffset) {
            newRoot = newRoot.removeAfter(
              owner,
              newLevel,
              newTailOffset - offsetShift
            );
          }
          if (offsetShift) {
            newOrigin -= offsetShift;
            newCapacity -= offsetShift;
          }
        }
        if (list.__ownerID) {
          list.size = newCapacity - newOrigin;
          list._origin = newOrigin;
          list._capacity = newCapacity;
          list._level = newLevel;
          list._root = newRoot;
          list._tail = newTail;
          list.__hash = void 0;
          list.__altered = true;
          return list;
        }
        return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
      }
      function getTailOffset(size) {
        return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;
      }
      var OrderedMap = /* @__PURE__ */ function(Map3) {
        function OrderedMap2(value) {
          return value === void 0 || value === null ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function(map) {
            var iter = KeyedCollection(value);
            assertNotInfinite(iter.size);
            iter.forEach(function(v, k) {
              return map.set(k, v);
            });
          });
        }
        if (Map3)
          OrderedMap2.__proto__ = Map3;
        OrderedMap2.prototype = Object.create(Map3 && Map3.prototype);
        OrderedMap2.prototype.constructor = OrderedMap2;
        OrderedMap2.of = function of() {
          return this(arguments);
        };
        OrderedMap2.prototype.toString = function toString2() {
          return this.__toString("OrderedMap {", "}");
        };
        OrderedMap2.prototype.get = function get2(k, notSetValue) {
          var index = this._map.get(k);
          return index !== void 0 ? this._list.get(index)[1] : notSetValue;
        };
        OrderedMap2.prototype.clear = function clear() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._map.clear();
            this._list.clear();
            this.__altered = true;
            return this;
          }
          return emptyOrderedMap();
        };
        OrderedMap2.prototype.set = function set2(k, v) {
          return updateOrderedMap(this, k, v);
        };
        OrderedMap2.prototype.remove = function remove2(k) {
          return updateOrderedMap(this, k, NOT_SET);
        };
        OrderedMap2.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1$1 = this;
          return this._list.__iterate(
            function(entry) {
              return entry && fn(entry[1], entry[0], this$1$1);
            },
            reverse
          );
        };
        OrderedMap2.prototype.__iterator = function __iterator(type, reverse) {
          return this._list.fromEntrySeq().__iterator(type, reverse);
        };
        OrderedMap2.prototype.__ensureOwner = function __ensureOwner(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          var newList = this._list.__ensureOwner(ownerID);
          if (!ownerID) {
            if (this.size === 0) {
              return emptyOrderedMap();
            }
            this.__ownerID = ownerID;
            this.__altered = false;
            this._map = newMap;
            this._list = newList;
            return this;
          }
          return makeOrderedMap(newMap, newList, ownerID, this.__hash);
        };
        return OrderedMap2;
      }(Map2);
      OrderedMap.isOrderedMap = isOrderedMap;
      OrderedMap.prototype[IS_ORDERED_SYMBOL] = true;
      OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;
      function makeOrderedMap(map, list, ownerID, hash2) {
        var omap = Object.create(OrderedMap.prototype);
        omap.size = map ? map.size : 0;
        omap._map = map;
        omap._list = list;
        omap.__ownerID = ownerID;
        omap.__hash = hash2;
        omap.__altered = false;
        return omap;
      }
      var EMPTY_ORDERED_MAP;
      function emptyOrderedMap() {
        return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
      }
      function updateOrderedMap(omap, k, v) {
        var map = omap._map;
        var list = omap._list;
        var i2 = map.get(k);
        var has2 = i2 !== void 0;
        var newMap;
        var newList;
        if (v === NOT_SET) {
          if (!has2) {
            return omap;
          }
          if (list.size >= SIZE && list.size >= map.size * 2) {
            newList = list.filter(function(entry, idx) {
              return entry !== void 0 && i2 !== idx;
            });
            newMap = newList.toKeyedSeq().map(function(entry) {
              return entry[0];
            }).flip().toMap();
            if (omap.__ownerID) {
              newMap.__ownerID = newList.__ownerID = omap.__ownerID;
            }
          } else {
            newMap = map.remove(k);
            newList = i2 === list.size - 1 ? list.pop() : list.set(i2, void 0);
          }
        } else if (has2) {
          if (v === list.get(i2)[1]) {
            return omap;
          }
          newMap = map;
          newList = list.set(i2, [k, v]);
        } else {
          newMap = map.set(k, list.size);
          newList = list.set(list.size, [k, v]);
        }
        if (omap.__ownerID) {
          omap.size = newMap.size;
          omap._map = newMap;
          omap._list = newList;
          omap.__hash = void 0;
          omap.__altered = true;
          return omap;
        }
        return makeOrderedMap(newMap, newList);
      }
      var IS_STACK_SYMBOL = "@@__IMMUTABLE_STACK__@@";
      function isStack(maybeStack) {
        return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);
      }
      var Stack = /* @__PURE__ */ function(IndexedCollection2) {
        function Stack2(value) {
          return value === void 0 || value === null ? emptyStack() : isStack(value) ? value : emptyStack().pushAll(value);
        }
        if (IndexedCollection2)
          Stack2.__proto__ = IndexedCollection2;
        Stack2.prototype = Object.create(IndexedCollection2 && IndexedCollection2.prototype);
        Stack2.prototype.constructor = Stack2;
        Stack2.of = function of() {
          return this(arguments);
        };
        Stack2.prototype.toString = function toString2() {
          return this.__toString("Stack [", "]");
        };
        Stack2.prototype.get = function get2(index, notSetValue) {
          var head = this._head;
          index = wrapIndex(this, index);
          while (head && index--) {
            head = head.next;
          }
          return head ? head.value : notSetValue;
        };
        Stack2.prototype.peek = function peek() {
          return this._head && this._head.value;
        };
        Stack2.prototype.push = function push() {
          var arguments$1 = arguments;
          if (arguments.length === 0) {
            return this;
          }
          var newSize = this.size + arguments.length;
          var head = this._head;
          for (var ii = arguments.length - 1; ii >= 0; ii--) {
            head = {
              value: arguments$1[ii],
              next: head
            };
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.pushAll = function pushAll(iter) {
          iter = IndexedCollection2(iter);
          if (iter.size === 0) {
            return this;
          }
          if (this.size === 0 && isStack(iter)) {
            return iter;
          }
          assertNotInfinite(iter.size);
          var newSize = this.size;
          var head = this._head;
          iter.__iterate(
            function(value) {
              newSize++;
              head = {
                value,
                next: head
              };
            },
            /* reverse */
            true
          );
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.pop = function pop() {
          return this.slice(1);
        };
        Stack2.prototype.clear = function clear() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._head = void 0;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyStack();
        };
        Stack2.prototype.slice = function slice(begin, end) {
          if (wholeSlice(begin, end, this.size)) {
            return this;
          }
          var resolvedBegin = resolveBegin(begin, this.size);
          var resolvedEnd = resolveEnd(end, this.size);
          if (resolvedEnd !== this.size) {
            return IndexedCollection2.prototype.slice.call(this, begin, end);
          }
          var newSize = this.size - resolvedBegin;
          var head = this._head;
          while (resolvedBegin--) {
            head = head.next;
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.__ensureOwner = function __ensureOwner(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            if (this.size === 0) {
              return emptyStack();
            }
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeStack(this.size, this._head, ownerID, this.__hash);
        };
        Stack2.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1$1 = this;
          if (reverse) {
            return new ArraySeq(this.toArray()).__iterate(
              function(v, k) {
                return fn(v, k, this$1$1);
              },
              reverse
            );
          }
          var iterations = 0;
          var node = this._head;
          while (node) {
            if (fn(node.value, iterations++, this) === false) {
              break;
            }
            node = node.next;
          }
          return iterations;
        };
        Stack2.prototype.__iterator = function __iterator(type, reverse) {
          if (reverse) {
            return new ArraySeq(this.toArray()).__iterator(type, reverse);
          }
          var iterations = 0;
          var node = this._head;
          return new Iterator(function() {
            if (node) {
              var value = node.value;
              node = node.next;
              return iteratorValue(type, iterations++, value);
            }
            return iteratorDone();
          });
        };
        return Stack2;
      }(IndexedCollection);
      Stack.isStack = isStack;
      var StackPrototype = Stack.prototype;
      StackPrototype[IS_STACK_SYMBOL] = true;
      StackPrototype.shift = StackPrototype.pop;
      StackPrototype.unshift = StackPrototype.push;
      StackPrototype.unshiftAll = StackPrototype.pushAll;
      StackPrototype.withMutations = withMutations;
      StackPrototype.wasAltered = wasAltered;
      StackPrototype.asImmutable = asImmutable;
      StackPrototype["@@transducer/init"] = StackPrototype.asMutable = asMutable;
      StackPrototype["@@transducer/step"] = function(result, arr) {
        return result.unshift(arr);
      };
      StackPrototype["@@transducer/result"] = function(obj) {
        return obj.asImmutable();
      };
      function makeStack(size, head, ownerID, hash2) {
        var map = Object.create(StackPrototype);
        map.size = size;
        map._head = head;
        map.__ownerID = ownerID;
        map.__hash = hash2;
        map.__altered = false;
        return map;
      }
      var EMPTY_STACK;
      function emptyStack() {
        return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
      }
      var IS_SET_SYMBOL = "@@__IMMUTABLE_SET__@@";
      function isSet(maybeSet) {
        return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);
      }
      function isOrderedSet(maybeOrderedSet) {
        return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
      }
      function deepEqual(a, b) {
        if (a === b) {
          return true;
        }
        if (!isCollection(b) || a.size !== void 0 && b.size !== void 0 && a.size !== b.size || a.__hash !== void 0 && b.__hash !== void 0 && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {
          return false;
        }
        if (a.size === 0 && b.size === 0) {
          return true;
        }
        var notAssociative = !isAssociative(a);
        if (isOrdered(a)) {
          var entries = a.entries();
          return b.every(function(v, k) {
            var entry = entries.next().value;
            return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
          }) && entries.next().done;
        }
        var flipped = false;
        if (a.size === void 0) {
          if (b.size === void 0) {
            if (typeof a.cacheResult === "function") {
              a.cacheResult();
            }
          } else {
            flipped = true;
            var _ = a;
            a = b;
            b = _;
          }
        }
        var allEqual = true;
        var bSize = b.__iterate(function(v, k) {
          if (notAssociative ? !a.has(v) : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
            allEqual = false;
            return false;
          }
        });
        return allEqual && a.size === bSize;
      }
      function mixin(ctor, methods) {
        var keyCopier = function(key) {
          ctor.prototype[key] = methods[key];
        };
        Object.keys(methods).forEach(keyCopier);
        Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
        return ctor;
      }
      function toJS(value) {
        if (!value || typeof value !== "object") {
          return value;
        }
        if (!isCollection(value)) {
          if (!isDataStructure(value)) {
            return value;
          }
          value = Seq(value);
        }
        if (isKeyed(value)) {
          var result$1 = {};
          value.__iterate(function(v, k) {
            result$1[k] = toJS(v);
          });
          return result$1;
        }
        var result = [];
        value.__iterate(function(v) {
          result.push(toJS(v));
        });
        return result;
      }
      var Set2 = /* @__PURE__ */ function(SetCollection2) {
        function Set3(value) {
          return value === void 0 || value === null ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function(set2) {
            var iter = SetCollection2(value);
            assertNotInfinite(iter.size);
            iter.forEach(function(v) {
              return set2.add(v);
            });
          });
        }
        if (SetCollection2)
          Set3.__proto__ = SetCollection2;
        Set3.prototype = Object.create(SetCollection2 && SetCollection2.prototype);
        Set3.prototype.constructor = Set3;
        Set3.of = function of() {
          return this(arguments);
        };
        Set3.fromKeys = function fromKeys(value) {
          return this(KeyedCollection(value).keySeq());
        };
        Set3.intersect = function intersect(sets) {
          sets = Collection(sets).toArray();
          return sets.length ? SetPrototype.intersect.apply(Set3(sets.pop()), sets) : emptySet();
        };
        Set3.union = function union(sets) {
          sets = Collection(sets).toArray();
          return sets.length ? SetPrototype.union.apply(Set3(sets.pop()), sets) : emptySet();
        };
        Set3.prototype.toString = function toString2() {
          return this.__toString("Set {", "}");
        };
        Set3.prototype.has = function has2(value) {
          return this._map.has(value);
        };
        Set3.prototype.add = function add(value) {
          return updateSet(this, this._map.set(value, value));
        };
        Set3.prototype.remove = function remove2(value) {
          return updateSet(this, this._map.remove(value));
        };
        Set3.prototype.clear = function clear() {
          return updateSet(this, this._map.clear());
        };
        Set3.prototype.map = function map(mapper, context) {
          var this$1$1 = this;
          var didChanges = false;
          var newMap = updateSet(
            this,
            this._map.mapEntries(function(ref) {
              var v = ref[1];
              var mapped = mapper.call(context, v, v, this$1$1);
              if (mapped !== v) {
                didChanges = true;
              }
              return [mapped, mapped];
            }, context)
          );
          return didChanges ? newMap : this;
        };
        Set3.prototype.union = function union() {
          var iters = [], len = arguments.length;
          while (len--)
            iters[len] = arguments[len];
          iters = iters.filter(function(x) {
            return x.size !== 0;
          });
          if (iters.length === 0) {
            return this;
          }
          if (this.size === 0 && !this.__ownerID && iters.length === 1) {
            return this.constructor(iters[0]);
          }
          return this.withMutations(function(set2) {
            for (var ii = 0; ii < iters.length; ii++) {
              if (typeof iters[ii] === "string") {
                set2.add(iters[ii]);
              } else {
                SetCollection2(iters[ii]).forEach(function(value) {
                  return set2.add(value);
                });
              }
            }
          });
        };
        Set3.prototype.intersect = function intersect() {
          var iters = [], len = arguments.length;
          while (len--)
            iters[len] = arguments[len];
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function(iter) {
            return SetCollection2(iter);
          });
          var toRemove = [];
          this.forEach(function(value) {
            if (!iters.every(function(iter) {
              return iter.includes(value);
            })) {
              toRemove.push(value);
            }
          });
          return this.withMutations(function(set2) {
            toRemove.forEach(function(value) {
              set2.remove(value);
            });
          });
        };
        Set3.prototype.subtract = function subtract() {
          var iters = [], len = arguments.length;
          while (len--)
            iters[len] = arguments[len];
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function(iter) {
            return SetCollection2(iter);
          });
          var toRemove = [];
          this.forEach(function(value) {
            if (iters.some(function(iter) {
              return iter.includes(value);
            })) {
              toRemove.push(value);
            }
          });
          return this.withMutations(function(set2) {
            toRemove.forEach(function(value) {
              set2.remove(value);
            });
          });
        };
        Set3.prototype.sort = function sort(comparator) {
          return OrderedSet(sortFactory(this, comparator));
        };
        Set3.prototype.sortBy = function sortBy(mapper, comparator) {
          return OrderedSet(sortFactory(this, comparator, mapper));
        };
        Set3.prototype.wasAltered = function wasAltered2() {
          return this._map.wasAltered();
        };
        Set3.prototype.__iterate = function __iterate(fn, reverse) {
          var this$1$1 = this;
          return this._map.__iterate(function(k) {
            return fn(k, k, this$1$1);
          }, reverse);
        };
        Set3.prototype.__iterator = function __iterator(type, reverse) {
          return this._map.__iterator(type, reverse);
        };
        Set3.prototype.__ensureOwner = function __ensureOwner(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            if (this.size === 0) {
              return this.__empty();
            }
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return this.__make(newMap, ownerID);
        };
        return Set3;
      }(SetCollection);
      Set2.isSet = isSet;
      var SetPrototype = Set2.prototype;
      SetPrototype[IS_SET_SYMBOL] = true;
      SetPrototype[DELETE] = SetPrototype.remove;
      SetPrototype.merge = SetPrototype.concat = SetPrototype.union;
      SetPrototype.withMutations = withMutations;
      SetPrototype.asImmutable = asImmutable;
      SetPrototype["@@transducer/init"] = SetPrototype.asMutable = asMutable;
      SetPrototype["@@transducer/step"] = function(result, arr) {
        return result.add(arr);
      };
      SetPrototype["@@transducer/result"] = function(obj) {
        return obj.asImmutable();
      };
      SetPrototype.__empty = emptySet;
      SetPrototype.__make = makeSet;
      function updateSet(set2, newMap) {
        if (set2.__ownerID) {
          set2.size = newMap.size;
          set2._map = newMap;
          return set2;
        }
        return newMap === set2._map ? set2 : newMap.size === 0 ? set2.__empty() : set2.__make(newMap);
      }
      function makeSet(map, ownerID) {
        var set2 = Object.create(SetPrototype);
        set2.size = map ? map.size : 0;
        set2._map = map;
        set2.__ownerID = ownerID;
        return set2;
      }
      var EMPTY_SET;
      function emptySet() {
        return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
      }
      var Range = /* @__PURE__ */ function(IndexedSeq2) {
        function Range2(start, end, step) {
          if (!(this instanceof Range2)) {
            return new Range2(start, end, step);
          }
          invariant(step !== 0, "Cannot step a Range by 0");
          start = start || 0;
          if (end === void 0) {
            end = Infinity;
          }
          step = step === void 0 ? 1 : Math.abs(step);
          if (end < start) {
            step = -step;
          }
          this._start = start;
          this._end = end;
          this._step = step;
          this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
          if (this.size === 0) {
            if (EMPTY_RANGE) {
              return EMPTY_RANGE;
            }
            EMPTY_RANGE = this;
          }
        }
        if (IndexedSeq2)
          Range2.__proto__ = IndexedSeq2;
        Range2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
        Range2.prototype.constructor = Range2;
        Range2.prototype.toString = function toString2() {
          if (this.size === 0) {
            return "Range []";
          }
          return "Range [ " + this._start + "..." + this._end + (this._step !== 1 ? " by " + this._step : "") + " ]";
        };
        Range2.prototype.get = function get2(index, notSetValue) {
          return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
        };
        Range2.prototype.includes = function includes(searchValue) {
          var possibleIndex = (searchValue - this._start) / this._step;
          return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
        };
        Range2.prototype.slice = function slice(begin, end) {
          if (wholeSlice(begin, end, this.size)) {
            return this;
          }
          begin = resolveBegin(begin, this.size);
          end = resolveEnd(end, this.size);
          if (end <= begin) {
            return new Range2(0, 0);
          }
          return new Range2(
            this.get(begin, this._end),
            this.get(end, this._end),
            this._step
          );
        };
        Range2.prototype.indexOf = function indexOf(searchValue) {
          var offsetValue = searchValue - this._start;
          if (offsetValue % this._step === 0) {
            var index = offsetValue / this._step;
            if (index >= 0 && index < this.size) {
              return index;
            }
          }
          return -1;
        };
        Range2.prototype.lastIndexOf = function lastIndexOf(searchValue) {
          return this.indexOf(searchValue);
        };
        Range2.prototype.__iterate = function __iterate(fn, reverse) {
          var size = this.size;
          var step = this._step;
          var value = reverse ? this._start + (size - 1) * step : this._start;
          var i2 = 0;
          while (i2 !== size) {
            if (fn(value, reverse ? size - ++i2 : i2++, this) === false) {
              break;
            }
            value += reverse ? -step : step;
          }
          return i2;
        };
        Range2.prototype.__iterator = function __iterator(type, reverse) {
          var size = this.size;
          var step = this._step;
          var value = reverse ? this._start + (size - 1) * step : this._start;
          var i2 = 0;
          return new Iterator(function() {
            if (i2 === size) {
              return iteratorDone();
            }
            var v = value;
            value += reverse ? -step : step;
            return iteratorValue(type, reverse ? size - ++i2 : i2++, v);
          });
        };
        Range2.prototype.equals = function equals(other) {
          return other instanceof Range2 ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);
        };
        return Range2;
      }(IndexedSeq);
      var EMPTY_RANGE;
      function getIn$1(collection, searchKeyPath, notSetValue) {
        var keyPath = coerceKeyPath(searchKeyPath);
        var i2 = 0;
        while (i2 !== keyPath.length) {
          collection = get(collection, keyPath[i2++], NOT_SET);
          if (collection === NOT_SET) {
            return notSetValue;
          }
        }
        return collection;
      }
      function getIn(searchKeyPath, notSetValue) {
        return getIn$1(this, searchKeyPath, notSetValue);
      }
      function hasIn$1(collection, keyPath) {
        return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;
      }
      function hasIn(searchKeyPath) {
        return hasIn$1(this, searchKeyPath);
      }
      function toObject() {
        assertNotInfinite(this.size);
        var object = {};
        this.__iterate(function(v, k) {
          object[k] = v;
        });
        return object;
      }
      Collection.isIterable = isCollection;
      Collection.isKeyed = isKeyed;
      Collection.isIndexed = isIndexed;
      Collection.isAssociative = isAssociative;
      Collection.isOrdered = isOrdered;
      Collection.Iterator = Iterator;
      mixin(Collection, {
        // ### Conversion to other types
        toArray: function toArray() {
          assertNotInfinite(this.size);
          var array = new Array(this.size || 0);
          var useTuples = isKeyed(this);
          var i2 = 0;
          this.__iterate(function(v, k) {
            array[i2++] = useTuples ? [k, v] : v;
          });
          return array;
        },
        toIndexedSeq: function toIndexedSeq() {
          return new ToIndexedSequence(this);
        },
        toJS: function toJS$1() {
          return toJS(this);
        },
        toKeyedSeq: function toKeyedSeq() {
          return new ToKeyedSequence(this, true);
        },
        toMap: function toMap() {
          return Map2(this.toKeyedSeq());
        },
        toObject,
        toOrderedMap: function toOrderedMap() {
          return OrderedMap(this.toKeyedSeq());
        },
        toOrderedSet: function toOrderedSet() {
          return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
        },
        toSet: function toSet() {
          return Set2(isKeyed(this) ? this.valueSeq() : this);
        },
        toSetSeq: function toSetSeq() {
          return new ToSetSequence(this);
        },
        toSeq: function toSeq() {
          return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
        },
        toStack: function toStack() {
          return Stack(isKeyed(this) ? this.valueSeq() : this);
        },
        toList: function toList() {
          return List(isKeyed(this) ? this.valueSeq() : this);
        },
        // ### Common JavaScript methods and properties
        toString: function toString2() {
          return "[Collection]";
        },
        __toString: function __toString(head, tail) {
          if (this.size === 0) {
            return head + tail;
          }
          return head + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + tail;
        },
        // ### ES6 Collection methods (ES6 Array and Map)
        concat: function concat() {
          var values = [], len = arguments.length;
          while (len--)
            values[len] = arguments[len];
          return reify(this, concatFactory(this, values));
        },
        includes: function includes(searchValue) {
          return this.some(function(value) {
            return is(value, searchValue);
          });
        },
        entries: function entries() {
          return this.__iterator(ITERATE_ENTRIES);
        },
        every: function every(predicate, context) {
          assertNotInfinite(this.size);
          var returnValue = true;
          this.__iterate(function(v, k, c) {
            if (!predicate.call(context, v, k, c)) {
              returnValue = false;
              return false;
            }
          });
          return returnValue;
        },
        filter: function filter(predicate, context) {
          return reify(this, filterFactory(this, predicate, context, true));
        },
        partition: function partition(predicate, context) {
          return partitionFactory(this, predicate, context);
        },
        find: function find(predicate, context, notSetValue) {
          var entry = this.findEntry(predicate, context);
          return entry ? entry[1] : notSetValue;
        },
        forEach: function forEach(sideEffect, context) {
          assertNotInfinite(this.size);
          return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
        },
        join: function join(separator) {
          assertNotInfinite(this.size);
          separator = separator !== void 0 ? "" + separator : ",";
          var joined = "";
          var isFirst = true;
          this.__iterate(function(v) {
            isFirst ? isFirst = false : joined += separator;
            joined += v !== null && v !== void 0 ? v.toString() : "";
          });
          return joined;
        },
        keys: function keys() {
          return this.__iterator(ITERATE_KEYS);
        },
        map: function map(mapper, context) {
          return reify(this, mapFactory(this, mapper, context));
        },
        reduce: function reduce$1(reducer, initialReduction, context) {
          return reduce(
            this,
            reducer,
            initialReduction,
            context,
            arguments.length < 2,
            false
          );
        },
        reduceRight: function reduceRight(reducer, initialReduction, context) {
          return reduce(
            this,
            reducer,
            initialReduction,
            context,
            arguments.length < 2,
            true
          );
        },
        reverse: function reverse() {
          return reify(this, reverseFactory(this, true));
        },
        slice: function slice(begin, end) {
          return reify(this, sliceFactory(this, begin, end, true));
        },
        some: function some(predicate, context) {
          assertNotInfinite(this.size);
          var returnValue = false;
          this.__iterate(function(v, k, c) {
            if (predicate.call(context, v, k, c)) {
              returnValue = true;
              return false;
            }
          });
          return returnValue;
        },
        sort: function sort(comparator) {
          return reify(this, sortFactory(this, comparator));
        },
        values: function values() {
          return this.__iterator(ITERATE_VALUES);
        },
        // ### More sequential methods
        butLast: function butLast() {
          return this.slice(0, -1);
        },
        isEmpty: function isEmpty() {
          return this.size !== void 0 ? this.size === 0 : !this.some(function() {
            return true;
          });
        },
        count: function count(predicate, context) {
          return ensureSize(
            predicate ? this.toSeq().filter(predicate, context) : this
          );
        },
        countBy: function countBy(grouper, context) {
          return countByFactory(this, grouper, context);
        },
        equals: function equals(other) {
          return deepEqual(this, other);
        },
        entrySeq: function entrySeq() {
          var collection = this;
          if (collection._cache) {
            return new ArraySeq(collection._cache);
          }
          var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();
          entriesSequence.fromEntrySeq = function() {
            return collection.toSeq();
          };
          return entriesSequence;
        },
        filterNot: function filterNot(predicate, context) {
          return this.filter(not(predicate), context);
        },
        findEntry: function findEntry(predicate, context, notSetValue) {
          var found = notSetValue;
          this.__iterate(function(v, k, c) {
            if (predicate.call(context, v, k, c)) {
              found = [k, v];
              return false;
            }
          });
          return found;
        },
        findKey: function findKey(predicate, context) {
          var entry = this.findEntry(predicate, context);
          return entry && entry[0];
        },
        findLast: function findLast(predicate, context, notSetValue) {
          return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
        },
        findLastEntry: function findLastEntry(predicate, context, notSetValue) {
          return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
        },
        findLastKey: function findLastKey(predicate, context) {
          return this.toKeyedSeq().reverse().findKey(predicate, context);
        },
        first: function first(notSetValue) {
          return this.find(returnTrue, null, notSetValue);
        },
        flatMap: function flatMap(mapper, context) {
          return reify(this, flatMapFactory(this, mapper, context));
        },
        flatten: function flatten(depth) {
          return reify(this, flattenFactory(this, depth, true));
        },
        fromEntrySeq: function fromEntrySeq() {
          return new FromEntriesSequence(this);
        },
        get: function get2(searchKey, notSetValue) {
          return this.find(function(_, key) {
            return is(key, searchKey);
          }, void 0, notSetValue);
        },
        getIn,
        groupBy: function groupBy(grouper, context) {
          return groupByFactory(this, grouper, context);
        },
        has: function has2(searchKey) {
          return this.get(searchKey, NOT_SET) !== NOT_SET;
        },
        hasIn,
        isSubset: function isSubset(iter) {
          iter = typeof iter.includes === "function" ? iter : Collection(iter);
          return this.every(function(value) {
            return iter.includes(value);
          });
        },
        isSuperset: function isSuperset(iter) {
          iter = typeof iter.isSubset === "function" ? iter : Collection(iter);
          return iter.isSubset(this);
        },
        keyOf: function keyOf(searchValue) {
          return this.findKey(function(value) {
            return is(value, searchValue);
          });
        },
        keySeq: function keySeq() {
          return this.toSeq().map(keyMapper).toIndexedSeq();
        },
        last: function last(notSetValue) {
          return this.toSeq().reverse().first(notSetValue);
        },
        lastKeyOf: function lastKeyOf(searchValue) {
          return this.toKeyedSeq().reverse().keyOf(searchValue);
        },
        max: function max(comparator) {
          return maxFactory(this, comparator);
        },
        maxBy: function maxBy(mapper, comparator) {
          return maxFactory(this, comparator, mapper);
        },
        min: function min(comparator) {
          return maxFactory(
            this,
            comparator ? neg(comparator) : defaultNegComparator
          );
        },
        minBy: function minBy(mapper, comparator) {
          return maxFactory(
            this,
            comparator ? neg(comparator) : defaultNegComparator,
            mapper
          );
        },
        rest: function rest() {
          return this.slice(1);
        },
        skip: function skip(amount) {
          return amount === 0 ? this : this.slice(Math.max(0, amount));
        },
        skipLast: function skipLast(amount) {
          return amount === 0 ? this : this.slice(0, -Math.max(0, amount));
        },
        skipWhile: function skipWhile(predicate, context) {
          return reify(this, skipWhileFactory(this, predicate, context, true));
        },
        skipUntil: function skipUntil(predicate, context) {
          return this.skipWhile(not(predicate), context);
        },
        sortBy: function sortBy(mapper, comparator) {
          return reify(this, sortFactory(this, comparator, mapper));
        },
        take: function take(amount) {
          return this.slice(0, Math.max(0, amount));
        },
        takeLast: function takeLast(amount) {
          return this.slice(-Math.max(0, amount));
        },
        takeWhile: function takeWhile(predicate, context) {
          return reify(this, takeWhileFactory(this, predicate, context));
        },
        takeUntil: function takeUntil(predicate, context) {
          return this.takeWhile(not(predicate), context);
        },
        update: function update2(fn) {
          return fn(this);
        },
        valueSeq: function valueSeq() {
          return this.toIndexedSeq();
        },
        // ### Hashable Object
        hashCode: function hashCode() {
          return this.__hash || (this.__hash = hashCollection(this));
        }
        // ### Internal
        // abstract __iterate(fn, reverse)
        // abstract __iterator(type, reverse)
      });
      var CollectionPrototype = Collection.prototype;
      CollectionPrototype[IS_COLLECTION_SYMBOL] = true;
      CollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;
      CollectionPrototype.toJSON = CollectionPrototype.toArray;
      CollectionPrototype.__toStringMapper = quoteString;
      CollectionPrototype.inspect = CollectionPrototype.toSource = function() {
        return this.toString();
      };
      CollectionPrototype.chain = CollectionPrototype.flatMap;
      CollectionPrototype.contains = CollectionPrototype.includes;
      mixin(KeyedCollection, {
        // ### More sequential methods
        flip: function flip() {
          return reify(this, flipFactory(this));
        },
        mapEntries: function mapEntries(mapper, context) {
          var this$1$1 = this;
          var iterations = 0;
          return reify(
            this,
            this.toSeq().map(function(v, k) {
              return mapper.call(context, [k, v], iterations++, this$1$1);
            }).fromEntrySeq()
          );
        },
        mapKeys: function mapKeys(mapper, context) {
          var this$1$1 = this;
          return reify(
            this,
            this.toSeq().flip().map(function(k, v) {
              return mapper.call(context, k, v, this$1$1);
            }).flip()
          );
        }
      });
      var KeyedCollectionPrototype = KeyedCollection.prototype;
      KeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;
      KeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;
      KeyedCollectionPrototype.toJSON = toObject;
      KeyedCollectionPrototype.__toStringMapper = function(v, k) {
        return quoteString(k) + ": " + quoteString(v);
      };
      mixin(IndexedCollection, {
        // ### Conversion to other types
        toKeyedSeq: function toKeyedSeq() {
          return new ToKeyedSequence(this, false);
        },
        // ### ES6 Collection methods (ES6 Array and Map)
        filter: function filter(predicate, context) {
          return reify(this, filterFactory(this, predicate, context, false));
        },
        findIndex: function findIndex(predicate, context) {
          var entry = this.findEntry(predicate, context);
          return entry ? entry[0] : -1;
        },
        indexOf: function indexOf(searchValue) {
          var key = this.keyOf(searchValue);
          return key === void 0 ? -1 : key;
        },
        lastIndexOf: function lastIndexOf(searchValue) {
          var key = this.lastKeyOf(searchValue);
          return key === void 0 ? -1 : key;
        },
        reverse: function reverse() {
          return reify(this, reverseFactory(this, false));
        },
        slice: function slice(begin, end) {
          return reify(this, sliceFactory(this, begin, end, false));
        },
        splice: function splice(index, removeNum) {
          var numArgs = arguments.length;
          removeNum = Math.max(removeNum || 0, 0);
          if (numArgs === 0 || numArgs === 2 && !removeNum) {
            return this;
          }
          index = resolveBegin(index, index < 0 ? this.count() : this.size);
          var spliced = this.slice(0, index);
          return reify(
            this,
            numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
          );
        },
        // ### More collection methods
        findLastIndex: function findLastIndex(predicate, context) {
          var entry = this.findLastEntry(predicate, context);
          return entry ? entry[0] : -1;
        },
        first: function first(notSetValue) {
          return this.get(0, notSetValue);
        },
        flatten: function flatten(depth) {
          return reify(this, flattenFactory(this, depth, false));
        },
        get: function get2(index, notSetValue) {
          index = wrapIndex(this, index);
          return index < 0 || this.size === Infinity || this.size !== void 0 && index > this.size ? notSetValue : this.find(function(_, key) {
            return key === index;
          }, void 0, notSetValue);
        },
        has: function has2(index) {
          index = wrapIndex(this, index);
          return index >= 0 && (this.size !== void 0 ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
        },
        interpose: function interpose(separator) {
          return reify(this, interposeFactory(this, separator));
        },
        interleave: function interleave() {
          var collections = [this].concat(arrCopy(arguments));
          var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);
          var interleaved = zipped.flatten(true);
          if (zipped.size) {
            interleaved.size = zipped.size * collections.length;
          }
          return reify(this, interleaved);
        },
        keySeq: function keySeq() {
          return Range(0, this.size);
        },
        last: function last(notSetValue) {
          return this.get(-1, notSetValue);
        },
        skipWhile: function skipWhile(predicate, context) {
          return reify(this, skipWhileFactory(this, predicate, context, false));
        },
        zip: function zip() {
          var collections = [this].concat(arrCopy(arguments));
          return reify(this, zipWithFactory(this, defaultZipper, collections));
        },
        zipAll: function zipAll() {
          var collections = [this].concat(arrCopy(arguments));
          return reify(this, zipWithFactory(this, defaultZipper, collections, true));
        },
        zipWith: function zipWith(zipper) {
          var collections = arrCopy(arguments);
          collections[0] = this;
          return reify(this, zipWithFactory(this, zipper, collections));
        }
      });
      var IndexedCollectionPrototype = IndexedCollection.prototype;
      IndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;
      IndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;
      mixin(SetCollection, {
        // ### ES6 Collection methods (ES6 Array and Map)
        get: function get2(value, notSetValue) {
          return this.has(value) ? value : notSetValue;
        },
        includes: function includes(value) {
          return this.has(value);
        },
        // ### More sequential methods
        keySeq: function keySeq() {
          return this.valueSeq();
        }
      });
      var SetCollectionPrototype = SetCollection.prototype;
      SetCollectionPrototype.has = CollectionPrototype.includes;
      SetCollectionPrototype.contains = SetCollectionPrototype.includes;
      SetCollectionPrototype.keys = SetCollectionPrototype.values;
      mixin(KeyedSeq, KeyedCollectionPrototype);
      mixin(IndexedSeq, IndexedCollectionPrototype);
      mixin(SetSeq, SetCollectionPrototype);
      function reduce(collection, reducer, reduction, context, useFirst, reverse) {
        assertNotInfinite(collection.size);
        collection.__iterate(function(v, k, c) {
          if (useFirst) {
            useFirst = false;
            reduction = v;
          } else {
            reduction = reducer.call(context, reduction, v, k, c);
          }
        }, reverse);
        return reduction;
      }
      function keyMapper(v, k) {
        return k;
      }
      function entryMapper(v, k) {
        return [k, v];
      }
      function not(predicate) {
        return function() {
          return !predicate.apply(this, arguments);
        };
      }
      function neg(predicate) {
        return function() {
          return -predicate.apply(this, arguments);
        };
      }
      function defaultZipper() {
        return arrCopy(arguments);
      }
      function defaultNegComparator(a, b) {
        return a < b ? 1 : a > b ? -1 : 0;
      }
      function hashCollection(collection) {
        if (collection.size === Infinity) {
          return 0;
        }
        var ordered = isOrdered(collection);
        var keyed = isKeyed(collection);
        var h = ordered ? 1 : 0;
        var size = collection.__iterate(
          keyed ? ordered ? function(v, k) {
            h = 31 * h + hashMerge(hash(v), hash(k)) | 0;
          } : function(v, k) {
            h = h + hashMerge(hash(v), hash(k)) | 0;
          } : ordered ? function(v) {
            h = 31 * h + hash(v) | 0;
          } : function(v) {
            h = h + hash(v) | 0;
          }
        );
        return murmurHashOfSize(size, h);
      }
      function murmurHashOfSize(size, h) {
        h = imul(h, 3432918353);
        h = imul(h << 15 | h >>> -15, 461845907);
        h = imul(h << 13 | h >>> -13, 5);
        h = (h + 3864292196 | 0) ^ size;
        h = imul(h ^ h >>> 16, 2246822507);
        h = imul(h ^ h >>> 13, 3266489909);
        h = smi(h ^ h >>> 16);
        return h;
      }
      function hashMerge(a, b) {
        return a ^ b + 2654435769 + (a << 6) + (a >> 2) | 0;
      }
      var OrderedSet = /* @__PURE__ */ function(Set3) {
        function OrderedSet2(value) {
          return value === void 0 || value === null ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function(set2) {
            var iter = SetCollection(value);
            assertNotInfinite(iter.size);
            iter.forEach(function(v) {
              return set2.add(v);
            });
          });
        }
        if (Set3)
          OrderedSet2.__proto__ = Set3;
        OrderedSet2.prototype = Object.create(Set3 && Set3.prototype);
        OrderedSet2.prototype.constructor = OrderedSet2;
        OrderedSet2.of = function of() {
          return this(arguments);
        };
        OrderedSet2.fromKeys = function fromKeys(value) {
          return this(KeyedCollection(value).keySeq());
        };
        OrderedSet2.prototype.toString = function toString2() {
          return this.__toString("OrderedSet {", "}");
        };
        return OrderedSet2;
      }(Set2);
      OrderedSet.isOrderedSet = isOrderedSet;
      var OrderedSetPrototype = OrderedSet.prototype;
      OrderedSetPrototype[IS_ORDERED_SYMBOL] = true;
      OrderedSetPrototype.zip = IndexedCollectionPrototype.zip;
      OrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;
      OrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;
      OrderedSetPrototype.__empty = emptyOrderedSet;
      OrderedSetPrototype.__make = makeOrderedSet;
      function makeOrderedSet(map, ownerID) {
        var set2 = Object.create(OrderedSetPrototype);
        set2.size = map ? map.size : 0;
        set2._map = map;
        set2.__ownerID = ownerID;
        return set2;
      }
      var EMPTY_ORDERED_SET;
      function emptyOrderedSet() {
        return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
      }
      var PairSorting = {
        LeftThenRight: -1,
        RightThenLeft: 1
      };
      function throwOnInvalidDefaultValues(defaultValues) {
        if (isRecord(defaultValues)) {
          throw new Error(
            "Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead."
          );
        }
        if (isImmutable(defaultValues)) {
          throw new Error(
            "Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead."
          );
        }
        if (defaultValues === null || typeof defaultValues !== "object") {
          throw new Error(
            "Can not call `Record` with a non-object as default values. Use a plain javascript object instead."
          );
        }
      }
      var Record = function Record2(defaultValues, name) {
        var hasInitialized;
        throwOnInvalidDefaultValues(defaultValues);
        var RecordType = function Record3(values) {
          var this$1$1 = this;
          if (values instanceof RecordType) {
            return values;
          }
          if (!(this instanceof RecordType)) {
            return new RecordType(values);
          }
          if (!hasInitialized) {
            hasInitialized = true;
            var keys = Object.keys(defaultValues);
            var indices = RecordTypePrototype._indices = {};
            RecordTypePrototype._name = name;
            RecordTypePrototype._keys = keys;
            RecordTypePrototype._defaultValues = defaultValues;
            for (var i2 = 0; i2 < keys.length; i2++) {
              var propName = keys[i2];
              indices[propName] = i2;
              if (RecordTypePrototype[propName]) {
                typeof console === "object" && console.warn && console.warn(
                  "Cannot define " + recordName(this) + ' with property "' + propName + '" since that property name is part of the Record API.'
                );
              } else {
                setProp(RecordTypePrototype, propName);
              }
            }
          }
          this.__ownerID = void 0;
          this._values = List().withMutations(function(l) {
            l.setSize(this$1$1._keys.length);
            KeyedCollection(values).forEach(function(v, k) {
              l.set(this$1$1._indices[k], v === this$1$1._defaultValues[k] ? void 0 : v);
            });
          });
          return this;
        };
        var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
        RecordTypePrototype.constructor = RecordType;
        if (name) {
          RecordType.displayName = name;
        }
        return RecordType;
      };
      Record.prototype.toString = function toString2() {
        var str = recordName(this) + " { ";
        var keys = this._keys;
        var k;
        for (var i2 = 0, l = keys.length; i2 !== l; i2++) {
          k = keys[i2];
          str += (i2 ? ", " : "") + k + ": " + quoteString(this.get(k));
        }
        return str + " }";
      };
      Record.prototype.equals = function equals(other) {
        return this === other || isRecord(other) && recordSeq(this).equals(recordSeq(other));
      };
      Record.prototype.hashCode = function hashCode() {
        return recordSeq(this).hashCode();
      };
      Record.prototype.has = function has2(k) {
        return this._indices.hasOwnProperty(k);
      };
      Record.prototype.get = function get2(k, notSetValue) {
        if (!this.has(k)) {
          return notSetValue;
        }
        var index = this._indices[k];
        var value = this._values.get(index);
        return value === void 0 ? this._defaultValues[k] : value;
      };
      Record.prototype.set = function set2(k, v) {
        if (this.has(k)) {
          var newValues = this._values.set(
            this._indices[k],
            v === this._defaultValues[k] ? void 0 : v
          );
          if (newValues !== this._values && !this.__ownerID) {
            return makeRecord(this, newValues);
          }
        }
        return this;
      };
      Record.prototype.remove = function remove2(k) {
        return this.set(k);
      };
      Record.prototype.clear = function clear() {
        var newValues = this._values.clear().setSize(this._keys.length);
        return this.__ownerID ? this : makeRecord(this, newValues);
      };
      Record.prototype.wasAltered = function wasAltered2() {
        return this._values.wasAltered();
      };
      Record.prototype.toSeq = function toSeq() {
        return recordSeq(this);
      };
      Record.prototype.toJS = function toJS$1() {
        return toJS(this);
      };
      Record.prototype.entries = function entries() {
        return this.__iterator(ITERATE_ENTRIES);
      };
      Record.prototype.__iterator = function __iterator(type, reverse) {
        return recordSeq(this).__iterator(type, reverse);
      };
      Record.prototype.__iterate = function __iterate(fn, reverse) {
        return recordSeq(this).__iterate(fn, reverse);
      };
      Record.prototype.__ensureOwner = function __ensureOwner(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }
        var newValues = this._values.__ensureOwner(ownerID);
        if (!ownerID) {
          this.__ownerID = ownerID;
          this._values = newValues;
          return this;
        }
        return makeRecord(this, newValues, ownerID);
      };
      Record.isRecord = isRecord;
      Record.getDescriptiveName = recordName;
      var RecordPrototype = Record.prototype;
      RecordPrototype[IS_RECORD_SYMBOL] = true;
      RecordPrototype[DELETE] = RecordPrototype.remove;
      RecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;
      RecordPrototype.getIn = getIn;
      RecordPrototype.hasIn = CollectionPrototype.hasIn;
      RecordPrototype.merge = merge$1;
      RecordPrototype.mergeWith = mergeWith$1;
      RecordPrototype.mergeIn = mergeIn;
      RecordPrototype.mergeDeep = mergeDeep;
      RecordPrototype.mergeDeepWith = mergeDeepWith;
      RecordPrototype.mergeDeepIn = mergeDeepIn;
      RecordPrototype.setIn = setIn;
      RecordPrototype.update = update;
      RecordPrototype.updateIn = updateIn;
      RecordPrototype.withMutations = withMutations;
      RecordPrototype.asMutable = asMutable;
      RecordPrototype.asImmutable = asImmutable;
      RecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;
      RecordPrototype.toJSON = RecordPrototype.toObject = CollectionPrototype.toObject;
      RecordPrototype.inspect = RecordPrototype.toSource = function() {
        return this.toString();
      };
      function makeRecord(likeRecord, values, ownerID) {
        var record = Object.create(Object.getPrototypeOf(likeRecord));
        record._values = values;
        record.__ownerID = ownerID;
        return record;
      }
      function recordName(record) {
        return record.constructor.displayName || record.constructor.name || "Record";
      }
      function recordSeq(record) {
        return keyedSeqFromValue(record._keys.map(function(k) {
          return [k, record.get(k)];
        }));
      }
      function setProp(prototype, name) {
        try {
          Object.defineProperty(prototype, name, {
            get: function() {
              return this.get(name);
            },
            set: function(value) {
              invariant(this.__ownerID, "Cannot set on an immutable record.");
              this.set(name, value);
            }
          });
        } catch (error2) {
        }
      }
      var Repeat = /* @__PURE__ */ function(IndexedSeq2) {
        function Repeat2(value, times) {
          if (!(this instanceof Repeat2)) {
            return new Repeat2(value, times);
          }
          this._value = value;
          this.size = times === void 0 ? Infinity : Math.max(0, times);
          if (this.size === 0) {
            if (EMPTY_REPEAT) {
              return EMPTY_REPEAT;
            }
            EMPTY_REPEAT = this;
          }
        }
        if (IndexedSeq2)
          Repeat2.__proto__ = IndexedSeq2;
        Repeat2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
        Repeat2.prototype.constructor = Repeat2;
        Repeat2.prototype.toString = function toString2() {
          if (this.size === 0) {
            return "Repeat []";
          }
          return "Repeat [ " + this._value + " " + this.size + " times ]";
        };
        Repeat2.prototype.get = function get2(index, notSetValue) {
          return this.has(index) ? this._value : notSetValue;
        };
        Repeat2.prototype.includes = function includes(searchValue) {
          return is(this._value, searchValue);
        };
        Repeat2.prototype.slice = function slice(begin, end) {
          var size = this.size;
          return wholeSlice(begin, end, size) ? this : new Repeat2(
            this._value,
            resolveEnd(end, size) - resolveBegin(begin, size)
          );
        };
        Repeat2.prototype.reverse = function reverse() {
          return this;
        };
        Repeat2.prototype.indexOf = function indexOf(searchValue) {
          if (is(this._value, searchValue)) {
            return 0;
          }
          return -1;
        };
        Repeat2.prototype.lastIndexOf = function lastIndexOf(searchValue) {
          if (is(this._value, searchValue)) {
            return this.size;
          }
          return -1;
        };
        Repeat2.prototype.__iterate = function __iterate(fn, reverse) {
          var size = this.size;
          var i2 = 0;
          while (i2 !== size) {
            if (fn(this._value, reverse ? size - ++i2 : i2++, this) === false) {
              break;
            }
          }
          return i2;
        };
        Repeat2.prototype.__iterator = function __iterator(type, reverse) {
          var this$1$1 = this;
          var size = this.size;
          var i2 = 0;
          return new Iterator(
            function() {
              return i2 === size ? iteratorDone() : iteratorValue(type, reverse ? size - ++i2 : i2++, this$1$1._value);
            }
          );
        };
        Repeat2.prototype.equals = function equals(other) {
          return other instanceof Repeat2 ? is(this._value, other._value) : deepEqual(other);
        };
        return Repeat2;
      }(IndexedSeq);
      var EMPTY_REPEAT;
      function fromJS(value, converter) {
        return fromJSWith(
          [],
          converter || defaultConverter,
          value,
          "",
          converter && converter.length > 2 ? [] : void 0,
          { "": value }
        );
      }
      function fromJSWith(stack, converter, value, key, keyPath, parentValue) {
        if (typeof value !== "string" && !isImmutable(value) && (isArrayLike(value) || hasIterator(value) || isPlainObject(value))) {
          if (~stack.indexOf(value)) {
            throw new TypeError("Cannot convert circular structure to Immutable");
          }
          stack.push(value);
          keyPath && key !== "" && keyPath.push(key);
          var converted = converter.call(
            parentValue,
            key,
            Seq(value).map(
              function(v, k) {
                return fromJSWith(stack, converter, v, k, keyPath, value);
              }
            ),
            keyPath && keyPath.slice()
          );
          stack.pop();
          keyPath && keyPath.pop();
          return converted;
        }
        return value;
      }
      function defaultConverter(k, v) {
        return isIndexed(v) ? v.toList() : isKeyed(v) ? v.toMap() : v.toSet();
      }
      var version = "4.3.4";
      var Immutable = {
        version,
        Collection,
        // Note: Iterable is deprecated
        Iterable: Collection,
        Seq,
        Map: Map2,
        OrderedMap,
        List,
        Stack,
        Set: Set2,
        OrderedSet,
        PairSorting,
        Record,
        Range,
        Repeat,
        is,
        fromJS,
        hash,
        isImmutable,
        isCollection,
        isKeyed,
        isIndexed,
        isAssociative,
        isOrdered,
        isValueObject,
        isPlainObject,
        isSeq,
        isList,
        isMap,
        isOrderedMap,
        isStack,
        isSet,
        isOrderedSet,
        isRecord,
        get,
        getIn: getIn$1,
        has,
        hasIn: hasIn$1,
        merge,
        mergeDeep: mergeDeep$1,
        mergeWith,
        mergeDeepWith: mergeDeepWith$1,
        remove,
        removeIn,
        set,
        setIn: setIn$1,
        update: update$1,
        updateIn: updateIn$1
      };
      var Iterable = Collection;
      exports2.Collection = Collection;
      exports2.Iterable = Iterable;
      exports2.List = List;
      exports2.Map = Map2;
      exports2.OrderedMap = OrderedMap;
      exports2.OrderedSet = OrderedSet;
      exports2.PairSorting = PairSorting;
      exports2.Range = Range;
      exports2.Record = Record;
      exports2.Repeat = Repeat;
      exports2.Seq = Seq;
      exports2.Set = Set2;
      exports2.Stack = Stack;
      exports2.default = Immutable;
      exports2.fromJS = fromJS;
      exports2.get = get;
      exports2.getIn = getIn$1;
      exports2.has = has;
      exports2.hasIn = hasIn$1;
      exports2.hash = hash;
      exports2.is = is;
      exports2.isAssociative = isAssociative;
      exports2.isCollection = isCollection;
      exports2.isImmutable = isImmutable;
      exports2.isIndexed = isIndexed;
      exports2.isKeyed = isKeyed;
      exports2.isList = isList;
      exports2.isMap = isMap;
      exports2.isOrdered = isOrdered;
      exports2.isOrderedMap = isOrderedMap;
      exports2.isOrderedSet = isOrderedSet;
      exports2.isPlainObject = isPlainObject;
      exports2.isRecord = isRecord;
      exports2.isSeq = isSeq;
      exports2.isSet = isSet;
      exports2.isStack = isStack;
      exports2.isValueObject = isValueObject;
      exports2.merge = merge;
      exports2.mergeDeep = mergeDeep$1;
      exports2.mergeDeepWith = mergeDeepWith$1;
      exports2.mergeWith = mergeWith;
      exports2.remove = remove;
      exports2.removeIn = removeIn;
      exports2.set = set;
      exports2.setIn = setIn$1;
      exports2.update = update$1;
      exports2.updateIn = updateIn$1;
      exports2.version = version;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/@comunica/core/lib/ActionContext.js
var require_ActionContext = __commonJS({
  "node_modules/@comunica/core/lib/ActionContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionContextKey = exports.ActionContext = void 0;
    var immutable_1 = require_immutable();
    var ActionContext = class _ActionContext {
      constructor(data = {}) {
        this.map = (0, immutable_1.Map)(data);
      }
      /**
       * Will only set the value if the key is not already set.
       */
      setDefault(key, value) {
        return this.has(key) ? this : this.set(key, value);
      }
      set(key, value) {
        return this.setRaw(key.name, value);
      }
      setRaw(key, value) {
        return new _ActionContext(this.map.set(key, value));
      }
      delete(key) {
        return new _ActionContext(this.map.delete(key.name));
      }
      get(key) {
        return this.getRaw(key.name);
      }
      getRaw(key) {
        return this.map.get(key);
      }
      getSafe(key) {
        if (!this.has(key)) {
          throw new Error(`Context entry ${key.name} is required but not available`);
        }
        return this.get(key);
      }
      has(key) {
        return this.hasRaw(key.name);
      }
      hasRaw(key) {
        return this.map.has(key);
      }
      merge(...contexts) {
        let context = this;
        for (const source of contexts) {
          for (const key of source.keys()) {
            context = context.set(key, source.get(key));
          }
        }
        return context;
      }
      keys() {
        return [...this.map.keys()].map((keyName) => new ActionContextKey(keyName));
      }
      toJS() {
        return this.map.toJS();
      }
      toString() {
        return `ActionContext(${JSON.stringify(this.map.toJS())})`;
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return `ActionContext(${JSON.stringify(this.map.toJS(), null, "  ")})`;
      }
      /**
       * Convert the given object to an action context object if it is not an action context object yet.
       * If it already is an action context object, return the object as-is.
       * @param maybeActionContext An action context or record.
       * @return {ActionContext} An action context object.
       */
      static ensureActionContext(maybeActionContext) {
        return maybeActionContext instanceof _ActionContext ? maybeActionContext : new _ActionContext((0, immutable_1.Map)(maybeActionContext || {}));
      }
    };
    exports.ActionContext = ActionContext;
    var ActionContextKey = class {
      constructor(name) {
        this.name = name;
      }
    };
    exports.ActionContextKey = ActionContextKey;
  }
});

// node_modules/@comunica/core/lib/Bus.js
var require_Bus = __commonJS({
  "node_modules/@comunica/core/lib/Bus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Bus = void 0;
    var Bus = class {
      /**
       * All enumerable properties from the `args` object are inherited to this bus.
       *
       * @param {IBusArgs} args Arguments object
       * @param {string} args.name The name for the bus
       * @throws When required arguments are missing.
       */
      constructor(args) {
        this.actors = [];
        this.observers = [];
        this.dependencyLinks = /* @__PURE__ */ new Map();
        Object.assign(this, args);
      }
      /**
       * Subscribe the given actor to the bus.
       * After this, the given actor can be unsubscribed from the bus by calling {@link Bus#unsubscribe}.
       *
       * An actor that is subscribed multiple times will exist that amount of times in the bus.
       *
       * @param {A} actor The actor to subscribe.
       */
      subscribe(actor) {
        this.actors.push(actor);
        this.reorderForDependencies();
      }
      /**
       * Subscribe the given observer to the bus.
       * After this, the given observer can be unsubscribed from the bus by calling {@link Bus#unsubscribeObserver}.
       *
       * An observer that is subscribed multiple times will exist that amount of times in the bus.
       *
       * @param {ActionObserver<I, O>} observer The observer to subscribe.
       */
      subscribeObserver(observer) {
        this.observers.push(observer);
      }
      /**
       * Unsubscribe the given actor from the bus.
       *
       * An actor that is subscribed multiple times will be unsubscribed only once.
       *
       * @param {A} actor The actor to unsubscribe
       * @return {boolean} If the given actor was successfully unsubscribed,
       *         otherwise it was not subscribed before.
       */
      unsubscribe(actor) {
        const index = this.actors.indexOf(actor);
        if (index >= 0) {
          this.actors.splice(index, 1);
          return true;
        }
        return false;
      }
      /**
       * Unsubscribe the given observer from the bus.
       *
       * An observer that is subscribed multiple times will be unsubscribed only once.
       *
       * @param {ActionObserver<I, O>} observer The observer to unsubscribe.
       * @return {boolean} If the given observer was successfully unsubscribed,
       *         otherwise it was not subscribed before.
       */
      unsubscribeObserver(observer) {
        const index = this.observers.indexOf(observer);
        if (index >= 0) {
          this.observers.splice(index, 1);
          return true;
        }
        return false;
      }
      /**
       * Publish an action to all actors in the bus to test if they can run the action.
       *
       * @param {I} action An action to publish
       * @return {IActorReply<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest,
       *         O extends IActorOutput>[]}
       *         An array of reply objects. Each object contains a reference to the actor,
       *         and a promise to its {@link Actor#test} result.
       */
      publish(action) {
        return this.actors.map((actor) => ({ actor, reply: actor.test(action) }));
      }
      /**
       * Invoked when an action was run by an actor.
       *
       * @param actor               The action on which the {@link Actor#run} method was invoked.
       * @param {I}          action The original action input.
       * @param {Promise<O>} output A promise resolving to the final action output.
       */
      onRun(actor, action, output) {
        for (const observer of this.observers) {
          observer.onRun(actor, action, output);
        }
      }
      /**
       * Indicate that the given actor has the given actor dependencies.
       *
       * This will ensure that the given actor will be present in the bus *before* the given dependencies.
       *
       * @param {A} dependent A dependent actor that will be placed before the given actors.
       * @param {A[]} dependencies Actor dependencies that will be placed after the given actor.
       */
      addDependencies(dependent, dependencies) {
        for (const dependency of dependencies) {
          let existingDependencies = this.dependencyLinks.get(dependency);
          if (!existingDependencies) {
            existingDependencies = [];
            this.dependencyLinks.set(dependency, existingDependencies);
          }
          existingDependencies.push(dependent);
        }
        this.reorderForDependencies();
      }
      /**
       * Reorder the bus based on all present dependencies.
       */
      reorderForDependencies() {
        if (this.dependencyLinks.size > 0) {
          const actorsAfter = [];
          for (const actorAfter of this.dependencyLinks.keys()) {
            const dependentPos = this.actors.indexOf(actorAfter);
            if (dependentPos >= 0) {
              this.actors.splice(dependentPos, 1);
              actorsAfter.push(actorAfter);
            }
          }
          while (actorsAfter.length > 0) {
            let activeActorAfterId = -1;
            for (let i2 = 0; i2 < actorsAfter.length; i2++) {
              let validLink = true;
              for (const dependency of this.dependencyLinks.get(actorsAfter[i2])) {
                if (!this.actors.includes(dependency) && actorsAfter.includes(dependency)) {
                  validLink = false;
                  break;
                }
              }
              if (validLink) {
                activeActorAfterId = i2;
                break;
              }
            }
            if (activeActorAfterId < 0) {
              throw new Error(`Cyclic dependency links detected in bus ${this.name}`);
            }
            const activeActorAfter = actorsAfter.splice(activeActorAfterId, 1)[0];
            this.actors.push(activeActorAfter);
          }
        }
      }
    };
    exports.Bus = Bus;
  }
});

// node_modules/@comunica/core/lib/BusIndexed.js
var require_BusIndexed = __commonJS({
  "node_modules/@comunica/core/lib/BusIndexed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BusIndexed = void 0;
    var Bus_1 = require_Bus();
    var BusIndexed = class extends Bus_1.Bus {
      /**
       * All enumerable properties from the `args` object are inherited to this bus.
       *
       * @param {IBusIndexedArgs} args Arguments object
       * @param {string} args.name The name for the bus
       * @throws When required arguments are missing.
       */
      constructor(args) {
        super(args);
        this.actorsIndex = {};
      }
      subscribe(actor) {
        const actorId = this.getActorIdentifier(actor) || "_undefined_";
        let actors = this.actorsIndex[actorId];
        if (!actors) {
          actors = this.actorsIndex[actorId] = [];
        }
        actors.push(actor);
        super.subscribe(actor);
      }
      unsubscribe(actor) {
        const actorId = this.getActorIdentifier(actor) || "_undefined_";
        const actors = this.actorsIndex[actorId];
        if (actors) {
          const i2 = actors.indexOf(actor);
          if (i2 >= 0) {
            actors.splice(i2, 1);
          }
          if (actors.length === 0) {
            delete this.actorsIndex[actorId];
          }
        }
        return super.unsubscribe(actor);
      }
      publish(action) {
        const actionId = this.getActionIdentifier(action);
        if (actionId) {
          const actors = [...this.actorsIndex[actionId] || [], ...this.actorsIndex._undefined_ || []];
          return actors.map((actor) => ({ actor, reply: actor.test(action) }));
        }
        return super.publish(action);
      }
      getActorIdentifier(actor) {
        return this.actorIdentifierFields.reduce((object, field) => object[field], actor);
      }
      getActionIdentifier(action) {
        return this.actionIdentifierFields.reduce((object, field) => object[field], action);
      }
    };
    exports.BusIndexed = BusIndexed;
  }
});

// node_modules/@comunica/core/lib/ContextEntries.js
var require_ContextEntries = __commonJS({
  "node_modules/@comunica/core/lib/ContextEntries.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CONTEXT_KEY_LOGGER = void 0;
    var ActionContext_1 = require_ActionContext();
    exports.CONTEXT_KEY_LOGGER = new ActionContext_1.ActionContextKey("@comunica/core:log");
  }
});

// node_modules/@comunica/core/lib/ActionObserver.js
var require_ActionObserver = __commonJS({
  "node_modules/@comunica/core/lib/ActionObserver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionObserver = void 0;
    var ActionObserver = class {
      /**
       * All enumerable properties from the `args` object are inherited to this observer.
       *
       * The observer will NOT automatically subscribe to the given bus when this constructor is called.
       *
       * @param {IActionObserverArgs<I extends IAction, O extends IActorOutput>} args Arguments object
       * @throws When required arguments are missing.
       */
      constructor(args) {
        Object.assign(this, args);
      }
    };
    exports.ActionObserver = ActionObserver;
  }
});

// node_modules/@comunica/core/lib/Actor.js
var require_Actor = __commonJS({
  "node_modules/@comunica/core/lib/Actor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Actor = void 0;
    var ContextEntries_1 = require_ContextEntries();
    var Actor = class _Actor {
      /**
       * All enumerable properties from the `args` object are inherited to this actor.
       *
       * The actor will subscribe to the given bus when this constructor is called.
       *
       * @param {IActorArgs<I extends IAction, T extends IActorTest, O extends IActorOutput>} args Arguments object
       * @param {string} args.name The name for this actor.
       * @param {Bus<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput>} args.bus
       *        The bus this actor subscribes to.
       * @throws When required arguments are missing.
       */
      constructor(args) {
        this.beforeActors = [];
        Object.assign(this, args);
        this.bus.subscribe(this);
        if (this.beforeActors.length > 0) {
          this.bus.addDependencies(this, this.beforeActors);
        }
      }
      /**
       * Get the logger from the given context.
       * @param {ActionContext} context An optional context.
       * @return {Logger} The logger or undefined.
       */
      static getContextLogger(context) {
        return context.get(ContextEntries_1.CONTEXT_KEY_LOGGER);
      }
      /**
       * Run the given action on this actor
       * AND invokes the {@link Bus#onRun} method.
       *
       * @param {I} action The action to run.
       * @return {Promise<T>} A promise that resolves to the run result.
       */
      runObservable(action) {
        const output = this.run(action);
        this.bus.onRun(this, action, output);
        return output;
      }
      /**
       * Initialize this actor.
       * This should be used for doing things that take a while,
       * such as opening files.
       *
       * @return {Promise<void>} A promise that resolves when the actor has been initialized.
       */
      async initialize() {
        return true;
      }
      /**
       * Deinitialize this actor.
       * This should be used for cleaning up things when the application is shut down,
       * such as closing files and removing temporary files.
       *
       * @return {Promise<void>} A promise that resolves when the actor has been deinitialized.
       */
      async deinitialize() {
        return true;
      }
      /* Proxy methods for the (optional) logger that is defined in the context */
      getDefaultLogData(context, data) {
        const dataActual = data ? data() : {};
        dataActual.actor = this.name;
        return dataActual;
      }
      logTrace(context, message, data) {
        const logger = _Actor.getContextLogger(context);
        if (logger) {
          logger.trace(message, this.getDefaultLogData(context, data));
        }
      }
      logDebug(context, message, data) {
        const logger = _Actor.getContextLogger(context);
        if (logger) {
          logger.debug(message, this.getDefaultLogData(context, data));
        }
      }
      logInfo(context, message, data) {
        const logger = _Actor.getContextLogger(context);
        if (logger) {
          logger.info(message, this.getDefaultLogData(context, data));
        }
      }
      logWarn(context, message, data) {
        const logger = _Actor.getContextLogger(context);
        if (logger) {
          logger.warn(message, this.getDefaultLogData(context, data));
        }
      }
      logError(context, message, data) {
        const logger = _Actor.getContextLogger(context);
        if (logger) {
          logger.error(message, this.getDefaultLogData(context, data));
        }
      }
      logFatal(context, message, data) {
        const logger = _Actor.getContextLogger(context);
        if (logger) {
          logger.fatal(message, this.getDefaultLogData(context, data));
        }
      }
    };
    exports.Actor = Actor;
  }
});

// node_modules/@comunica/core/lib/Mediator.js
var require_Mediator = __commonJS({
  "node_modules/@comunica/core/lib/Mediator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Mediator = void 0;
    var Mediator = class {
      /**
       * All enumerable properties from the `args` object are inherited to this mediator.
       *
       * @param {IMediatorArgs<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest,
       * O extends IActorOutput>} args Arguments object
       * @param {string} args.name The name for this mediator.
       * @param {Bus<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput>} args.bus
       *        The bus this mediator will mediate over.
       * @throws When required arguments are missing.
       */
      constructor(args) {
        Object.assign(this, args);
      }
      /**
       * Publish the given action in the bus.
       *
       * This will send the test action on all actors in the bus.
       * All actor replies will be returned.
       *
       * @param {I} action The action to mediate for.
       * @return {IActorReply<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput>[]}
       * The list of actor replies.
       */
      publish(action) {
        const actors = this.bus.publish(action);
        if (actors.length === 0) {
          throw new Error(`No actors are able to reply to a message in the bus ${this.bus.name}`);
        }
        return actors;
      }
      /**
       * Mediate for the given action to get an actor.
       *
       * This will send the test action on all actors in the bus.
       * The actor that tests _best_ will be returned.
       *
       * @param {I} action The action to mediate for.
       * @return {Promise<O extends IActorOutput>} A promise that resolves to the _best_ actor.
       */
      async mediateActor(action) {
        return await this.mediateWith(action, this.publish(action));
      }
      /**
       * Mediate for the given action.
       *
       * This will send the test action on all actors in the bus.
       * The action will be run on the actor that tests _best_,
       * of which the result will be returned.
       *
       * @param {I} action The action to mediate for.
       * @return {Promise<O extends IActorOutput>} A promise that resolves to the mediation result.
       */
      async mediate(action) {
        const actor = await this.mediateActor(action);
        return actor.runObservable(action);
      }
    };
    exports.Mediator = Mediator;
  }
});

// node_modules/@comunica/core/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@comunica/core/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Logger = void 0;
    var types_1 = require_lib();
    var Logger = types_1.Logger;
    exports.Logger = Logger;
    __exportStar(require_ActionContext(), exports);
    __exportStar(require_Bus(), exports);
    __exportStar(require_BusIndexed(), exports);
    __exportStar(require_ContextEntries(), exports);
    __exportStar(require_ActionObserver(), exports);
    __exportStar(require_Actor(), exports);
    __exportStar(require_Mediator(), exports);
  }
});

// node_modules/@comunica/bus-init/lib/ActorInit.js
var require_ActorInit = __commonJS({
  "node_modules/@comunica/bus-init/lib/ActorInit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorInit = void 0;
    var core_1 = require_lib2();
    var ActorInit = class extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorInit = ActorInit;
  }
});

// node_modules/@comunica/bus-init/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@comunica/bus-init/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorInit(), exports);
  }
});

// node_modules/@comunica/actor-init-query/lib/ActorInitQueryBase.js
var require_ActorInitQueryBase = __commonJS({
  "node_modules/@comunica/actor-init-query/lib/ActorInitQueryBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorInitQueryBase = void 0;
    var bus_init_1 = require_lib3();
    var ActorInitQueryBase = class extends bus_init_1.ActorInit {
      /**
       * Create new ActorInitQueryBase object.
       * @param args.contextKeyShortcutsExtensions Array of `contextKeyShortcuts` that are merged
       *   with the `contextKeyShortcuts` field. This allows adding shortcuts to the defaults.
       * @throws When duplicate keys are present in `args.contextKeyShortcuts`
       *  and `args.contextKeyShortcutsExtensions`.
       */
      constructor(args) {
        args.contextKeyShortcutsExtensions?.forEach((extensionShortcuts) => {
          if (Object.keys(args.contextKeyShortcuts).some((key) => Object.keys(extensionShortcuts).includes(key))) {
            throw new Error("Duplicate keys found while adding `contextKeyShortcutsExtensions`.");
          }
          args.contextKeyShortcuts = { ...args.contextKeyShortcuts, ...extensionShortcuts };
        });
        super(args);
      }
      async test(action) {
        return true;
      }
      async run(action) {
        throw new Error("ActorInitSparql#run is not supported in the browser.");
      }
    };
    exports.ActorInitQueryBase = ActorInitQueryBase;
  }
});

// node_modules/process/browser.js
var require_browser = __commonJS({
  "node_modules/process/browser.js"(exports, module) {
    var process2 = module.exports = {};
    var cachedSetTimeout;
    var cachedClearTimeout;
    function defaultSetTimout() {
      throw new Error("setTimeout has not been defined");
    }
    function defaultClearTimeout() {
      throw new Error("clearTimeout has not been defined");
    }
    (function() {
      try {
        if (typeof setTimeout === "function") {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        if (typeof clearTimeout === "function") {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    })();
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        return setTimeout(fun, 0);
      }
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e2) {
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        return clearTimeout(marker);
      }
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          return cachedClearTimeout.call(null, marker);
        } catch (e2) {
          return cachedClearTimeout.call(this, marker);
        }
      }
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }
      draining = false;
      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }
      if (queue.length) {
        drainQueue();
      }
    }
    function drainQueue() {
      if (draining) {
        return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }
    process2.nextTick = function(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          args[i2 - 1] = arguments[i2];
        }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    };
    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    process2.title = "browser";
    process2.browser = true;
    process2.env = {};
    process2.argv = [];
    process2.version = "";
    process2.versions = {};
    function noop() {
    }
    process2.on = noop;
    process2.addListener = noop;
    process2.once = noop;
    process2.off = noop;
    process2.removeListener = noop;
    process2.removeAllListeners = noop;
    process2.emit = noop;
    process2.prependListener = noop;
    process2.prependOnceListener = noop;
    process2.listeners = function(name) {
      return [];
    };
    process2.binding = function(name) {
      throw new Error("process.binding is not supported");
    };
    process2.cwd = function() {
      return "/";
    };
    process2.chdir = function(dir) {
      throw new Error("process.chdir is not supported");
    };
    process2.umask = function() {
      return 0;
    };
  }
});

// node_modules/@comunica/actor-init-query/lib/ActorInitQuery-browser.js
var require_ActorInitQuery_browser = __commonJS({
  "node_modules/@comunica/actor-init-query/lib/ActorInitQuery-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorInitQuery = void 0;
    var ActorInitQueryBase_1 = require_ActorInitQueryBase();
    if (typeof process === "undefined") {
      globalThis.process = require_browser();
    }
    var ActorInitQuery = class extends ActorInitQueryBase_1.ActorInitQueryBase {
    };
    exports.ActorInitQuery = ActorInitQuery;
  }
});

// node_modules/@comunica/context-entries/lib/Keys.js
var require_Keys = __commonJS({
  "node_modules/@comunica/context-entries/lib/Keys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KeysRdfUpdateQuads = exports.KeysRdfResolveQuadPattern = exports.KeysRdfParseHtmlScript = exports.KeysRdfParseJsonLd = exports.KeysQueryOperation = exports.KeysInitQuery = exports.KeysHttpProxy = exports.KeysHttpMemento = exports.KeysHttpWayback = exports.KeysHttp = exports.KeysCore = void 0;
    var core_1 = require_lib2();
    exports.KeysCore = {
      // We create the core context keys in @comunica/core to avoid a cyclic dependency
      /**
       * A logger instance.
       */
      log: core_1.CONTEXT_KEY_LOGGER
    };
    exports.KeysHttp = {
      /**
       * Include credentials flags.
       */
      includeCredentials: new core_1.ActionContextKey("@comunica/bus-http:include-credentials"),
      /**
       * Authentication for a source as a "username:password"-pair.
       */
      auth: new core_1.ActionContextKey("@comunica/bus-http:auth"),
      /**
       * Fetch function implementation.
       */
      fetch: new core_1.ActionContextKey("@comunica/bus-http:fetch"),
      /**
       * HTTP request timeout in milliseconds.
       */
      httpTimeout: new core_1.ActionContextKey("@comunica/bus-http:http-timeout"),
      /**
       * Makes the HTTP timeout not only apply until the response starts streaming in
       * but until the response is fully consumed.
       */
      httpBodyTimeout: new core_1.ActionContextKey("@comunica/bus-http:http-body-timeout"),
      /**
       * Number of retries to make on failed network calls. This only takes effect
       * on errors thrown during the initial fetch() call and not while streaming the body.
       */
      httpRetryCount: new core_1.ActionContextKey("@comunica/bus-http:http-retry-count"),
      /**
       * Delay in milliseconds to wait between fetch retries. Requires httpRetryCount to be set.
       */
      httpRetryDelay: new core_1.ActionContextKey("@comunica/bus-http:http-retry-delay"),
      /**
       * Retry fetch, if server replies with a 5xx error response. Requires httpRetryCount to be set.
       */
      httpRetryOnServerError: new core_1.ActionContextKey("@comunica/bus-http:http-retry-on-server-error")
    };
    exports.KeysHttpWayback = {
      /**
       * Use the WayBack machine to get the most recent representation of a file if a link is broken.
       * @default false
       */
      recoverBrokenLinks: new core_1.ActionContextKey("@comunica/bus-http:recover-broken-links")
    };
    exports.KeysHttpMemento = {
      /**
       * The desired datetime for Memento datetime-negotiation.
       */
      datetime: new core_1.ActionContextKey("@comunica/actor-http-memento:datetime")
    };
    exports.KeysHttpProxy = {
      /**
       * Interface.
       */
      httpProxyHandler: new core_1.ActionContextKey("@comunica/actor-http-proxy:httpProxyHandler")
    };
    exports.KeysInitQuery = {
      /**
       * Variables that have to be pre-bound to values in the query.
       */
      initialBindings: new core_1.ActionContextKey("@comunica/actor-init-query:initialBindings"),
      /**
       * The provided query's format.
       * Defaults to { language: 'sparql', version: '1.1' }
       */
      queryFormat: new core_1.ActionContextKey("@comunica/actor-init-query:queryFormat"),
      /**
       * Which GraphQL bindings should be singularized.
       */
      graphqlSingularizeVariables: new core_1.ActionContextKey("@comunica/actor-init-query:singularizeVariables"),
      /**
       * If HTTP and parsing failures are ignored.
       */
      lenient: new core_1.ActionContextKey("@comunica/actor-init-query:lenient"),
      /**
       * The original query string.
       */
      queryString: new core_1.ActionContextKey("@comunica/actor-init-query:queryString"),
      /**
       * The original parsed query.
       */
      query: new core_1.ActionContextKey("@comunica/actor-init-query:query"),
      /**
       * The query's base IRI.
       */
      baseIRI: new core_1.ActionContextKey("@comunica/actor-init-query:baseIRI"),
      /**
       * Object to cache function argument overload resolutions.
       * Defaults to an object that is reused across query executions.
       */
      functionArgumentsCache: new core_1.ActionContextKey("@comunica/actor-init-query:functionArgumentsCache"),
      /**
       * A timestamp representing the current time.
       *                 This is required for certain SPARQL operations such as NOW().
       */
      queryTimestamp: new core_1.ActionContextKey("@comunica/actor-init-query:queryTimestamp"),
      /**
       * @range {functionNamedNode: RDF.NamedNode) => ((args: RDF.Term[]) => Promise<RDF.Term>) | undefined}
       * Extension function creator for a given function IRI.
       * Returned value should be an async function implementation.
       * Undefined may be returned if no implementation exists for the given function IRI.
       *
       * The dictionary-based extensionFunctions context entry may be used instead, but not simultaneously.
       */
      extensionFunctionCreator: new core_1.ActionContextKey("@comunica/actor-init-query:extensionFunctionCreator"),
      /**
       * Dictionary of extension functions.
       * Key is the IRI of the function, and value is the async function implementation.
       *
       * The callback-based extensionFunctionCreator context entry may be used instead, but not simultaneously.
       */
      extensionFunctions: new core_1.ActionContextKey("@comunica/actor-init-query:extensionFunctions"),
      /**
       * Enables manipulation of the CLI arguments and their processing.
       */
      cliArgsHandlers: new core_1.ActionContextKey("@comunica/actor-init-query:cliArgsHandlers"),
      /**
       * Explain mode of the query. Can be 'parsed', 'logical', or 'physical'.
       */
      explain: new core_1.ActionContextKey("@comunica/actor-init-query:explain"),
      /**
       * Logs the used physical operators
       */
      physicalQueryPlanLogger: new core_1.ActionContextKey("@comunica/actor-init-query:physicalQueryPlanLogger"),
      /**
       * The current physical operator within the query plan.
       *              This is used to pass parent-child relationships for invoking the query plan logger.
       */
      physicalQueryPlanNode: new core_1.ActionContextKey("@comunica/actor-init-query:physicalQueryPlanNode"),
      /**
       * A JSON-LD context
       */
      jsonLdContext: new core_1.ActionContextKey("@context")
    };
    exports.KeysQueryOperation = {
      /**
       * Context entry for the current query operation.
       */
      operation: new core_1.ActionContextKey("@comunica/bus-query-operation:operation"),
      /**
       * @type {any} The metadata from the left streams within a join operation.
       */
      joinLeftMetadata: new core_1.ActionContextKey("@comunica/bus-query-operation:joinLeftMetadata"),
      /**
       * An array of metadata from the right streams within a join operation.
       */
      joinRightMetadatas: new core_1.ActionContextKey("@comunica/bus-query-operation:joinRightMetadatas"),
      /**
       * Indicates the bindings that were used to bind the operation.
       */
      joinBindings: new core_1.ActionContextKey("@comunica/bus-query-operation:joinBindings"),
      /**
       * Flag for indicating that only read operations are allowed, defaults to false.
       */
      readOnly: new core_1.ActionContextKey("@comunica/bus-query-operation:readOnly"),
      /**
       * An internal context entry to mark that a property path with arbitrary length and a distinct key is being processed.
       */
      isPathArbitraryLengthDistinctKey: new core_1.ActionContextKey("@comunica/bus-query-operation:isPathArbitraryLengthDistinct"),
      /**
       * An indicator that the stream will be limited to the given number of elements afterwards.
       */
      limitIndicator: new core_1.ActionContextKey("@comunica/bus-query-operation:limitIndicator"),
      /**
       * If the default graph should also contain the union of all named graphs.
       */
      unionDefaultGraph: new core_1.ActionContextKey("@comunica/bus-query-operation:unionDefaultGraph")
    };
    exports.KeysRdfParseJsonLd = {
      /**
       * @range {IDocumentLoader}
       */
      documentLoader: new core_1.ActionContextKey("@comunica/actor-rdf-parse-jsonld:documentLoader"),
      /**
       * @range {boolean}
       */
      strictValues: new core_1.ActionContextKey("@comunica/actor-rdf-parse-jsonld:strictValues"),
      /**
       * @range {Record<string, any>}
       */
      parserOptions: new core_1.ActionContextKey("@comunica/actor-rdf-parse-jsonld:parserOptions")
    };
    exports.KeysRdfParseHtmlScript = {
      /**
       * An internal context flag to determine if the engine is already processing an HTML script tag.
       */
      processingHtmlScript: new core_1.ActionContextKey("@comunica/actor-rdf-parse-html-script:processingHtmlScript"),
      /**
       * If all HTML script tags must be considered.
       */
      extractAllScripts: new core_1.ActionContextKey("extractAllScripts")
    };
    exports.KeysRdfResolveQuadPattern = {
      /**
       * Data sources.
       */
      sources: new core_1.ActionContextKey("@comunica/bus-rdf-resolve-quad-pattern:sources"),
      /**
       * A data source.
       */
      source: new core_1.ActionContextKey("@comunica/bus-rdf-resolve-quad-pattern:source"),
      /**
       * A map containing unique IDs for each source
       */
      sourceIds: new core_1.ActionContextKey("@comunica/bus-rdf-resolve-quad-pattern:sourceIds"),
      /**
       * Hypermedia sources mapping to their aggregated store.
       */
      hypermediaSourcesAggregatedStores: new core_1.ActionContextKey("@comunica/bus-rdf-resolve-quad-pattern:hypermediaSourcesAggregatedStores")
    };
    exports.KeysRdfUpdateQuads = {
      /**
       * A data destination.
       */
      destination: new core_1.ActionContextKey("@comunica/bus-rdf-update-quads:destination")
    };
  }
});

// node_modules/@comunica/context-entries/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/@comunica/context-entries/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Keys(), exports);
  }
});

// node_modules/@comunica/data-factory/lib/BlankNodeScoped.js
var require_BlankNodeScoped = __commonJS({
  "node_modules/@comunica/data-factory/lib/BlankNodeScoped.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlankNodeScoped = void 0;
    var BlankNodeScoped = class {
      constructor(value, skolemized) {
        this.termType = "BlankNode";
        this.value = value;
        this.skolemized = skolemized;
      }
      equals(other) {
        return !!other && other.termType === "BlankNode" && other.value === this.value;
      }
    };
    exports.BlankNodeScoped = BlankNodeScoped;
  }
});

// node_modules/@comunica/data-factory/lib/BlankNodeBindingsScoped.js
var require_BlankNodeBindingsScoped = __commonJS({
  "node_modules/@comunica/data-factory/lib/BlankNodeBindingsScoped.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlankNodeBindingsScoped = void 0;
    var BlankNodeBindingsScoped = class {
      constructor(value) {
        this.termType = "BlankNode";
        this.singleBindingsScope = true;
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "BlankNode" && other.value === this.value;
      }
    };
    exports.BlankNodeBindingsScoped = BlankNodeBindingsScoped;
  }
});

// node_modules/@comunica/data-factory/lib/index.js
var require_lib5 = __commonJS({
  "node_modules/@comunica/data-factory/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_BlankNodeScoped(), exports);
    __exportStar(require_BlankNodeBindingsScoped(), exports);
  }
});

// node_modules/rdf-data-factory/lib/BlankNode.js
var require_BlankNode = __commonJS({
  "node_modules/rdf-data-factory/lib/BlankNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlankNode = void 0;
    var BlankNode2 = class {
      constructor(value) {
        this.termType = "BlankNode";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "BlankNode" && other.value === this.value;
      }
    };
    exports.BlankNode = BlankNode2;
  }
});

// node_modules/rdf-data-factory/lib/DefaultGraph.js
var require_DefaultGraph = __commonJS({
  "node_modules/rdf-data-factory/lib/DefaultGraph.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultGraph = void 0;
    var DefaultGraph2 = class {
      constructor() {
        this.termType = "DefaultGraph";
        this.value = "";
      }
      equals(other) {
        return !!other && other.termType === "DefaultGraph";
      }
    };
    exports.DefaultGraph = DefaultGraph2;
    DefaultGraph2.INSTANCE = new DefaultGraph2();
  }
});

// node_modules/rdf-data-factory/lib/NamedNode.js
var require_NamedNode = __commonJS({
  "node_modules/rdf-data-factory/lib/NamedNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NamedNode = void 0;
    var NamedNode2 = class {
      constructor(value) {
        this.termType = "NamedNode";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "NamedNode" && other.value === this.value;
      }
    };
    exports.NamedNode = NamedNode2;
  }
});

// node_modules/rdf-data-factory/lib/Literal.js
var require_Literal = __commonJS({
  "node_modules/rdf-data-factory/lib/Literal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Literal = void 0;
    var NamedNode_1 = require_NamedNode();
    var Literal2 = class _Literal {
      constructor(value, languageOrDatatype) {
        this.termType = "Literal";
        this.value = value;
        if (typeof languageOrDatatype === "string") {
          this.language = languageOrDatatype;
          this.datatype = _Literal.RDF_LANGUAGE_STRING;
        } else if (languageOrDatatype) {
          this.language = "";
          this.datatype = languageOrDatatype;
        } else {
          this.language = "";
          this.datatype = _Literal.XSD_STRING;
        }
      }
      equals(other) {
        return !!other && other.termType === "Literal" && other.value === this.value && other.language === this.language && this.datatype.equals(other.datatype);
      }
    };
    exports.Literal = Literal2;
    Literal2.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#langString");
    Literal2.XSD_STRING = new NamedNode_1.NamedNode("http://www.w3.org/2001/XMLSchema#string");
  }
});

// node_modules/rdf-data-factory/lib/Quad.js
var require_Quad = __commonJS({
  "node_modules/rdf-data-factory/lib/Quad.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Quad = void 0;
    var Quad2 = class {
      constructor(subject, predicate, object, graph) {
        this.termType = "Quad";
        this.value = "";
        this.subject = subject;
        this.predicate = predicate;
        this.object = object;
        this.graph = graph;
      }
      equals(other) {
        return !!other && (other.termType === "Quad" || !other.termType) && this.subject.equals(other.subject) && this.predicate.equals(other.predicate) && this.object.equals(other.object) && this.graph.equals(other.graph);
      }
    };
    exports.Quad = Quad2;
  }
});

// node_modules/rdf-data-factory/lib/Variable.js
var require_Variable = __commonJS({
  "node_modules/rdf-data-factory/lib/Variable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Variable = void 0;
    var Variable2 = class {
      constructor(value) {
        this.termType = "Variable";
        this.value = value;
      }
      equals(other) {
        return !!other && other.termType === "Variable" && other.value === this.value;
      }
    };
    exports.Variable = Variable2;
  }
});

// node_modules/rdf-data-factory/lib/DataFactory.js
var require_DataFactory = __commonJS({
  "node_modules/rdf-data-factory/lib/DataFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataFactory = void 0;
    var BlankNode_1 = require_BlankNode();
    var DefaultGraph_1 = require_DefaultGraph();
    var Literal_1 = require_Literal();
    var NamedNode_1 = require_NamedNode();
    var Quad_1 = require_Quad();
    var Variable_1 = require_Variable();
    var dataFactoryCounter = 0;
    var DataFactory3 = class {
      constructor(options) {
        this.blankNodeCounter = 0;
        options = options || {};
        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;
      }
      /**
       * @param value The IRI for the named node.
       * @return A new instance of NamedNode.
       * @see NamedNode
       */
      namedNode(value) {
        return new NamedNode_1.NamedNode(value);
      }
      /**
       * @param value The optional blank node identifier.
       * @return A new instance of BlankNode.
       *         If the `value` parameter is undefined a new identifier
       *         for the blank node is generated for each call.
       * @see BlankNode
       */
      blankNode(value) {
        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);
      }
      /**
       * @param value              The literal value.
       * @param languageOrDatatype The optional language or datatype.
       *                           If `languageOrDatatype` is a NamedNode,
       *                           then it is used for the value of `NamedNode.datatype`.
       *                           Otherwise `languageOrDatatype` is used for the value
       *                           of `NamedNode.language`.
       * @return A new instance of Literal.
       * @see Literal
       */
      literal(value, languageOrDatatype) {
        return new Literal_1.Literal(value, languageOrDatatype);
      }
      /**
       * This method is optional.
       * @param value The variable name
       * @return A new instance of Variable.
       * @see Variable
       */
      variable(value) {
        return new Variable_1.Variable(value);
      }
      /**
       * @return An instance of DefaultGraph.
       */
      defaultGraph() {
        return DefaultGraph_1.DefaultGraph.INSTANCE;
      }
      /**
       * @param subject   The quad subject term.
       * @param predicate The quad predicate term.
       * @param object    The quad object term.
       * @param graph     The quad graph term.
       * @return A new instance of Quad.
       * @see Quad
       */
      quad(subject, predicate, object, graph) {
        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());
      }
      /**
       * Create a deep copy of the given term using this data factory.
       * @param original An RDF term.
       * @return A deep copy of the given term.
       */
      fromTerm(original) {
        switch (original.termType) {
          case "NamedNode":
            return this.namedNode(original.value);
          case "BlankNode":
            return this.blankNode(original.value);
          case "Literal":
            if (original.language) {
              return this.literal(original.value, original.language);
            }
            if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {
              return this.literal(original.value, this.fromTerm(original.datatype));
            }
            return this.literal(original.value);
          case "Variable":
            return this.variable(original.value);
          case "DefaultGraph":
            return this.defaultGraph();
          case "Quad":
            return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));
        }
      }
      /**
       * Create a deep copy of the given quad using this data factory.
       * @param original An RDF quad.
       * @return A deep copy of the given quad.
       */
      fromQuad(original) {
        return this.fromTerm(original);
      }
      /**
       * Reset the internal blank node counter.
       */
      resetBlankNodeCounter() {
        this.blankNodeCounter = 0;
      }
    };
    exports.DataFactory = DataFactory3;
  }
});

// node_modules/rdf-data-factory/index.js
var require_rdf_data_factory = __commonJS({
  "node_modules/rdf-data-factory/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_BlankNode(), exports);
    __exportStar(require_DataFactory(), exports);
    __exportStar(require_DefaultGraph(), exports);
    __exportStar(require_Literal(), exports);
    __exportStar(require_NamedNode(), exports);
    __exportStar(require_Quad(), exports);
    __exportStar(require_Variable(), exports);
  }
});

// node_modules/rdf-string/lib/TermUtil.js
var require_TermUtil = __commonJS({
  "node_modules/rdf-string/lib/TermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringQuadToQuad = exports.quadToStringQuad = exports.stringToTerm = exports.getLiteralLanguage = exports.getLiteralType = exports.getLiteralValue = exports.termToString = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var FACTORY = new rdf_data_factory_1.DataFactory();
    function termToString(term) {
      if (!term) {
        return void 0;
      }
      switch (term.termType) {
        case "NamedNode":
          return term.value;
        case "BlankNode":
          return "_:" + term.value;
        case "Literal":
          const literalValue = term;
          return '"' + literalValue.value + '"' + (literalValue.datatype && literalValue.datatype.value !== "http://www.w3.org/2001/XMLSchema#string" && literalValue.datatype.value !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" ? "^^" + literalValue.datatype.value : "") + (literalValue.language ? "@" + literalValue.language : "");
        case "Quad":
          return `<<${termToString(term.subject)} ${termToString(term.predicate)} ${termToString(term.object)}${term.graph.termType === "DefaultGraph" ? "" : " " + termToString(term.graph)}>>`;
        case "Variable":
          return "?" + term.value;
        case "DefaultGraph":
          return term.value;
      }
    }
    exports.termToString = termToString;
    function getLiteralValue(literalValue) {
      const match = /^"([^]*)"/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      return match[1];
    }
    exports.getLiteralValue = getLiteralValue;
    function getLiteralType(literalValue) {
      const match = /^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      return match[1] || (match[2] ? "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" : "http://www.w3.org/2001/XMLSchema#string");
    }
    exports.getLiteralType = getLiteralType;
    function getLiteralLanguage(literalValue) {
      const match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(literalValue);
      if (!match) {
        throw new Error(literalValue + " is not a literal");
      }
      return match[1] ? match[1].toLowerCase() : "";
    }
    exports.getLiteralLanguage = getLiteralLanguage;
    function stringToTerm(value, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      if (!value || !value.length) {
        return dataFactory.defaultGraph();
      }
      switch (value[0]) {
        case "_":
          return dataFactory.blankNode(value.substr(2));
        case "?":
          if (!dataFactory.variable) {
            throw new Error(`Missing 'variable()' method on the given DataFactory`);
          }
          return dataFactory.variable(value.substr(1));
        case '"':
          const language = getLiteralLanguage(value);
          const type = dataFactory.namedNode(getLiteralType(value));
          return dataFactory.literal(getLiteralValue(value), language || type);
        case "<":
        default:
          if (value[0] === "<" && value.length > 4 && value[1] === "<" && value[value.length - 1] === ">" && value[value.length - 2] === ">") {
            const terms = value.slice(2, -2).trim();
            let stringTerms = [];
            let ignoreTags = 0;
            let lastIndex = 0;
            let inQuote = false;
            for (let i2 = 0; i2 < terms.length; i2++) {
              const char = terms[i2];
              if (char === "<")
                ignoreTags++;
              if (char === ">") {
                if (ignoreTags === 0) {
                  throw new Error("Found closing tag without opening tag in " + value);
                } else {
                  ignoreTags--;
                }
              }
              if (char === '"') {
                let escaped = false;
                let j = i2;
                while (j-- > 0 && terms[j] === "\\") {
                  escaped = !escaped;
                }
                if (!escaped) {
                  inQuote = !inQuote;
                }
              }
              if (char === " " && !inQuote && ignoreTags === 0) {
                stringTerms.push(terms.slice(lastIndex, i2));
                while (terms[i2 + 1] === " ") {
                  i2 += 1;
                }
                lastIndex = i2 + 1;
              }
            }
            if (ignoreTags !== 0) {
              throw new Error("Found opening tag without closing tag in " + value);
            }
            stringTerms.push(terms.slice(lastIndex, terms.length));
            if (stringTerms.length !== 3 && stringTerms.length !== 4) {
              throw new Error("Nested quad syntax error " + value);
            }
            stringTerms = stringTerms.map((term) => term.startsWith("<") && !term.includes(" ") ? term.slice(1, -1) : term);
            return dataFactory.quad(stringToTerm(stringTerms[0]), stringToTerm(stringTerms[1]), stringToTerm(stringTerms[2]), stringTerms[3] ? stringToTerm(stringTerms[3]) : void 0);
          }
          return dataFactory.namedNode(value);
      }
    }
    exports.stringToTerm = stringToTerm;
    function quadToStringQuad(q) {
      return {
        subject: termToString(q.subject),
        predicate: termToString(q.predicate),
        object: termToString(q.object),
        graph: termToString(q.graph)
      };
    }
    exports.quadToStringQuad = quadToStringQuad;
    function stringQuadToQuad(stringQuad, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      return dataFactory.quad(stringToTerm(stringQuad.subject, dataFactory), stringToTerm(stringQuad.predicate, dataFactory), stringToTerm(stringQuad.object, dataFactory), stringToTerm(stringQuad.graph, dataFactory));
    }
    exports.stringQuadToQuad = stringQuadToQuad;
  }
});

// node_modules/rdf-string/index.js
var require_rdf_string = __commonJS({
  "node_modules/rdf-string/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.termToString = exports.stringToTerm = exports.stringQuadToQuad = exports.quadToStringQuad = exports.getLiteralValue = exports.getLiteralType = exports.getLiteralLanguage = void 0;
    var TermUtil_1 = require_TermUtil();
    Object.defineProperty(exports, "getLiteralLanguage", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralLanguage;
    } });
    Object.defineProperty(exports, "getLiteralType", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralType;
    } });
    Object.defineProperty(exports, "getLiteralValue", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralValue;
    } });
    Object.defineProperty(exports, "quadToStringQuad", { enumerable: true, get: function() {
      return TermUtil_1.quadToStringQuad;
    } });
    Object.defineProperty(exports, "stringQuadToQuad", { enumerable: true, get: function() {
      return TermUtil_1.stringQuadToQuad;
    } });
    Object.defineProperty(exports, "stringToTerm", { enumerable: true, get: function() {
      return TermUtil_1.stringToTerm;
    } });
    Object.defineProperty(exports, "termToString", { enumerable: true, get: function() {
      return TermUtil_1.termToString;
    } });
  }
});

// node_modules/@comunica/bindings-factory/lib/bindingsToString.js
var require_bindingsToString = __commonJS({
  "node_modules/@comunica/bindings-factory/lib/bindingsToString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bindingsToString = void 0;
    var rdf_string_1 = require_rdf_string();
    function bindingsToString(bindings) {
      const raw = {};
      for (const key of bindings.keys()) {
        raw[key.value] = (0, rdf_string_1.termToString)(bindings.get(key));
      }
      return JSON.stringify(raw, null, "  ");
    }
    exports.bindingsToString = bindingsToString;
  }
});

// node_modules/@comunica/bindings-factory/lib/Bindings.js
var require_Bindings2 = __commonJS({
  "node_modules/@comunica/bindings-factory/lib/Bindings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Bindings = void 0;
    var immutable_1 = require_immutable();
    var bindingsToString_1 = require_bindingsToString();
    var Bindings = class _Bindings {
      constructor(dataFactory, entries) {
        this.type = "bindings";
        this.dataFactory = dataFactory;
        this.entries = entries;
      }
      has(key) {
        return this.entries.has(typeof key === "string" ? key : key.value);
      }
      get(key) {
        return this.entries.get(typeof key === "string" ? key : key.value);
      }
      set(key, value) {
        return new _Bindings(this.dataFactory, this.entries.set(typeof key === "string" ? key : key.value, value));
      }
      delete(key) {
        return new _Bindings(this.dataFactory, this.entries.delete(typeof key === "string" ? key : key.value));
      }
      keys() {
        return this.mapIterable(this.iteratorToIterable(this.entries.keys()), (key) => this.dataFactory.variable(key));
      }
      values() {
        return this.iteratorToIterable(this.entries.values());
      }
      forEach(fn) {
        this.entries.forEach((value, key) => fn(value, this.dataFactory.variable(key)));
      }
      get size() {
        return this.entries.size;
      }
      [Symbol.iterator]() {
        return this.mapIterable(this.iteratorToIterable(this.entries.entries()), ([key, value]) => [this.dataFactory.variable(key), value])[Symbol.iterator]();
      }
      equals(other) {
        if (!other) {
          return false;
        }
        if (this === other) {
          return true;
        }
        if (this.size !== other.size) {
          return false;
        }
        for (const key of this.keys()) {
          if (!this.get(key)?.equals(other.get(key))) {
            return false;
          }
        }
        return true;
      }
      filter(fn) {
        return new _Bindings(this.dataFactory, (0, immutable_1.Map)(this.entries.filter((value, key) => fn(value, this.dataFactory.variable(key)))));
      }
      map(fn) {
        return new _Bindings(this.dataFactory, (0, immutable_1.Map)(this.entries.map((value, key) => fn(value, this.dataFactory.variable(key)))));
      }
      merge(other) {
        const keys = /* @__PURE__ */ new Set([
          ...this.iteratorToIterable(this.entries.keys()),
          ...[...other.keys()].map((key) => key.value)
        ]);
        const entries = [];
        for (const key of keys) {
          const left = this.entries.get(key);
          const right = other.get(this.dataFactory.variable(key));
          if (left && right && !left.equals(right)) {
            return;
          }
          const value = left || right;
          entries.push([key, value]);
        }
        return new _Bindings(this.dataFactory, (0, immutable_1.Map)(entries));
      }
      mergeWith(merger, other) {
        const keys = /* @__PURE__ */ new Set([
          ...this.iteratorToIterable(this.entries.keys()),
          ...[...other.keys()].map((key) => key.value)
        ]);
        const entries = [];
        for (const key of keys) {
          const variable = this.dataFactory.variable(key);
          const left = this.entries.get(key);
          const right = other.get(variable);
          let value;
          if (left && right && !left.equals(right)) {
            value = merger(left, right, variable);
          } else {
            value = left || right;
          }
          entries.push([key, value]);
        }
        return new _Bindings(this.dataFactory, (0, immutable_1.Map)(entries));
      }
      toString() {
        return (0, bindingsToString_1.bindingsToString)(this);
      }
      *mapIterable(iterable, callback) {
        for (const x of iterable) {
          yield callback(x);
        }
      }
      iteratorToIterable(iterator) {
        return {
          [Symbol.iterator]: () => iterator
        };
      }
    };
    exports.Bindings = Bindings;
  }
});

// node_modules/@comunica/bindings-factory/lib/BindingsFactory.js
var require_BindingsFactory = __commonJS({
  "node_modules/@comunica/bindings-factory/lib/BindingsFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingsFactory = void 0;
    var immutable_1 = require_immutable();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var Bindings_1 = require_Bindings2();
    var BindingsFactory = class {
      constructor(dataFactory = new rdf_data_factory_1.DataFactory()) {
        this.dataFactory = dataFactory;
      }
      bindings(entries = []) {
        return new Bindings_1.Bindings(this.dataFactory, (0, immutable_1.Map)(entries.map(([key, value]) => [key.value, value])));
      }
      fromBindings(bindings) {
        return this.bindings([...bindings]);
      }
      fromRecord(record) {
        return this.bindings(Object.entries(record).map(([key, value]) => [this.dataFactory.variable(key), value]));
      }
    };
    exports.BindingsFactory = BindingsFactory;
  }
});

// node_modules/@comunica/bindings-factory/lib/index.js
var require_lib6 = __commonJS({
  "node_modules/@comunica/bindings-factory/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Bindings2(), exports);
    __exportStar(require_BindingsFactory(), exports);
    __exportStar(require_bindingsToString(), exports);
  }
});

// node_modules/rdf-terms/lib/QuadTermUtil.js
var require_QuadTermUtil = __commonJS({
  "node_modules/rdf-terms/lib/QuadTermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.matchPatternMappings = exports.matchPatternComplete = exports.matchPattern = exports.matchTerm = exports.getValueNestedPath = exports.someTermsNested = exports.someTerms = exports.everyTermsNested = exports.everyTerms = exports.reduceTermsNested = exports.reduceTerms = exports.mapTermsNested = exports.mapTerms = exports.filterQuadTermNamesNested = exports.filterQuadTermNames = exports.filterTermsNested = exports.filterTerms = exports.forEachTermsNested = exports.forEachTerms = exports.collectNamedTerms = exports.getNamedTerms = exports.getTermsNested = exports.getTerms = exports.TRIPLE_TERM_NAMES = exports.QUAD_TERM_NAMES = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var DF = new rdf_data_factory_1.DataFactory();
    exports.QUAD_TERM_NAMES = ["subject", "predicate", "object", "graph"];
    exports.TRIPLE_TERM_NAMES = ["subject", "predicate", "object"];
    function getTerms(quad, ignoreDefaultGraph) {
      if (ignoreDefaultGraph && quad.graph.termType === "DefaultGraph") {
        return [quad.subject, quad.predicate, quad.object];
      }
      return [quad.subject, quad.predicate, quad.object, quad.graph];
    }
    exports.getTerms = getTerms;
    function getTermsNested(quad, ignoreDefaultGraph) {
      const terms = [];
      for (const term of getTerms(quad, ignoreDefaultGraph)) {
        if (term.termType === "Quad") {
          getTermsNested(term, ignoreDefaultGraph).forEach((subTerm) => terms.push(subTerm));
        } else {
          terms.push(term);
        }
      }
      return terms;
    }
    exports.getTermsNested = getTermsNested;
    function getNamedTerms(quad) {
      return [
        { key: "subject", value: quad.subject },
        { key: "predicate", value: quad.predicate },
        { key: "object", value: quad.object },
        { key: "graph", value: quad.graph }
      ];
    }
    exports.getNamedTerms = getNamedTerms;
    function collectNamedTerms(namedTerms, defaultCb, dataFactory) {
      const elements = {};
      namedTerms.forEach((namedTerm) => elements[namedTerm.key] = namedTerm.value);
      if (defaultCb) {
        elements.subject = elements.subject || defaultCb("subject");
        elements.predicate = elements.predicate || defaultCb("predicate");
        elements.object = elements.object || defaultCb("object");
        elements.graph = elements.graph || defaultCb("graph");
      }
      return (dataFactory || DF).quad(elements.subject, elements.predicate, elements.object, elements.graph);
    }
    exports.collectNamedTerms = collectNamedTerms;
    function forEachTerms(quad, cb) {
      cb(quad.subject, "subject");
      cb(quad.predicate, "predicate");
      cb(quad.object, "object");
      cb(quad.graph, "graph");
    }
    exports.forEachTerms = forEachTerms;
    function forEachTermsNested(quad, cb, keys = []) {
      if (quad.subject.termType === "Quad") {
        forEachTermsNested(quad.subject, cb, [...keys, "subject"]);
      } else {
        cb(quad.subject, [...keys, "subject"]);
      }
      if (quad.predicate.termType === "Quad") {
        forEachTermsNested(quad.predicate, cb, [...keys, "predicate"]);
      } else {
        cb(quad.predicate, [...keys, "predicate"]);
      }
      if (quad.object.termType === "Quad") {
        forEachTermsNested(quad.object, cb, [...keys, "object"]);
      } else {
        cb(quad.object, [...keys, "object"]);
      }
      if (quad.graph.termType === "Quad") {
        forEachTermsNested(quad.graph, cb, [...keys, "graph"]);
      } else {
        cb(quad.graph, [...keys, "graph"]);
      }
    }
    exports.forEachTermsNested = forEachTermsNested;
    function filterTerms(quad, filter) {
      const terms = [];
      if (filter(quad.subject, "subject")) {
        terms.push(quad.subject);
      }
      if (filter(quad.predicate, "predicate")) {
        terms.push(quad.predicate);
      }
      if (filter(quad.object, "object")) {
        terms.push(quad.object);
      }
      if (filter(quad.graph, "graph")) {
        terms.push(quad.graph);
      }
      return terms;
    }
    exports.filterTerms = filterTerms;
    function filterTermsNested(quad, filter, keys = []) {
      let terms = [];
      if (quad.subject.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.subject, filter, [...keys, "subject"])];
      } else {
        if (filter(quad.subject, [...keys, "subject"])) {
          terms.push(quad.subject);
        }
      }
      if (quad.predicate.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.predicate, filter, [...keys, "predicate"])];
      } else {
        if (filter(quad.predicate, [...keys, "predicate"])) {
          terms.push(quad.predicate);
        }
      }
      if (quad.object.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.object, filter, [...keys, "object"])];
      } else {
        if (filter(quad.object, [...keys, "object"])) {
          terms.push(quad.object);
        }
      }
      if (quad.graph.termType === "Quad") {
        terms = [...terms, ...filterTermsNested(quad.graph, filter, [...keys, "graph"])];
      } else {
        if (filter(quad.graph, [...keys, "graph"])) {
          terms.push(quad.graph);
        }
      }
      return terms;
    }
    exports.filterTermsNested = filterTermsNested;
    function filterQuadTermNames(quad, filter) {
      const names = [];
      if (filter(quad.subject, "subject")) {
        names.push("subject");
      }
      if (filter(quad.predicate, "predicate")) {
        names.push("predicate");
      }
      if (filter(quad.object, "object")) {
        names.push("object");
      }
      if (filter(quad.graph, "graph")) {
        names.push("graph");
      }
      return names;
    }
    exports.filterQuadTermNames = filterQuadTermNames;
    function filterQuadTermNamesNested(quad, filter, keys = []) {
      let names = [];
      const keysS = [...keys, "subject"];
      if (quad.subject.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.subject, filter, keysS)];
      } else {
        if (filter(quad.subject, keysS)) {
          names.push(keysS);
        }
      }
      const keysP = [...keys, "predicate"];
      if (quad.predicate.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.predicate, filter, keysP)];
      } else {
        if (filter(quad.predicate, keysP)) {
          names.push(keysP);
        }
      }
      const keysO = [...keys, "object"];
      if (quad.object.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.object, filter, keysO)];
      } else {
        if (filter(quad.object, keysO)) {
          names.push(keysO);
        }
      }
      const keysG = [...keys, "graph"];
      if (quad.graph.termType === "Quad") {
        names = [...names, ...filterQuadTermNamesNested(quad.graph, filter, keysG)];
      } else {
        if (filter(quad.graph, keysG)) {
          names.push(keysG);
        }
      }
      return names;
    }
    exports.filterQuadTermNamesNested = filterQuadTermNamesNested;
    function mapTerms(quad, mapper, dataFactory) {
      return (dataFactory || DF).quad(mapper(quad.subject, "subject"), mapper(quad.predicate, "predicate"), mapper(quad.object, "object"), mapper(quad.graph, "graph"));
    }
    exports.mapTerms = mapTerms;
    function mapTermsNested(quad, mapper, dataFactory, keys = []) {
      return (dataFactory || DF).quad(quad.subject.termType === "Quad" ? mapTermsNested(quad.subject, mapper, dataFactory, [...keys, "subject"]) : mapper(quad.subject, [...keys, "subject"]), quad.predicate.termType === "Quad" ? mapTermsNested(quad.predicate, mapper, dataFactory, [...keys, "predicate"]) : mapper(quad.predicate, [...keys, "predicate"]), quad.object.termType === "Quad" ? mapTermsNested(quad.object, mapper, dataFactory, [...keys, "object"]) : mapper(quad.object, [...keys, "object"]), quad.graph.termType === "Quad" ? mapTermsNested(quad.graph, mapper, dataFactory, [...keys, "graph"]) : mapper(quad.graph, [...keys, "graph"]));
    }
    exports.mapTermsNested = mapTermsNested;
    function reduceTerms(quad, reducer, initialValue) {
      let value = initialValue;
      value = reducer(value, quad.subject, "subject");
      value = reducer(value, quad.predicate, "predicate");
      value = reducer(value, quad.object, "object");
      return reducer(value, quad.graph, "graph");
    }
    exports.reduceTerms = reduceTerms;
    function reduceTermsNested(quad, reducer, initialValue, keys = []) {
      let value = initialValue;
      if (quad.subject.termType === "Quad") {
        value = reduceTermsNested(quad.subject, reducer, value, [...keys, "subject"]);
      } else {
        value = reducer(value, quad.subject, [...keys, "subject"]);
      }
      if (quad.predicate.termType === "Quad") {
        value = reduceTermsNested(quad.predicate, reducer, value, [...keys, "predicate"]);
      } else {
        value = reducer(value, quad.predicate, [...keys, "predicate"]);
      }
      if (quad.object.termType === "Quad") {
        value = reduceTermsNested(quad.object, reducer, value, [...keys, "object"]);
      } else {
        value = reducer(value, quad.object, [...keys, "object"]);
      }
      if (quad.graph.termType === "Quad") {
        value = reduceTermsNested(quad.graph, reducer, value, [...keys, "graph"]);
      } else {
        value = reducer(value, quad.graph, [...keys, "graph"]);
      }
      return value;
    }
    exports.reduceTermsNested = reduceTermsNested;
    function everyTerms(quad, checker) {
      return checker(quad.subject, "subject") && checker(quad.predicate, "predicate") && checker(quad.object, "object") && checker(quad.graph, "graph");
    }
    exports.everyTerms = everyTerms;
    function everyTermsNested(quad, checker, keys = []) {
      return (quad.subject.termType === "Quad" ? everyTermsNested(quad.subject, checker, [...keys, "subject"]) : checker(quad.subject, [...keys, "subject"])) && (quad.predicate.termType === "Quad" ? everyTermsNested(quad.predicate, checker, [...keys, "predicate"]) : checker(quad.predicate, [...keys, "predicate"])) && (quad.object.termType === "Quad" ? everyTermsNested(quad.object, checker, [...keys, "object"]) : checker(quad.object, [...keys, "object"])) && (quad.graph.termType === "Quad" ? everyTermsNested(quad.graph, checker, [...keys, "graph"]) : checker(quad.graph, [...keys, "graph"]));
    }
    exports.everyTermsNested = everyTermsNested;
    function someTerms(quad, checker) {
      return checker(quad.subject, "subject") || checker(quad.predicate, "predicate") || checker(quad.object, "object") || checker(quad.graph, "graph");
    }
    exports.someTerms = someTerms;
    function someTermsNested(quad, checker, keys = []) {
      return (quad.subject.termType === "Quad" ? someTermsNested(quad.subject, checker, [...keys, "subject"]) : checker(quad.subject, [...keys, "subject"])) || (quad.predicate.termType === "Quad" ? someTermsNested(quad.predicate, checker, [...keys, "predicate"]) : checker(quad.predicate, [...keys, "predicate"])) || (quad.object.termType === "Quad" ? someTermsNested(quad.object, checker, [...keys, "object"]) : checker(quad.object, [...keys, "object"])) || (quad.graph.termType === "Quad" ? someTermsNested(quad.graph, checker, [...keys, "graph"]) : checker(quad.graph, [...keys, "graph"]));
    }
    exports.someTermsNested = someTermsNested;
    function getValueNestedPath(term, keys) {
      if (keys.length === 0) {
        return term;
      }
      if (term.termType === "Quad") {
        return getValueNestedPath(term[keys[0]], keys.slice(1));
      }
      throw new Error(`Tried to get ${keys[0]} from term of type ${term.termType}`);
    }
    exports.getValueNestedPath = getValueNestedPath;
    function matchTerm(termA, termB) {
      return !termB || termB.termType === "Variable" || termB.termType === "Quad" && termA.termType === "Quad" && matchPatternComplete(termA, termB) || termB.equals(termA);
    }
    exports.matchTerm = matchTerm;
    function matchPattern(quad, subject, predicate, object, graph) {
      return matchTerm(quad.subject, subject) && matchTerm(quad.predicate, predicate) && matchTerm(quad.object, object) && matchTerm(quad.graph, graph);
    }
    exports.matchPattern = matchPattern;
    function matchPatternComplete(quad, pattern) {
      return matchPattern(quad, pattern.subject, pattern.predicate, pattern.object, pattern.graph);
    }
    exports.matchPatternComplete = matchPatternComplete;
    function matchPatternMappings(quad, pattern, opt = {}) {
      const map = {};
      function match(_pattern, _quad) {
        return everyTerms(_pattern, (t1, key) => {
          var _a, _b;
          const t2 = _quad[key];
          switch (t1.termType) {
            case "Variable":
              return opt.skipVarMapping && t2.termType === "Variable" || ((_b = (_a = map[t1.value]) === null || _a === void 0 ? void 0 : _a.equals(t2)) !== null && _b !== void 0 ? _b : (map[t1.value] = t2, true));
            case "Quad":
              return t2.termType === "Quad" && match(t1, t2);
            default:
              return t1.equals(t2);
          }
        });
      }
      return match(pattern, quad) && (opt.returnMappings ? map : true);
    }
    exports.matchPatternMappings = matchPatternMappings;
  }
});

// node_modules/rdf-terms/lib/TermUtil.js
var require_TermUtil2 = __commonJS({
  "node_modules/rdf-terms/lib/TermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getQuads = exports.getDefaultGraphs = exports.getVariables = exports.getLiterals = exports.getBlankNodes = exports.getNamedNodes = exports.getTermsOfType = exports.uniqTerms = exports.TERM_TYPES = void 0;
    var rdf_string_1 = require_rdf_string();
    exports.TERM_TYPES = ["NamedNode", "BlankNode", "Literal", "Variable", "DefaultGraph", "Quad"];
    function uniqTerms(terms) {
      const hash = {};
      return terms.filter((term) => {
        const termString = (0, rdf_string_1.termToString)(term);
        return !(termString in hash) && (hash[termString] = true);
      });
    }
    exports.uniqTerms = uniqTerms;
    function getTermsOfType(terms, termType) {
      return terms.filter((term) => term.termType === termType);
    }
    exports.getTermsOfType = getTermsOfType;
    function getNamedNodes(terms) {
      return getTermsOfType(terms, "NamedNode");
    }
    exports.getNamedNodes = getNamedNodes;
    function getBlankNodes(terms) {
      return getTermsOfType(terms, "BlankNode");
    }
    exports.getBlankNodes = getBlankNodes;
    function getLiterals(terms) {
      return getTermsOfType(terms, "Literal");
    }
    exports.getLiterals = getLiterals;
    function getVariables(terms) {
      return getTermsOfType(terms, "Variable");
    }
    exports.getVariables = getVariables;
    function getDefaultGraphs(terms) {
      return getTermsOfType(terms, "DefaultGraph");
    }
    exports.getDefaultGraphs = getDefaultGraphs;
    function getQuads(terms) {
      return getTermsOfType(terms, "Quad");
    }
    exports.getQuads = getQuads;
  }
});

// node_modules/rdf-terms/index.js
var require_rdf_terms = __commonJS({
  "node_modules/rdf-terms/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_QuadTermUtil(), exports);
    __exportStar(require_TermUtil2(), exports);
  }
});

// node_modules/fast-deep-equal/es6/index.js
var require_es6 = __commonJS({
  "node_modules/fast-deep-equal/es6/index.js"(exports, module) {
    "use strict";
    module.exports = function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i2, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i2 = length; i2-- !== 0; )
            if (!equal(a[i2], b[i2]))
              return false;
          return true;
        }
        if (a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          for (i2 of a.entries())
            if (!b.has(i2[0]))
              return false;
          for (i2 of a.entries())
            if (!equal(i2[1], b.get(i2[0])))
              return false;
          return true;
        }
        if (a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          for (i2 of a.entries())
            if (!b.has(i2[0]))
              return false;
          return true;
        }
        if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i2 = length; i2-- !== 0; )
            if (a[i2] !== b[i2])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf)
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString)
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i2 = length; i2-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i2]))
            return false;
        for (i2 = length; i2-- !== 0; ) {
          var key = keys[i2];
          if (!equal(a[key], b[key]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// node_modules/sparqlalgebrajs/lib/algebra.js
var require_algebra = __commonJS({
  "node_modules/sparqlalgebrajs/lib/algebra.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expressionTypes = exports.types = void 0;
    var types;
    (function(types2) {
      types2["ALT"] = "alt";
      types2["ASK"] = "ask";
      types2["BGP"] = "bgp";
      types2["CONSTRUCT"] = "construct";
      types2["DESCRIBE"] = "describe";
      types2["DISTINCT"] = "distinct";
      types2["EXPRESSION"] = "expression";
      types2["EXTEND"] = "extend";
      types2["FILTER"] = "filter";
      types2["FROM"] = "from";
      types2["GRAPH"] = "graph";
      types2["GROUP"] = "group";
      types2["INV"] = "inv";
      types2["JOIN"] = "join";
      types2["LEFT_JOIN"] = "leftjoin";
      types2["LINK"] = "link";
      types2["MINUS"] = "minus";
      types2["NOP"] = "nop";
      types2["NPS"] = "nps";
      types2["ONE_OR_MORE_PATH"] = "OneOrMorePath";
      types2["ORDER_BY"] = "orderby";
      types2["PATH"] = "path";
      types2["PATTERN"] = "pattern";
      types2["PROJECT"] = "project";
      types2["REDUCED"] = "reduced";
      types2["SEQ"] = "seq";
      types2["SERVICE"] = "service";
      types2["SLICE"] = "slice";
      types2["UNION"] = "union";
      types2["VALUES"] = "values";
      types2["ZERO_OR_MORE_PATH"] = "ZeroOrMorePath";
      types2["ZERO_OR_ONE_PATH"] = "ZeroOrOnePath";
      types2["COMPOSITE_UPDATE"] = "compositeupdate";
      types2["DELETE_INSERT"] = "deleteinsert";
      types2["LOAD"] = "load";
      types2["CLEAR"] = "clear";
      types2["CREATE"] = "create";
      types2["DROP"] = "drop";
      types2["ADD"] = "add";
      types2["MOVE"] = "move";
      types2["COPY"] = "copy";
    })(types = exports.types || (exports.types = {}));
    var expressionTypes;
    (function(expressionTypes2) {
      expressionTypes2["AGGREGATE"] = "aggregate";
      expressionTypes2["EXISTENCE"] = "existence";
      expressionTypes2["NAMED"] = "named";
      expressionTypes2["OPERATOR"] = "operator";
      expressionTypes2["TERM"] = "term";
      expressionTypes2["WILDCARD"] = "wildcard";
    })(expressionTypes = exports.expressionTypes || (exports.expressionTypes = {}));
  }
});

// node_modules/sparqljs/lib/Wildcard.js
var require_Wildcard = __commonJS({
  "node_modules/sparqljs/lib/Wildcard.js"(exports, module) {
    var Wildcard = class {
      constructor() {
        return WILDCARD || this;
      }
      equals(other) {
        return other && this.termType === other.termType;
      }
    };
    Object.defineProperty(Wildcard.prototype, "value", {
      enumerable: true,
      value: "*"
    });
    Object.defineProperty(Wildcard.prototype, "termType", {
      enumerable: true,
      value: "Wildcard"
    });
    var WILDCARD = new Wildcard();
    module.exports.Wildcard = Wildcard;
  }
});

// node_modules/sparqljs/lib/SparqlParser.js
var require_SparqlParser = __commonJS({
  "node_modules/sparqljs/lib/SparqlParser.js"(exports, module) {
    var SparqlParser = function() {
      var o = function(k, v, o2, l) {
        for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)
          ;
        return o2;
      }, $V0 = [6, 12, 13, 15, 16, 24, 32, 36, 41, 45, 100, 110, 113, 115, 116, 123, 126, 131, 197, 224, 229, 308, 329, 330, 331, 332, 333], $V1 = [2, 247], $V2 = [100, 110, 113, 115, 116, 123, 126, 131, 329, 330, 331, 332, 333], $V3 = [2, 409], $V4 = [1, 18], $V5 = [1, 27], $V6 = [13, 16, 45, 197, 224, 229, 308], $V7 = [28, 29, 53], $V8 = [28, 53], $V9 = [1, 42], $Va = [1, 45], $Vb = [1, 41], $Vc = [1, 44], $Vd = [123, 126], $Ve = [1, 67], $Vf = [39, 45, 87], $Vg = [13, 16, 45, 197, 224, 308], $Vh = [1, 87], $Vi = [2, 281], $Vj = [1, 86], $Vk = [13, 16, 45, 82, 87, 89, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312], $Vl = [6, 28, 29, 53, 63, 70, 73, 81, 83, 85], $Vm = [6, 13, 16, 28, 29, 53, 63, 70, 73, 81, 83, 85, 87, 308], $Vn = [6, 13, 16, 28, 29, 45, 53, 63, 70, 73, 81, 82, 83, 85, 87, 89, 197, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314], $Vo = [6, 13, 16, 28, 29, 31, 39, 45, 47, 48, 53, 63, 70, 73, 81, 82, 83, 85, 87, 89, 109, 112, 121, 123, 126, 128, 159, 160, 161, 163, 164, 174, 193, 197, 224, 229, 231, 232, 242, 246, 250, 263, 265, 272, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314, 317, 318, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346], $Vp = [13, 16, 308], $Vq = [112, 132, 327, 334], $Vr = [13, 16, 112, 132, 308], $Vs = [1, 111], $Vt = [1, 117], $Vu = [112, 132, 327, 328, 334], $Vv = [13, 16, 112, 132, 308, 328], $Vw = [28, 29, 45, 53, 87], $Vx = [1, 138], $Vy = [1, 151], $Vz = [1, 128], $VA = [1, 127], $VB = [1, 129], $VC = [1, 140], $VD = [1, 141], $VE = [1, 142], $VF = [1, 143], $VG = [1, 144], $VH = [1, 145], $VI = [1, 147], $VJ = [1, 148], $VK = [2, 457], $VL = [1, 158], $VM = [1, 159], $VN = [1, 160], $VO = [1, 152], $VP = [1, 153], $VQ = [1, 156], $VR = [1, 171], $VS = [1, 172], $VT = [1, 173], $VU = [1, 174], $VV = [1, 175], $VW = [1, 176], $VX = [1, 167], $VY = [1, 168], $VZ = [1, 169], $V_ = [1, 170], $V$ = [1, 157], $V01 = [1, 166], $V11 = [1, 161], $V21 = [1, 162], $V31 = [1, 163], $V41 = [1, 164], $V51 = [1, 165], $V61 = [6, 13, 16, 29, 31, 45, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 335], $V71 = [1, 195], $V81 = [6, 31, 73, 81, 83, 85], $V91 = [2, 285], $Va1 = [1, 199], $Vb1 = [1, 201], $Vc1 = [6, 31, 70, 73, 81, 83, 85], $Vd1 = [2, 283], $Ve1 = [1, 207], $Vf1 = [1, 218], $Vg1 = [1, 223], $Vh1 = [1, 219], $Vi1 = [1, 225], $Vj1 = [1, 226], $Vk1 = [1, 224], $Vl1 = [6, 63, 70, 73, 81, 83, 85], $Vm1 = [1, 236], $Vn1 = [2, 334], $Vo1 = [1, 243], $Vp1 = [1, 241], $Vq1 = [6, 193], $Vr1 = [2, 349], $Vs1 = [2, 339], $Vt1 = [28, 128], $Vu1 = [47, 48, 193, 272], $Vv1 = [47, 48, 193, 242, 272], $Vw1 = [47, 48, 193, 242, 246, 272], $Vx1 = [47, 48, 193, 242, 246, 250, 263, 265, 272, 290, 297, 298, 299, 300, 301, 302, 341, 342, 343, 344, 345, 346], $Vy1 = [39, 47, 48, 193, 242, 246, 250, 263, 265, 272, 290, 297, 298, 299, 300, 301, 302, 338, 341, 342, 343, 344, 345, 346], $Vz1 = [1, 271], $VA1 = [1, 270], $VB1 = [6, 13, 16, 29, 31, 39, 45, 47, 48, 70, 73, 76, 78, 81, 82, 83, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 231, 242, 246, 250, 263, 265, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 283, 285, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 335, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], $VC1 = [1, 281], $VD1 = [1, 280], $VE1 = [13, 16, 29, 31, 39, 45, 47, 48, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 174, 193, 197, 224, 229, 231, 232, 242, 246, 250, 263, 265, 272, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314, 317, 318, 335, 338, 341, 342, 343, 344, 345, 346], $VF1 = [45, 89], $VG1 = [13, 16, 29, 31, 39, 45, 47, 48, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 174, 193, 197, 224, 229, 231, 232, 242, 246, 250, 263, 265, 272, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314, 317, 318, 335, 338, 341, 342, 343, 344, 345, 346], $VH1 = [13, 16, 31, 82, 174, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 312], $VI1 = [31, 89], $VJ1 = [48, 87], $VK1 = [6, 13, 16, 45, 48, 82, 87, 89, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 337, 338], $VL1 = [6, 13, 16, 39, 45, 48, 82, 87, 89, 231, 263, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 337, 338, 340], $VM1 = [1, 313], $VN1 = [6, 85], $VO1 = [6, 31, 81, 83, 85], $VP1 = [2, 361], $VQ1 = [2, 353], $VR1 = [1, 343], $VS1 = [31, 112, 335], $VT1 = [13, 16, 29, 31, 45, 48, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 197, 224, 229, 231, 232, 272, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 317, 318, 335], $VU1 = [13, 16, 29, 31, 45, 48, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 197, 224, 229, 231, 232, 272, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314, 317, 318, 335], $VV1 = [6, 109, 193], $VW1 = [31, 112], $VX1 = [13, 16, 45, 82, 87, 224, 263, 265, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 283, 285, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 312, 346, 347, 348, 349, 350, 351], $VY1 = [1, 390], $VZ1 = [1, 391], $V_1 = [13, 16, 87, 197, 308, 314], $V$1 = [13, 16, 39, 45, 82, 87, 224, 263, 265, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 283, 285, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 312, 346, 347, 348, 349, 350, 351], $V02 = [1, 417], $V12 = [1, 418], $V22 = [13, 16, 48, 197, 229, 308], $V32 = [6, 31, 85], $V42 = [6, 13, 16, 31, 45, 73, 81, 83, 85, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 283, 285, 308, 346, 347, 348, 349, 350, 351], $V52 = [6, 13, 16, 29, 31, 45, 73, 76, 78, 81, 82, 83, 85, 87, 89, 112, 159, 160, 161, 163, 164, 231, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 283, 285, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 335, 346, 347, 348, 349, 350, 351], $V62 = [29, 31, 85, 112, 159, 160, 161, 163, 164], $V72 = [1, 443], $V82 = [1, 444], $V92 = [1, 449], $Va2 = [31, 112, 193, 232, 318, 335], $Vb2 = [13, 16, 45, 48, 82, 87, 89, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312], $Vc2 = [13, 16, 31, 45, 48, 82, 87, 89, 112, 193, 231, 232, 272, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 317, 318, 335], $Vd2 = [13, 16, 29, 31, 45, 48, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 231, 232, 272, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 317, 318, 335], $Ve2 = [13, 16, 31, 48, 82, 174, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 312], $Vf2 = [31, 45], $Vg2 = [1, 507], $Vh2 = [1, 508], $Vi2 = [6, 13, 16, 29, 31, 39, 45, 47, 48, 63, 70, 73, 76, 78, 81, 82, 83, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 231, 242, 246, 250, 263, 265, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 283, 285, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 335, 336, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], $Vj2 = [29, 31, 85, 112, 159, 160, 161, 163, 164, 335], $Vk2 = [6, 13, 16, 31, 45, 70, 73, 81, 83, 85, 87, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 283, 285, 308, 346, 347, 348, 349, 350, 351], $Vl2 = [13, 16, 31, 45, 48, 82, 87, 89, 112, 193, 197, 231, 232, 272, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 317, 318, 335], $Vm2 = [2, 352], $Vn2 = [13, 16, 197, 308, 314], $Vo2 = [1, 565], $Vp2 = [6, 13, 16, 31, 45, 76, 78, 81, 83, 85, 87, 268, 269, 270, 271, 273, 274, 276, 277, 279, 280, 283, 285, 308, 346, 347, 348, 349, 350, 351], $Vq2 = [13, 16, 29, 31, 45, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312], $Vr2 = [13, 16, 29, 31, 45, 82, 85, 87, 89, 112, 159, 160, 161, 163, 164, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 335], $Vs2 = [13, 16, 87, 308], $Vt2 = [2, 364], $Vu2 = [29, 31, 85, 112, 159, 160, 161, 163, 164, 193, 232, 318, 335], $Vv2 = [31, 112, 193, 232, 272, 318, 335], $Vw2 = [2, 359], $Vx2 = [13, 16, 48, 82, 174, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 312], $Vy2 = [29, 31, 85, 112, 159, 160, 161, 163, 164, 193, 232, 272, 318, 335], $Vz2 = [13, 16, 31, 45, 82, 87, 89, 112, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312], $VA2 = [2, 347];
      var parser = {
        trace: function trace() {
        },
        yy: {},
        symbols_: { "error": 2, "QueryOrUpdate": 3, "Prologue": 4, "QueryOrUpdate_group0": 5, "EOF": 6, "Query": 7, "Qry": 8, "Query_option0": 9, "Prologue_repetition0": 10, "BaseDecl": 11, "BASE": 12, "IRIREF": 13, "PrefixDecl": 14, "PREFIX": 15, "PNAME_NS": 16, "SelectClauseWildcard": 17, "Qry_repetition0": 18, "WhereClause": 19, "SolutionModifierNoGroup": 20, "SelectClauseVars": 21, "Qry_repetition1": 22, "SolutionModifier": 23, "CONSTRUCT": 24, "ConstructTemplate": 25, "Qry_repetition2": 26, "Qry_repetition3": 27, "WHERE": 28, "{": 29, "Qry_option0": 30, "}": 31, "DESCRIBE": 32, "Qry_group0": 33, "Qry_repetition4": 34, "Qry_option1": 35, "ASK": 36, "Qry_repetition5": 37, "SelectClauseBase": 38, "*": 39, "SelectClauseVars_repetition_plus0": 40, "SELECT": 41, "SelectClauseBase_option0": 42, "SelectClauseItem": 43, "Var": 44, "(": 45, "Expression": 46, "AS": 47, ")": 48, "SubSelect": 49, "SubSelect_option0": 50, "SubSelect_option1": 51, "DatasetClause": 52, "FROM": 53, "DatasetClause_option0": 54, "iri": 55, "WhereClause_option0": 56, "GroupGraphPattern": 57, "SolutionModifier_option0": 58, "SolutionModifierNoGroup_option0": 59, "SolutionModifierNoGroup_option1": 60, "SolutionModifierNoGroup_option2": 61, "GroupClause": 62, "GROUP": 63, "BY": 64, "GroupClause_repetition_plus0": 65, "GroupCondition": 66, "BuiltInCall": 67, "FunctionCall": 68, "HavingClause": 69, "HAVING": 70, "HavingClause_repetition_plus0": 71, "OrderClause": 72, "ORDER": 73, "OrderClause_repetition_plus0": 74, "OrderCondition": 75, "ASC": 76, "BrackettedExpression": 77, "DESC": 78, "Constraint": 79, "LimitOffsetClauses": 80, "LIMIT": 81, "INTEGER": 82, "OFFSET": 83, "ValuesClause": 84, "VALUES": 85, "InlineData": 86, "VAR": 87, "InlineData_repetition0": 88, "NIL": 89, "InlineData_repetition1": 90, "InlineData_repetition_plus2": 91, "InlineData_repetition3": 92, "DataBlock": 93, "DataBlockValueList": 94, "DataBlockValueList_repetition_plus0": 95, "Update": 96, "Update_repetition0": 97, "Update1": 98, "Update_option0": 99, "LOAD": 100, "Update1_option0": 101, "Update1_option1": 102, "Update1_group0": 103, "Update1_option2": 104, "GraphRefAll": 105, "Update1_group1": 106, "Update1_option3": 107, "GraphOrDefault": 108, "TO": 109, "CREATE": 110, "Update1_option4": 111, "GRAPH": 112, "INSERTDATA": 113, "QuadPattern": 114, "DELETEDATA": 115, "DELETEWHERE": 116, "Update1_option5": 117, "InsertDeleteClause": 118, "Update1_repetition0": 119, "IntoGraphClause": 120, "INTO": 121, "GraphRef": 122, "DELETE": 123, "InsertDeleteClause_option0": 124, "InsertClause": 125, "INSERT": 126, "UsingClause": 127, "USING": 128, "UsingClause_option0": 129, "WithClause": 130, "WITH": 131, "DEFAULT": 132, "GraphOrDefault_option0": 133, "GraphRefAll_group0": 134, "Quads": 135, "Quads_option0": 136, "Quads_repetition0": 137, "QuadsNotTriples": 138, "VarOrIri": 139, "QuadsNotTriples_option0": 140, "QuadsNotTriples_option1": 141, "QuadsNotTriples_option2": 142, "TriplesTemplate": 143, "TriplesTemplate_repetition0": 144, "TriplesSameSubject": 145, "TriplesTemplate_option0": 146, "GroupGraphPatternSub": 147, "GroupGraphPatternSub_option0": 148, "GroupGraphPatternSub_repetition0": 149, "GroupGraphPatternSubTail": 150, "GraphPatternNotTriples": 151, "GroupGraphPatternSubTail_option0": 152, "GroupGraphPatternSubTail_option1": 153, "TriplesBlock": 154, "TriplesBlock_repetition0": 155, "TriplesSameSubjectPath": 156, "TriplesBlock_option0": 157, "GroupOrUnionGraphPattern": 158, "OPTIONAL": 159, "MINUS": 160, "SERVICE": 161, "GraphPatternNotTriples_option0": 162, "FILTER": 163, "BIND": 164, "InlineDataOneVar": 165, "InlineDataFull": 166, "InlineDataOneVar_repetition0": 167, "InlineDataFull_repetition0": 168, "InlineDataFull_repetition_plus1": 169, "InlineDataFull_repetition2": 170, "DataBlockValue": 171, "Literal": 172, "QuotedTriple": 173, "UNDEF": 174, "GroupOrUnionGraphPattern_repetition0": 175, "ArgList": 176, "ArgList_option0": 177, "ArgList_repetition0": 178, "ExpressionList": 179, "ExpressionList_repetition0": 180, "ConstructTemplate_option0": 181, "ConstructTriples": 182, "ConstructTriples_repetition0": 183, "ConstructTriples_option0": 184, "VarOrTermOrQuotedTP": 185, "PropertyListNotEmpty": 186, "TriplesNode": 187, "PropertyList": 188, "PropertyList_option0": 189, "VerbObjectList": 190, "PropertyListNotEmpty_repetition0": 191, "SemiOptionalVerbObjectList": 192, ";": 193, "SemiOptionalVerbObjectList_option0": 194, "Verb": 195, "ObjectList": 196, "a": 197, "ObjectList_repetition0": 198, "Object": 199, "GraphNode": 200, "Object_option0": 201, "PropertyListPathNotEmpty": 202, "TriplesNodePath": 203, "TriplesSameSubjectPath_option0": 204, "O": 205, "PropertyListPathNotEmpty_repetition0": 206, "PropertyListPathNotEmptyTail": 207, "O_group0": 208, "ObjectListPath": 209, "ObjectListPath_repetition0": 210, "ObjectPath": 211, "GraphNodePath": 212, "ObjectPath_option0": 213, "Path": 214, "Path_repetition0": 215, "PathSequence": 216, "PathSequence_repetition0": 217, "PathEltOrInverse": 218, "PathElt": 219, "PathPrimary": 220, "PathElt_option0": 221, "PathEltOrInverse_option0": 222, "IriOrA": 223, "!": 224, "PathNegatedPropertySet": 225, "PathOneInPropertySet": 226, "PathNegatedPropertySet_repetition0": 227, "PathNegatedPropertySet_option0": 228, "^": 229, "TriplesNode_repetition_plus0": 230, "[": 231, "]": 232, "TriplesNodePath_repetition_plus0": 233, "VarOrTermOrQuotedTPExpr": 234, "VarOrTerm": 235, "GraphTerm": 236, "BlankNode": 237, "ConditionalOrExpression": 238, "ConditionalAndExpression": 239, "ConditionalOrExpression_repetition0": 240, "ConditionalOrExpressionTail": 241, "||": 242, "RelationalExpression": 243, "ConditionalAndExpression_repetition0": 244, "ConditionalAndExpressionTail": 245, "&&": 246, "NumericExpression": 247, "RelationalExpression_group0": 248, "RelationalExpression_option0": 249, "IN": 250, "MultiplicativeExpression": 251, "NumericExpression_repetition0": 252, "AdditiveExpressionTail": 253, "AdditiveExpressionTail_group0": 254, "NumericLiteralPositive": 255, "AdditiveExpressionTail_repetition0": 256, "NumericLiteralNegative": 257, "AdditiveExpressionTail_repetition1": 258, "UnaryExpression": 259, "MultiplicativeExpression_repetition0": 260, "MultiplicativeExpressionTail": 261, "MultiplicativeExpressionTail_group0": 262, "+": 263, "PrimaryExpression": 264, "-": 265, "ExprQuotedTP": 266, "Aggregate": 267, "FUNC_ARITY0": 268, "FUNC_ARITY1": 269, "FUNC_ARITY1_SPARQL_STAR": 270, "FUNC_ARITY2": 271, ",": 272, "FUNC_ARITY3": 273, "FUNC_ARITY3_SPARQL_STAR": 274, "BuiltInCall_group0": 275, "BOUND": 276, "BNODE": 277, "BuiltInCall_option0": 278, "EXISTS": 279, "COUNT": 280, "Aggregate_option0": 281, "Aggregate_group0": 282, "FUNC_AGGREGATE": 283, "Aggregate_option1": 284, "GROUP_CONCAT": 285, "Aggregate_option2": 286, "Aggregate_option3": 287, "GroupConcatSeparator": 288, "SEPARATOR": 289, "=": 290, "String": 291, "LANGTAG": 292, "^^": 293, "DECIMAL": 294, "DOUBLE": 295, "BOOLEAN": 296, "INTEGER_POSITIVE": 297, "DECIMAL_POSITIVE": 298, "DOUBLE_POSITIVE": 299, "INTEGER_NEGATIVE": 300, "DECIMAL_NEGATIVE": 301, "DOUBLE_NEGATIVE": 302, "STRING_LITERAL1": 303, "STRING_LITERAL2": 304, "STRING_LITERAL_LONG1": 305, "STRING_LITERAL_LONG2": 306, "PrefixedName": 307, "PNAME_LN": 308, "BLANK_NODE_LABEL": 309, "ANON": 310, "QuotedTP": 311, "<<": 312, "qtSubjectOrObject": 313, ">>": 314, "DataValueTerm": 315, "AnnotationPattern": 316, "{|": 317, "|}": 318, "AnnotationPatternPath": 319, "ExprVarOrTerm": 320, "QueryOrUpdate_group0_option0": 321, "Prologue_repetition0_group0": 322, "Qry_group0_repetition_plus0": 323, "SelectClauseBase_option0_group0": 324, "DISTINCT": 325, "REDUCED": 326, "NAMED": 327, "SILENT": 328, "CLEAR": 329, "DROP": 330, "ADD": 331, "MOVE": 332, "COPY": 333, "ALL": 334, ".": 335, "UNION": 336, "|": 337, "/": 338, "PathElt_option0_group0": 339, "?": 340, "!=": 341, "<": 342, ">": 343, "<=": 344, ">=": 345, "NOT": 346, "CONCAT": 347, "COALESCE": 348, "SUBSTR": 349, "REGEX": 350, "REPLACE": 351, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 6: "EOF", 12: "BASE", 13: "IRIREF", 15: "PREFIX", 16: "PNAME_NS", 24: "CONSTRUCT", 28: "WHERE", 29: "{", 31: "}", 32: "DESCRIBE", 36: "ASK", 39: "*", 41: "SELECT", 45: "(", 47: "AS", 48: ")", 53: "FROM", 63: "GROUP", 64: "BY", 70: "HAVING", 73: "ORDER", 76: "ASC", 78: "DESC", 81: "LIMIT", 82: "INTEGER", 83: "OFFSET", 85: "VALUES", 87: "VAR", 89: "NIL", 100: "LOAD", 109: "TO", 110: "CREATE", 112: "GRAPH", 113: "INSERTDATA", 115: "DELETEDATA", 116: "DELETEWHERE", 121: "INTO", 123: "DELETE", 126: "INSERT", 128: "USING", 131: "WITH", 132: "DEFAULT", 159: "OPTIONAL", 160: "MINUS", 161: "SERVICE", 163: "FILTER", 164: "BIND", 174: "UNDEF", 193: ";", 197: "a", 224: "!", 229: "^", 231: "[", 232: "]", 242: "||", 246: "&&", 250: "IN", 263: "+", 265: "-", 268: "FUNC_ARITY0", 269: "FUNC_ARITY1", 270: "FUNC_ARITY1_SPARQL_STAR", 271: "FUNC_ARITY2", 272: ",", 273: "FUNC_ARITY3", 274: "FUNC_ARITY3_SPARQL_STAR", 276: "BOUND", 277: "BNODE", 279: "EXISTS", 280: "COUNT", 283: "FUNC_AGGREGATE", 285: "GROUP_CONCAT", 289: "SEPARATOR", 290: "=", 292: "LANGTAG", 293: "^^", 294: "DECIMAL", 295: "DOUBLE", 296: "BOOLEAN", 297: "INTEGER_POSITIVE", 298: "DECIMAL_POSITIVE", 299: "DOUBLE_POSITIVE", 300: "INTEGER_NEGATIVE", 301: "DECIMAL_NEGATIVE", 302: "DOUBLE_NEGATIVE", 303: "STRING_LITERAL1", 304: "STRING_LITERAL2", 305: "STRING_LITERAL_LONG1", 306: "STRING_LITERAL_LONG2", 308: "PNAME_LN", 309: "BLANK_NODE_LABEL", 310: "ANON", 312: "<<", 314: ">>", 317: "{|", 318: "|}", 325: "DISTINCT", 326: "REDUCED", 327: "NAMED", 328: "SILENT", 329: "CLEAR", 330: "DROP", 331: "ADD", 332: "MOVE", 333: "COPY", 334: "ALL", 335: ".", 336: "UNION", 337: "|", 338: "/", 340: "?", 341: "!=", 342: "<", 343: ">", 344: "<=", 345: ">=", 346: "NOT", 347: "CONCAT", 348: "COALESCE", 349: "SUBSTR", 350: "REGEX", 351: "REPLACE" },
        productions_: [0, [3, 3], [7, 2], [4, 1], [11, 2], [14, 3], [8, 4], [8, 4], [8, 5], [8, 7], [8, 5], [8, 4], [17, 2], [21, 2], [38, 2], [43, 1], [43, 5], [49, 4], [49, 4], [52, 3], [19, 2], [23, 2], [20, 3], [62, 3], [66, 1], [66, 1], [66, 3], [66, 5], [66, 1], [69, 2], [72, 3], [75, 2], [75, 2], [75, 1], [75, 1], [80, 2], [80, 2], [80, 4], [80, 4], [84, 2], [86, 4], [86, 4], [86, 6], [86, 2], [94, 3], [96, 3], [98, 4], [98, 3], [98, 5], [98, 4], [98, 2], [98, 2], [98, 2], [98, 5], [120, 2], [118, 3], [118, 1], [125, 2], [127, 3], [130, 2], [108, 1], [108, 2], [122, 2], [105, 1], [105, 1], [114, 3], [135, 2], [138, 7], [143, 3], [57, 3], [57, 3], [147, 2], [150, 3], [154, 3], [151, 1], [151, 2], [151, 2], [151, 3], [151, 4], [151, 2], [151, 6], [151, 1], [93, 1], [93, 1], [165, 4], [166, 4], [166, 6], [171, 1], [171, 1], [171, 1], [171, 1], [158, 2], [79, 1], [79, 1], [79, 1], [68, 2], [176, 1], [176, 5], [179, 1], [179, 4], [25, 3], [182, 3], [145, 2], [145, 2], [188, 1], [186, 2], [192, 2], [190, 2], [195, 1], [195, 1], [196, 2], [199, 2], [156, 2], [156, 2], [202, 2], [207, 1], [207, 2], [205, 2], [209, 2], [211, 2], [214, 2], [216, 2], [219, 2], [218, 2], [220, 1], [220, 2], [220, 3], [225, 1], [225, 1], [225, 4], [226, 1], [226, 2], [187, 3], [187, 3], [203, 3], [203, 3], [200, 1], [200, 1], [212, 1], [212, 1], [234, 1], [235, 1], [235, 1], [139, 1], [139, 1], [44, 1], [236, 1], [236, 1], [236, 1], [236, 1], [46, 1], [238, 2], [241, 2], [239, 2], [245, 2], [243, 1], [243, 3], [243, 4], [247, 2], [253, 2], [253, 2], [253, 2], [251, 2], [261, 2], [259, 2], [259, 2], [259, 2], [259, 1], [264, 1], [264, 1], [264, 1], [264, 1], [264, 1], [264, 1], [264, 1], [77, 3], [67, 1], [67, 2], [67, 4], [67, 4], [67, 6], [67, 8], [67, 8], [67, 2], [67, 4], [67, 2], [67, 4], [67, 3], [267, 5], [267, 5], [267, 6], [288, 4], [172, 1], [172, 2], [172, 3], [172, 1], [172, 1], [172, 1], [172, 1], [172, 1], [172, 1], [255, 1], [255, 1], [255, 1], [257, 1], [257, 1], [257, 1], [291, 1], [291, 1], [291, 1], [291, 1], [55, 1], [55, 1], [307, 1], [307, 1], [237, 1], [237, 1], [311, 5], [173, 5], [313, 1], [313, 1], [313, 1], [313, 1], [313, 1], [315, 1], [315, 1], [315, 1], [185, 1], [185, 1], [185, 1], [316, 3], [319, 3], [266, 5], [320, 1], [320, 1], [320, 1], [223, 1], [223, 1], [321, 0], [321, 1], [5, 1], [5, 1], [5, 1], [9, 0], [9, 1], [322, 1], [322, 1], [10, 0], [10, 2], [18, 0], [18, 2], [22, 0], [22, 2], [26, 0], [26, 2], [27, 0], [27, 2], [30, 0], [30, 1], [323, 1], [323, 2], [33, 1], [33, 1], [34, 0], [34, 2], [35, 0], [35, 1], [37, 0], [37, 2], [40, 1], [40, 2], [324, 1], [324, 1], [42, 0], [42, 1], [50, 0], [50, 1], [51, 0], [51, 1], [54, 0], [54, 1], [56, 0], [56, 1], [58, 0], [58, 1], [59, 0], [59, 1], [60, 0], [60, 1], [61, 0], [61, 1], [65, 1], [65, 2], [71, 1], [71, 2], [74, 1], [74, 2], [88, 0], [88, 2], [90, 0], [90, 2], [91, 1], [91, 2], [92, 0], [92, 2], [95, 1], [95, 2], [97, 0], [97, 4], [99, 0], [99, 2], [101, 0], [101, 1], [102, 0], [102, 1], [103, 1], [103, 1], [104, 0], [104, 1], [106, 1], [106, 1], [106, 1], [107, 0], [107, 1], [111, 0], [111, 1], [117, 0], [117, 1], [119, 0], [119, 2], [124, 0], [124, 1], [129, 0], [129, 1], [133, 0], [133, 1], [134, 1], [134, 1], [134, 1], [136, 0], [136, 1], [137, 0], [137, 2], [140, 0], [140, 1], [141, 0], [141, 1], [142, 0], [142, 1], [144, 0], [144, 3], [146, 0], [146, 1], [148, 0], [148, 1], [149, 0], [149, 2], [152, 0], [152, 1], [153, 0], [153, 1], [155, 0], [155, 3], [157, 0], [157, 1], [162, 0], [162, 1], [167, 0], [167, 2], [168, 0], [168, 2], [169, 1], [169, 2], [170, 0], [170, 2], [175, 0], [175, 3], [177, 0], [177, 1], [178, 0], [178, 3], [180, 0], [180, 3], [181, 0], [181, 1], [183, 0], [183, 3], [184, 0], [184, 1], [189, 0], [189, 1], [191, 0], [191, 2], [194, 0], [194, 1], [198, 0], [198, 3], [201, 0], [201, 1], [204, 0], [204, 1], [206, 0], [206, 2], [208, 1], [208, 1], [210, 0], [210, 3], [213, 0], [213, 1], [215, 0], [215, 3], [217, 0], [217, 3], [339, 1], [339, 1], [339, 1], [221, 0], [221, 1], [222, 0], [222, 1], [227, 0], [227, 3], [228, 0], [228, 1], [230, 1], [230, 2], [233, 1], [233, 2], [240, 0], [240, 2], [244, 0], [244, 2], [248, 1], [248, 1], [248, 1], [248, 1], [248, 1], [248, 1], [249, 0], [249, 1], [252, 0], [252, 2], [254, 1], [254, 1], [256, 0], [256, 2], [258, 0], [258, 2], [260, 0], [260, 2], [262, 1], [262, 1], [275, 1], [275, 1], [275, 1], [275, 1], [275, 1], [278, 0], [278, 1], [281, 0], [281, 1], [282, 1], [282, 1], [284, 0], [284, 1], [286, 0], [286, 1], [287, 0], [287, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
          var $0 = $$.length - 1;
          switch (yystate) {
            case 1:
              $$[$0 - 1] = $$[$0 - 1] || {};
              if (Parser4.base)
                $$[$0 - 1].base = Parser4.base;
              Parser4.base = "";
              $$[$0 - 1].prefixes = Parser4.prefixes;
              Parser4.prefixes = null;
              if (Parser4.pathOnly) {
                if ($$[$0 - 1].type === "path" || "termType" in $$[$0 - 1]) {
                  return $$[$0 - 1];
                }
                throw new Error("Received full SPARQL query in path only mode");
              } else if ($$[$0 - 1].type === "path" || "termType" in $$[$0 - 1]) {
                throw new Error("Received only path in full SPARQL mode");
              }
              if ($$[$0 - 1].type === "update") {
                const insertBnodesAll = {};
                for (const update of $$[$0 - 1].updates) {
                  if (update.updateType === "insert") {
                    const insertBnodes = {};
                    for (const operation2 of update.insert) {
                      if (operation2.type === "bgp" || operation2.type === "graph") {
                        for (const triple2 of operation2.triples) {
                          if (triple2.subject.termType === "BlankNode")
                            insertBnodes[triple2.subject.value] = true;
                          if (triple2.predicate.termType === "BlankNode")
                            insertBnodes[triple2.predicate.value] = true;
                          if (triple2.object.termType === "BlankNode")
                            insertBnodes[triple2.object.value] = true;
                        }
                      }
                    }
                    for (const bnode of Object.keys(insertBnodes)) {
                      if (insertBnodesAll[bnode]) {
                        throw new Error("Detected reuse blank node across different INSERT DATA clauses");
                      }
                      insertBnodesAll[bnode] = true;
                    }
                  }
                }
              }
              return $$[$0 - 1];
              break;
            case 2:
              this.$ = { ...$$[$0 - 1], ...$$[$0], type: "query" };
              break;
            case 4:
              Parser4.base = resolveIRI($$[$0]);
              break;
            case 5:
              if (!Parser4.prefixes)
                Parser4.prefixes = {};
              $$[$0 - 1] = $$[$0 - 1].substr(0, $$[$0 - 1].length - 1);
              $$[$0] = resolveIRI($$[$0]);
              Parser4.prefixes[$$[$0 - 1]] = $$[$0];
              break;
            case 6:
              this.$ = { ...$$[$0 - 3], ...groupDatasets($$[$0 - 2]), ...$$[$0 - 1], ...$$[$0] };
              break;
            case 7:
              if (!Parser4.skipValidation) {
                const counts = flatten($$[$0 - 3].variables.map((vars) => getAggregatesOfExpression(vars.expression))).some((agg) => agg.aggregation === "count" && !(agg.expression instanceof Wildcard));
                if (counts || $$[$0].group) {
                  for (const selectVar of $$[$0 - 3].variables) {
                    if (selectVar.termType === "Variable") {
                      if (!$$[$0].group || !$$[$0].group.map((groupVar) => getExpressionId(groupVar)).includes(getExpressionId(selectVar))) {
                        throw Error("Projection of ungrouped variable (?" + getExpressionId(selectVar) + ")");
                      }
                    } else if (getAggregatesOfExpression(selectVar.expression).length === 0) {
                      const usedVars = getVariablesFromExpression(selectVar.expression);
                      for (const usedVar of usedVars) {
                        if (!$$[$0].group || !$$[$0].group.map || !$$[$0].group.map((groupVar) => getExpressionId(groupVar)).includes(getExpressionId(usedVar))) {
                          throw Error("Use of ungrouped variable in projection of operation (?" + getExpressionId(usedVar) + ")");
                        }
                      }
                    }
                  }
                }
              }
              const subqueries = $$[$0 - 1].where.filter((w) => w.type === "query");
              if (subqueries.length > 0) {
                const selectedVarIds2 = $$[$0 - 3].variables.filter((v) => v.variable && v.variable.value).map((v) => v.variable.value);
                const subqueryIds = flatten(subqueries.map((sub) => sub.variables)).map((v) => v.value || v.variable.value);
                for (const selectedVarId of selectedVarIds2) {
                  if (subqueryIds.indexOf(selectedVarId) >= 0) {
                    throw Error("Target id of 'AS' (?" + selectedVarId + ") already used in subquery");
                  }
                }
              }
              this.$ = extend($$[$0 - 3], groupDatasets($$[$0 - 2]), $$[$0 - 1], $$[$0]);
              break;
            case 8:
              this.$ = extend({ queryType: "CONSTRUCT", template: $$[$0 - 3] }, groupDatasets($$[$0 - 2]), $$[$0 - 1], $$[$0]);
              break;
            case 9:
              this.$ = extend({ queryType: "CONSTRUCT", template: $$[$0 - 2] = $$[$0 - 2] ? $$[$0 - 2].triples : [] }, groupDatasets($$[$0 - 5]), { where: [{ type: "bgp", triples: appendAllTo([], $$[$0 - 2]) }] }, $$[$0]);
              break;
            case 10:
              this.$ = extend({ queryType: "DESCRIBE", variables: $$[$0 - 3] === "*" ? [new Wildcard()] : $$[$0 - 3] }, groupDatasets($$[$0 - 2]), $$[$0 - 1], $$[$0]);
              break;
            case 11:
              this.$ = extend({ queryType: "ASK" }, groupDatasets($$[$0 - 2]), $$[$0 - 1], $$[$0]);
              break;
            case 12:
              this.$ = extend($$[$0 - 1], { variables: [new Wildcard()] });
              break;
            case 13:
              const selectedVarIds = $$[$0].map((v) => v.value || v.variable.value);
              const duplicates = getDuplicatesInArray(selectedVarIds);
              if (duplicates.length > 0) {
                throw Error("Two or more of the resulting columns have the same name (?" + duplicates[0] + ")");
              }
              this.$ = extend($$[$0 - 1], { variables: $$[$0] });
              break;
            case 14:
              this.$ = extend({ queryType: "SELECT" }, $$[$0] && ($$[$0 - 1] = lowercase($$[$0]), $$[$0] = {}, $$[$0][$$[$0 - 1]] = true, $$[$0]));
              break;
            case 16:
            case 27:
              this.$ = expression($$[$0 - 3], { variable: $$[$0 - 1] });
              break;
            case 17:
            case 18:
              this.$ = extend($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], { type: "query" });
              break;
            case 19:
            case 58:
              this.$ = { iri: $$[$0], named: !!$$[$0 - 1] };
              break;
            case 20:
              this.$ = { where: $$[$0].patterns };
              break;
            case 21:
              this.$ = extend($$[$0 - 1], $$[$0]);
              break;
            case 22:
              this.$ = extend($$[$0 - 2], $$[$0 - 1], $$[$0]);
              break;
            case 23:
              this.$ = { group: $$[$0] };
              break;
            case 24:
            case 25:
            case 28:
            case 31:
            case 33:
            case 34:
              this.$ = expression($$[$0]);
              break;
            case 26:
              this.$ = expression($$[$0 - 1]);
              break;
            case 29:
              this.$ = { having: $$[$0] };
              break;
            case 30:
              this.$ = { order: $$[$0] };
              break;
            case 32:
              this.$ = expression($$[$0], { descending: true });
              break;
            case 35:
              this.$ = { limit: toInt($$[$0]) };
              break;
            case 36:
              this.$ = { offset: toInt($$[$0]) };
              break;
            case 37:
              this.$ = { limit: toInt($$[$0 - 2]), offset: toInt($$[$0]) };
              break;
            case 38:
              this.$ = { limit: toInt($$[$0]), offset: toInt($$[$0 - 2]) };
              break;
            case 39:
            case 43:
              this.$ = { type: "values", values: $$[$0] };
              break;
            case 40:
            case 84:
              this.$ = $$[$0 - 1].map((v) => ({ [$$[$0 - 3]]: v }));
              break;
            case 41:
            case 85:
              this.$ = $$[$0 - 1].map(() => ({}));
              break;
            case 42:
            case 86:
              var length = $$[$0 - 4].length;
              $$[$0 - 4] = $$[$0 - 4].map(toVar);
              this.$ = $$[$0 - 1].map(function(values) {
                if (values.length !== length)
                  throw Error("Inconsistent VALUES length");
                var valuesObject = {};
                for (var i2 = 0; i2 < length; i2++)
                  valuesObject["?" + $$[$0 - 4][i2].value] = values[i2];
                return valuesObject;
              });
              break;
            case 44:
            case 65:
            case 100:
            case 126:
            case 175:
              this.$ = $$[$0 - 1];
              break;
            case 45:
              this.$ = { type: "update", updates: appendTo($$[$0 - 2], $$[$0 - 1]) };
              break;
            case 46:
              this.$ = extend({ type: "load", silent: !!$$[$0 - 2], source: $$[$0 - 1] }, $$[$0] && { destination: $$[$0] });
              break;
            case 47:
              this.$ = { type: lowercase($$[$0 - 2]), silent: !!$$[$0 - 1], graph: $$[$0] };
              break;
            case 48:
              this.$ = { type: lowercase($$[$0 - 4]), silent: !!$$[$0 - 3], source: $$[$0 - 2], destination: $$[$0] };
              break;
            case 49:
              this.$ = { type: "create", silent: !!$$[$0 - 2], graph: { type: "graph", name: $$[$0] } };
              break;
            case 50:
              this.$ = { updateType: "insert", insert: ensureNoVariables($$[$0]) };
              break;
            case 51:
              this.$ = { updateType: "delete", delete: ensureNoBnodes(ensureNoVariables($$[$0])) };
              break;
            case 52:
              this.$ = { updateType: "deletewhere", delete: ensureNoBnodes($$[$0]) };
              break;
            case 53:
              this.$ = { updateType: "insertdelete", ...$$[$0 - 4], ...$$[$0 - 3], ...groupDatasets($$[$0 - 2], "using"), where: $$[$0].patterns };
              break;
            case 54:
            case 57:
            case 62:
            case 167:
            case 191:
            case 236:
              this.$ = $$[$0];
              break;
            case 55:
              this.$ = { delete: ensureNoBnodes($$[$0 - 1]), insert: $$[$0] || [] };
              break;
            case 56:
              this.$ = { delete: [], insert: $$[$0] };
              break;
            case 59:
              this.$ = { graph: $$[$0] };
              break;
            case 60:
              this.$ = { type: "graph", default: true };
              break;
            case 61:
            case 63:
              this.$ = { type: "graph", name: $$[$0] };
              break;
            case 64:
              this.$ = { [lowercase($$[$0])]: true };
              break;
            case 66:
              this.$ = $$[$0 - 1] ? unionAll($$[$0], [$$[$0 - 1]]) : unionAll($$[$0]);
              break;
            case 67:
              var graph = extend($$[$0 - 3] || { triples: [] }, { type: "graph", name: $$[$0 - 5] });
              this.$ = $$[$0] ? [graph, $$[$0]] : [graph];
              break;
            case 68:
            case 73:
              this.$ = { type: "bgp", triples: unionAll($$[$0 - 2], [$$[$0 - 1]]) };
              break;
            case 69:
              this.$ = { type: "group", patterns: [$$[$0 - 1]] };
              break;
            case 70:
              for (const binding of $$[$0 - 1].filter((el) => el.type === "bind")) {
                const index = $$[$0 - 1].indexOf(binding);
                const boundVars = /* @__PURE__ */ new Set();
                for (const el of $$[$0 - 1].slice(0, index)) {
                  if (el.type === "group" || el.type === "bgp") {
                    getBoundVarsFromGroupGraphPattern(el).forEach((boundVar) => boundVars.add(boundVar));
                  }
                }
                if (boundVars.has(binding.variable.value)) {
                  throw Error("Variable used to bind is already bound (?" + binding.variable.value + ")");
                }
              }
              this.$ = { type: "group", patterns: $$[$0 - 1] };
              break;
            case 71:
              this.$ = $$[$0 - 1] ? unionAll([$$[$0 - 1]], $$[$0]) : unionAll($$[$0]);
              break;
            case 72:
              this.$ = $$[$0] ? [$$[$0 - 2], $$[$0]] : $$[$0 - 2];
              break;
            case 75:
              this.$ = extend($$[$0], { type: "optional" });
              break;
            case 76:
              this.$ = extend($$[$0], { type: "minus" });
              break;
            case 77:
              this.$ = extend($$[$0], { type: "graph", name: $$[$0 - 1] });
              break;
            case 78:
              this.$ = extend($$[$0], { type: "service", name: $$[$0 - 1], silent: !!$$[$0 - 2] });
              break;
            case 79:
              this.$ = { type: "filter", expression: $$[$0] };
              break;
            case 80:
              this.$ = { type: "bind", variable: $$[$0 - 1], expression: $$[$0 - 3] };
              break;
            case 89:
              this.$ = ensureSparqlStar($$[$0]);
              break;
            case 90:
              this.$ = void 0;
              break;
            case 91:
              this.$ = $$[$0 - 1].length ? { type: "union", patterns: unionAll($$[$0 - 1].map(degroupSingle), [degroupSingle($$[$0])]) } : $$[$0];
              break;
            case 95:
              this.$ = { ...$$[$0], function: $$[$0 - 1] };
              break;
            case 96:
              this.$ = { type: "functionCall", args: [] };
              break;
            case 97:
              this.$ = { type: "functionCall", args: appendTo($$[$0 - 2], $$[$0 - 1]), distinct: !!$$[$0 - 3] };
              break;
            case 98:
            case 115:
            case 128:
            case 247:
            case 249:
            case 251:
            case 253:
            case 255:
            case 263:
            case 267:
            case 297:
            case 299:
            case 303:
            case 307:
            case 328:
            case 341:
            case 349:
            case 355:
            case 361:
            case 367:
            case 369:
            case 373:
            case 375:
            case 379:
            case 381:
            case 385:
            case 391:
            case 395:
            case 401:
            case 405:
            case 409:
            case 411:
            case 420:
            case 428:
            case 430:
            case 440:
            case 444:
            case 446:
            case 448:
              this.$ = [];
              break;
            case 99:
              this.$ = appendTo($$[$0 - 2], $$[$0 - 1]);
              break;
            case 101:
              this.$ = unionAll($$[$0 - 2], [$$[$0 - 1]]);
              break;
            case 102:
            case 112:
              this.$ = applyAnnotations($$[$0].map((t) => extend(triple($$[$0 - 1]), t)));
              break;
            case 103:
              this.$ = applyAnnotations(appendAllTo($$[$0].map((t) => extend(triple($$[$0 - 1].entity), t)), $$[$0 - 1].triples));
              break;
            case 105:
              this.$ = unionAll([$$[$0 - 1]], $$[$0]);
              break;
            case 106:
              this.$ = unionAll($$[$0]);
              break;
            case 107:
              this.$ = objectListToTriples($$[$0 - 1], $$[$0]);
              break;
            case 109:
            case 237:
              this.$ = Parser4.factory.namedNode(RDF_TYPE);
              break;
            case 110:
            case 118:
              this.$ = appendTo($$[$0 - 1], $$[$0]);
              break;
            case 111:
              this.$ = $$[$0] ? { annotation: $$[$0], object: $$[$0 - 1] } : $$[$0 - 1];
              break;
            case 113:
              this.$ = !$$[$0] ? $$[$0 - 1].triples : applyAnnotations(appendAllTo($$[$0].map((t) => extend(triple($$[$0 - 1].entity), t)), $$[$0 - 1].triples));
              break;
            case 114:
              this.$ = objectListToTriples(...$$[$0 - 1], $$[$0]);
              break;
            case 116:
              this.$ = objectListToTriples(...$$[$0]);
              break;
            case 117:
            case 159:
            case 163:
              this.$ = [$$[$0 - 1], $$[$0]];
              break;
            case 119:
              this.$ = $$[$0] ? { object: $$[$0 - 1], annotation: $$[$0] } : $$[$0 - 1];
              ;
              break;
            case 120:
              this.$ = $$[$0 - 1].length ? path("|", appendTo($$[$0 - 1], $$[$0])) : $$[$0];
              break;
            case 121:
              this.$ = $$[$0 - 1].length ? path("/", appendTo($$[$0 - 1], $$[$0])) : $$[$0];
              break;
            case 122:
              this.$ = $$[$0] ? path($$[$0], [$$[$0 - 1]]) : $$[$0 - 1];
              break;
            case 123:
              this.$ = $$[$0 - 1] ? path($$[$0 - 1], [$$[$0]]) : $$[$0];
              ;
              break;
            case 125:
            case 131:
              this.$ = path($$[$0 - 1], [$$[$0]]);
              break;
            case 129:
              this.$ = path("|", appendTo($$[$0 - 2], $$[$0 - 1]));
              break;
            case 132:
            case 134:
              this.$ = createList($$[$0 - 1]);
              break;
            case 133:
            case 135:
              this.$ = createAnonymousObject($$[$0 - 1]);
              break;
            case 140:
              this.$ = { entity: $$[$0], triples: [] };
              break;
            case 145:
              this.$ = toVar($$[$0]);
              break;
            case 149:
              this.$ = Parser4.factory.namedNode(RDF_NIL);
              break;
            case 151:
            case 153:
            case 158:
            case 162:
              this.$ = createOperationTree($$[$0 - 1], $$[$0]);
              break;
            case 152:
              this.$ = ["||", $$[$0]];
              break;
            case 154:
              this.$ = ["&&", $$[$0]];
              break;
            case 156:
              this.$ = operation($$[$0 - 1], [$$[$0 - 2], $$[$0]]);
              break;
            case 157:
              this.$ = operation($$[$0 - 2] ? "notin" : "in", [$$[$0 - 3], $$[$0]]);
              break;
            case 160:
              this.$ = ["+", createOperationTree($$[$0 - 1], $$[$0])];
              break;
            case 161:
              var negatedLiteral = createTypedLiteral($$[$0 - 1].value.replace("-", ""), $$[$0 - 1].datatype);
              this.$ = ["-", createOperationTree(negatedLiteral, $$[$0])];
              break;
            case 164:
              this.$ = operation("UPLUS", [$$[$0]]);
              break;
            case 165:
              this.$ = operation($$[$0 - 1], [$$[$0]]);
              break;
            case 166:
              this.$ = operation("UMINUS", [$$[$0]]);
              break;
            case 177:
              this.$ = operation(lowercase($$[$0 - 1]));
              break;
            case 178:
              this.$ = operation(lowercase($$[$0 - 3]), [$$[$0 - 1]]);
              break;
            case 179:
              this.$ = ensureSparqlStar(operation(lowercase($$[$0 - 3]), [$$[$0 - 1]]));
              break;
            case 180:
              this.$ = operation(lowercase($$[$0 - 5]), [$$[$0 - 3], $$[$0 - 1]]);
              break;
            case 181:
              this.$ = operation(lowercase($$[$0 - 7]), [$$[$0 - 5], $$[$0 - 3], $$[$0 - 1]]);
              break;
            case 182:
              this.$ = ensureSparqlStar(operation(lowercase($$[$0 - 7]), [$$[$0 - 5], $$[$0 - 3], $$[$0 - 1]]));
              break;
            case 183:
              this.$ = operation(lowercase($$[$0 - 1]), $$[$0]);
              break;
            case 184:
              this.$ = operation("bound", [toVar($$[$0 - 1])]);
              break;
            case 185:
              this.$ = operation($$[$0 - 1], []);
              break;
            case 186:
              this.$ = operation($$[$0 - 3], [$$[$0 - 1]]);
              break;
            case 187:
              this.$ = operation($$[$0 - 2] ? "notexists" : "exists", [degroupSingle($$[$0])]);
              break;
            case 188:
            case 189:
              this.$ = expression($$[$0 - 1], { type: "aggregate", aggregation: lowercase($$[$0 - 4]), distinct: !!$$[$0 - 2] });
              break;
            case 190:
              this.$ = expression($$[$0 - 2], { type: "aggregate", aggregation: lowercase($$[$0 - 5]), distinct: !!$$[$0 - 3], separator: typeof $$[$0 - 1] === "string" ? $$[$0 - 1] : " " });
              break;
            case 192:
              this.$ = createTypedLiteral($$[$0]);
              break;
            case 193:
              this.$ = createLangLiteral($$[$0 - 1], lowercase($$[$0].substr(1)));
              break;
            case 194:
              this.$ = createTypedLiteral($$[$0 - 2], $$[$0]);
              break;
            case 195:
            case 204:
              this.$ = createTypedLiteral($$[$0], XSD_INTEGER);
              break;
            case 196:
            case 205:
              this.$ = createTypedLiteral($$[$0], XSD_DECIMAL);
              break;
            case 197:
            case 206:
              this.$ = createTypedLiteral(lowercase($$[$0]), XSD_DOUBLE);
              break;
            case 200:
              this.$ = createTypedLiteral($$[$0].toLowerCase(), XSD_BOOLEAN);
              break;
            case 201:
              this.$ = createTypedLiteral($$[$0].substr(1), XSD_INTEGER);
              break;
            case 202:
              this.$ = createTypedLiteral($$[$0].substr(1), XSD_DECIMAL);
              break;
            case 203:
              this.$ = createTypedLiteral($$[$0].substr(1).toLowerCase(), XSD_DOUBLE);
              break;
            case 207:
            case 208:
              this.$ = unescapeString($$[$0], 1);
              break;
            case 209:
            case 210:
              this.$ = unescapeString($$[$0], 3);
              break;
            case 211:
              this.$ = Parser4.factory.namedNode(resolveIRI($$[$0]));
              break;
            case 213:
              var namePos = $$[$0].indexOf(":"), prefix = $$[$0].substr(0, namePos), expansion = Parser4.prefixes[prefix];
              if (!expansion)
                throw new Error("Unknown prefix: " + prefix);
              var uriString = resolveIRI(expansion + $$[$0].substr(namePos + 1));
              this.$ = Parser4.factory.namedNode(uriString);
              break;
            case 214:
              $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
              if (!($$[$0] in Parser4.prefixes))
                throw new Error("Unknown prefix: " + $$[$0]);
              var uriString = resolveIRI(Parser4.prefixes[$$[$0]]);
              this.$ = Parser4.factory.namedNode(uriString);
              break;
            case 215:
              this.$ = blank($$[$0].replace(/^(_:)/, ""));
              ;
              break;
            case 216:
              this.$ = blank();
              break;
            case 217:
            case 218:
            case 232:
              this.$ = ensureSparqlStar(nestedTriple($$[$0 - 3], $$[$0 - 2], $$[$0 - 1]));
              break;
            case 230:
            case 231:
              this.$ = ensureSparqlStar($$[$0 - 1]);
              break;
            case 248:
            case 250:
            case 252:
            case 254:
            case 256:
            case 260:
            case 264:
            case 268:
            case 270:
            case 292:
            case 294:
            case 296:
            case 298:
            case 300:
            case 302:
            case 304:
            case 306:
            case 329:
            case 342:
            case 356:
            case 368:
            case 370:
            case 372:
            case 374:
            case 392:
            case 402:
            case 425:
            case 427:
            case 429:
            case 431:
            case 441:
            case 445:
            case 447:
            case 449:
              $$[$0 - 1].push($$[$0]);
              break;
            case 259:
            case 269:
            case 291:
            case 293:
            case 295:
            case 301:
            case 305:
            case 371:
            case 424:
            case 426:
              this.$ = [$$[$0]];
              break;
            case 308:
              $$[$0 - 3].push($$[$0 - 2]);
              break;
            case 350:
            case 362:
            case 376:
            case 380:
            case 382:
            case 386:
            case 396:
            case 406:
            case 410:
            case 412:
            case 421:
              $$[$0 - 2].push($$[$0 - 1]);
              break;
          }
        },
        table: [o($V0, $V1, { 3: 1, 4: 2, 10: 3 }), { 1: [3] }, o($V2, [2, 307], { 5: 4, 7: 5, 321: 6, 214: 7, 8: 8, 96: 9, 215: 10, 17: 11, 21: 12, 97: 16, 38: 17, 6: [2, 238], 13: $V3, 16: $V3, 45: $V3, 197: $V3, 224: $V3, 229: $V3, 308: $V3, 24: [1, 13], 32: [1, 14], 36: [1, 15], 41: $V4 }), o([6, 13, 16, 24, 32, 36, 41, 45, 100, 110, 113, 115, 116, 123, 126, 131, 197, 224, 229, 308, 329, 330, 331, 332, 333], [2, 3], { 322: 19, 11: 20, 14: 21, 12: [1, 22], 15: [1, 23] }), { 6: [1, 24] }, { 6: [2, 240] }, { 6: [2, 241] }, { 6: [2, 242] }, { 6: [2, 243], 9: 25, 84: 26, 85: $V5 }, { 6: [2, 239] }, o($V6, [2, 411], { 216: 28, 217: 29 }), o($V7, [2, 249], { 18: 30 }), o($V7, [2, 251], { 22: 31 }), o($V8, [2, 255], { 25: 32, 27: 33, 29: [1, 34] }), { 13: $V9, 16: $Va, 33: 35, 39: [1, 37], 44: 39, 55: 40, 87: $Vb, 139: 38, 307: 43, 308: $Vc, 323: 36 }, o($V7, [2, 267], { 37: 46 }), o($Vd, [2, 326], { 98: 47, 103: 49, 106: 50, 117: 55, 130: 61, 100: [1, 48], 110: [1, 51], 113: [1, 52], 115: [1, 53], 116: [1, 54], 131: [1, 62], 329: [1, 56], 330: [1, 57], 331: [1, 58], 332: [1, 59], 333: [1, 60] }), { 39: [1, 63], 40: 64, 43: 65, 44: 66, 45: $Ve, 87: $Vb }, o($Vf, [2, 273], { 42: 68, 324: 69, 325: [1, 70], 326: [1, 71] }), o($V0, [2, 248]), o($V0, [2, 245]), o($V0, [2, 246]), { 13: [1, 72] }, { 16: [1, 73] }, { 1: [2, 1] }, { 6: [2, 2] }, { 6: [2, 244] }, { 45: [1, 77], 85: [1, 78], 86: 74, 87: [1, 75], 89: [1, 76] }, o([6, 13, 16, 45, 48, 82, 87, 89, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312], [2, 120], { 337: [1, 79] }), o($Vg, [2, 418], { 218: 80, 222: 81, 229: [1, 82] }), { 19: 83, 28: $Vh, 29: $Vi, 52: 84, 53: $Vj, 56: 85 }, { 19: 88, 28: $Vh, 29: $Vi, 52: 89, 53: $Vj, 56: 85 }, o($V7, [2, 253], { 26: 90 }), { 28: [1, 91], 52: 92, 53: $Vj }, o($Vk, [2, 385], { 181: 93, 182: 94, 183: 95, 31: [2, 383] }), o($Vl, [2, 263], { 34: 96 }), o($Vl, [2, 261], { 44: 39, 55: 40, 307: 43, 139: 97, 13: $V9, 16: $Va, 87: $Vb, 308: $Vc }), o($Vl, [2, 262]), o($Vm, [2, 259]), o($Vn, [2, 143]), o($Vn, [2, 144]), o([6, 13, 16, 28, 29, 31, 39, 45, 47, 48, 53, 63, 70, 73, 76, 78, 81, 82, 83, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 197, 224, 229, 231, 232, 242, 246, 250, 263, 265, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 283, 285, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314, 317, 318, 335, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], [2, 145]), o($Vo, [2, 211]), o($Vo, [2, 212]), o($Vo, [2, 213]), o($Vo, [2, 214]), { 19: 98, 28: $Vh, 29: $Vi, 52: 99, 53: $Vj, 56: 85 }, { 6: [2, 309], 99: 100, 193: [1, 101] }, o($Vp, [2, 311], { 101: 102, 328: [1, 103] }), o($Vq, [2, 317], { 104: 104, 328: [1, 105] }), o($Vr, [2, 322], { 107: 106, 328: [1, 107] }), { 111: 108, 112: [2, 324], 328: [1, 109] }, { 29: $Vs, 114: 110 }, { 29: $Vs, 114: 112 }, { 29: $Vs, 114: 113 }, { 118: 114, 123: [1, 115], 125: 116, 126: $Vt }, o($Vu, [2, 315]), o($Vu, [2, 316]), o($Vv, [2, 319]), o($Vv, [2, 320]), o($Vv, [2, 321]), o($Vd, [2, 327]), { 13: $V9, 16: $Va, 55: 118, 307: 43, 308: $Vc }, o($V7, [2, 12]), o($V7, [2, 13], { 44: 66, 43: 119, 45: $Ve, 87: $Vb }), o($Vw, [2, 269]), o($Vw, [2, 15]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 120, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vf, [2, 14]), o($Vf, [2, 274]), o($Vf, [2, 271]), o($Vf, [2, 272]), o($V0, [2, 4]), { 13: [1, 177] }, o($V61, [2, 39]), { 29: [1, 178] }, { 29: [1, 179] }, { 87: [1, 181], 91: 180 }, { 45: [1, 187], 87: [1, 185], 89: [1, 186], 93: 182, 165: 183, 166: 184 }, o($V6, [2, 410]), o([6, 13, 16, 45, 48, 82, 87, 89, 231, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 337], [2, 121], { 338: [1, 188] }), { 13: $V9, 16: $Va, 45: [1, 193], 55: 194, 197: $V71, 219: 189, 220: 190, 223: 191, 224: [1, 192], 307: 43, 308: $Vc }, o($Vg, [2, 419]), o($V81, $V91, { 20: 196, 59: 197, 69: 198, 70: $Va1 }), o($V7, [2, 250]), { 29: $Vb1, 57: 200 }, o($Vp, [2, 279], { 54: 202, 327: [1, 203] }), { 29: [2, 282] }, o($Vc1, $Vd1, { 23: 204, 58: 205, 62: 206, 63: $Ve1 }), o($V7, [2, 252]), { 19: 208, 28: $Vh, 29: $Vi, 52: 209, 53: $Vj, 56: 85 }, { 29: [1, 210] }, o($V8, [2, 256]), { 31: [1, 211] }, { 31: [2, 384] }, { 13: $V9, 16: $Va, 44: 215, 45: $Vf1, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 145: 212, 172: 221, 185: 213, 187: 214, 231: $Vh1, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($Vl1, [2, 265], { 56: 85, 35: 227, 52: 228, 19: 229, 28: $Vh, 29: $Vi, 53: $Vj }), o($Vm, [2, 260]), o($Vc1, $Vd1, { 58: 205, 62: 206, 23: 230, 63: $Ve1 }), o($V7, [2, 268]), { 6: [2, 45] }, o($V0, $V1, { 10: 3, 4: 231 }), { 13: $V9, 16: $Va, 55: 232, 307: 43, 308: $Vc }, o($Vp, [2, 312]), { 105: 233, 112: $Vm1, 122: 234, 132: [1, 237], 134: 235, 327: [1, 238], 334: [1, 239] }, o($Vq, [2, 318]), o($Vp, $Vn1, { 108: 240, 133: 242, 112: $Vo1, 132: $Vp1 }), o($Vr, [2, 323]), { 112: [1, 244] }, { 112: [2, 325] }, o($Vq1, [2, 50]), o($Vk, $Vr1, { 135: 245, 136: 246, 143: 247, 144: 248, 31: $Vs1, 112: $Vs1 }), o($Vq1, [2, 51]), o($Vq1, [2, 52]), o($Vt1, [2, 328], { 119: 249 }), { 29: $Vs, 114: 250 }, o($Vt1, [2, 56]), { 29: $Vs, 114: 251 }, o($Vd, [2, 59]), o($Vw, [2, 270]), { 47: [1, 252] }, o($Vu1, [2, 150]), o($Vv1, [2, 428], { 240: 253 }), o($Vw1, [2, 430], { 244: 254 }), o($Vw1, [2, 155], { 248: 255, 249: 256, 250: [2, 438], 290: [1, 257], 341: [1, 258], 342: [1, 259], 343: [1, 260], 344: [1, 261], 345: [1, 262], 346: [1, 263] }), o($Vx1, [2, 440], { 252: 264 }), o($Vy1, [2, 448], { 260: 265 }), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 255: 154, 257: 155, 264: 266, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 255: 154, 257: 155, 264: 267, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 255: 154, 257: 155, 264: 268, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vy1, [2, 167]), o($Vy1, [2, 168]), o($Vy1, [2, 169]), o($Vy1, [2, 170], { 176: 269, 45: $Vz1, 89: $VA1 }), o($Vy1, [2, 171]), o($Vy1, [2, 172]), o($Vy1, [2, 173]), o($Vy1, [2, 174]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 272, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VB1, [2, 176]), { 89: [1, 273] }, { 45: [1, 274] }, { 45: [1, 275] }, { 45: [1, 276] }, { 45: [1, 277] }, { 45: [1, 278] }, { 45: $VC1, 89: $VD1, 179: 279 }, { 45: [1, 282] }, { 45: [1, 284], 89: [1, 283] }, { 279: [1, 285] }, o($VE1, [2, 192], { 292: [1, 286], 293: [1, 287] }), o($VE1, [2, 195]), o($VE1, [2, 196]), o($VE1, [2, 197]), o($VE1, [2, 198]), o($VE1, [2, 199]), o($VE1, [2, 200]), { 13: $V9, 16: $Va, 44: 39, 55: 40, 82: $Vy, 87: $Vb, 139: 289, 172: 291, 255: 154, 257: 155, 266: 290, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 320: 288 }, { 45: [1, 292] }, { 45: [1, 293] }, { 45: [1, 294] }, o($VF1, [2, 452]), o($VF1, [2, 453]), o($VF1, [2, 454]), o($VF1, [2, 455]), o($VF1, [2, 456]), { 279: [2, 458] }, o($VG1, [2, 207]), o($VG1, [2, 208]), o($VG1, [2, 209]), o($VG1, [2, 210]), o($VE1, [2, 201]), o($VE1, [2, 202]), o($VE1, [2, 203]), o($VE1, [2, 204]), o($VE1, [2, 205]), o($VE1, [2, 206]), o($V0, [2, 5]), o($VH1, [2, 297], { 88: 295 }), o($VI1, [2, 299], { 90: 296 }), { 48: [1, 297], 87: [1, 298] }, o($VJ1, [2, 301]), o($V61, [2, 43]), o($V61, [2, 82]), o($V61, [2, 83]), { 29: [1, 299] }, { 29: [1, 300] }, { 87: [1, 302], 169: 301 }, o($V6, [2, 412]), o($VK1, [2, 123]), o($VK1, [2, 416], { 221: 303, 339: 304, 39: [1, 306], 263: [1, 307], 340: [1, 305] }), o($VL1, [2, 124]), { 13: $V9, 16: $Va, 45: [1, 311], 55: 194, 89: [1, 310], 197: $V71, 223: 312, 225: 308, 226: 309, 229: $VM1, 307: 43, 308: $Vc }, o($V6, $V3, { 215: 10, 214: 314 }), o($VL1, [2, 236]), o($VL1, [2, 237]), o($VN1, [2, 6]), o($VO1, [2, 287], { 60: 315, 72: 316, 73: [1, 317] }), o($V81, [2, 286]), { 13: $V9, 16: $Va, 45: $Vx, 55: 323, 67: 321, 68: 322, 71: 318, 77: 320, 79: 319, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 307: 43, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o([6, 31, 63, 70, 73, 81, 83, 85], [2, 20]), o($Vk, $VP1, { 38: 17, 49: 324, 147: 325, 17: 326, 21: 327, 148: 328, 154: 329, 155: 330, 29: $VQ1, 31: $VQ1, 85: $VQ1, 112: $VQ1, 159: $VQ1, 160: $VQ1, 161: $VQ1, 163: $VQ1, 164: $VQ1, 41: $V4 }), { 13: $V9, 16: $Va, 55: 331, 307: 43, 308: $Vc }, o($Vp, [2, 280]), o($VN1, [2, 7]), o($V81, $V91, { 59: 197, 69: 198, 20: 332, 70: $Va1 }), o($Vc1, [2, 284]), { 64: [1, 333] }, o($Vc1, $Vd1, { 58: 205, 62: 206, 23: 334, 63: $Ve1 }), o($V7, [2, 254]), o($Vk, $Vr1, { 144: 248, 30: 335, 143: 336, 31: [2, 257] }), o($V7, [2, 100]), { 31: [2, 387], 184: 337, 335: [1, 338] }, { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 342, 186: 339, 190: 340, 195: 341, 197: $VR1, 307: 43, 308: $Vc }, o($VS1, [2, 389], { 44: 39, 55: 40, 307: 43, 190: 340, 195: 341, 139: 342, 188: 344, 189: 345, 186: 346, 13: $V9, 16: $Va, 87: $Vb, 197: $VR1, 308: $Vc }), o($VT1, [2, 227]), o($VT1, [2, 228]), o($VT1, [2, 229]), { 13: $V9, 16: $Va, 44: 215, 45: $Vf1, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 172: 221, 185: 351, 187: 350, 200: 348, 230: 347, 231: $Vh1, 234: 349, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 342, 186: 352, 190: 340, 195: 341, 197: $VR1, 307: 43, 308: $Vc }, o($VT1, [2, 146]), o($VT1, [2, 147]), o($VT1, [2, 148]), o($VT1, [2, 149]), { 13: $V9, 16: $Va, 44: 354, 55: 355, 82: $Vy, 87: $Vb, 172: 357, 237: 356, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 358, 312: $Vk1, 313: 353 }, o($VU1, [2, 215]), o($VU1, [2, 216]), o($Vc1, $Vd1, { 58: 205, 62: 206, 23: 359, 63: $Ve1 }), o($Vl, [2, 264]), o($Vl1, [2, 266]), o($VN1, [2, 11]), o($V2, [2, 308], { 6: [2, 310] }), o($Vq1, [2, 313], { 102: 360, 120: 361, 121: [1, 362] }), o($Vq1, [2, 47]), o($Vq1, [2, 63]), o($Vq1, [2, 64]), { 13: $V9, 16: $Va, 55: 363, 307: 43, 308: $Vc }, o($Vq1, [2, 336]), o($Vq1, [2, 337]), o($Vq1, [2, 338]), { 109: [1, 364] }, o($VV1, [2, 60]), { 13: $V9, 16: $Va, 55: 365, 307: 43, 308: $Vc }, o($Vp, [2, 335]), { 13: $V9, 16: $Va, 55: 366, 307: 43, 308: $Vc }, { 31: [1, 367] }, o($VW1, [2, 341], { 137: 368 }), o($VW1, [2, 340]), { 13: $V9, 16: $Va, 44: 215, 45: $Vf1, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 145: 369, 172: 221, 185: 213, 187: 214, 231: $Vh1, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, { 28: [1, 370], 127: 371, 128: [1, 372] }, o($Vt1, [2, 330], { 124: 373, 125: 374, 126: $Vt }), o($Vt1, [2, 57]), { 44: 375, 87: $Vb }, o($Vu1, [2, 151], { 241: 376, 242: [1, 377] }), o($Vv1, [2, 153], { 245: 378, 246: [1, 379] }), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 247: 380, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 250: [1, 381] }, o($VX1, [2, 432]), o($VX1, [2, 433]), o($VX1, [2, 434]), o($VX1, [2, 435]), o($VX1, [2, 436]), o($VX1, [2, 437]), { 250: [2, 439] }, o([47, 48, 193, 242, 246, 250, 272, 290, 341, 342, 343, 344, 345, 346], [2, 158], { 253: 382, 254: 383, 255: 384, 257: 385, 263: [1, 386], 265: [1, 387], 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW }), o($Vx1, [2, 162], { 261: 388, 262: 389, 39: $VY1, 338: $VZ1 }), o($Vy1, [2, 164]), o($Vy1, [2, 165]), o($Vy1, [2, 166]), o($VB1, [2, 95]), o($VB1, [2, 96]), o($VX1, [2, 377], { 177: 392, 325: [1, 393] }), { 48: [1, 394] }, o($VB1, [2, 177]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 395, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 396, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 397, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 398, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 399, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VB1, [2, 183]), o($VB1, [2, 98]), o($VX1, [2, 381], { 180: 400 }), { 87: [1, 401] }, o($VB1, [2, 185]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 402, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 29: $Vb1, 57: 403 }, o($VE1, [2, 193]), { 13: $V9, 16: $Va, 55: 404, 307: 43, 308: $Vc }, { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 342, 195: 405, 197: $VR1, 307: 43, 308: $Vc }, o($V_1, [2, 233]), o($V_1, [2, 234]), o($V_1, [2, 235]), o($V$1, [2, 459], { 281: 406, 325: [1, 407] }), o($VX1, [2, 463], { 284: 408, 325: [1, 409] }), o($VX1, [2, 465], { 286: 410, 325: [1, 411] }), { 13: $V9, 16: $Va, 31: [1, 412], 55: 414, 82: $Vy, 171: 413, 172: 415, 173: 416, 174: $V02, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V12 }, { 31: [1, 419], 89: [1, 420] }, { 29: [1, 421] }, o($VJ1, [2, 302]), o($VH1, [2, 367], { 167: 422 }), o($VI1, [2, 369], { 168: 423 }), { 48: [1, 424], 87: [1, 425] }, o($VJ1, [2, 371]), o($VK1, [2, 122]), o($VK1, [2, 417]), o($VK1, [2, 413]), o($VK1, [2, 414]), o($VK1, [2, 415]), o($VL1, [2, 125]), o($VL1, [2, 127]), o($VL1, [2, 128]), o($V22, [2, 420], { 227: 426 }), o($VL1, [2, 130]), { 13: $V9, 16: $Va, 55: 194, 197: $V71, 223: 427, 307: 43, 308: $Vc }, { 48: [1, 428] }, o($V32, [2, 289], { 61: 429, 80: 430, 81: [1, 431], 83: [1, 432] }), o($VO1, [2, 288]), { 64: [1, 433] }, o($V81, [2, 29], { 307: 43, 267: 139, 275: 146, 278: 149, 77: 320, 67: 321, 68: 322, 55: 323, 79: 434, 13: $V9, 16: $Va, 45: $Vx, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 276: $VI, 277: $VJ, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }), o($V42, [2, 293]), o($V52, [2, 92]), o($V52, [2, 93]), o($V52, [2, 94]), { 45: $Vz1, 89: $VA1, 176: 269 }, { 31: [1, 435] }, { 31: [1, 436] }, { 19: 437, 28: $Vh, 29: $Vi, 56: 85 }, { 19: 438, 28: $Vh, 29: $Vi, 56: 85 }, o($V62, [2, 355], { 149: 439 }), o($V62, [2, 354]), { 13: $V9, 16: $Va, 44: 215, 45: $V72, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 156: 440, 172: 221, 185: 441, 203: 442, 231: $V82, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($Vl, [2, 19]), o($V32, [2, 21]), { 13: $V9, 16: $Va, 44: 450, 45: $V92, 55: 323, 65: 445, 66: 446, 67: 447, 68: 448, 87: $Vb, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 307: 43, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VN1, [2, 8]), { 31: [1, 451] }, { 31: [2, 258] }, { 31: [2, 101] }, o($Vk, [2, 386], { 31: [2, 388] }), o($VS1, [2, 102]), o($Va2, [2, 391], { 191: 452 }), o($Vk, [2, 395], { 196: 453, 198: 454 }), o($Vk, [2, 108]), o($Vk, [2, 109]), o($VS1, [2, 103]), o($VS1, [2, 104]), o($VS1, [2, 390]), { 13: $V9, 16: $Va, 44: 215, 45: $Vf1, 48: [1, 455], 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 172: 221, 185: 351, 187: 350, 200: 456, 231: $Vh1, 234: 349, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($Vb2, [2, 424]), o($Vc2, [2, 136]), o($Vc2, [2, 137]), o($Vd2, [2, 140]), { 232: [1, 457] }, { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 342, 195: 458, 197: $VR1, 307: 43, 308: $Vc }, o($V_1, [2, 219]), o($V_1, [2, 220]), o($V_1, [2, 221]), o($V_1, [2, 222]), o($V_1, [2, 223]), o($VN1, [2, 10]), o($Vq1, [2, 46]), o($Vq1, [2, 314]), { 112: $Vm1, 122: 459 }, o($Vq1, [2, 62]), o($Vp, $Vn1, { 133: 242, 108: 460, 112: $Vo1, 132: $Vp1 }), o($VV1, [2, 61]), o($Vq1, [2, 49]), o([6, 28, 126, 128, 193], [2, 65]), { 31: [2, 66], 112: [1, 462], 138: 461 }, o($VW1, [2, 351], { 146: 463, 335: [1, 464] }), { 29: $Vb1, 57: 465 }, o($Vt1, [2, 329]), o($Vp, [2, 332], { 129: 466, 327: [1, 467] }), o($Vt1, [2, 55]), o($Vt1, [2, 331]), { 48: [1, 468] }, o($Vv1, [2, 429]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 239: 469, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vw1, [2, 431]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 243: 470, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vw1, [2, 156]), { 45: $VC1, 89: $VD1, 179: 471 }, o($Vx1, [2, 441]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 251: 472, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vy1, [2, 444], { 256: 473 }), o($Vy1, [2, 446], { 258: 474 }), o($VX1, [2, 442]), o($VX1, [2, 443]), o($Vy1, [2, 449]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 255: 154, 257: 155, 259: 475, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VX1, [2, 450]), o($VX1, [2, 451]), o($VX1, [2, 379], { 178: 476 }), o($VX1, [2, 378]), o([6, 13, 16, 29, 31, 39, 45, 47, 48, 73, 76, 78, 81, 82, 83, 85, 87, 89, 112, 159, 160, 161, 163, 164, 193, 231, 242, 246, 250, 263, 265, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 280, 283, 285, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 335, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], [2, 175]), { 48: [1, 477] }, { 48: [1, 478] }, { 272: [1, 479] }, { 272: [1, 480] }, { 272: [1, 481] }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 482, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 48: [1, 483] }, { 48: [1, 484] }, o($VB1, [2, 187]), o($VE1, [2, 194]), { 13: $V9, 16: $Va, 44: 39, 55: 40, 82: $Vy, 87: $Vb, 139: 289, 172: 291, 255: 154, 257: 155, 266: 290, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 320: 485 }, { 13: $V9, 16: $Va, 39: [1, 487], 44: 136, 45: $Vx, 46: 488, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 282: 486, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($V$1, [2, 460]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 489, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VX1, [2, 464]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 490, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VX1, [2, 466]), o($V61, [2, 40]), o($VH1, [2, 298]), o($Ve2, [2, 87]), o($Ve2, [2, 88]), o($Ve2, [2, 89]), o($Ve2, [2, 90]), { 13: $V9, 16: $Va, 55: 492, 82: $Vy, 172: 493, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 311: 494, 312: $Vk1, 315: 491 }, o($V61, [2, 41]), o($VI1, [2, 300]), o($Vf2, [2, 303], { 92: 495 }), { 13: $V9, 16: $Va, 31: [1, 496], 55: 414, 82: $Vy, 171: 497, 172: 415, 173: 416, 174: $V02, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V12 }, { 31: [1, 498], 89: [1, 499] }, { 29: [1, 500] }, o($VJ1, [2, 372]), { 13: $V9, 16: $Va, 48: [2, 422], 55: 194, 197: $V71, 223: 312, 226: 502, 228: 501, 229: $VM1, 307: 43, 308: $Vc }, o($VL1, [2, 131]), o($VL1, [2, 126]), o($V32, [2, 22]), o($V32, [2, 290]), { 82: [1, 503] }, { 82: [1, 504] }, { 13: $V9, 16: $Va, 44: 510, 45: $Vx, 55: 323, 67: 321, 68: 322, 74: 505, 75: 506, 76: $Vg2, 77: 320, 78: $Vh2, 79: 509, 87: $Vb, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 307: 43, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($V42, [2, 294]), o($Vi2, [2, 69]), o($Vi2, [2, 70]), o($V81, $V91, { 59: 197, 69: 198, 20: 511, 70: $Va1 }), o($Vc1, $Vd1, { 58: 205, 62: 206, 23: 512, 63: $Ve1 }), { 29: [2, 375], 31: [2, 71], 84: 522, 85: $V5, 112: [1, 518], 150: 513, 151: 514, 158: 515, 159: [1, 516], 160: [1, 517], 161: [1, 519], 163: [1, 520], 164: [1, 521], 175: 523 }, o($V62, [2, 363], { 157: 524, 335: [1, 525] }), o($V6, $V3, { 215: 10, 202: 526, 205: 527, 208: 528, 214: 529, 44: 530, 87: $Vb }), o($Vj2, [2, 399], { 215: 10, 205: 527, 208: 528, 214: 529, 44: 530, 204: 531, 202: 532, 13: $V3, 16: $V3, 45: $V3, 197: $V3, 224: $V3, 229: $V3, 308: $V3, 87: $Vb }), { 13: $V9, 16: $Va, 44: 215, 45: $V72, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 172: 221, 185: 351, 203: 536, 212: 534, 231: $V82, 233: 533, 234: 535, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($V6, $V3, { 215: 10, 205: 527, 208: 528, 214: 529, 44: 530, 202: 537, 87: $Vb }), o($Vc1, [2, 23], { 307: 43, 267: 139, 275: 146, 278: 149, 55: 323, 67: 447, 68: 448, 44: 450, 66: 538, 13: $V9, 16: $Va, 45: $V92, 87: $Vb, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 276: $VI, 277: $VJ, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }), o($Vk2, [2, 291]), o($Vk2, [2, 24]), o($Vk2, [2, 25]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 539, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vk2, [2, 28]), o($Vc1, $Vd1, { 58: 205, 62: 206, 23: 540, 63: $Ve1 }), o([31, 112, 232, 318, 335], [2, 105], { 192: 541, 193: [1, 542] }), o($Va2, [2, 107]), { 13: $V9, 16: $Va, 44: 215, 45: $Vf1, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 172: 221, 185: 351, 187: 350, 199: 543, 200: 544, 231: $Vh1, 234: 349, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($Vl2, [2, 132]), o($Vb2, [2, 425]), o($Vl2, [2, 133]), { 13: $V9, 16: $Va, 44: 354, 55: 355, 82: $Vy, 87: $Vb, 172: 357, 237: 356, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 358, 312: $Vk1, 313: 545 }, o($Vq1, [2, 54]), o($Vq1, [2, 48]), o($VW1, [2, 342]), { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 546, 307: 43, 308: $Vc }, o($VW1, [2, 68]), o($Vk, [2, 350], { 31: $Vm2, 112: $Vm2 }), o($Vq1, [2, 53]), { 13: $V9, 16: $Va, 55: 547, 307: 43, 308: $Vc }, o($Vp, [2, 333]), o($Vw, [2, 16]), o($Vv1, [2, 152]), o($Vw1, [2, 154]), o($Vw1, [2, 157]), o($Vx1, [2, 159]), o($Vx1, [2, 160], { 262: 389, 261: 548, 39: $VY1, 338: $VZ1 }), o($Vx1, [2, 161], { 262: 389, 261: 549, 39: $VY1, 338: $VZ1 }), o($Vy1, [2, 163]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 550, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VB1, [2, 178]), o($VB1, [2, 179]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 551, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 552, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 553, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 48: [1, 554], 272: [1, 555] }, o($VB1, [2, 184]), o($VB1, [2, 186]), { 314: [1, 556] }, { 48: [1, 557] }, { 48: [2, 461] }, { 48: [2, 462] }, { 48: [1, 558] }, { 48: [2, 467], 193: [1, 561], 287: 559, 288: 560 }, { 13: $V9, 16: $Va, 55: 194, 197: $V71, 223: 562, 307: 43, 308: $Vc }, o($Vn2, [2, 224]), o($Vn2, [2, 225]), o($Vn2, [2, 226]), { 31: [1, 563], 45: $Vo2, 94: 564 }, o($V61, [2, 84]), o($VH1, [2, 368]), o($V61, [2, 85]), o($VI1, [2, 370]), o($Vf2, [2, 373], { 170: 566 }), { 48: [1, 567] }, { 48: [2, 423], 337: [1, 568] }, o($V32, [2, 35], { 83: [1, 569] }), o($V32, [2, 36], { 81: [1, 570] }), o($VO1, [2, 30], { 307: 43, 267: 139, 275: 146, 278: 149, 77: 320, 67: 321, 68: 322, 55: 323, 79: 509, 44: 510, 75: 571, 13: $V9, 16: $Va, 45: $Vx, 76: $Vg2, 78: $Vh2, 87: $Vb, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 276: $VI, 277: $VJ, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }), o($Vp2, [2, 295]), { 45: $Vx, 77: 572 }, { 45: $Vx, 77: 573 }, o($Vp2, [2, 33]), o($Vp2, [2, 34]), { 31: [2, 275], 50: 574, 84: 575, 85: $V5 }, { 31: [2, 277], 51: 576, 84: 577, 85: $V5 }, o($V62, [2, 356]), o($Vq2, [2, 357], { 152: 578, 335: [1, 579] }), o($Vr2, [2, 74]), { 29: $Vb1, 57: 580 }, { 29: $Vb1, 57: 581 }, { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 582, 307: 43, 308: $Vc }, o($Vs2, [2, 365], { 162: 583, 328: [1, 584] }), { 13: $V9, 16: $Va, 45: $Vx, 55: 323, 67: 321, 68: 322, 77: 320, 79: 585, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 307: 43, 308: $Vc, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 45: [1, 586] }, o($Vr2, [2, 81]), { 29: $Vb1, 57: 587 }, o($V62, [2, 73]), o($Vk, [2, 362], { 29: $Vt2, 31: $Vt2, 85: $Vt2, 112: $Vt2, 159: $Vt2, 160: $Vt2, 161: $Vt2, 163: $Vt2, 164: $Vt2 }), o($Vj2, [2, 112]), o($Vu2, [2, 401], { 206: 588 }), o($Vk, [2, 405], { 209: 589, 210: 590 }), o($Vk, [2, 403]), o($Vk, [2, 404]), o($Vj2, [2, 113]), o($Vj2, [2, 400]), { 13: $V9, 16: $Va, 44: 215, 45: $V72, 48: [1, 591], 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 172: 221, 185: 351, 203: 536, 212: 592, 231: $V82, 234: 535, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($Vb2, [2, 426]), o($Vd2, [2, 138]), o($Vd2, [2, 139]), { 232: [1, 593] }, o($Vk2, [2, 292]), { 47: [1, 595], 48: [1, 594] }, o($VN1, [2, 9]), o($Va2, [2, 392]), o($Va2, [2, 393], { 44: 39, 55: 40, 307: 43, 195: 341, 139: 342, 194: 596, 190: 597, 13: $V9, 16: $Va, 87: $Vb, 197: $VR1, 308: $Vc }), o($Va2, [2, 110], { 272: [1, 598] }), o($Vv2, [2, 397], { 201: 599, 316: 600, 317: [1, 601] }), { 314: [1, 602] }, { 29: [1, 603] }, o($Vt1, [2, 58]), o($Vy1, [2, 445]), o($Vy1, [2, 447]), { 48: [1, 604], 272: [1, 605] }, { 48: [1, 606] }, { 272: [1, 607] }, { 272: [1, 608] }, o($VB1, [2, 99]), o($VX1, [2, 382]), o([13, 16, 39, 47, 48, 87, 193, 197, 242, 246, 250, 263, 265, 272, 290, 297, 298, 299, 300, 301, 302, 308, 314, 338, 341, 342, 343, 344, 345, 346], [2, 232]), o($VB1, [2, 188]), o($VB1, [2, 189]), { 48: [1, 609] }, { 48: [2, 468] }, { 289: [1, 610] }, { 13: $V9, 16: $Va, 55: 492, 82: $Vy, 172: 493, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 311: 494, 312: $Vk1, 315: 611 }, o($V61, [2, 42]), o($Vf2, [2, 304]), { 13: $V9, 16: $Va, 55: 414, 82: $Vy, 95: 612, 171: 613, 172: 415, 173: 416, 174: $V02, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V12 }, { 31: [1, 614], 45: $Vo2, 94: 615 }, o($VL1, [2, 129]), o($V22, [2, 421]), { 82: [1, 616] }, { 82: [1, 617] }, o($Vp2, [2, 296]), o($Vp2, [2, 31]), o($Vp2, [2, 32]), { 31: [2, 17] }, { 31: [2, 276] }, { 31: [2, 18] }, { 31: [2, 278] }, o($Vk, $VP1, { 155: 330, 153: 618, 154: 619, 29: $Vw2, 31: $Vw2, 85: $Vw2, 112: $Vw2, 159: $Vw2, 160: $Vw2, 161: $Vw2, 163: $Vw2, 164: $Vw2 }), o($Vq2, [2, 358]), o($Vr2, [2, 75]), o($Vr2, [2, 76]), { 29: $Vb1, 57: 620 }, { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 621, 307: 43, 308: $Vc }, o($Vs2, [2, 366]), o($Vr2, [2, 79]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 622, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($Vr2, [2, 91], { 336: [1, 623] }), o([29, 31, 85, 112, 159, 160, 161, 163, 164, 232, 318, 335], [2, 114], { 207: 624, 193: [1, 625] }), o($Vu2, [2, 117]), { 13: $V9, 16: $Va, 44: 215, 45: $V72, 55: 220, 82: $Vy, 87: $Vb, 89: $Vg1, 172: 221, 185: 351, 203: 536, 211: 626, 212: 627, 231: $V82, 234: 535, 236: 216, 237: 222, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 309: $Vi1, 310: $Vj1, 311: 217, 312: $Vk1 }, o($VT1, [2, 134]), o($Vb2, [2, 427]), o($VT1, [2, 135]), o($Vk2, [2, 26]), { 44: 628, 87: $Vb }, o($Va2, [2, 106]), o($Va2, [2, 394]), o($Vk, [2, 396]), o($Vv2, [2, 111]), o($Vv2, [2, 398]), { 13: $V9, 16: $Va, 44: 39, 55: 40, 87: $Vb, 139: 342, 186: 629, 190: 340, 195: 341, 197: $VR1, 307: 43, 308: $Vc }, o($VU1, [2, 217]), o($Vk, $Vr1, { 144: 248, 140: 630, 143: 631, 31: [2, 343] }), o($VB1, [2, 97]), o($VX1, [2, 380]), o($VB1, [2, 180]), { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 632, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, { 13: $V9, 16: $Va, 44: 136, 45: $Vx, 46: 633, 55: 133, 67: 132, 68: 134, 77: 131, 82: $Vy, 87: $Vb, 172: 135, 224: $Vz, 238: 121, 239: 122, 243: 123, 247: 124, 251: 125, 255: 154, 257: 155, 259: 126, 263: $VA, 264: 130, 265: $VB, 266: 137, 267: 139, 268: $VC, 269: $VD, 270: $VE, 271: $VF, 273: $VG, 274: $VH, 275: 146, 276: $VI, 277: $VJ, 278: 149, 279: $VK, 280: $VL, 283: $VM, 285: $VN, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V$, 346: $V01, 347: $V11, 348: $V21, 349: $V31, 350: $V41, 351: $V51 }, o($VB1, [2, 190]), { 290: [1, 634] }, { 314: [1, 635] }, { 13: $V9, 16: $Va, 48: [1, 636], 55: 414, 82: $Vy, 171: 637, 172: 415, 173: 416, 174: $V02, 255: 154, 257: 155, 291: 150, 294: $VO, 295: $VP, 296: $VQ, 297: $VR, 298: $VS, 299: $VT, 300: $VU, 301: $VV, 302: $VW, 303: $VX, 304: $VY, 305: $VZ, 306: $V_, 307: 43, 308: $Vc, 312: $V12 }, o($Vx2, [2, 305]), o($V61, [2, 86]), o($Vf2, [2, 374]), o($V32, [2, 37]), o($V32, [2, 38]), o($V62, [2, 72]), o($V62, [2, 360]), o($Vr2, [2, 77]), { 29: $Vb1, 57: 638 }, { 47: [1, 639] }, { 29: [2, 376] }, o($Vu2, [2, 402]), o($Vu2, [2, 115], { 215: 10, 208: 528, 214: 529, 44: 530, 205: 640, 13: $V3, 16: $V3, 45: $V3, 197: $V3, 224: $V3, 229: $V3, 308: $V3, 87: $Vb }), o($Vu2, [2, 118], { 272: [1, 641] }), o($Vy2, [2, 407], { 213: 642, 319: 643, 317: [1, 644] }), { 48: [1, 645] }, { 318: [1, 646] }, { 31: [1, 647] }, { 31: [2, 344] }, { 48: [1, 648] }, { 48: [1, 649] }, { 291: 650, 303: $VX, 304: $VY, 305: $VZ, 306: $V_ }, o($Ve2, [2, 218]), o($Vf2, [2, 44]), o($Vx2, [2, 306]), o($Vr2, [2, 78]), { 44: 651, 87: $Vb }, o($Vu2, [2, 116]), o($Vk, [2, 406]), o($Vy2, [2, 119]), o($Vy2, [2, 408]), o($V6, $V3, { 215: 10, 205: 527, 208: 528, 214: 529, 44: 530, 202: 652, 87: $Vb }), o($Vk2, [2, 27]), o($Vv2, [2, 230]), o($Vz2, [2, 345], { 141: 653, 335: [1, 654] }), o($VB1, [2, 181]), o($VB1, [2, 182]), { 48: [2, 191] }, { 48: [1, 655] }, { 318: [1, 656] }, o($Vk, $Vr1, { 144: 248, 142: 657, 143: 658, 31: $VA2, 112: $VA2 }), o($Vz2, [2, 346]), o($Vr2, [2, 80]), o($Vy2, [2, 231]), o($VW1, [2, 67]), o($VW1, [2, 348])],
        defaultActions: { 5: [2, 240], 6: [2, 241], 7: [2, 242], 9: [2, 239], 24: [2, 1], 25: [2, 2], 26: [2, 244], 87: [2, 282], 94: [2, 384], 100: [2, 45], 109: [2, 325], 166: [2, 458], 263: [2, 439], 336: [2, 258], 337: [2, 101], 487: [2, 461], 488: [2, 462], 560: [2, 468], 574: [2, 17], 575: [2, 276], 576: [2, 18], 577: [2, 278], 623: [2, 376], 631: [2, 344], 650: [2, 191] },
        parseError: function parseError(str, hash) {
          if (hash.recoverable) {
            this.trace(str);
          } else {
            var error2 = new Error(str);
            error2.hash = hash;
            throw error2;
          }
        },
        parse: function parse(input) {
          var self2 = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
          var args = lstack.slice.call(arguments, 1);
          var lexer2 = Object.create(this.lexer);
          var sharedState = { yy: {} };
          for (var k in this.yy) {
            if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
              sharedState.yy[k] = this.yy[k];
            }
          }
          lexer2.setInput(input, sharedState.yy);
          sharedState.yy.lexer = lexer2;
          sharedState.yy.parser = this;
          if (typeof lexer2.yylloc == "undefined") {
            lexer2.yylloc = {};
          }
          var yyloc = lexer2.yylloc;
          lstack.push(yyloc);
          var ranges = lexer2.options && lexer2.options.ranges;
          if (typeof sharedState.yy.parseError === "function") {
            this.parseError = sharedState.yy.parseError;
          } else {
            this.parseError = Object.getPrototypeOf(this).parseError;
          }
          function popStack(n) {
            stack.length = stack.length - 2 * n;
            vstack.length = vstack.length - n;
            lstack.length = lstack.length - n;
          }
          _token_stack:
            var lex = function() {
              var token;
              token = lexer2.lex() || EOF;
              if (typeof token !== "number") {
                token = self2.symbols_[token] || token;
              }
              return token;
            };
          var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
          while (true) {
            state = stack[stack.length - 1];
            if (this.defaultActions[state]) {
              action = this.defaultActions[state];
            } else {
              if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
              }
              action = table[state] && table[state][symbol];
            }
            if (typeof action === "undefined" || !action.length || !action[0]) {
              var errStr = "";
              expected = [];
              for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                  expected.push("'" + this.terminals_[p] + "'");
                }
              }
              if (lexer2.showPosition) {
                errStr = "Parse error on line " + (yylineno + 1) + ":\n" + lexer2.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
              } else {
                errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == EOF ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
              }
              this.parseError(errStr, {
                text: lexer2.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer2.yylineno,
                loc: yyloc,
                expected
              });
            }
            if (action[0] instanceof Array && action.length > 1) {
              throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
            }
            switch (action[0]) {
              case 1:
                stack.push(symbol);
                vstack.push(lexer2.yytext);
                lstack.push(lexer2.yylloc);
                stack.push(action[1]);
                symbol = null;
                if (!preErrorSymbol) {
                  yyleng = lexer2.yyleng;
                  yytext = lexer2.yytext;
                  yylineno = lexer2.yylineno;
                  yyloc = lexer2.yylloc;
                  if (recovering > 0) {
                    recovering--;
                  }
                } else {
                  symbol = preErrorSymbol;
                  preErrorSymbol = null;
                }
                break;
              case 2:
                len = this.productions_[action[1]][1];
                yyval.$ = vstack[vstack.length - len];
                yyval._$ = {
                  first_line: lstack[lstack.length - (len || 1)].first_line,
                  last_line: lstack[lstack.length - 1].last_line,
                  first_column: lstack[lstack.length - (len || 1)].first_column,
                  last_column: lstack[lstack.length - 1].last_column
                };
                if (ranges) {
                  yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                  ];
                }
                r = this.performAction.apply(yyval, [
                  yytext,
                  yyleng,
                  yylineno,
                  sharedState.yy,
                  action[1],
                  vstack,
                  lstack
                ].concat(args));
                if (typeof r !== "undefined") {
                  return r;
                }
                if (len) {
                  stack = stack.slice(0, -1 * len * 2);
                  vstack = vstack.slice(0, -1 * len);
                  lstack = lstack.slice(0, -1 * len);
                }
                stack.push(this.productions_[action[1]][0]);
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                break;
              case 3:
                return true;
            }
          }
          return true;
        }
      };
      var Wildcard = require_Wildcard().Wildcard;
      var RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#", RDF_TYPE = RDF + "type", RDF_FIRST = RDF + "first", RDF_REST = RDF + "rest", RDF_NIL = RDF + "nil", XSD = "http://www.w3.org/2001/XMLSchema#", XSD_INTEGER = XSD + "integer", XSD_DECIMAL = XSD + "decimal", XSD_DOUBLE = XSD + "double", XSD_BOOLEAN = XSD + "boolean";
      var base = "", basePath = "", baseRoot = "";
      function lowercase(string) {
        return string.toLowerCase();
      }
      function appendTo(array, item) {
        return array.push(item), array;
      }
      function appendAllTo(array, items) {
        return array.push.apply(array, items), array;
      }
      function extend(base2) {
        if (!base2)
          base2 = {};
        for (var i2 = 1, l = arguments.length, arg; i2 < l && (arg = arguments[i2] || {}); i2++)
          for (var name in arg)
            base2[name] = arg[name];
        return base2;
      }
      function unionAll() {
        var union = [];
        for (var i2 = 0, l = arguments.length; i2 < l; i2++)
          union = union.concat.apply(union, arguments[i2]);
        return union;
      }
      function resolveIRI(iri) {
        if (iri[0] === "<")
          iri = iri.substring(1, iri.length - 1);
        if (/^[a-z]+:/i.test(iri))
          return iri;
        if (!Parser4.base)
          throw new Error("Cannot resolve relative IRI " + iri + " because no base IRI was set.");
        if (base !== Parser4.base) {
          base = Parser4.base;
          basePath = base.replace(/[^\/:]*$/, "");
          baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
        }
        switch (iri[0]) {
          case void 0:
            return base;
          case "#":
            return base + iri;
          case "?":
            return base.replace(/(?:\?.*)?$/, iri);
          case "/":
            return baseRoot + iri;
          default:
            return basePath + iri;
        }
      }
      function toVar(variable) {
        if (variable) {
          var first = variable[0];
          if (first === "?" || first === "$")
            return Parser4.factory.variable(variable.substr(1));
        }
        return variable;
      }
      function operation(operatorName, args) {
        return { type: "operation", operator: operatorName, args: args || [] };
      }
      function expression(expr, attr) {
        var expression2 = { expression: expr === "*" ? new Wildcard() : expr };
        if (attr)
          for (var a in attr)
            expression2[a] = attr[a];
        return expression2;
      }
      function path(type, items) {
        return { type: "path", pathType: type, items };
      }
      function createOperationTree(initialExpression, operationList) {
        for (var i2 = 0, l = operationList.length, item; i2 < l && (item = operationList[i2]); i2++)
          initialExpression = operation(item[0], [initialExpression, item[1]]);
        return initialExpression;
      }
      function groupDatasets(fromClauses, groupName) {
        var defaults = [], named = [], l = fromClauses.length, fromClause, group = {};
        if (!l)
          return null;
        for (var i2 = 0; i2 < l && (fromClause = fromClauses[i2]); i2++)
          (fromClause.named ? named : defaults).push(fromClause.iri);
        group[groupName || "from"] = { default: defaults, named };
        return group;
      }
      function toInt(string) {
        return parseInt(string, 10);
      }
      function degroupSingle(group) {
        return group.type === "group" && group.patterns.length === 1 ? group.patterns[0] : group;
      }
      function createTypedLiteral(value, type) {
        if (type && type.termType !== "NamedNode") {
          type = Parser4.factory.namedNode(type);
        }
        return Parser4.factory.literal(value, type);
      }
      function createLangLiteral(value, lang) {
        return Parser4.factory.literal(value, lang);
      }
      function nestedTriple(subject, predicate, object) {
        if (!("termType" in predicate)) {
          throw new Error("Nested triples cannot contain paths");
        }
        return Parser4.factory.quad(subject, predicate, object);
      }
      function triple(subject, predicate, object, annotations) {
        var triple2 = {};
        if (subject != null)
          triple2.subject = subject;
        if (predicate != null)
          triple2.predicate = predicate;
        if (object != null)
          triple2.object = object;
        if (annotations != null)
          triple2.annotations = annotations;
        return triple2;
      }
      function blank(name) {
        if (typeof name === "string") {
          if (name.startsWith("e_"))
            return Parser4.factory.blankNode(name);
          return Parser4.factory.blankNode("e_" + name);
        }
        return Parser4.factory.blankNode("g_" + blankId++);
      }
      ;
      var blankId = 0;
      Parser4._resetBlanks = function() {
        blankId = 0;
      };
      var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g, escapeReplacements = {
        "\\": "\\",
        "'": "'",
        '"': '"',
        "t": "	",
        "b": "\b",
        "n": "\n",
        "r": "\r",
        "f": "\f"
      }, partialSurrogatesWithoutEndpoint = /[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/, fromCharCode = String.fromCharCode;
      function unescapeString(string, trimLength) {
        string = string.substring(trimLength, string.length - trimLength);
        try {
          string = string.replace(escapeSequence, function(sequence, unicode4, unicode8, escapedChar) {
            var charCode;
            if (unicode4) {
              charCode = parseInt(unicode4, 16);
              if (isNaN(charCode))
                throw new Error();
              return fromCharCode(charCode);
            } else if (unicode8) {
              charCode = parseInt(unicode8, 16);
              if (isNaN(charCode))
                throw new Error();
              if (charCode < 65535)
                return fromCharCode(charCode);
              return fromCharCode(55296 + ((charCode -= 65536) >> 10), 56320 + (charCode & 1023));
            } else {
              var replacement = escapeReplacements[escapedChar];
              if (!replacement)
                throw new Error();
              return replacement;
            }
          });
        } catch (error2) {
          return "";
        }
        if (partialSurrogatesWithoutEndpoint.exec(string)) {
          throw new Error("Invalid unicode codepoint of surrogate pair without corresponding codepoint in " + string);
        }
        return string;
      }
      function createList(objects) {
        var list = blank(), head = list, listItems = [], listTriples, triples = [];
        objects.forEach(function(o2) {
          listItems.push(o2.entity);
          appendAllTo(triples, o2.triples);
        });
        for (var i2 = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i2 < l; )
          listTriples[j++] = triple(head, Parser4.factory.namedNode(RDF_FIRST), listItems[i2]), listTriples[j++] = triple(head, Parser4.factory.namedNode(RDF_REST), head = ++i2 < l ? blank() : Parser4.factory.namedNode(RDF_NIL));
        return { entity: list, triples: appendAllTo(listTriples, triples) };
      }
      function createAnonymousObject(propertyList) {
        var entity = blank();
        return {
          entity,
          triples: propertyList.map(function(t) {
            return extend(triple(entity), t);
          })
        };
      }
      function objectListToTriples(predicate, objectList, otherTriples) {
        var objects = [], triples = [];
        objectList.forEach(function(l) {
          let annotation = null;
          if (l.annotation) {
            annotation = l.annotation;
            l = l.object;
          }
          objects.push(triple(null, predicate, l.entity, annotation));
          appendAllTo(triples, l.triples);
        });
        return unionAll(objects, otherTriples || [], triples);
      }
      function mergeAdjacentBGPs(groups) {
        var merged = [], currentBgp;
        for (var i2 = 0, group; group = groups[i2]; i2++) {
          switch (group.type) {
            case "bgp":
              if (group.triples.length) {
                if (!currentBgp)
                  appendTo(merged, currentBgp = group);
                else
                  appendAllTo(currentBgp.triples, group.triples);
              }
              break;
            default:
              if (!group.patterns || group.patterns.length > 0) {
                appendTo(merged, group);
                currentBgp = null;
              }
          }
        }
        return merged;
      }
      function getExpressionId(expression2) {
        return expression2.variable ? expression2.variable.value : expression2.value || expression2.expression.value;
      }
      function getAggregatesOfExpression(expression2) {
        if (!expression2) {
          return [];
        }
        if (expression2.type === "aggregate") {
          return [expression2];
        } else if (expression2.type === "operation") {
          const aggregates = [];
          for (const arg of expression2.args) {
            aggregates.push(...getAggregatesOfExpression(arg));
          }
          return aggregates;
        }
        return [];
      }
      function getVariablesFromExpression(expression2) {
        const variables = /* @__PURE__ */ new Set();
        const visitExpression = function(expr) {
          if (!expr) {
            return;
          }
          if (expr.termType === "Variable") {
            variables.add(expr);
          } else if (expr.type === "operation") {
            expr.args.forEach(visitExpression);
          }
        };
        visitExpression(expression2);
        return variables;
      }
      function flatten(input, depth = 1, stack = []) {
        for (const item of input) {
          if (depth > 0 && item instanceof Array) {
            flatten(item, depth - 1, stack);
          } else {
            stack.push(item);
          }
        }
        return stack;
      }
      function isVariable(term) {
        return term.termType === "Variable";
      }
      function getBoundVarsFromGroupGraphPattern(pattern) {
        if (pattern.triples) {
          const boundVars = [];
          for (const triple2 of pattern.triples) {
            if (isVariable(triple2.subject))
              boundVars.push(triple2.subject.value);
            if (isVariable(triple2.predicate))
              boundVars.push(triple2.predicate.value);
            if (isVariable(triple2.object))
              boundVars.push(triple2.object.value);
          }
          return boundVars;
        } else if (pattern.patterns) {
          const boundVars = [];
          for (const pat of pattern.patterns) {
            boundVars.push(...getBoundVarsFromGroupGraphPattern(pat));
          }
          return boundVars;
        }
        return [];
      }
      function getDuplicatesInArray(array) {
        const sortedArray = array.slice().sort();
        const duplicates = [];
        for (let i2 = 0; i2 < sortedArray.length - 1; i2++) {
          if (sortedArray[i2 + 1] == sortedArray[i2]) {
            duplicates.push(sortedArray[i2]);
          }
        }
        return duplicates;
      }
      function ensureSparqlStar(value) {
        if (!Parser4.sparqlStar) {
          throw new Error("SPARQL-star support is not enabled");
        }
        return value;
      }
      function _applyAnnotations(subject, annotations, arr) {
        for (const annotation of annotations) {
          const t = triple(
            // If the annotation already has a subject then just push the
            // annotation to the upper scope as it is a blank node introduced
            // from a pattern like :s :p :o {| :p1 [ :p2 :o2; :p3 :o3 ] |}
            "subject" in annotation ? annotation.subject : subject,
            annotation.predicate,
            annotation.object
          );
          arr.push(t);
          if (annotation.annotations) {
            _applyAnnotations(nestedTriple(
              subject,
              annotation.predicate,
              annotation.object
            ), annotation.annotations, arr);
          }
        }
      }
      function applyAnnotations(triples) {
        if (Parser4.sparqlStar) {
          const newTriples = [];
          triples.forEach((t) => {
            const s = triple(t.subject, t.predicate, t.object);
            newTriples.push(s);
            if (t.annotations) {
              _applyAnnotations(nestedTriple(t.subject, t.predicate, t.object), t.annotations, newTriples);
            }
          });
          return newTriples;
        }
        return triples;
      }
      function ensureSparqlStarNestedQuads(value) {
        if (!Parser4.sparqlStarNestedQuads) {
          throw new Error("Lenient SPARQL-star support with nested quads is not enabled");
        }
        return value;
      }
      function ensureNoVariables(operations) {
        for (const operation2 of operations) {
          if (operation2.type === "graph" && operation2.name.termType === "Variable") {
            throw new Error("Detected illegal variable in GRAPH");
          }
          if (operation2.type === "bgp" || operation2.type === "graph") {
            for (const triple2 of operation2.triples) {
              if (triple2.subject.termType === "Variable" || triple2.predicate.termType === "Variable" || triple2.object.termType === "Variable") {
                throw new Error("Detected illegal variable in BGP");
              }
            }
          }
        }
        return operations;
      }
      function ensureNoBnodes(operations) {
        for (const operation2 of operations) {
          if (operation2.type === "bgp") {
            for (const triple2 of operation2.triples) {
              if (triple2.subject.termType === "BlankNode" || triple2.predicate.termType === "BlankNode" || triple2.object.termType === "BlankNode") {
                throw new Error("Detected illegal blank node in BGP");
              }
            }
          }
        }
        return operations;
      }
      var lexer = /* @__PURE__ */ function() {
        var lexer2 = {
          EOF: 1,
          parseError: function parseError(str, hash) {
            if (this.yy.parser) {
              this.yy.parser.parseError(str, hash);
            } else {
              throw new Error(str);
            }
          },
          // resets the lexer, sets new input
          setInput: function(input, yy) {
            this.yy = yy || this.yy || {};
            this._input = input;
            this._more = this._backtrack = this.done = false;
            this.yylineno = this.yyleng = 0;
            this.yytext = this.matched = this.match = "";
            this.conditionStack = ["INITIAL"];
            this.yylloc = {
              first_line: 1,
              first_column: 0,
              last_line: 1,
              last_column: 0
            };
            if (this.options.ranges) {
              this.yylloc.range = [0, 0];
            }
            this.offset = 0;
            return this;
          },
          // consumes and returns one char from the input
          input: function() {
            var ch = this._input[0];
            this.yytext += ch;
            this.yyleng++;
            this.offset++;
            this.match += ch;
            this.matched += ch;
            var lines = ch.match(/(?:\r\n?|\n).*/g);
            if (lines) {
              this.yylineno++;
              this.yylloc.last_line++;
            } else {
              this.yylloc.last_column++;
            }
            if (this.options.ranges) {
              this.yylloc.range[1]++;
            }
            this._input = this._input.slice(1);
            return ch;
          },
          // unshifts one char (or a string) into the input
          unput: function(ch) {
            var len = ch.length;
            var lines = ch.split(/(?:\r\n?|\n)/g);
            this._input = ch + this._input;
            this.yytext = this.yytext.substr(0, this.yytext.length - len);
            this.offset -= len;
            var oldLines = this.match.split(/(?:\r\n?|\n)/g);
            this.match = this.match.substr(0, this.match.length - 1);
            this.matched = this.matched.substr(0, this.matched.length - 1);
            if (lines.length - 1) {
              this.yylineno -= lines.length - 1;
            }
            var r = this.yylloc.range;
            this.yylloc = {
              first_line: this.yylloc.first_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.first_column,
              last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
            };
            if (this.options.ranges) {
              this.yylloc.range = [r[0], r[0] + this.yyleng - len];
            }
            this.yyleng = this.yytext.length;
            return this;
          },
          // When called from action, caches matched text and appends it on next action
          more: function() {
            this._more = true;
            return this;
          },
          // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
          reject: function() {
            if (this.options.backtrack_lexer) {
              this._backtrack = true;
            } else {
              return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n" + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
              });
            }
            return this;
          },
          // retain first n characters of the match
          less: function(n) {
            this.unput(this.match.slice(n));
          },
          // displays already matched input, i.e. for error messages
          pastInput: function() {
            var past = this.matched.substr(0, this.matched.length - this.match.length);
            return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
          },
          // displays upcoming input, i.e. for error messages
          upcomingInput: function() {
            var next = this.match;
            if (next.length < 20) {
              next += this._input.substr(0, 20 - next.length);
            }
            return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
          },
          // displays the character position where the lexing error occurred, i.e. for error messages
          showPosition: function() {
            var pre = this.pastInput();
            var c = new Array(pre.length + 1).join("-");
            return pre + this.upcomingInput() + "\n" + c + "^";
          },
          // test the lexed token: return FALSE when not a match, otherwise return token
          test_match: function(match, indexed_rule) {
            var token, lines, backup;
            if (this.options.backtrack_lexer) {
              backup = {
                yylineno: this.yylineno,
                yylloc: {
                  first_line: this.yylloc.first_line,
                  last_line: this.last_line,
                  first_column: this.yylloc.first_column,
                  last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
              };
              if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
              }
            }
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) {
              this.yylineno += lines.length;
            }
            this.yylloc = {
              first_line: this.yylloc.last_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.last_column,
              last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
            };
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
              this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._backtrack = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
            if (this.done && this._input) {
              this.done = false;
            }
            if (token) {
              return token;
            } else if (this._backtrack) {
              for (var k in backup) {
                this[k] = backup[k];
              }
              return false;
            }
            return false;
          },
          // return next match in input
          next: function() {
            if (this.done) {
              return this.EOF;
            }
            if (!this._input) {
              this.done = true;
            }
            var token, match, tempMatch, index;
            if (!this._more) {
              this.yytext = "";
              this.match = "";
            }
            var rules = this._currentRules();
            for (var i2 = 0; i2 < rules.length; i2++) {
              tempMatch = this._input.match(this.rules[rules[i2]]);
              if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i2;
                if (this.options.backtrack_lexer) {
                  token = this.test_match(tempMatch, rules[i2]);
                  if (token !== false) {
                    return token;
                  } else if (this._backtrack) {
                    match = false;
                    continue;
                  } else {
                    return false;
                  }
                } else if (!this.options.flex) {
                  break;
                }
              }
            }
            if (match) {
              token = this.test_match(match, rules[index]);
              if (token !== false) {
                return token;
              }
              return false;
            }
            if (this._input === "") {
              return this.EOF;
            } else {
              return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
              });
            }
          },
          // return next match that has a token
          lex: function lex() {
            var r = this.next();
            if (r) {
              return r;
            } else {
              return this.lex();
            }
          },
          // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
          begin: function begin(condition) {
            this.conditionStack.push(condition);
          },
          // pop the previously active lexer condition state off the condition stack
          popState: function popState() {
            var n = this.conditionStack.length - 1;
            if (n > 0) {
              return this.conditionStack.pop();
            } else {
              return this.conditionStack[0];
            }
          },
          // produce the lexer rule set which is active for the currently active lexer condition state
          _currentRules: function _currentRules() {
            if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
              return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
            } else {
              return this.conditions["INITIAL"].rules;
            }
          },
          // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
          topState: function topState(n) {
            n = this.conditionStack.length - 1 - Math.abs(n || 0);
            if (n >= 0) {
              return this.conditionStack[n];
            } else {
              return "INITIAL";
            }
          },
          // alias for begin(condition)
          pushState: function pushState(condition) {
            this.begin(condition);
          },
          // return the number of states currently on the stack
          stateStackSize: function stateStackSize() {
            return this.conditionStack.length;
          },
          options: { "flex": true, "case-insensitive": true },
          performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
            var YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
              case 0:
                break;
              case 1:
                return 12;
                break;
              case 2:
                return 15;
                break;
              case 3:
                return 41;
                break;
              case 4:
                return 325;
                break;
              case 5:
                return 326;
                break;
              case 6:
                return 45;
                break;
              case 7:
                return 47;
                break;
              case 8:
                return 48;
                break;
              case 9:
                return 39;
                break;
              case 10:
                return 24;
                break;
              case 11:
                return 28;
                break;
              case 12:
                return 29;
                break;
              case 13:
                return 31;
                break;
              case 14:
                return 32;
                break;
              case 15:
                return 36;
                break;
              case 16:
                return 53;
                break;
              case 17:
                return 327;
                break;
              case 18:
                return 63;
                break;
              case 19:
                return 64;
                break;
              case 20:
                return 70;
                break;
              case 21:
                return 73;
                break;
              case 22:
                return 76;
                break;
              case 23:
                return 78;
                break;
              case 24:
                return 81;
                break;
              case 25:
                return 83;
                break;
              case 26:
                return 85;
                break;
              case 27:
                return 193;
                break;
              case 28:
                return 100;
                break;
              case 29:
                return 328;
                break;
              case 30:
                return 121;
                break;
              case 31:
                return 329;
                break;
              case 32:
                return 330;
                break;
              case 33:
                return 110;
                break;
              case 34:
                return 331;
                break;
              case 35:
                return 109;
                break;
              case 36:
                return 332;
                break;
              case 37:
                return 333;
                break;
              case 38:
                return 113;
                break;
              case 39:
                return 115;
                break;
              case 40:
                return 116;
                break;
              case 41:
                return 131;
                break;
              case 42:
                return 123;
                break;
              case 43:
                return 126;
                break;
              case 44:
                return 128;
                break;
              case 45:
                return 132;
                break;
              case 46:
                return 112;
                break;
              case 47:
                return 334;
                break;
              case 48:
                return 335;
                break;
              case 49:
                return 159;
                break;
              case 50:
                return 161;
                break;
              case 51:
                return 164;
                break;
              case 52:
                return 174;
                break;
              case 53:
                return 160;
                break;
              case 54:
                return 336;
                break;
              case 55:
                return 163;
                break;
              case 56:
                return 312;
                break;
              case 57:
                return 314;
                break;
              case 58:
                return 317;
                break;
              case 59:
                return 318;
                break;
              case 60:
                return 272;
                break;
              case 61:
                return 197;
                break;
              case 62:
                return 337;
                break;
              case 63:
                return 338;
                break;
              case 64:
                return 229;
                break;
              case 65:
                return 340;
                break;
              case 66:
                return 263;
                break;
              case 67:
                return 224;
                break;
              case 68:
                return 231;
                break;
              case 69:
                return 232;
                break;
              case 70:
                return 242;
                break;
              case 71:
                return 246;
                break;
              case 72:
                return 290;
                break;
              case 73:
                return 341;
                break;
              case 74:
                return 342;
                break;
              case 75:
                return 343;
                break;
              case 76:
                return 344;
                break;
              case 77:
                return 345;
                break;
              case 78:
                return 250;
                break;
              case 79:
                return 346;
                break;
              case 80:
                return 265;
                break;
              case 81:
                return 276;
                break;
              case 82:
                return 277;
                break;
              case 83:
                return 268;
                break;
              case 84:
                return 269;
                break;
              case 85:
                return 270;
                break;
              case 86:
                return 271;
                break;
              case 87:
                return 347;
                break;
              case 88:
                return 348;
                break;
              case 89:
                return 273;
                break;
              case 90:
                return 274;
                break;
              case 91:
                return 350;
                break;
              case 92:
                return 349;
                break;
              case 93:
                return 351;
                break;
              case 94:
                return 279;
                break;
              case 95:
                return 280;
                break;
              case 96:
                return 283;
                break;
              case 97:
                return 285;
                break;
              case 98:
                return 289;
                break;
              case 99:
                return 293;
                break;
              case 100:
                return 296;
                break;
              case 101:
                return 13;
                break;
              case 102:
                return 16;
                break;
              case 103:
                return 308;
                break;
              case 104:
                return 309;
                break;
              case 105:
                return 87;
                break;
              case 106:
                return 292;
                break;
              case 107:
                return 82;
                break;
              case 108:
                return 294;
                break;
              case 109:
                return 295;
                break;
              case 110:
                return 297;
                break;
              case 111:
                return 298;
                break;
              case 112:
                return 299;
                break;
              case 113:
                return 300;
                break;
              case 114:
                return 301;
                break;
              case 115:
                return 302;
                break;
              case 116:
                return "EXPONENT";
                break;
              case 117:
                return 303;
                break;
              case 118:
                return 304;
                break;
              case 119:
                return 305;
                break;
              case 120:
                return 306;
                break;
              case 121:
                return 89;
                break;
              case 122:
                return 310;
                break;
              case 123:
                return 6;
                break;
              case 124:
                return "INVALID";
                break;
              case 125:
                console.log(yy_.yytext);
                break;
            }
          },
          rules: [/^(?:\s+|(#[^\n\r]*))/i, /^(?:BASE)/i, /^(?:PREFIX)/i, /^(?:SELECT)/i, /^(?:DISTINCT)/i, /^(?:REDUCED)/i, /^(?:\()/i, /^(?:AS)/i, /^(?:\))/i, /^(?:\*)/i, /^(?:CONSTRUCT)/i, /^(?:WHERE)/i, /^(?:\{)/i, /^(?:\})/i, /^(?:DESCRIBE)/i, /^(?:ASK)/i, /^(?:FROM)/i, /^(?:NAMED)/i, /^(?:GROUP)/i, /^(?:BY)/i, /^(?:HAVING)/i, /^(?:ORDER)/i, /^(?:ASC)/i, /^(?:DESC)/i, /^(?:LIMIT)/i, /^(?:OFFSET)/i, /^(?:VALUES)/i, /^(?:;)/i, /^(?:LOAD)/i, /^(?:SILENT)/i, /^(?:INTO)/i, /^(?:CLEAR)/i, /^(?:DROP)/i, /^(?:CREATE)/i, /^(?:ADD)/i, /^(?:TO)/i, /^(?:MOVE)/i, /^(?:COPY)/i, /^(?:INSERT((\s+|(#[^\n\r]*)\n\r?)+)DATA)/i, /^(?:DELETE((\s+|(#[^\n\r]*)\n\r?)+)DATA)/i, /^(?:DELETE((\s+|(#[^\n\r]*)\n\r?)+)WHERE)/i, /^(?:WITH)/i, /^(?:DELETE)/i, /^(?:INSERT)/i, /^(?:USING)/i, /^(?:DEFAULT)/i, /^(?:GRAPH)/i, /^(?:ALL)/i, /^(?:\.)/i, /^(?:OPTIONAL)/i, /^(?:SERVICE)/i, /^(?:BIND)/i, /^(?:UNDEF)/i, /^(?:MINUS)/i, /^(?:UNION)/i, /^(?:FILTER)/i, /^(?:<<)/i, /^(?:>>)/i, /^(?:\{\|)/i, /^(?:\|\})/i, /^(?:,)/i, /^(?:a)/i, /^(?:\|)/i, /^(?:\/)/i, /^(?:\^)/i, /^(?:\?)/i, /^(?:\+)/i, /^(?:!)/i, /^(?:\[)/i, /^(?:\])/i, /^(?:\|\|)/i, /^(?:&&)/i, /^(?:=)/i, /^(?:!=)/i, /^(?:<)/i, /^(?:>)/i, /^(?:<=)/i, /^(?:>=)/i, /^(?:IN)/i, /^(?:NOT)/i, /^(?:-)/i, /^(?:BOUND)/i, /^(?:BNODE)/i, /^(?:(RAND|NOW|UUID|STRUUID))/i, /^(?:(LANG|DATATYPE|IRI|URI|ABS|CEIL|FLOOR|ROUND|STRLEN|STR|UCASE|LCASE|ENCODE_FOR_URI|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|MD5|SHA1|SHA256|SHA384|SHA512|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC))/i, /^(?:(SUBJECT|PREDICATE|OBJECT|isTRIPLE))/i, /^(?:(LANGMATCHES|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|STRLANG|STRDT|sameTerm))/i, /^(?:CONCAT)/i, /^(?:COALESCE)/i, /^(?:IF)/i, /^(?:TRIPLE)/i, /^(?:REGEX)/i, /^(?:SUBSTR)/i, /^(?:REPLACE)/i, /^(?:EXISTS)/i, /^(?:COUNT)/i, /^(?:SUM|MIN|MAX|AVG|SAMPLE)/i, /^(?:GROUP_CONCAT)/i, /^(?:SEPARATOR)/i, /^(?:\^\^)/i, /^(?:true|false)/i, /^(?:(<(?:[^<>\"\{\}\|\^`\\\u0000-\u0020])*>))/i, /^(?:((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?)?:))/i, /^(?:(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?)?:)((?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|:|[0-9]|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.|:|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|:|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i, /^(?:(_:(?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?))/i, /^(?:([\?\$]((?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])*)))/i, /^(?:(@[a-zA-Z]+(?:-[a-zA-Z0-9]+)*))/i, /^(?:([0-9]+))/i, /^(?:([0-9]*\.[0-9]+))/i, /^(?:([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+)))/i, /^(?:(\+([0-9]+)))/i, /^(?:(\+([0-9]*\.[0-9]+)))/i, /^(?:(\+([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i, /^(?:(-([0-9]+)))/i, /^(?:(-([0-9]*\.[0-9]+)))/i, /^(?:(-([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i, /^(?:([eE][+-]?[0-9]+))/i, /^(?:('(?:(?:[^\u0027\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])))*'))/i, /^(?:("(?:(?:[^\u0022\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])))*"))/i, /^(?:('''(?:(?:'|'')?(?:[^'\\]|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f]))))*'''))/i, /^(?:("""(?:(?:"|"")?(?:[^\"\\]|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f]))))*"""))/i, /^(?:(\((\u0020|\u0009|\u000D|\u000A)*\)))/i, /^(?:(\[(\u0020|\u0009|\u000D|\u000A)*\]))/i, /^(?:$)/i, /^(?:.)/i, /^(?:.)/i],
          conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "inclusive": true } }
        };
        return lexer2;
      }();
      parser.lexer = lexer;
      function Parser4() {
        this.yy = {};
      }
      Parser4.prototype = parser;
      parser.Parser = Parser4;
      return new Parser4();
    }();
    module.exports = SparqlParser;
  }
});

// node_modules/sparqljs/lib/SparqlGenerator.js
var require_SparqlGenerator = __commonJS({
  "node_modules/sparqljs/lib/SparqlGenerator.js"(exports, module) {
    var XSD_INTEGER = "http://www.w3.org/2001/XMLSchema#integer";
    var XSD_STRING = "http://www.w3.org/2001/XMLSchema#string";
    function Generator(options) {
      this._options = options = options || {};
      var prefixes = options.prefixes || {};
      this._prefixByIri = {};
      var prefixIris = [];
      for (var prefix in prefixes) {
        var iri = prefixes[prefix];
        if (isString2(iri)) {
          this._prefixByIri[iri] = prefix;
          prefixIris.push(iri);
        }
      }
      var iriList = prefixIris.join("|").replace(/[\]\/\(\)\*\+\?\.\\\$]/g, "\\$&");
      this._prefixRegex = new RegExp("^(" + iriList + ")([a-zA-Z][\\-_a-zA-Z0-9]*)$");
      this._usedPrefixes = {};
      this._sparqlStar = options.sparqlStar;
      this._indent = isString2(options.indent) ? options.indent : "  ";
      this._newline = isString2(options.newline) ? options.newline : "\n";
      this._explicitDatatype = Boolean(options.explicitDatatype);
    }
    Generator.prototype.toQuery = function(q) {
      var query = "";
      if (q.queryType)
        query += q.queryType.toUpperCase() + " ";
      if (q.reduced)
        query += "REDUCED ";
      if (q.distinct)
        query += "DISTINCT ";
      if (q.variables) {
        query += mapJoin(q.variables, void 0, function(variable) {
          return isTerm(variable) ? this.toEntity(variable) : "(" + this.toExpression(variable.expression) + " AS " + variableToString(variable.variable) + ")";
        }, this) + " ";
      } else if (q.template)
        query += this.group(q.template, true) + this._newline;
      if (q.from)
        query += this.graphs("FROM ", q.from.default) + this.graphs("FROM NAMED ", q.from.named);
      if (q.where)
        query += "WHERE " + this.group(q.where, true) + this._newline;
      if (q.updates)
        query += mapJoin(q.updates, ";" + this._newline, this.toUpdate, this);
      if (q.group)
        query += "GROUP BY " + mapJoin(q.group, void 0, function(it) {
          var result = isTerm(it.expression) ? this.toEntity(it.expression) : "(" + this.toExpression(it.expression) + ")";
          return it.variable ? "(" + result + " AS " + variableToString(it.variable) + ")" : result;
        }, this) + this._newline;
      if (q.having)
        query += "HAVING (" + mapJoin(q.having, void 0, this.toExpression, this) + ")" + this._newline;
      if (q.order)
        query += "ORDER BY " + mapJoin(q.order, void 0, function(it) {
          var expr = "(" + this.toExpression(it.expression) + ")";
          return !it.descending ? expr : "DESC " + expr;
        }, this) + this._newline;
      if (q.offset)
        query += "OFFSET " + q.offset + this._newline;
      if (q.limit)
        query += "LIMIT " + q.limit + this._newline;
      if (q.values)
        query += this.values(q);
      query = this.baseAndPrefixes(q) + query;
      return query.trim();
    };
    Generator.prototype.baseAndPrefixes = function(q) {
      var base = q.base ? "BASE <" + q.base + ">" + this._newline : "";
      var prefixes = "";
      for (var key in q.prefixes) {
        if (this._options.allPrefixes || this._usedPrefixes[key])
          prefixes += "PREFIX " + key + ": <" + q.prefixes[key] + ">" + this._newline;
      }
      return base + prefixes;
    };
    Generator.prototype.toPattern = function(pattern) {
      var type = pattern.type || pattern instanceof Array && "array" || (pattern.subject && pattern.predicate && pattern.object ? "triple" : "");
      if (!(type in this))
        throw new Error("Unknown entry type: " + type);
      return this[type](pattern);
    };
    Generator.prototype.triple = function(t) {
      return this.toEntity(t.subject) + " " + this.toEntity(t.predicate) + " " + this.toEntity(t.object) + ".";
    };
    Generator.prototype.array = function(items) {
      return mapJoin(items, this._newline, this.toPattern, this);
    };
    Generator.prototype.bgp = function(bgp) {
      return this.encodeTriples(bgp.triples);
    };
    Generator.prototype.encodeTriples = function(triples) {
      if (!triples.length)
        return "";
      var parts = [], subject = void 0, predicate = void 0;
      for (var i2 = 0; i2 < triples.length; i2++) {
        var triple = triples[i2];
        if (!equalTerms(triple.subject, subject)) {
          if (subject)
            parts.push("." + this._newline);
          subject = triple.subject;
          predicate = triple.predicate;
          parts.push(this.toEntity(subject), " ", this.toEntity(predicate));
        } else if (!equalTerms(triple.predicate, predicate)) {
          predicate = triple.predicate;
          parts.push(";" + this._newline, this._indent, this.toEntity(predicate));
        } else {
          parts.push(",");
        }
        parts.push(" ", this.toEntity(triple.object));
      }
      parts.push(".");
      return parts.join("");
    };
    Generator.prototype.graph = function(graph) {
      return "GRAPH " + this.toEntity(graph.name) + " " + this.group(graph);
    };
    Generator.prototype.graphs = function(keyword, graphs) {
      return !graphs || graphs.length === 0 ? "" : mapJoin(graphs, "", function(g) {
        return keyword + this.toEntity(g) + this._newline;
      }, this);
    };
    Generator.prototype.group = function(group, inline) {
      group = inline !== true ? this.array(group.patterns || group.triples) : this.toPattern(group.type !== "group" ? group : group.patterns);
      return group.indexOf(this._newline) === -1 ? "{ " + group + " }" : "{" + this._newline + this.indent(group) + this._newline + "}";
    };
    Generator.prototype.query = function(query) {
      return this.toQuery(query);
    };
    Generator.prototype.filter = function(filter) {
      return "FILTER(" + this.toExpression(filter.expression) + ")";
    };
    Generator.prototype.bind = function(bind) {
      return "BIND(" + this.toExpression(bind.expression) + " AS " + variableToString(bind.variable) + ")";
    };
    Generator.prototype.optional = function(optional) {
      return "OPTIONAL " + this.group(optional);
    };
    Generator.prototype.union = function(union) {
      return mapJoin(union.patterns, this._newline + "UNION" + this._newline, function(p) {
        return this.group(p, true);
      }, this);
    };
    Generator.prototype.minus = function(minus) {
      return "MINUS " + this.group(minus);
    };
    Generator.prototype.values = function(valuesList) {
      var keys = Object.keys(valuesList.values.reduce(function(keyHash, values) {
        for (var key in values)
          keyHash[key] = true;
        return keyHash;
      }, {}));
      var lparen, rparen;
      if (keys.length === 1) {
        lparen = rparen = "";
      } else {
        lparen = "(";
        rparen = ")";
      }
      return "VALUES " + lparen + keys.join(" ") + rparen + " {" + this._newline + mapJoin(valuesList.values, this._newline, function(values) {
        return "  " + lparen + mapJoin(keys, void 0, function(key) {
          return values[key] ? this.toEntity(values[key]) : "UNDEF";
        }, this) + rparen;
      }, this) + this._newline + "}";
    };
    Generator.prototype.service = function(service) {
      return "SERVICE " + (service.silent ? "SILENT " : "") + this.toEntity(service.name) + " " + this.group(service);
    };
    Generator.prototype.toExpression = function(expr) {
      if (isTerm(expr)) {
        return this.toEntity(expr);
      }
      switch (expr.type.toLowerCase()) {
        case "aggregate":
          return expr.aggregation.toUpperCase() + "(" + (expr.distinct ? "DISTINCT " : "") + this.toExpression(expr.expression) + (typeof expr.separator === "string" ? '; SEPARATOR = "' + expr.separator.replace(escape, escapeReplacer) + '"' : "") + ")";
        case "functioncall":
          return this.toEntity(expr.function) + "(" + mapJoin(expr.args, ", ", this.toExpression, this) + ")";
        case "operation":
          var operator = expr.operator.toUpperCase(), args = expr.args || [];
          switch (expr.operator.toLowerCase()) {
            case "<":
            case ">":
            case ">=":
            case "<=":
            case "&&":
            case "||":
            case "=":
            case "!=":
            case "+":
            case "-":
            case "*":
            case "/":
              return (isTerm(args[0]) ? this.toEntity(args[0]) : "(" + this.toExpression(args[0]) + ")") + " " + operator + " " + (isTerm(args[1]) ? this.toEntity(args[1]) : "(" + this.toExpression(args[1]) + ")");
            case "!":
              return "!(" + this.toExpression(args[0]) + ")";
            case "uplus":
              return "+(" + this.toExpression(args[0]) + ")";
            case "uminus":
              return "-(" + this.toExpression(args[0]) + ")";
            case "notin":
              operator = "NOT IN";
            case "in":
              return this.toExpression(args[0]) + " " + operator + "(" + (isString2(args[1]) ? args[1] : mapJoin(args[1], ", ", this.toExpression, this)) + ")";
            case "notexists":
              operator = "NOT EXISTS";
            case "exists":
              return operator + " " + this.group(args[0], true);
            default:
              return operator + "(" + mapJoin(args, ", ", this.toExpression, this) + ")";
          }
        default:
          throw new Error("Unknown expression type: " + expr.type);
      }
    };
    Generator.prototype.toEntity = function(value) {
      if (isTerm(value)) {
        switch (value.termType) {
          case "Wildcard":
            return "*";
          case "Variable":
            return variableToString(value);
          case "BlankNode":
            return "_:" + value.value;
          case "Literal":
            var lexical = value.value || "", language = value.language || "", datatype = value.datatype;
            value = '"' + lexical.replace(escape, escapeReplacer) + '"';
            if (language) {
              value += "@" + language;
            } else if (datatype) {
              if (!this._explicitDatatype) {
                switch (datatype.value) {
                  case XSD_STRING:
                    return value;
                  case XSD_INTEGER:
                    if (/^\d+$/.test(lexical))
                      return lexical + " ";
                }
              }
              value += "^^" + this.encodeIRI(datatype.value);
            }
            return value;
          case "Quad":
            if (!this._sparqlStar)
              throw new Error("SPARQL* support is not enabled");
            if (value.graph && value.graph.termType !== "DefaultGraph") {
              return "<< GRAPH " + this.toEntity(value.graph) + " { " + this.toEntity(value.subject) + " " + this.toEntity(value.predicate) + " " + this.toEntity(value.object) + " }  >>";
            } else {
              return "<< " + this.toEntity(value.subject) + " " + this.toEntity(value.predicate) + " " + this.toEntity(value.object) + " >>";
            }
          default:
            return this.encodeIRI(value.value);
        }
      } else {
        var items = value.items.map(this.toEntity, this), path = value.pathType;
        switch (path) {
          case "^":
          case "!":
            return path + items[0];
          case "*":
          case "+":
          case "?":
            return "(" + items[0] + path + ")";
          default:
            return "(" + items.join(path) + ")";
        }
      }
    };
    var escape = /["\\\t\n\r\b\f]/g;
    var escapeReplacer = function(c) {
      return escapeReplacements[c];
    };
    var escapeReplacements = {
      "\\": "\\\\",
      '"': '\\"',
      "	": "\\t",
      "\n": "\\n",
      "\r": "\\r",
      "\b": "\\b",
      "\f": "\\f"
    };
    Generator.prototype.encodeIRI = function(iri) {
      var prefixMatch = this._prefixRegex.exec(iri);
      if (prefixMatch) {
        var prefix = this._prefixByIri[prefixMatch[1]];
        this._usedPrefixes[prefix] = true;
        return prefix + ":" + prefixMatch[2];
      }
      return "<" + iri + ">";
    };
    Generator.prototype.toUpdate = function(update) {
      switch (update.type || update.updateType) {
        case "load":
          return "LOAD" + (update.source ? " " + this.toEntity(update.source) : "") + (update.destination ? " INTO GRAPH " + this.toEntity(update.destination) : "");
        case "insert":
          return "INSERT DATA " + this.group(update.insert, true);
        case "delete":
          return "DELETE DATA " + this.group(update.delete, true);
        case "deletewhere":
          return "DELETE WHERE " + this.group(update.delete, true);
        case "insertdelete":
          return (update.graph ? "WITH " + this.toEntity(update.graph) + this._newline : "") + (update.delete.length ? "DELETE " + this.group(update.delete, true) + this._newline : "") + (update.insert.length ? "INSERT " + this.group(update.insert, true) + this._newline : "") + (update.using ? this.graphs("USING ", update.using.default) : "") + (update.using ? this.graphs("USING NAMED ", update.using.named) : "") + "WHERE " + this.group(update.where, true);
        case "add":
        case "copy":
        case "move":
          return update.type.toUpperCase() + " " + (update.silent ? "SILENT " : "") + (update.source.default ? "DEFAULT" : this.toEntity(update.source.name)) + " TO " + this.toEntity(update.destination.name);
        case "create":
        case "clear":
        case "drop":
          return update.type.toUpperCase() + (update.silent ? " SILENT " : " ") + (update.graph.default ? "DEFAULT" : update.graph.named ? "NAMED" : update.graph.all ? "ALL" : "GRAPH " + this.toEntity(update.graph.name));
        default:
          throw new Error("Unknown update query type: " + update.type);
      }
    };
    Generator.prototype.indent = function(text) {
      return text.replace(/^/gm, this._indent);
    };
    function variableToString(variable) {
      return "?" + variable.value;
    }
    function isString2(object) {
      return typeof object === "string";
    }
    function isTerm(object) {
      return typeof object.termType === "string";
    }
    function equalTerms(term1, term2) {
      if (!term1 || !isTerm(term1)) {
        return false;
      }
      if (!term2 || !isTerm(term2)) {
        return false;
      }
      if (term1.termType !== term2.termType) {
        return false;
      }
      switch (term1.termType) {
        case "Literal":
          return term1.value === term2.value && term1.language === term2.language && equalTerms(term1.datatype, term2.datatype);
        case "Quad":
          return equalTerms(term1.subject, term2.subject) && equalTerms(term1.predicate, term2.predicate) && equalTerms(term1.object, term2.object) && equalTerms(term1.graph, term2.graph);
        default:
          return term1.value === term2.value;
      }
    }
    function mapJoin(array, sep, func, self2) {
      return array.map(func, self2).join(isString2(sep) ? sep : " ");
    }
    module.exports = function SparqlGenerator(options = {}) {
      return {
        stringify: function(query) {
          var currentOptions = Object.create(options);
          currentOptions.prefixes = query.prefixes;
          return new Generator(currentOptions).toQuery(query);
        },
        createGenerator: function() {
          return new Generator(options);
        }
      };
    };
  }
});

// node_modules/sparqljs/sparql.js
var require_sparql = __commonJS({
  "node_modules/sparqljs/sparql.js"(exports, module) {
    var Parser4 = require_SparqlParser().Parser;
    var Generator = require_SparqlGenerator();
    var Wildcard = require_Wildcard().Wildcard;
    var { DataFactory: DataFactory3 } = require_rdf_data_factory();
    module.exports = {
      /**
       * Creates a SPARQL parser with the given pre-defined prefixes and base IRI
       * @param options {
       *   prefixes?: { [prefix: string]: string },
       *   baseIRI?: string,
       *   factory?: import('rdf-js').DataFactory,
       *   sparqlStar?: boolean,
       *   skipValidation?: boolean,
       *   skipUngroupedVariableCheck?: boolean
       * }
       */
      Parser: function({ prefixes, baseIRI, factory: factory3, sparqlStar, skipValidation, skipUngroupedVariableCheck, pathOnly } = {}) {
        var prefixesCopy = {};
        for (var prefix in prefixes || {})
          prefixesCopy[prefix] = prefixes[prefix];
        var parser = new Parser4();
        parser.parse = function() {
          Parser4.base = baseIRI || "";
          Parser4.prefixes = Object.create(prefixesCopy);
          Parser4.factory = factory3 || new DataFactory3();
          Parser4.sparqlStar = Boolean(sparqlStar);
          Parser4.pathOnly = Boolean(pathOnly);
          Parser4.skipValidation = Boolean(skipValidation) || Boolean(skipUngroupedVariableCheck);
          return Parser4.prototype.parse.apply(parser, arguments);
        };
        parser._resetBlanks = Parser4._resetBlanks;
        return parser;
      },
      Generator,
      Wildcard
    };
  }
});

// node_modules/sparqlalgebrajs/lib/factory.js
var require_factory = __commonJS({
  "node_modules/sparqlalgebrajs/lib/factory.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var A = __importStar(require_algebra());
    var rdf_data_factory_1 = require_rdf_data_factory();
    var rdf_string_1 = require_rdf_string();
    var sparqljs_1 = require_sparql();
    var Factory2 = class {
      constructor(dataFactory) {
        this.dataFactory = dataFactory || new rdf_data_factory_1.DataFactory();
        this.stringType = this.createTerm("http://www.w3.org/2001/XMLSchema#string");
      }
      createAlt(input, flatten = true) {
        return this.flattenMulti({ type: A.types.ALT, input }, flatten);
      }
      createAsk(input) {
        return { type: A.types.ASK, input };
      }
      createBoundAggregate(variable, aggregate, expression, distinct, separator) {
        const result = this.createAggregateExpression(aggregate, expression, distinct, separator);
        result.variable = variable;
        return result;
      }
      createBgp(patterns) {
        return { type: A.types.BGP, patterns };
      }
      createConstruct(input, template) {
        return { type: A.types.CONSTRUCT, input, template };
      }
      createDescribe(input, terms) {
        return { type: A.types.DESCRIBE, input, terms };
      }
      createDistinct(input) {
        return { type: A.types.DISTINCT, input };
      }
      createExtend(input, variable, expression) {
        return { type: A.types.EXTEND, input, variable, expression };
      }
      createFrom(input, def, named) {
        return { type: A.types.FROM, input, default: def, named };
      }
      createFilter(input, expression) {
        return { type: A.types.FILTER, input, expression };
      }
      createGraph(input, name) {
        return { type: A.types.GRAPH, input, name };
      }
      createGroup(input, variables, aggregates) {
        return { type: A.types.GROUP, input, variables, aggregates };
      }
      createInv(path) {
        return { type: A.types.INV, path };
      }
      createJoin(input, flatten = true) {
        return this.flattenMulti({ type: A.types.JOIN, input }, flatten);
      }
      createLeftJoin(left, right, expression) {
        if (expression)
          return { type: A.types.LEFT_JOIN, input: [left, right], expression };
        return { type: A.types.LEFT_JOIN, input: [left, right] };
      }
      createLink(iri) {
        return { type: A.types.LINK, iri };
      }
      createMinus(left, right) {
        return { type: A.types.MINUS, input: [left, right] };
      }
      createNop() {
        return { type: A.types.NOP };
      }
      createNps(iris) {
        return { type: A.types.NPS, iris };
      }
      createOneOrMorePath(path) {
        return { type: A.types.ONE_OR_MORE_PATH, path };
      }
      createOrderBy(input, expressions) {
        return { type: A.types.ORDER_BY, input, expressions };
      }
      createPath(subject, predicate, object, graph) {
        if (graph)
          return { type: A.types.PATH, subject, predicate, object, graph };
        return { type: A.types.PATH, subject, predicate, object, graph: this.dataFactory.defaultGraph() };
      }
      createPattern(subject, predicate, object, graph) {
        const pattern = this.dataFactory.quad(subject, predicate, object, graph);
        pattern.type = A.types.PATTERN;
        return pattern;
      }
      createProject(input, variables) {
        return { type: A.types.PROJECT, input, variables };
      }
      createReduced(input) {
        return { type: A.types.REDUCED, input };
      }
      createSeq(input, flatten = true) {
        return this.flattenMulti({ type: A.types.SEQ, input }, flatten);
      }
      createService(input, name, silent) {
        return { type: A.types.SERVICE, input, name, silent: Boolean(silent) };
      }
      createSlice(input, start, length) {
        start = start || 0;
        if (length !== void 0)
          return { type: A.types.SLICE, input, start, length };
        return { type: A.types.SLICE, input, start };
      }
      createUnion(input, flatten = true) {
        return this.flattenMulti({ type: A.types.UNION, input }, flatten);
      }
      createValues(variables, bindings) {
        return { type: A.types.VALUES, variables, bindings };
      }
      createZeroOrMorePath(path) {
        return { type: A.types.ZERO_OR_MORE_PATH, path };
      }
      createZeroOrOnePath(path) {
        return { type: A.types.ZERO_OR_ONE_PATH, path };
      }
      createAggregateExpression(aggregator, expression, distinct, separator) {
        if (separator)
          return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.AGGREGATE, aggregator, expression, separator, distinct };
        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.AGGREGATE, aggregator, expression, distinct };
      }
      createExistenceExpression(not, input) {
        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.EXISTENCE, not, input };
      }
      createNamedExpression(name, args) {
        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.NAMED, name, args };
      }
      createOperatorExpression(operator, args) {
        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.OPERATOR, operator, args };
      }
      createTermExpression(term) {
        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.TERM, term };
      }
      createWildcardExpression() {
        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.WILDCARD, wildcard: new sparqljs_1.Wildcard() };
      }
      createTerm(str) {
        return (0, rdf_string_1.stringToTerm)(str, this.dataFactory);
      }
      // Update functions
      createCompositeUpdate(updates) {
        return { type: A.types.COMPOSITE_UPDATE, updates };
      }
      createDeleteInsert(deleteQuads, insertQuads, where) {
        const result = { type: A.types.DELETE_INSERT };
        if (deleteQuads)
          result.delete = deleteQuads;
        if (insertQuads)
          result.insert = insertQuads;
        if (where)
          result.where = where;
        return result;
      }
      createLoad(source, destination, silent) {
        const result = { type: A.types.LOAD, source };
        if (destination)
          result.destination = destination;
        return this.addSilent(result, Boolean(silent));
      }
      createClear(source, silent) {
        return this.addSilent({ type: A.types.CLEAR, source }, Boolean(silent));
      }
      createCreate(source, silent) {
        return this.addSilent({ type: A.types.CREATE, source }, Boolean(silent));
      }
      createDrop(source, silent) {
        return this.addSilent({ type: A.types.DROP, source }, Boolean(silent));
      }
      createAdd(source, destination, silent) {
        return this.addSilent({ type: A.types.ADD, source, destination }, Boolean(silent));
      }
      createMove(source, destination, silent) {
        return this.addSilent({ type: A.types.MOVE, source, destination }, Boolean(silent));
      }
      createCopy(source, destination, silent) {
        return this.addSilent({ type: A.types.COPY, source, destination }, Boolean(silent));
      }
      addSilent(input, silent) {
        if (silent)
          input.silent = silent;
        return input;
      }
      flattenMulti(input, flatten) {
        if (!flatten) {
          return input;
        }
        const type = input.type;
        const children = input.input;
        let newChildren = [];
        for (const child of children) {
          if (child.type === type) {
            newChildren.push(...child.input);
          } else {
            newChildren.push(child);
          }
        }
        input.input = newChildren;
        return input;
      }
    };
    exports.default = Factory2;
  }
});

// node_modules/sparqlalgebrajs/lib/util.js
var require_util = __commonJS({
  "node_modules/sparqlalgebrajs/lib/util.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var algebra_1 = require_algebra();
    var factory_1 = __importDefault(require_factory());
    var rdf_terms_1 = require_rdf_terms();
    var Util = class _Util {
      /**
       * Flattens an array of arrays to an array.
       * @param arr - Array of arrays
       */
      static flatten(arr) {
        return Array.prototype.concat(...arr).filter((x) => x);
      }
      /**
       * Outputs a JSON object corresponding to the input algebra-like.
       */
      static objectify(algebra) {
        if (algebra.termType) {
          if (algebra.termType === "Quad") {
            return {
              type: "pattern",
              termType: "Quad",
              subject: _Util.objectify(algebra.subject),
              predicate: _Util.objectify(algebra.predicate),
              object: _Util.objectify(algebra.object),
              graph: _Util.objectify(algebra.graph)
            };
          } else {
            let result = { termType: algebra.termType, value: algebra.value };
            if (algebra.language)
              result.language = algebra.language;
            if (algebra.datatype)
              result.datatype = _Util.objectify(algebra.datatype);
            return result;
          }
        }
        if (Array.isArray(algebra))
          return algebra.map((e) => _Util.objectify(e));
        if (algebra === Object(algebra)) {
          let result = {};
          for (let key of Object.keys(algebra))
            result[key] = _Util.objectify(algebra[key]);
          return result;
        }
        return algebra;
      }
      /**
       * Detects all in-scope variables.
       * In practice this means iterating through the entire algebra tree, finding all variables,
       * and stopping when a project function is found.
       * @param {Operation} op - Input algebra tree.
       * @returns {Variable[]} - List of unique in-scope variables.
       */
      static inScopeVariables(op) {
        const variables = [];
        function addVariable(v) {
          if (!variables.find((v2) => v.value === v2.value))
            variables.push(v);
        }
        function recurseTerm(quad) {
          if (quad.subject.termType === "Variable")
            addVariable(quad.subject);
          if (quad.predicate.termType === "Variable")
            addVariable(quad.predicate);
          if (quad.object.termType === "Variable")
            addVariable(quad.object);
          if (quad.graph.termType === "Variable")
            addVariable(quad.graph);
          if (quad.subject.termType === "Quad")
            recurseTerm(quad.subject);
          if (quad.predicate.termType === "Quad")
            recurseTerm(quad.predicate);
          if (quad.object.termType === "Quad")
            recurseTerm(quad.object);
          if (quad.graph.termType === "Quad")
            recurseTerm(quad.graph);
        }
        _Util.recurseOperation(op, {
          [algebra_1.types.EXPRESSION]: (op2) => {
            if (op2.expressionType === algebra_1.expressionTypes.AGGREGATE && op2.variable) {
              addVariable(op2.variable);
            }
            return true;
          },
          [algebra_1.types.EXTEND]: (op2) => {
            addVariable(op2.variable);
            return true;
          },
          [algebra_1.types.GRAPH]: (op2) => {
            if (op2.name.termType === "Variable")
              addVariable(op2.name);
            return true;
          },
          [algebra_1.types.GROUP]: (op2) => {
            op2.variables.forEach(addVariable);
            return true;
          },
          [algebra_1.types.PATH]: (op2) => {
            if (op2.subject.termType === "Variable")
              addVariable(op2.subject);
            if (op2.object.termType === "Variable")
              addVariable(op2.object);
            if (op2.graph.termType === "Variable")
              addVariable(op2.graph);
            if (op2.subject.termType === "Quad")
              recurseTerm(op2.subject);
            if (op2.object.termType === "Quad")
              recurseTerm(op2.object);
            if (op2.graph.termType === "Quad")
              recurseTerm(op2.graph);
            return true;
          },
          [algebra_1.types.PATTERN]: (op2) => {
            recurseTerm(op2);
            return true;
          },
          [algebra_1.types.PROJECT]: (op2) => {
            op2.variables.forEach(addVariable);
            return false;
          },
          [algebra_1.types.SERVICE]: (op2) => {
            if (op2.name.termType === "Variable")
              addVariable(op2.name);
            return true;
          },
          [algebra_1.types.VALUES]: (op2) => {
            op2.variables.forEach(addVariable);
            return true;
          }
        });
        return variables;
      }
      /**
       * Recurses through the given algebra tree
       * A map of callback functions can be provided for individual Operation types to gather data.
       * The return value of those callbacks should indicate whether recursion should be applied or not.
       * Making modifications will change the original input object.
       * @param {Operation} op - The Operation to recurse on.
       * @param { [type: string]: (op: Operation) => boolean } callbacks - A map of required callback Operations.
       */
      static recurseOperation(op, callbacks) {
        let result = op;
        let doRecursion = true;
        const callback = callbacks[op.type];
        if (callback)
          doRecursion = callback(op);
        if (!doRecursion)
          return;
        let recurseOp = (op2) => _Util.recurseOperation(op2, callbacks);
        switch (result.type) {
          case algebra_1.types.ALT:
            result.input.map(recurseOp);
            break;
          case algebra_1.types.ASK:
            recurseOp(result.input);
            break;
          case algebra_1.types.BGP:
            result.patterns.forEach(recurseOp);
            break;
          case algebra_1.types.CONSTRUCT:
            recurseOp(result.input);
            result.template.map(recurseOp);
            break;
          case algebra_1.types.DESCRIBE:
            recurseOp(result.input);
            break;
          case algebra_1.types.DISTINCT:
            recurseOp(result.input);
            break;
          case algebra_1.types.EXPRESSION:
            if (result.expressionType === algebra_1.expressionTypes.EXISTENCE) {
              recurseOp(result.input);
            }
            break;
          case algebra_1.types.EXTEND:
            recurseOp(result.input);
            recurseOp(result.expression);
            break;
          case algebra_1.types.FILTER:
            recurseOp(result.input);
            recurseOp(result.expression);
            break;
          case algebra_1.types.FROM:
            recurseOp(result.input);
            break;
          case algebra_1.types.GRAPH:
            recurseOp(result.input);
            break;
          case algebra_1.types.GROUP:
            recurseOp(result.input);
            result.aggregates.forEach(recurseOp);
            break;
          case algebra_1.types.INV:
            recurseOp(result.path);
            break;
          case algebra_1.types.JOIN:
            result.input.map(recurseOp);
            break;
          case algebra_1.types.LEFT_JOIN:
            result.input.map(recurseOp);
            if (result.expression)
              recurseOp(result.expression);
            break;
          case algebra_1.types.LINK:
            break;
          case algebra_1.types.MINUS:
            result.input.map(recurseOp);
            break;
          case algebra_1.types.NOP:
            break;
          case algebra_1.types.NPS:
            break;
          case algebra_1.types.ONE_OR_MORE_PATH:
            recurseOp(result.path);
            break;
          case algebra_1.types.ORDER_BY:
            recurseOp(result.input);
            result.expressions.forEach(recurseOp);
            break;
          case algebra_1.types.PATH:
            recurseOp(result.predicate);
            break;
          case algebra_1.types.PATTERN:
            break;
          case algebra_1.types.PROJECT:
            recurseOp(result.input);
            break;
          case algebra_1.types.REDUCED:
            recurseOp(result.input);
            break;
          case algebra_1.types.SEQ:
            result.input.map(recurseOp);
            break;
          case algebra_1.types.SERVICE:
            recurseOp(result.input);
            break;
          case algebra_1.types.SLICE:
            recurseOp(result.input);
            break;
          case algebra_1.types.UNION:
            result.input.map(recurseOp);
            break;
          case algebra_1.types.VALUES:
            break;
          case algebra_1.types.ZERO_OR_MORE_PATH:
            recurseOp(result.path);
            break;
          case algebra_1.types.ZERO_OR_ONE_PATH:
            recurseOp(result.path);
            break;
          case algebra_1.types.COMPOSITE_UPDATE:
            result.updates.forEach((update) => recurseOp(update));
            break;
          case algebra_1.types.DELETE_INSERT:
            if (result.delete)
              result.delete.forEach((pattern) => recurseOp(pattern));
            if (result.insert)
              result.insert.forEach((pattern) => recurseOp(pattern));
            if (result.where)
              recurseOp(result.where);
            break;
          case algebra_1.types.LOAD:
            break;
          case algebra_1.types.CLEAR:
            break;
          case algebra_1.types.CREATE:
            break;
          case algebra_1.types.DROP:
            break;
          case algebra_1.types.ADD:
            break;
          case algebra_1.types.MOVE:
            break;
          case algebra_1.types.COPY:
            break;
          default:
            throw new Error(`Unknown Operation type ${result.type}`);
        }
      }
      /**
       * Creates a deep copy of the given Operation.
       * Creates shallow copies of the non-Operation values.
       * A map of callback functions can be provided for individual Operation types
       * to specifically modify the given objects before triggering recursion.
       * The return value of those callbacks should indicate whether recursion should be applied to this returned object or not.
       * @param {Operation} op - The Operation to recurse on.
       * @param callbacks - A map of required callback Operations.
       * @param {Factory} factory - Factory used to create new Operations. Will use default factory if none is provided.
       * @returns {Operation} - The copied result.
       */
      static mapOperation(op, callbacks, factory3) {
        let result = op;
        let doRecursion = true;
        let copyMetadata = true;
        factory3 = factory3 || new factory_1.default();
        const callback = callbacks[op.type];
        if (callback) {
          const recurseResult = callback(op, factory3);
          result = recurseResult.result;
          doRecursion = recurseResult.recurse;
          copyMetadata = recurseResult.copyMetadata !== false;
        }
        let toCopyMetadata;
        if (copyMetadata && (result.metadata || op.metadata)) {
          toCopyMetadata = { ...result.metadata, ...op.metadata };
        }
        if (!doRecursion) {
          if (toCopyMetadata) {
            result.metadata = toCopyMetadata;
          }
          return result;
        }
        let mapOp = (op2) => _Util.mapOperation(op2, callbacks, factory3);
        switch (result.type) {
          case algebra_1.types.ALT:
            result = factory3.createAlt(result.input.map(mapOp));
            break;
          case algebra_1.types.ASK:
            result = factory3.createAsk(mapOp(result.input));
            break;
          case algebra_1.types.BGP:
            result = factory3.createBgp(result.patterns.map(mapOp));
            break;
          case algebra_1.types.CONSTRUCT:
            result = factory3.createConstruct(mapOp(result.input), result.template.map(mapOp));
            break;
          case algebra_1.types.DESCRIBE:
            result = factory3.createDescribe(mapOp(result.input), result.terms);
            break;
          case algebra_1.types.DISTINCT:
            result = factory3.createDistinct(mapOp(result.input));
            break;
          case algebra_1.types.EXPRESSION:
            result = _Util.mapExpression(result, callbacks, factory3);
            break;
          case algebra_1.types.EXTEND:
            result = factory3.createExtend(mapOp(result.input), result.variable, mapOp(result.expression));
            break;
          case algebra_1.types.FILTER:
            result = factory3.createFilter(mapOp(result.input), mapOp(result.expression));
            break;
          case algebra_1.types.FROM:
            result = factory3.createFrom(mapOp(result.input), [...result.default], [...result.named]);
            break;
          case algebra_1.types.GRAPH:
            result = factory3.createGraph(mapOp(result.input), result.name);
            break;
          case algebra_1.types.GROUP:
            result = factory3.createGroup(mapOp(result.input), [].concat(result.variables), result.aggregates.map(mapOp));
            break;
          case algebra_1.types.INV:
            result = factory3.createInv(mapOp(result.path));
            break;
          case algebra_1.types.JOIN:
            result = factory3.createJoin(result.input.map(mapOp));
            break;
          case algebra_1.types.LEFT_JOIN:
            result = factory3.createLeftJoin(mapOp(result.input[0]), mapOp(result.input[1]), result.expression ? mapOp(result.expression) : void 0);
            break;
          case algebra_1.types.LINK:
            result = factory3.createLink(result.iri);
            break;
          case algebra_1.types.MINUS:
            result = factory3.createMinus(mapOp(result.input[0]), mapOp(result.input[1]));
            break;
          case algebra_1.types.NOP:
            result = factory3.createNop();
            break;
          case algebra_1.types.NPS:
            result = factory3.createNps([].concat(result.iris));
            break;
          case algebra_1.types.ONE_OR_MORE_PATH:
            result = factory3.createOneOrMorePath(mapOp(result.path));
            break;
          case algebra_1.types.ORDER_BY:
            result = factory3.createOrderBy(mapOp(result.input), result.expressions.map(mapOp));
            break;
          case algebra_1.types.PATH:
            result = factory3.createPath(result.subject, mapOp(result.predicate), result.object, result.graph);
            break;
          case algebra_1.types.PATTERN:
            result = factory3.createPattern(result.subject, result.predicate, result.object, result.graph);
            break;
          case algebra_1.types.PROJECT:
            result = factory3.createProject(mapOp(result.input), [...result.variables]);
            break;
          case algebra_1.types.REDUCED:
            result = factory3.createReduced(mapOp(result.input));
            break;
          case algebra_1.types.SEQ:
            result = factory3.createSeq(result.input.map(mapOp));
            break;
          case algebra_1.types.SERVICE:
            result = factory3.createService(mapOp(result.input), result.name, result.silent);
            break;
          case algebra_1.types.SLICE:
            result = factory3.createSlice(mapOp(result.input), result.start, result.length);
            break;
          case algebra_1.types.UNION:
            result = factory3.createUnion(result.input.map(mapOp));
            break;
          case algebra_1.types.VALUES:
            result = factory3.createValues([].concat(result.variables), result.bindings.map((b) => Object.assign({}, b)));
            break;
          case algebra_1.types.ZERO_OR_MORE_PATH:
            result = factory3.createZeroOrMorePath(mapOp(result.path));
            break;
          case algebra_1.types.ZERO_OR_ONE_PATH:
            result = factory3.createZeroOrOnePath(mapOp(result.path));
            break;
          case algebra_1.types.COMPOSITE_UPDATE:
            result = factory3.createCompositeUpdate(result.updates.map(mapOp));
            break;
          case algebra_1.types.DELETE_INSERT:
            result = factory3.createDeleteInsert(result.delete ? result.delete.map(mapOp) : void 0, result.insert ? result.insert.map(mapOp) : void 0, result.where ? mapOp(result.where) : void 0);
            break;
          case algebra_1.types.LOAD:
            result = factory3.createLoad(result.source, result.destination, result.silent);
            break;
          case algebra_1.types.CLEAR:
            result = factory3.createClear(result.source, result.silent);
            break;
          case algebra_1.types.CREATE:
            result = factory3.createCreate(result.source, result.silent);
            break;
          case algebra_1.types.DROP:
            result = factory3.createDrop(result.source, result.silent);
            break;
          case algebra_1.types.ADD:
            result = factory3.createAdd(result.source, result.destination);
            break;
          case algebra_1.types.MOVE:
            result = factory3.createMove(result.source, result.destination);
            break;
          case algebra_1.types.COPY:
            result = factory3.createCopy(result.source, result.destination);
            break;
          default:
            throw new Error(`Unknown Operation type ${result.type}`);
        }
        if (toCopyMetadata) {
          result.metadata = toCopyMetadata;
        }
        return result;
      }
      /**
       * Similar to the {@link mapOperation} function but specifically for expressions.
       * Both functions call each other while copying.
       * Should not be called directly since it does not execute the callbacks, these happen in {@link mapOperation}.
       * @param {Expression} expr - The Operation to recurse on.
       * @param callbacks - A map of required callback Operations.
       * @param {Factory} factory - Factory used to create new Operations. Will use default factory if none is provided.
       * @returns {Operation} - The copied result.
       */
      static mapExpression(expr, callbacks, factory3) {
        let result = expr;
        let doRecursion = true;
        factory3 = factory3 || new factory_1.default();
        const callback = callbacks[expr.expressionType];
        if (callback)
          ({ result, recurse: doRecursion } = callback(expr, factory3));
        if (!doRecursion)
          return result;
        let mapOp = (op) => _Util.mapOperation(op, callbacks, factory3);
        switch (expr.expressionType) {
          case algebra_1.expressionTypes.AGGREGATE:
            if (expr.variable) {
              return factory3.createBoundAggregate(expr.variable, expr.aggregator, mapOp(expr.expression), expr.distinct, expr.separator);
            }
            return factory3.createAggregateExpression(expr.aggregator, mapOp(expr.expression), expr.distinct, expr.separator);
          case algebra_1.expressionTypes.EXISTENCE:
            return factory3.createExistenceExpression(expr.not, mapOp(expr.input));
          case algebra_1.expressionTypes.NAMED:
            return factory3.createNamedExpression(expr.name, expr.args.map(mapOp));
          case algebra_1.expressionTypes.OPERATOR:
            return factory3.createOperatorExpression(expr.operator, expr.args.map(mapOp));
          case algebra_1.expressionTypes.TERM:
            return factory3.createTermExpression(expr.term);
          case algebra_1.expressionTypes.WILDCARD:
            return factory3.createWildcardExpression();
          default:
            throw new Error(`Unknown Expression type ${expr.expressionType}`);
        }
      }
      /**
       * Creates a deep clone of the operation.
       * This is syntactic sugar for calling {@link mapOperation} without callbacks.
       * @param {Operation} op - The operation to copy.
       * @returns {Operation} - The deep copy.
       */
      static cloneOperation(op) {
        return _Util.mapOperation(op, {});
      }
      /**
       * Creates a deep clone of the expression.
       * This is syntactic sugar for calling {@link mapExpression} without callbacks.
       * @param {Expression} expr - The operation to copy.
       * @returns {Expression} - The deep copy.
       */
      static cloneExpression(expr) {
        return _Util.mapExpression(expr, {});
      }
      static createUniqueVariable(label, variables, dataFactory) {
        let counter = 0;
        let labelLoop = label;
        while (variables[labelLoop]) {
          labelLoop = `${label}${counter++}`;
        }
        return dataFactory.variable(labelLoop);
      }
      // separate terms from wildcard since we handle them differently
      static isSimpleTerm(term) {
        return term.termType !== void 0 && term.termType !== "Quad" && term.termType !== "Wildcard";
      }
      static isQuad(term) {
        return term.termType === "Quad";
      }
      static hasQuadVariables(quad) {
        return (0, rdf_terms_1.someTermsNested)(quad, (term) => term.termType === "Variable");
      }
      static isWildcard(term) {
        return term.termType === "Wildcard";
      }
    };
    exports.default = Util;
  }
});

// node_modules/sparqlalgebrajs/lib/sparqlAlgebra.js
var require_sparqlAlgebra = __commonJS({
  "node_modules/sparqlalgebrajs/lib/sparqlAlgebra.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var equal = require_es6();
    var rdf_string_1 = require_rdf_string();
    var Algebra = __importStar(require_algebra());
    var factory_1 = __importDefault(require_factory());
    var util_1 = __importDefault(require_util());
    var Parser4 = require_sparql().Parser;
    var types = Algebra.types;
    var variables = /* @__PURE__ */ new Set();
    var varCount = 0;
    var useQuads = false;
    var factory3;
    function translate(sparql, options) {
      options = options || {};
      factory3 = new factory_1.default(options.dataFactory);
      let query;
      if (isString2(sparql)) {
        let parser = new Parser4(options);
        parser._resetBlanks();
        query = parser.parse(sparql);
      } else {
        query = sparql;
      }
      return translateQuery(query, options.quads, options.blankToVariable);
    }
    exports.default = translate;
    function translateQuery(sparql, quads, blankToVariable) {
      variables = /* @__PURE__ */ new Set();
      varCount = 0;
      useQuads = Boolean(quads);
      if (!sparql.type)
        return factory3.createNop();
      if (sparql.type !== "query" && sparql.type !== "update")
        throw new Error("Translate only works on complete query or update objects.");
      let res;
      findAllVariables(sparql);
      if (sparql.type === "query") {
        const group = { type: "group", patterns: sparql.where || [] };
        res = translateGroupGraphPattern(group);
        res = translateAggregates(sparql, res);
      } else if (sparql.type === "update") {
        res = translateUpdate(sparql);
      }
      if (blankToVariable) {
        res = translateBlankNodesToVariables(res);
      }
      return res;
    }
    function isString2(str) {
      return typeof str === "string";
    }
    function isTerm(term) {
      return Boolean(term === null || term === void 0 ? void 0 : term.termType);
    }
    function isTriple(triple) {
      return triple.subject && triple.predicate && triple.object;
    }
    function isVariable(term) {
      return (term === null || term === void 0 ? void 0 : term.termType) === "Variable";
    }
    function findAllVariables(thingy) {
      if (isTerm(thingy)) {
        if (isVariable(thingy)) {
          variables.add(`?${thingy.value}`);
        }
      } else if (Array.isArray(thingy)) {
        for (const entry of thingy)
          findAllVariables(entry);
      } else if (thingy && typeof thingy === "object") {
        for (let key of Object.keys(thingy)) {
          if (key.startsWith("?"))
            variables.add(key);
          findAllVariables(thingy[key]);
        }
      }
    }
    function inScopeVariables(thingy) {
      let inScope = {};
      if (isTriple(thingy)) {
        const result = [
          inScopeVariables(thingy.subject),
          inScopeVariables(thingy.predicate),
          inScopeVariables(thingy.object),
          thingy.graph ? inScopeVariables(thingy.graph) : {}
        ];
        Object.assign(inScope, ...result);
      } else if (isTerm(thingy)) {
        if (isVariable(thingy))
          inScope[thingy.value] = thingy;
      } else if (thingy.type === "bgp") {
        const quads = thingy.triples;
        Object.assign(inScope, ...quads.map(inScopeVariables));
      } else if (thingy.type === "path") {
        Object.assign(inScope, ...thingy.items.map(inScopeVariables));
      } else if (thingy.type === "group" || thingy.type === "union" || thingy.type === "optional") {
        Object.assign(inScope, ...thingy.patterns.map(inScopeVariables));
      } else if (thingy.type === "service" || thingy.type === "graph") {
        Object.assign(inScope, inScopeVariables(thingy.name));
        Object.assign(inScope, ...thingy.patterns.map(inScopeVariables));
      } else if (thingy.type === "bind") {
        Object.assign(inScope, inScopeVariables(thingy.variable));
      } else if (thingy.type === "values") {
        if (thingy.values.length > 0) {
          const vars = Object.keys(thingy.values[0]).map((v) => factory3.createTerm(v));
          Object.assign(inScope, ...vars.map(inScopeVariables));
        }
      } else if (thingy.type === "query") {
        if (thingy.queryType === "SELECT" || thingy.queryType === "DESCRIBE") {
          if (thingy.where && thingy.variables.some(util_1.default.isWildcard))
            Object.assign(inScope, ...thingy.where.map(inScopeVariables));
          for (const v of thingy.variables) {
            if (isVariable(v))
              Object.assign(inScope, inScopeVariables(v));
            else if (v.variable)
              Object.assign(inScope, inScopeVariables(v.variable));
          }
          if (thingy.queryType === "SELECT") {
            if (thingy.group) {
              for (const g of thingy.group) {
                if (g.variable)
                  Object.assign(inScope, inScopeVariables(g.variable));
              }
            }
            if (thingy.values) {
              const values = { type: "values", values: thingy.values };
              Object.assign(inScope, inScopeVariables(values));
            }
          }
        }
      }
      return inScope;
    }
    function translateGroupGraphPattern(thingy) {
      let filters = [];
      let nonfilters = [];
      if ("patterns" in thingy)
        for (let pattern of thingy.patterns)
          (pattern.type === "filter" ? filters : nonfilters).push(pattern);
      if (thingy.type === "bgp")
        return translateBgp(thingy);
      let result;
      if (thingy.type === "union")
        result = factory3.createUnion(nonfilters.map((p) => {
          if (p.type !== "group")
            p = { type: "group", patterns: [p] };
          return translateGroupGraphPattern(p);
        }));
      else if (thingy.type === "graph")
        return translateGraph(thingy);
      else if (thingy.type === "group")
        result = nonfilters.reduce(accumulateGroupGraphPattern, factory3.createBgp([]));
      else if (thingy.type === "values")
        result = translateInlineData(thingy);
      else if (thingy.type === "query")
        result = translateQuery(thingy, useQuads, false);
      else
        throw new Error(`Unexpected type: ${thingy.type}`);
      if (filters.length > 0) {
        let expressions = filters.map((filter) => translateExpression(filter.expression));
        if (expressions.length > 0)
          result = factory3.createFilter(result, expressions.reduce((acc, exp) => factory3.createOperatorExpression("&&", [acc, exp])));
      }
      return result;
    }
    function translateExpression(exp) {
      if (util_1.default.isSimpleTerm(exp))
        return factory3.createTermExpression(exp);
      if (util_1.default.isQuad(exp)) {
        if (util_1.default.hasQuadVariables(exp))
          return factory3.createOperatorExpression("triple", [
            translateExpression(exp.subject),
            translateExpression(exp.predicate),
            translateExpression(exp.object)
          ]);
        else
          return factory3.createTermExpression(exp);
      }
      if (util_1.default.isWildcard(exp))
        return factory3.createWildcardExpression();
      if ("aggregation" in exp)
        return factory3.createAggregateExpression(exp.aggregation, translateExpression(exp.expression), Boolean(exp.distinct), exp.separator);
      if ("function" in exp)
        return factory3.createNamedExpression(exp.function, exp.args.map(translateExpression));
      if ("operator" in exp) {
        if (exp.operator === "exists" || exp.operator === "notexists")
          return factory3.createExistenceExpression(exp.operator === "notexists", translateGroupGraphPattern(exp.args[0]));
        if (exp.operator === "in" || exp.operator === "notin")
          exp.args = [exp.args[0]].concat(exp.args[1]);
        return factory3.createOperatorExpression(exp.operator, exp.args.map(translateExpression));
      }
      throw new Error(`Unknown expression: ${JSON.stringify(exp)}`);
    }
    function translateBgp(thingy) {
      let patterns = [];
      let joins = [];
      for (let t of thingy.triples) {
        if ("pathType" in t.predicate) {
          let path = translatePath(t);
          for (let p of path) {
            if (p.type === types.PATH) {
              if (patterns.length > 0)
                joins.push(factory3.createBgp(patterns));
              patterns = [];
              joins.push(p);
            } else
              patterns.push(p);
          }
        } else
          patterns.push(translateQuad(t));
      }
      if (patterns.length > 0)
        joins.push(factory3.createBgp(patterns));
      if (joins.length === 1)
        return joins[0];
      return factory3.createJoin(joins);
    }
    function translatePath(triple) {
      let sub = triple.subject;
      let pred = translatePathPredicate(triple.predicate);
      let obj = triple.object;
      return simplifyPath(sub, pred, obj);
    }
    function translatePathPredicate(predicate) {
      if (util_1.default.isSimpleTerm(predicate)) {
        if (predicate.termType === "NamedNode")
          return factory3.createLink(predicate);
        else
          throw new Error(`Path predicate should be a NamedNode, got ${JSON.stringify(predicate)}`);
      }
      if (predicate.pathType === "^")
        return factory3.createInv(translatePathPredicate(predicate.items[0]));
      if (predicate.pathType === "!") {
        let normals = [];
        let inverted = [];
        let items;
        if ("pathType" in predicate.items[0] && predicate.items[0].pathType === "|")
          items = predicate.items[0].items;
        else
          items = predicate.items;
        for (let item of items) {
          if (util_1.default.isSimpleTerm(item))
            normals.push(item);
          else if (item.pathType === "^")
            inverted.push(item.items[0]);
          else
            throw new Error(`Unexpected item: ${JSON.stringify(item)}`);
        }
        let normalElement = factory3.createNps(normals);
        let invertedElement = factory3.createInv(factory3.createNps(inverted));
        if (inverted.length === 0)
          return normalElement;
        if (normals.length === 0)
          return invertedElement;
        return factory3.createAlt([normalElement, invertedElement]);
      }
      if (predicate.pathType === "/")
        return factory3.createSeq(predicate.items.map(translatePathPredicate));
      if (predicate.pathType === "|")
        return factory3.createAlt(predicate.items.map(translatePathPredicate));
      if (predicate.pathType === "*")
        return factory3.createZeroOrMorePath(translatePathPredicate(predicate.items[0]));
      if (predicate.pathType === "+")
        return factory3.createOneOrMorePath(translatePathPredicate(predicate.items[0]));
      if (predicate.pathType === "?")
        return factory3.createZeroOrOnePath(translatePathPredicate(predicate.items[0]));
      throw new Error(`Unable to translate path expression ${JSON.stringify(predicate)}`);
    }
    function simplifyPath(subject, predicate, object) {
      if (predicate.type === types.LINK)
        return [factory3.createPattern(subject, predicate.iri, object)];
      if (predicate.type === types.INV)
        return simplifyPath(object, predicate.path, subject);
      if (predicate.type === types.SEQ) {
        let joiner = subject;
        return util_1.default.flatten(predicate.input.map((subOp, i2) => {
          const nextJoiner = i2 === predicate.input.length - 1 ? object : generateFreshVar();
          const simplifiedPath = simplifyPath(joiner, subOp, nextJoiner);
          if (nextJoiner.termType === "Variable") {
            joiner = nextJoiner;
          }
          return simplifiedPath;
        }));
      }
      return [factory3.createPath(subject, predicate, object)];
    }
    function generateFreshVar() {
      let v = `?var${varCount++}`;
      if (variables.has(v))
        return generateFreshVar();
      variables.add(v);
      return factory3.createTerm(v);
    }
    function translateQuad(quad) {
      if ("pathType" in quad.predicate) {
        throw new Error("Trying to translate property path to quad.");
      }
      return factory3.createPattern(quad.subject, quad.predicate, quad.object, quad.graph);
    }
    function translateGraph(graph) {
      const group = { type: "group", patterns: graph.patterns };
      let result = translateGroupGraphPattern(group);
      if (useQuads)
        result = recurseGraph(result, graph.name);
      else
        result = factory3.createGraph(result, graph.name);
      return result;
    }
    var typeVals = Object.values(types);
    function recurseGraph(thingy, graph, replacement) {
      if (thingy.type === types.GRAPH) {
        if (replacement) {
          throw new Error("Recursing through nested GRAPH statements with a replacement is impossible.");
        }
        thingy = recurseGraph(thingy.input, thingy.name);
      } else if (thingy.type === types.SERVICE) {
      } else if (thingy.type === types.BGP)
        thingy.patterns = thingy.patterns.map((quad) => {
          if (replacement) {
            if (quad.subject.equals(graph))
              quad.subject = replacement;
            if (quad.predicate.equals(graph))
              quad.predicate = replacement;
            if (quad.object.equals(graph))
              quad.object = replacement;
          }
          if (quad.graph.termType === "DefaultGraph")
            quad.graph = graph;
          return quad;
        });
      else if (thingy.type === types.PATH) {
        if (replacement) {
          if (thingy.subject.equals(graph))
            thingy.subject = replacement;
          if (thingy.object.equals(graph))
            thingy.object = replacement;
        }
        if (thingy.graph.termType === "DefaultGraph")
          thingy.graph = graph;
      } else if (thingy.type === types.PROJECT && !replacement) {
        if (!thingy.variables.some((v) => v.equals(graph)))
          replacement = generateFreshVar();
        thingy.input = recurseGraph(thingy.input, graph, replacement);
      } else if (thingy.type === types.EXTEND && !replacement) {
        if (thingy.variable.equals(graph))
          replacement = generateFreshVar();
        thingy.input = recurseGraph(thingy.input, graph, replacement);
      } else {
        for (let key of Object.keys(thingy)) {
          if (Array.isArray(thingy[key]))
            thingy[key] = thingy[key].map((x) => recurseGraph(x, graph, replacement));
          else if (typeVals.indexOf(thingy[key].type) >= 0)
            thingy[key] = recurseGraph(thingy[key], graph, replacement);
          else if (replacement && isVariable(thingy[key]) && thingy[key].equals(graph))
            thingy[key] = replacement;
        }
      }
      return thingy;
    }
    function accumulateGroupGraphPattern(G, E) {
      if (E.type === "optional") {
        const A = translateGroupGraphPattern({ type: "group", patterns: E.patterns });
        if (A.type === types.FILTER) {
          G = factory3.createLeftJoin(G, A.input, A.expression);
        } else
          G = factory3.createLeftJoin(G, A);
      } else if (E.type === "minus") {
        const A = translateGroupGraphPattern({ type: "group", patterns: E.patterns });
        G = factory3.createMinus(G, A);
      } else if (E.type === "bind")
        G = factory3.createExtend(G, E.variable, translateExpression(E.expression));
      else if (E.type === "service") {
        const group = { type: "group", patterns: E.patterns };
        const A = factory3.createService(translateGroupGraphPattern(group), E.name, E.silent);
        G = simplifiedJoin(G, A);
      } else {
        const A = translateGroupGraphPattern(E);
        G = simplifiedJoin(G, A);
      }
      return G;
    }
    function simplifiedJoin(G, A) {
      if (G.type === types.BGP && A.type === types.BGP)
        G = factory3.createBgp([...G.patterns, ...A.patterns]);
      else if (G.type === types.BGP && G.patterns.length === 0)
        G = A;
      else if (A.type === types.BGP && A.patterns.length === 0) {
      } else
        G = factory3.createJoin([G, A]);
      return G;
    }
    function translateInlineData(values) {
      let variables2 = (values.values.length === 0 ? [] : Object.keys(values.values[0])).map(factory3.createTerm.bind(factory3));
      let bindings = values.values.map((binding) => {
        let keys = Object.keys(binding);
        keys = keys.filter((k) => binding[k] !== void 0);
        let map = {};
        for (let key of keys)
          map[key] = binding[key];
        return map;
      });
      return factory3.createValues(variables2, bindings);
    }
    function translateAggregates(query, res) {
      const select = query;
      const E = [];
      const A = {};
      select.variables = select.variables && select.variables.map((val) => mapAggregate(val, A));
      select.having = select.having && select.having.map((val) => mapAggregate(val, A));
      select.order = select.order && select.order.map((val) => mapAggregate(val, A));
      if (select.group || Object.keys(A).length > 0) {
        const aggregates = Object.keys(A).map((v) => translateBoundAggregate(A[v], factory3.createTerm(v)));
        const vars = [];
        if (select.group) {
          for (const e of select.group) {
            if (util_1.default.isSimpleTerm(e.expression)) {
              vars.push(e.expression);
            } else {
              const v = "variable" in e ? e.variable : generateFreshVar();
              res = factory3.createExtend(res, v, translateExpression(e.expression));
              vars.push(v);
            }
          }
        }
        res = factory3.createGroup(res, vars, aggregates);
      }
      if (select.having)
        for (let filter of select.having)
          res = factory3.createFilter(res, translateExpression(filter));
      if (query.values)
        res = factory3.createJoin([res, translateInlineData(query)]);
      let PV = [];
      if (query.queryType === "SELECT" || query.queryType === "DESCRIBE") {
        if (query.variables.some((e) => e && util_1.default.isWildcard(e)))
          PV = Object.values(inScopeVariables(query)).sort((left, right) => left.value.localeCompare(right.value));
        else {
          for (let v of query.variables) {
            if (isVariable(v) || !("variable" in v))
              PV.push(v);
            else if (v.variable) {
              PV.push(v.variable);
              E.push(v);
            }
          }
        }
      }
      for (let v of E)
        res = factory3.createExtend(res, v.variable, translateExpression(v.expression));
      if (select.order)
        res = factory3.createOrderBy(res, select.order.map((exp) => {
          let result = translateExpression(exp.expression);
          if (exp.descending)
            result = factory3.createOperatorExpression("desc", [result]);
          return result;
        }));
      if (query.queryType === "SELECT")
        res = factory3.createProject(res, PV);
      if (select.distinct)
        res = factory3.createDistinct(res);
      if (select.reduced)
        res = factory3.createReduced(res);
      if (query.queryType === "CONSTRUCT")
        res = factory3.createConstruct(res, (query.template || []).map(translateQuad));
      else if (query.queryType === "ASK")
        res = factory3.createAsk(res);
      else if (query.queryType === "DESCRIBE")
        res = factory3.createDescribe(res, PV);
      if (select.offset || select.limit)
        res = factory3.createSlice(res, select.offset || 0, select.limit);
      if (select.from)
        res = factory3.createFrom(res, select.from.default, select.from.named);
      return res;
    }
    function mapAggregate(thingy, aggregates) {
      if ("type" in thingy && thingy.type === "aggregate") {
        let found = false;
        let v;
        for (let key of Object.keys(aggregates)) {
          if (equal(aggregates[key], thingy)) {
            v = factory3.createTerm(key);
            found = true;
            break;
          }
        }
        if (!found) {
          v = generateFreshVar();
          aggregates[(0, rdf_string_1.termToString)(v)] = thingy;
        }
        return v;
      }
      if ("expression" in thingy && thingy.expression)
        return { ...thingy, expression: mapAggregate(thingy.expression, aggregates) };
      if ("args" in thingy && thingy.args)
        return { ...thingy, args: thingy.args.map((subthingy) => mapAggregate(subthingy, aggregates)) };
      return thingy;
    }
    function translateBoundAggregate(thingy, v) {
      if (thingy.type !== "aggregate" || !thingy.aggregation)
        throw new Error(`Unexpected input: ${JSON.stringify(thingy)}`);
      const A = translateExpression(thingy);
      A.variable = v;
      return A;
    }
    function translateUpdate(thingy) {
      if (thingy.updates.length === 1)
        return translateSingleUpdate(thingy.updates[0]);
      return factory3.createCompositeUpdate(thingy.updates.map(translateSingleUpdate));
    }
    function translateSingleUpdate(thingy) {
      if ("type" in thingy) {
        if (thingy.type === "load")
          return translateUpdateGraphLoad(thingy);
        if (thingy.type === "clear" || thingy.type === "create" || thingy.type === "drop")
          return translateUpdateGraph(thingy);
        if (thingy.type === "add" || thingy.type === "copy" || thingy.type === "move")
          return translateUpdateGraphShortcut(thingy);
      } else if (thingy.updateType === "insertdelete" || thingy.updateType === "deletewhere" || thingy.updateType === "delete" || thingy.updateType === "insert")
        return translateInsertDelete(thingy);
      throw new Error(`Unknown update type ${JSON.stringify(thingy)}`);
    }
    function translateInsertDelete(thingy) {
      if (!useQuads)
        throw new Error("INSERT/DELETE operations are only supported with quads option enabled");
      let deleteTriples = [];
      let insertTriples = [];
      let where;
      if (thingy.delete)
        deleteTriples = util_1.default.flatten(thingy.delete.map((input) => translateUpdateTriplesBlock(input, thingy.graph)));
      if (thingy.insert)
        insertTriples = util_1.default.flatten(thingy.insert.map((input) => translateUpdateTriplesBlock(input, thingy.graph)));
      if (thingy.where && thingy.where.length > 0) {
        where = translateGroupGraphPattern({ type: "group", patterns: thingy.where });
        const using = thingy.using;
        if (using)
          where = factory3.createFrom(where, using.default, using.named);
        else if (thingy.graph)
          where = recurseGraph(where, thingy.graph);
      } else if (thingy.updateType === "deletewhere" && deleteTriples.length > 0) {
        where = factory3.createBgp(deleteTriples);
      }
      return factory3.createDeleteInsert(deleteTriples.length > 0 ? deleteTriples : void 0, insertTriples.length > 0 ? insertTriples : void 0, where);
    }
    function translateUpdateTriplesBlock(thingy, graph) {
      let currentGraph = graph;
      if (thingy.type === "graph")
        currentGraph = thingy.name;
      let currentTriples = thingy.triples;
      if (currentGraph)
        currentTriples = currentTriples.map((triple) => Object.assign(triple, { graph: currentGraph }));
      return currentTriples.map(translateQuad);
    }
    function translateUpdateGraph(thingy) {
      let source;
      if (util_1.default.isSimpleTerm(thingy.graph))
        source = thingy.graph;
      else if (thingy.graph.all)
        source = "ALL";
      else if (thingy.graph.default)
        source = "DEFAULT";
      else if (thingy.graph.named)
        source = "NAMED";
      else
        source = thingy.graph.name;
      switch (thingy.type) {
        case "clear":
          return factory3.createClear(source, thingy.silent);
        case "create":
          return factory3.createCreate(source, thingy.silent);
        case "drop":
          return factory3.createDrop(source, thingy.silent);
      }
    }
    function translateUpdateGraphLoad(thingy) {
      return factory3.createLoad(thingy.source, thingy.destination, thingy.silent);
    }
    function translateUpdateGraphShortcut(thingy) {
      const source = thingy.source.default ? "DEFAULT" : thingy.source.name;
      const destination = thingy.destination.default ? "DEFAULT" : thingy.destination.name;
      switch (thingy.type) {
        case "copy":
          return factory3.createCopy(source, destination, thingy.silent);
        case "move":
          return factory3.createMove(source, destination, thingy.silent);
        case "add":
          return factory3.createAdd(source, destination, thingy.silent);
      }
    }
    function translateBlankNodesToVariables(res) {
      const blankToVariableMapping = {};
      const variablesRaw = Array.from(variables).reduce((acc, variable) => {
        acc[variable] = true;
        return acc;
      }, {});
      return util_1.default.mapOperation(res, {
        [Algebra.types.DELETE_INSERT]: (op) => {
          return { result: op, recurse: false };
        },
        [Algebra.types.PATH]: (op, factory4) => {
          return {
            result: factory4.createPath(blankToVariable(op.subject), op.predicate, blankToVariable(op.object), blankToVariable(op.graph)),
            recurse: false
          };
        },
        [Algebra.types.PATTERN]: (op, factory4) => {
          return {
            result: factory4.createPattern(blankToVariable(op.subject), blankToVariable(op.predicate), blankToVariable(op.object), blankToVariable(op.graph)),
            recurse: false
          };
        },
        [Algebra.types.CONSTRUCT]: (op) => {
          return {
            result: factory3.createConstruct(translateBlankNodesToVariables(op.input), op.template),
            recurse: false
          };
        }
      });
      function blankToVariable(term) {
        if (term.termType === "BlankNode") {
          let variable = blankToVariableMapping[term.value];
          if (!variable) {
            variable = util_1.default.createUniqueVariable(term.value, variablesRaw, factory3.dataFactory);
            variablesRaw[variable.value] = true;
            blankToVariableMapping[term.value] = variable;
          }
          return variable;
        }
        return term;
      }
    }
  }
});

// node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  "node_modules/minimalistic-assert/index.js"(exports, module) {
    module.exports = assert;
    function assert(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || "Assertion failed: " + l + " != " + r);
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/hash.js/lib/hash/utils.js
var require_utils = __commonJS({
  "node_modules/hash.js/lib/hash/utils.js"(exports) {
    "use strict";
    var assert = require_minimalistic_assert();
    var inherits = require_inherits_browser();
    exports.inherits = inherits;
    function isSurrogatePair(msg, i2) {
      if ((msg.charCodeAt(i2) & 64512) !== 55296) {
        return false;
      }
      if (i2 < 0 || i2 + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i2 + 1) & 64512) === 56320;
    }
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === "string") {
        if (!enc) {
          var p = 0;
          for (var i2 = 0; i2 < msg.length; i2++) {
            var c = msg.charCodeAt(i2);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = c >> 6 | 192;
              res[p++] = c & 63 | 128;
            } else if (isSurrogatePair(msg, i2)) {
              c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i2) & 1023);
              res[p++] = c >> 18 | 240;
              res[p++] = c >> 12 & 63 | 128;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            } else {
              res[p++] = c >> 12 | 224;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            }
          }
        } else if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (i2 = 0; i2 < msg.length; i2 += 2)
            res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
        }
      } else {
        for (i2 = 0; i2 < msg.length; i2++)
          res[i2] = msg[i2] | 0;
      }
      return res;
    }
    exports.toArray = toArray;
    function toHex(msg) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++)
        res += zero2(msg[i2].toString(16));
      return res;
    }
    exports.toHex = toHex;
    function htonl(w) {
      var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
      return res >>> 0;
    }
    exports.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++) {
        var w = msg[i2];
        if (endian === "little")
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    exports.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7)
        return "0" + word;
      else if (word.length === 6)
        return "00" + word;
      else if (word.length === 5)
        return "000" + word;
      else if (word.length === 4)
        return "0000" + word;
      else if (word.length === 3)
        return "00000" + word;
      else if (word.length === 2)
        return "000000" + word;
      else if (word.length === 1)
        return "0000000" + word;
      else
        return word;
    }
    exports.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i2 = 0, k = start; i2 < res.length; i2++, k += 4) {
        var w;
        if (endian === "big")
          w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else
          w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i2] = w >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i2 = 0, k = 0; i2 < msg.length; i2++, k += 4) {
        var m = msg[i2];
        if (endian === "big") {
          res[k] = m >>> 24;
          res[k + 1] = m >>> 16 & 255;
          res[k + 2] = m >>> 8 & 255;
          res[k + 3] = m & 255;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = m >>> 16 & 255;
          res[k + 1] = m >>> 8 & 255;
          res[k] = m & 255;
        }
      }
      return res;
    }
    exports.split32 = split32;
    function rotr32(w, b) {
      return w >>> b | w << 32 - b;
    }
    exports.rotr32 = rotr32;
    function rotl32(w, b) {
      return w << b | w >>> 32 - b;
    }
    exports.rotl32 = rotl32;
    function sum32(a, b) {
      return a + b >>> 0;
    }
    exports.sum32 = sum32;
    function sum32_3(a, b, c) {
      return a + b + c >>> 0;
    }
    exports.sum32_3 = sum32_3;
    function sum32_4(a, b, c, d) {
      return a + b + c + d >>> 0;
    }
    exports.sum32_4 = sum32_4;
    function sum32_5(a, b, c, d, e) {
      return a + b + c + d + e >>> 0;
    }
    exports.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r = al << 32 - num | ah >>> num;
      return r >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports.shr64_lo = shr64_lo;
  }
});

// node_modules/hash.js/lib/hash/common.js
var require_common = __commonJS({
  "node_modules/hash.js/lib/hash/common.js"(exports) {
    "use strict";
    var utils = require_utils();
    var assert = require_minimalistic_assert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    BlockHash.prototype.update = function update(msg, enc) {
      msg = utils.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for (var i2 = 0; i2 < msg.length; i2 += this._delta32)
          this._update(msg, i2, i2 + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 128;
      for (var i2 = 1; i2 < k; i2++)
        res[i2] = 0;
      len <<= 3;
      if (this.endian === "big") {
        for (var t = 8; t < this.padLength; t++)
          res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = len >>> 24 & 255;
        res[i2++] = len >>> 16 & 255;
        res[i2++] = len >>> 8 & 255;
        res[i2++] = len & 255;
      } else {
        res[i2++] = len & 255;
        res[i2++] = len >>> 8 & 255;
        res[i2++] = len >>> 16 & 255;
        res[i2++] = len >>> 24 & 255;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        for (t = 8; t < this.padLength; t++)
          res[i2++] = 0;
      }
      return res;
    };
  }
});

// node_modules/hash.js/lib/hash/sha/common.js
var require_common2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/common.js"(exports) {
    "use strict";
    var utils = require_utils();
    var rotr32 = utils.rotr32;
    function ft_1(s, x, y, z) {
      if (s === 0)
        return ch32(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32(x, y, z);
    }
    exports.ft_1 = ft_1;
    function ch32(x, y, z) {
      return x & y ^ ~x & z;
    }
    exports.ch32 = ch32;
    function maj32(x, y, z) {
      return x & y ^ x & z ^ y & z;
    }
    exports.maj32 = maj32;
    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    exports.p32 = p32;
    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports.s0_256 = s0_256;
    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports.s1_256 = s1_256;
    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
    }
    exports.g0_256 = g0_256;
    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
    }
    exports.g1_256 = g1_256;
  }
});

// node_modules/hash.js/lib/hash/sha/1.js
var require__ = __commonJS({
  "node_modules/hash.js/lib/hash/sha/1.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var common = require_common();
    var shaCommon = require_common2();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [
      1518500249,
      1859775393,
      2400959708,
      3395469782
    ];
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.W = new Array(80);
    }
    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i2 = 0; i2 < 16; i2++)
        W[i2] = msg[start + i2];
      for (; i2 < W.length; i2++)
        W[i2] = rotl32(W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16], 1);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      for (i2 = 0; i2 < W.length; i2++) {
        var s = ~~(i2 / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i2], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };
    SHA1.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/256.js
var require__2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/256.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var common = require_common();
    var shaCommon = require_common2();
    var assert = require_minimalistic_assert();
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i2 = 0; i2 < 16; i2++)
        W[i2] = msg[start + i2];
      for (; i2 < W.length; i2++)
        W[i2] = sum32_4(g1_256(W[i2 - 2]), W[i2 - 7], g0_256(W[i2 - 15]), W[i2 - 16]);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
      assert(this.k.length === W.length);
      for (i2 = 0; i2 < W.length; i2++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i2], W[i2]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };
    SHA256.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/224.js
var require__3 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/224.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var SHA256 = require__2();
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
      ];
    }
    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 7), "big");
      else
        return utils.split32(this.h.slice(0, 7), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/512.js
var require__4 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/512.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var common = require_common();
    var assert = require_minimalistic_assert();
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
      for (var i2 = 0; i2 < 32; i2++)
        W[i2] = msg[start + i2];
      for (; i2 < W.length; i2 += 2) {
        var c0_hi = g1_512_hi(W[i2 - 4], W[i2 - 3]);
        var c0_lo = g1_512_lo(W[i2 - 4], W[i2 - 3]);
        var c1_hi = W[i2 - 14];
        var c1_lo = W[i2 - 13];
        var c2_hi = g0_512_hi(W[i2 - 30], W[i2 - 29]);
        var c2_lo = g0_512_lo(W[i2 - 30], W[i2 - 29]);
        var c3_hi = W[i2 - 32];
        var c3_lo = W[i2 - 31];
        W[i2] = sum64_4_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
        W[i2 + 1] = sum64_4_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W.length);
      for (var i2 = 0; i2 < W.length; i2 += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i2];
        var c3_lo = this.k[i2 + 1];
        var c4_hi = W[i2];
        var c4_lo = W[i2 + 1];
        var T1_hi = sum64_5_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        var T1_lo = sum64_5_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ ~xh & zh;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ ~xl & zl;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ xh & zh ^ yh & zh;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ xl & zl ^ yl & zl;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
  }
});

// node_modules/hash.js/lib/hash/sha/384.js
var require__5 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/384.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var SHA512 = require__4();
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
      ];
    }
    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 12), "big");
      else
        return utils.split32(this.h.slice(0, 12), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha.js
var require_sha = __commonJS({
  "node_modules/hash.js/lib/hash/sha.js"(exports) {
    "use strict";
    exports.sha1 = require__();
    exports.sha224 = require__3();
    exports.sha256 = require__2();
    exports.sha384 = require__5();
    exports.sha512 = require__4();
  }
});

// node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
  "node_modules/hash.js/lib/hash/ripemd.js"(exports) {
    "use strict";
    var utils = require_utils();
    var common = require_common();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.endian = "little";
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
            s[j]
          ),
          E
        );
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]
          ),
          Eh
        );
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "little");
      else
        return utils.split32(this.h, "little");
    };
    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return x & y | ~x & z;
      else if (j <= 47)
        return (x | ~y) ^ z;
      else if (j <= 63)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    function K(j) {
      if (j <= 15)
        return 0;
      else if (j <= 31)
        return 1518500249;
      else if (j <= 47)
        return 1859775393;
      else if (j <= 63)
        return 2400959708;
      else
        return 2840853838;
    }
    function Kh(j) {
      if (j <= 15)
        return 1352829926;
      else if (j <= 31)
        return 1548603684;
      else if (j <= 47)
        return 1836072691;
      else if (j <= 63)
        return 2053994217;
      else
        return 0;
    }
    var r = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var s = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
  }
});

// node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
  "node_modules/hash.js/lib/hash/hmac.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var assert = require_minimalistic_assert();
    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key, enc));
    }
    module.exports = Hmac;
    Hmac.prototype._init = function init(key) {
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);
      for (var i2 = key.length; i2 < this.blockSize; i2++)
        key.push(0);
      for (i2 = 0; i2 < key.length; i2++)
        key[i2] ^= 54;
      this.inner = new this.Hash().update(key);
      for (i2 = 0; i2 < key.length; i2++)
        key[i2] ^= 106;
      this.outer = new this.Hash().update(key);
    };
    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }
});

// node_modules/hash.js/lib/hash.js
var require_hash = __commonJS({
  "node_modules/hash.js/lib/hash.js"(exports) {
    var hash = exports;
    hash.utils = require_utils();
    hash.common = require_common();
    hash.sha = require_sha();
    hash.ripemd = require_ripemd();
    hash.hmac = require_hmac();
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
  }
});

// node_modules/rdf-isomorphic/lib/RdfIsomorphic.js
var require_RdfIsomorphic = __commonJS({
  "node_modules/rdf-isomorphic/lib/RdfIsomorphic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTermGrounded = exports.termToSignature = exports.quadToSignature = exports.sha1hex = exports.hashTerm = exports.hashTerms = exports.getGraphBlankNodes = exports.uniqGraph = exports.deindexGraph = exports.indexGraph = exports.getQuadsWithoutBlankNodes = exports.getQuadsWithBlankNodes = exports.hasValue = exports.hashValues = exports.getBijectionInner = exports.getBijection = exports.isomorphic = void 0;
    var hash_js_1 = require_hash();
    var rdf_string_1 = require_rdf_string();
    var rdf_terms_1 = require_rdf_terms();
    function isomorphic(graphA, graphB) {
      return !!getBijection(graphA, graphB);
    }
    exports.isomorphic = isomorphic;
    function getBijection(graphA, graphB) {
      const nonBlankIndexA = indexGraph(getQuadsWithoutBlankNodes(graphA));
      const nonBlankIndexB = indexGraph(getQuadsWithoutBlankNodes(graphB));
      if (Object.keys(nonBlankIndexA).length !== Object.keys(nonBlankIndexB).length) {
        return null;
      }
      for (const key in nonBlankIndexA) {
        if (nonBlankIndexA[key] !== nonBlankIndexB[key]) {
          return null;
        }
      }
      const blankQuadsA = uniqGraph(getQuadsWithBlankNodes(graphA));
      const blankQuadsB = uniqGraph(getQuadsWithBlankNodes(graphB));
      const blankNodesA = getGraphBlankNodes(graphA);
      const blankNodesB = getGraphBlankNodes(graphB);
      return getBijectionInner(blankQuadsA, blankQuadsB, blankNodesA, blankNodesB);
    }
    exports.getBijection = getBijection;
    function getBijectionInner(blankQuadsA, blankQuadsB, blankNodesA, blankNodesB, groundedHashesA, groundedHashesB) {
      if (!groundedHashesA) {
        groundedHashesA = {};
      }
      if (!groundedHashesB) {
        groundedHashesB = {};
      }
      const [hashesA, ungroundedHashesA] = hashTerms(blankQuadsA, blankNodesA, groundedHashesA);
      const [hashesB, ungroundedHashesB] = hashTerms(blankQuadsB, blankNodesB, groundedHashesB);
      if (Object.keys(hashesA).length !== Object.keys(hashesB).length) {
        return null;
      }
      for (const hashKeyA in hashesA) {
        if (!hasValue(hashesB, hashesA[hashKeyA])) {
          return null;
        }
      }
      let bijection = {};
      for (const blankNodeA of blankNodesA) {
        const blankNodeAString = rdf_string_1.termToString(blankNodeA);
        const blankNodeAHash = ungroundedHashesA[blankNodeAString];
        for (const blankNodeBString in ungroundedHashesB) {
          if (ungroundedHashesB[blankNodeBString] === blankNodeAHash) {
            bijection[blankNodeAString] = blankNodeBString;
            delete ungroundedHashesB[blankNodeBString];
            break;
          }
        }
      }
      if (!arraysEqual(Object.keys(bijection).sort(), blankNodesA.map(rdf_string_1.termToString).sort()) || !arraysEqual(hashValues(bijection).sort(), blankNodesB.map(rdf_string_1.termToString).sort())) {
        bijection = null;
        for (const blankNodeA of blankNodesA) {
          const blankNodeAString = rdf_string_1.termToString(blankNodeA);
          if (!hashesA[blankNodeAString]) {
            for (const blankNodeB of blankNodesB) {
              const blankNodeBString = rdf_string_1.termToString(blankNodeB);
              if (!hashesB[blankNodeBString]) {
                if (ungroundedHashesA[blankNodeAString] === ungroundedHashesB[blankNodeBString]) {
                  const hash = sha1hex(blankNodeAString);
                  bijection = getBijectionInner(blankQuadsA, blankQuadsB, blankNodesA, blankNodesB, Object.assign(Object.assign({}, hashesA), { [blankNodeAString]: hash }), Object.assign(Object.assign({}, hashesB), { [blankNodeBString]: hash }));
                }
              }
            }
          }
        }
      }
      return bijection;
    }
    exports.getBijectionInner = getBijectionInner;
    function arraysEqual(array1, array2) {
      if (array1.length !== array2.length) {
        return false;
      }
      for (let i2 = array1.length; i2--; ) {
        if (array1[i2] !== array2[i2]) {
          return false;
        }
      }
      return true;
    }
    function hashValues(hash) {
      const arr = [];
      for (const e in hash) {
        arr.push(hash[e]);
      }
      return arr;
    }
    exports.hashValues = hashValues;
    function hasValue(hash, value) {
      for (const hashValue in hash) {
        if (hash[hashValue] === value) {
          return true;
        }
      }
      return false;
    }
    exports.hasValue = hasValue;
    function getQuadsWithBlankNodes(graph) {
      return graph.filter((quad) => rdf_terms_1.someTerms(quad, (value) => {
        return value.termType === "BlankNode" || value.termType === "Quad" && rdf_terms_1.getTermsNested(value).some((term) => term.termType === "BlankNode");
      }));
    }
    exports.getQuadsWithBlankNodes = getQuadsWithBlankNodes;
    function getQuadsWithoutBlankNodes(graph) {
      return graph.filter((quad) => rdf_terms_1.everyTerms(quad, (value) => {
        return value.termType !== "BlankNode" && !(value.termType === "Quad" && rdf_terms_1.getTermsNested(value).some((term) => term.termType === "BlankNode"));
      }));
    }
    exports.getQuadsWithoutBlankNodes = getQuadsWithoutBlankNodes;
    function indexGraph(graph) {
      const index = {};
      for (const quad of graph) {
        index[JSON.stringify(rdf_string_1.quadToStringQuad(quad))] = true;
      }
      return index;
    }
    exports.indexGraph = indexGraph;
    function deindexGraph(indexedGraph) {
      return Object.keys(indexedGraph).map((str) => rdf_string_1.stringQuadToQuad(JSON.parse(str)));
    }
    exports.deindexGraph = deindexGraph;
    function uniqGraph(graph) {
      return deindexGraph(indexGraph(graph));
    }
    exports.uniqGraph = uniqGraph;
    function getGraphBlankNodes(graph) {
      return rdf_terms_1.uniqTerms(graph.map((quad) => rdf_terms_1.getBlankNodes(rdf_terms_1.getTermsNested(quad))).reduce((acc, val) => acc.concat(val), []));
    }
    exports.getGraphBlankNodes = getGraphBlankNodes;
    function hashTerms(quads, terms, groundedHashes) {
      const hashes = Object.assign({}, groundedHashes);
      const ungroundedHashes = {};
      let hashNeeded = true;
      while (hashNeeded) {
        const initialGroundedNodesCount = Object.keys(hashes).length;
        for (const term of terms) {
          const termString = rdf_string_1.termToString(term);
          if (!hashes[termString]) {
            const [grounded, hash] = hashTerm(term, quads, hashes);
            if (grounded) {
              hashes[termString] = hash;
            }
            ungroundedHashes[termString] = hash;
          }
        }
        const uniques = {};
        for (const termKey in ungroundedHashes) {
          const hash = ungroundedHashes[termKey];
          if (uniques[hash] === void 0) {
            uniques[hash] = termKey;
          } else {
            uniques[hash] = false;
          }
        }
        for (const hash in uniques) {
          const value = uniques[hash];
          if (value) {
            hashes[value] = hash;
          }
        }
        hashNeeded = initialGroundedNodesCount !== Object.keys(hashes).length;
      }
      return [hashes, ungroundedHashes];
    }
    exports.hashTerms = hashTerms;
    function hashTerm(term, quads, hashes) {
      const quadSignatures = [];
      let grounded = true;
      for (const quad of quads) {
        const terms = rdf_terms_1.getTermsNested(quad);
        if (terms.some((quadTerm) => quadTerm.equals(term))) {
          quadSignatures.push(quadToSignature(quad, hashes, term));
          for (const quadTerm of terms) {
            if (!isTermGrounded(quadTerm, hashes) && !quadTerm.equals(term)) {
              grounded = false;
            }
          }
        }
      }
      const hash = sha1hex(quadSignatures.sort().join(""));
      return [grounded, hash];
    }
    exports.hashTerm = hashTerm;
    function sha1hex(data) {
      return hash_js_1.sha1().update(data).digest("hex");
    }
    exports.sha1hex = sha1hex;
    function quadToSignature(quad, hashes, term) {
      return rdf_terms_1.getTerms(quad).map((quadTerm) => termToSignature(quadTerm, hashes, term)).join("|");
    }
    exports.quadToSignature = quadToSignature;
    function termToSignature(term, hashes, target) {
      if (term.equals(target)) {
        return "@self";
      } else if (term.termType === "BlankNode") {
        return hashes[rdf_string_1.termToString(term)] || "@blank";
      } else if (term.termType === "Quad") {
        return `<${quadToSignature(term, hashes, target)}>`;
      } else {
        return rdf_string_1.termToString(term);
      }
    }
    exports.termToSignature = termToSignature;
    function isTermGrounded(term, hashes) {
      return term.termType !== "BlankNode" && !(term.termType === "Quad" && rdf_terms_1.getTermsNested(term).some((subTerm) => !isTermGrounded(subTerm, hashes))) || !!hashes[rdf_string_1.termToString(term)];
    }
    exports.isTermGrounded = isTermGrounded;
  }
});

// node_modules/rdf-isomorphic/index.js
var require_rdf_isomorphic = __commonJS({
  "node_modules/rdf-isomorphic/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_RdfIsomorphic(), exports);
  }
});

// node_modules/sparqlalgebrajs/lib/sparql.js
var require_sparql2 = __commonJS({
  "node_modules/sparqlalgebrajs/lib/sparql.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toSparqlJs = exports.toSparql = void 0;
    var rdf_isomorphic_1 = require_rdf_isomorphic();
    var rdf_string_1 = require_rdf_string();
    var sparqljs_1 = require_sparql();
    var Algebra = __importStar(require_algebra());
    var factory_1 = __importDefault(require_factory());
    var util_1 = __importDefault(require_util());
    var types = Algebra.types;
    var eTypes = Algebra.expressionTypes;
    var context;
    var factory3 = new factory_1.default();
    function toSparql(op, options = {}) {
      let generator = new sparqljs_1.Generator(options);
      return generator.stringify(toSparqlJs(op));
    }
    exports.toSparql = toSparql;
    function toSparqlJs(op) {
      resetContext();
      op = removeQuads(op);
      let result = translateOperation(op);
      if (result.type === "group")
        return result.patterns[0];
      return result;
    }
    exports.toSparqlJs = toSparqlJs;
    function resetContext() {
      context = { project: false, extend: [], group: [], aggregates: [], order: [] };
    }
    function translateOperation(op) {
      if (op.type !== types.EXTEND && op.type !== types.ORDER_BY && op.type !== types.GRAPH)
        context.project = false;
      switch (op.type) {
        case types.EXPRESSION:
          return translateExpression(op);
        case types.ASK:
          return translateProject(op, types.ASK);
        case types.BGP:
          return translateBgp(op);
        case types.CONSTRUCT:
          return translateConstruct(op);
        case types.DESCRIBE:
          return translateProject(op, types.DESCRIBE);
        case types.DISTINCT:
          return translateDistinct(op);
        case types.EXTEND:
          return translateExtend(op);
        case types.FROM:
          return translateFrom(op);
        case types.FILTER:
          return translateFilter(op);
        case types.GRAPH:
          return translateGraph(op);
        case types.GROUP:
          return translateGroup(op);
        case types.JOIN:
          return translateJoin(op);
        case types.LEFT_JOIN:
          return translateLeftJoin(op);
        case types.MINUS:
          return translateMinus(op);
        case types.NOP:
          return {};
        case types.ORDER_BY:
          return translateOrderBy(op);
        case types.PATH:
          return translatePath(op);
        case types.PATTERN:
          return translatePattern(op);
        case types.PROJECT:
          return translateProject(op, types.PROJECT);
        case types.REDUCED:
          return translateReduced(op);
        case types.SERVICE:
          return translateService(op);
        case types.SLICE:
          return translateSlice(op);
        case types.UNION:
          return translateUnion(op);
        case types.VALUES:
          return translateValues(op);
        case types.COMPOSITE_UPDATE:
          return translateCompositeUpdate(op);
        case types.DELETE_INSERT:
          return translateDeleteInsert(op);
        case types.LOAD:
          return translateLoad(op);
        case types.CLEAR:
          return translateClear(op);
        case types.CREATE:
          return translateCreate(op);
        case types.DROP:
          return translateDrop(op);
        case types.ADD:
          return translateAdd(op);
        case types.MOVE:
          return translateMove(op);
        case types.COPY:
          return translateCopy(op);
      }
      throw new Error(`Unknown Operation type ${op.type}`);
    }
    function translateExpression(expr) {
      switch (expr.expressionType) {
        case eTypes.AGGREGATE:
          return translateAggregateExpression(expr);
        case eTypes.EXISTENCE:
          return translateExistenceExpression(expr);
        case eTypes.NAMED:
          return translateNamedExpression(expr);
        case eTypes.OPERATOR:
          return translateOperatorExpression(expr);
        case eTypes.TERM:
          return translateTermExpression(expr);
        case eTypes.WILDCARD:
          return translateWildcardExpression(expr);
      }
      throw new Error(`Unknown Expression Operation type ${expr.expressionType}`);
    }
    function translatePathComponent(path) {
      switch (path.type) {
        case types.ALT:
          return translateAlt(path);
        case types.INV:
          return translateInv(path);
        case types.LINK:
          return translateLink(path);
        case types.NPS:
          return translateNps(path);
        case types.ONE_OR_MORE_PATH:
          return translateOneOrMorePath(path);
        case types.SEQ:
          return translateSeq(path);
        case types.ZERO_OR_MORE_PATH:
          return translateZeroOrMorePath(path);
        case types.ZERO_OR_ONE_PATH:
          return translateZeroOrOnePath(path);
      }
      throw new Error(`Unknown Path type ${path.type}`);
    }
    function translateTerm(term) {
      return (0, rdf_string_1.termToString)(term);
    }
    function translateAggregateExpression(expr) {
      const result = {
        expression: translateExpression(expr.expression),
        type: "aggregate",
        aggregation: expr.aggregator,
        distinct: expr.distinct
      };
      if (expr.separator)
        result.separator = expr.separator;
      return result;
    }
    function translateExistenceExpression(expr) {
      return {
        type: "operation",
        operator: expr.not ? "notexists" : "exists",
        args: util_1.default.flatten([
          translateOperation(expr.input)
        ])
      };
    }
    function translateNamedExpression(expr) {
      return {
        type: "functionCall",
        // Wrong typings
        function: expr.name,
        args: expr.args.map(translateExpression)
      };
    }
    function translateOperatorExpression(expr) {
      if (expr.operator === "desc") {
        const result2 = { expression: translateExpression(expr.args[0]) };
        result2.descending = true;
        return result2;
      }
      const result = {
        type: "operation",
        operator: expr.operator,
        args: expr.args.map(translateExpression)
      };
      if (result.operator === "in" || result.operator === "notin")
        result.args = [result.args[0]].concat([result.args.slice(1)]);
      return result;
    }
    function translateTermExpression(expr) {
      return expr.term;
    }
    function translateWildcardExpression(expr) {
      return expr.wildcard;
    }
    function translateBoundAggregate(op) {
      return op;
    }
    function translateBgp(op) {
      let patterns = op.patterns.map(translatePattern);
      if (patterns.length === 0)
        return null;
      return {
        type: "bgp",
        triples: patterns
      };
    }
    function translateConstruct(op) {
      return {
        type: "query",
        prefixes: {},
        queryType: "CONSTRUCT",
        template: op.template.map(translatePattern),
        where: util_1.default.flatten([
          translateOperation(op.input)
        ])
      };
    }
    function translateDistinct(op) {
      let result = translateOperation(op.input);
      result.patterns[0].distinct = true;
      return result;
    }
    function translateExtend(op) {
      if (context.project) {
        context.extend.push(op);
        return translateOperation(op.input);
      }
      return util_1.default.flatten([
        translateOperation(op.input),
        {
          type: "bind",
          variable: op.variable,
          expression: translateExpression(op.expression)
        }
      ]);
    }
    function translateFrom(op) {
      const result = translateOperation(op.input);
      let obj = result;
      if (result.type === "group") {
        obj = result.patterns[0];
      }
      obj.from = {
        default: op.default,
        named: op.named
      };
      return result;
    }
    function translateFilter(op) {
      return {
        type: "group",
        patterns: util_1.default.flatten([
          translateOperation(op.input),
          { type: "filter", expression: translateExpression(op.expression) }
        ])
      };
    }
    function translateGraph(op) {
      return {
        type: "graph",
        patterns: util_1.default.flatten([translateOperation(op.input)]),
        name: op.name
      };
    }
    function translateGroup(op) {
      const input = translateOperation(op.input);
      const aggs = op.aggregates.map(translateBoundAggregate);
      context.aggregates.push(...aggs);
      context.group.push(...op.variables);
      return input;
    }
    function translateJoin(op) {
      const arr = util_1.default.flatten(op.input.map(translateOperation));
      return arr.reduce((result, val) => {
        if (val.type !== "bgp" || result.length == 0 || result[result.length - 1].type !== "bgp") {
          result.push(val);
        } else {
          result[result.length - 1].triples.push(...val.triples);
        }
        return result;
      }, []);
    }
    function translateLeftJoin(op) {
      const leftjoin = {
        type: "optional",
        patterns: [
          translateOperation(op.input[1])
        ]
      };
      if (op.expression) {
        leftjoin.patterns.push({
          type: "filter",
          expression: translateExpression(op.expression)
        });
      }
      leftjoin.patterns = util_1.default.flatten(leftjoin.patterns);
      return util_1.default.flatten([
        translateOperation(op.input[0]),
        leftjoin
      ]);
    }
    function translateMinus(op) {
      let patterns = translateOperation(op.input[1]);
      if (patterns.type === "group")
        patterns = patterns.patterns;
      if (!Array.isArray(patterns))
        patterns = [patterns];
      return util_1.default.flatten([
        translateOperation(op.input[0]),
        {
          type: "minus",
          patterns
        }
      ]);
    }
    function translateOrderBy(op) {
      context.order.push(...op.expressions);
      return translateOperation(op.input);
    }
    function translatePath(op) {
      return {
        type: "bgp",
        triples: [{
          subject: op.subject,
          predicate: translatePathComponent(op.predicate),
          object: op.object
        }]
      };
    }
    function translatePattern(op) {
      return {
        subject: op.subject,
        predicate: op.predicate,
        object: op.object
      };
    }
    function replaceAggregatorVariables(s, map) {
      let st = util_1.default.isSimpleTerm(s) ? translateTerm(s) : s;
      if (typeof st === "string") {
        if (map[st])
          return map[st];
      } else if (Array.isArray(s)) {
        s = s.map((e) => replaceAggregatorVariables(e, map));
      } else {
        for (let key of Object.keys(s))
          s[key] = replaceAggregatorVariables(s[key], map);
      }
      return s;
    }
    function translateProject(op, type) {
      const result = {
        type: "query",
        prefixes: {}
      };
      const select = result;
      let variables;
      if (type === types.PROJECT) {
        result.queryType = "SELECT";
        variables = op.variables;
      } else if (type === types.ASK) {
        result.queryType = "ASK";
      } else if (type === types.DESCRIBE) {
        result.queryType = "DESCRIBE";
        variables = op.terms;
      }
      const extend = context.extend;
      const group = context.group;
      const aggregates = context.aggregates;
      const order = context.order;
      resetContext();
      context.project = true;
      let input = util_1.default.flatten([translateOperation(op.input)]);
      if (input.length === 1 && input[0].type === "group")
        input = input[0].patterns;
      result.where = input;
      let aggregators = {};
      for (let agg of context.aggregates)
        aggregators[translateTerm(agg.variable)] = translateExpression(agg);
      let extensions = {};
      for (let i2 = context.extend.length - 1; i2 >= 0; --i2) {
        let e = context.extend[i2];
        extensions[translateTerm(e.variable)] = replaceAggregatorVariables(translateExpression(e.expression), aggregators);
      }
      if (context.group.length > 0)
        select.group = context.group.map((variable) => {
          let v = translateTerm(variable);
          if (extensions[v]) {
            let result2 = extensions[v];
            delete extensions[v];
            return {
              variable,
              expression: result2
            };
          }
          return { expression: variable };
        });
      if (context.order.length > 0)
        select.order = context.order.map(translateOperation).map((o) => o.descending ? o : { expression: o });
      if (variables) {
        select.variables = variables.map((term) => {
          let v = translateTerm(term);
          if (extensions[v])
            return {
              variable: term,
              expression: extensions[v]
            };
          return term;
        });
        if (select.variables.length === 0)
          select.variables = [new sparqljs_1.Wildcard()];
      }
      if (result.where.length > 0 && result.where[result.where.length - 1].type === "filter") {
        const filter = result.where[result.where.length - 1];
        if (objectContainsValues(filter, Object.keys(aggregators))) {
          select.having = util_1.default.flatten([replaceAggregatorVariables(filter.expression, aggregators)]);
          result.where.splice(-1);
        }
      }
      context.extend = extend;
      context.group = group;
      context.aggregates = aggregates;
      context.order = order;
      return { type: "group", patterns: [select] };
    }
    function objectContainsValues(o, vals) {
      if (util_1.default.isSimpleTerm(o))
        return vals.indexOf(translateTerm(o)) >= 0;
      if (Array.isArray(o))
        return o.some((e) => objectContainsValues(e, vals));
      if (o === Object(o))
        return Object.keys(o).some((key) => objectContainsValues(o[key], vals));
      return vals.indexOf(o) >= 0;
    }
    function translateReduced(op) {
      let result = translateOperation(op.input);
      result.patterns[0].reduced = true;
      return result;
    }
    function translateService(op) {
      let patterns = translateOperation(op.input);
      if (patterns.type === "group")
        patterns = patterns.patterns;
      if (!Array.isArray(patterns))
        patterns = [patterns];
      return {
        type: "service",
        // Typings are wrong, name can also be a variable
        name: op.name,
        silent: op.silent,
        patterns
      };
    }
    function translateSlice(op) {
      let result = translateOperation(op.input);
      let obj = result;
      if (result.type && result.type === "group")
        obj = result.patterns[0];
      if (op.start !== 0)
        obj.offset = op.start;
      if (op.length !== void 0)
        obj.limit = op.length;
      return result;
    }
    function translateUnion(op) {
      return {
        type: "union",
        patterns: util_1.default.flatten(op.input.map(translateOperation))
      };
    }
    function translateValues(op) {
      return {
        type: "values",
        values: op.bindings.map((binding) => {
          let result = {};
          for (let v of op.variables) {
            let s = `?${v.value}`;
            if (binding[s])
              result[s] = binding[s];
            else
              result[s] = void 0;
          }
          return result;
        })
      };
    }
    function translateAlt(path) {
      const mapped = path.input.map(translatePathComponent);
      if (mapped.every((entry) => "pathType" in entry && entry.pathType === "!")) {
        return {
          type: "path",
          pathType: "!",
          items: [{
            type: "path",
            pathType: "|",
            items: util_1.default.flatten(mapped.map((entry) => entry.items))
          }]
        };
      }
      return {
        type: "path",
        pathType: "|",
        items: mapped
      };
    }
    function translateInv(path) {
      if (path.path.type === types.NPS) {
        const inv = path.path.iris.map((iri) => {
          return {
            type: "path",
            pathType: "^",
            items: [iri]
          };
        });
        if (inv.length <= 1)
          return {
            type: "path",
            pathType: "!",
            items: inv
          };
        return {
          type: "path",
          pathType: "!",
          items: [{
            type: "path",
            pathType: "|",
            items: inv
          }]
        };
      }
      return {
        type: "path",
        pathType: "^",
        items: [translatePathComponent(path.path)]
      };
    }
    function translateLink(path) {
      return path.iri;
    }
    function translateNps(path) {
      if (path.iris.length <= 1)
        return {
          type: "path",
          pathType: "!",
          items: path.iris
        };
      return {
        type: "path",
        pathType: "!",
        items: [{
          type: "path",
          pathType: "|",
          items: path.iris
        }]
      };
    }
    function translateOneOrMorePath(path) {
      return {
        type: "path",
        pathType: "+",
        items: [translatePathComponent(path.path)]
      };
    }
    function translateSeq(path) {
      return {
        type: "path",
        pathType: "/",
        items: path.input.map(translatePathComponent)
      };
    }
    function translateZeroOrMorePath(path) {
      return {
        type: "path",
        pathType: "*",
        items: [translatePathComponent(path.path)]
      };
    }
    function translateZeroOrOnePath(path) {
      return {
        type: "path",
        // Typings are missing this path
        pathType: "?",
        items: [translatePathComponent(path.path)]
      };
    }
    function translateCompositeUpdate(op) {
      const updates = op.updates.map((update) => {
        const result = translateOperation(update);
        return result.updates[0];
      });
      return { prefixes: {}, type: "update", updates };
    }
    function translateDeleteInsert(op) {
      var _a;
      let where = op.where;
      let using = void 0;
      if (where && where.type === types.FROM) {
        let from = where;
        where = from.input;
        using = { default: from.default, named: from.named };
      }
      const updates = [{
        updateType: "insertdelete",
        delete: convertUpdatePatterns(op.delete || []),
        insert: convertUpdatePatterns(op.insert || [])
      }];
      if (using)
        updates[0].using = using;
      if (!where || where.type === types.BGP && where.patterns.length === 0)
        updates[0].where = [];
      else {
        const graphs = [];
        let result = translateOperation(removeQuadsRecursive(where, graphs));
        if (result.type === "group")
          updates[0].where = result.patterns;
        else
          updates[0].where = [result];
        if (graphs.length > 0) {
          if (graphs.length !== 1)
            throw new Error("This is unexpected and might indicate an error in graph handling for updates.");
          if (((_a = graphs[0]) === null || _a === void 0 ? void 0 : _a.value) !== "")
            updates[0].where = [{ type: "graph", patterns: updates[0].where, name: graphs[0] }];
        }
      }
      if (!op.delete && !op.where) {
        updates[0].updateType = "insert";
        delete updates[0].delete;
        delete updates[0].where;
      } else if (!op.insert && !op.where) {
        delete updates[0].insert;
        delete updates[0].where;
        if (op.delete.some((pattern) => pattern.subject.termType === "Variable" || pattern.predicate.termType === "Variable" || pattern.object.termType === "Variable"))
          updates[0].updateType = "deletewhere";
        else
          updates[0].updateType = "delete";
      } else if (!op.insert && op.where && op.where.type === "bgp") {
        if ((0, rdf_isomorphic_1.isomorphic)(op.delete, op.where.patterns)) {
          delete updates[0].where;
          updates[0].updateType = "deletewhere";
        }
      }
      return { prefixes: {}, type: "update", updates };
    }
    function translateLoad(op) {
      const updates = [{ type: "load", silent: Boolean(op.silent), source: op.source }];
      if (op.destination)
        updates[0].destination = op.destination;
      return { prefixes: {}, type: "update", updates };
    }
    function translateClear(op) {
      return translateClearCreateDrop(op, "clear");
    }
    function translateCreate(op) {
      return translateClearCreateDrop(op, "create");
    }
    function translateDrop(op) {
      return translateClearCreateDrop(op, "drop");
    }
    function translateClearCreateDrop(op, type) {
      const updates = [{ type, silent: Boolean(op.silent) }];
      if (op.source === "DEFAULT")
        updates[0].graph = { default: true };
      else if (op.source === "NAMED")
        updates[0].graph = { named: true };
      else if (op.source === "ALL")
        updates[0].graph = { all: true };
      else
        updates[0].graph = { type: "graph", name: op.source };
      return { prefixes: {}, type: "update", updates };
    }
    function translateAdd(op) {
      return translateUpdateGraphShortcut(op, "add");
    }
    function translateMove(op) {
      return translateUpdateGraphShortcut(op, "move");
    }
    function translateCopy(op) {
      return translateUpdateGraphShortcut(op, "copy");
    }
    function translateUpdateGraphShortcut(op, type) {
      const updates = [{ type, silent: Boolean(op.silent) }];
      updates[0].source = op.source === "DEFAULT" ? { type: "graph", default: true } : { type: "graph", name: op.source };
      updates[0].destination = op.destination === "DEFAULT" ? { type: "graph", default: true } : { type: "graph", name: op.destination };
      return { prefixes: {}, type: "update", updates };
    }
    function convertUpdatePatterns(patterns) {
      if (!patterns)
        return [];
      const graphs = {};
      patterns.forEach((pattern) => {
        const graph = pattern.graph.value;
        if (!graphs[graph])
          graphs[graph] = [];
        graphs[graph].push(pattern);
      });
      return Object.keys(graphs).map((graph) => {
        if (graph === "")
          return { type: "bgp", triples: graphs[graph].map(translatePattern) };
        return { type: "graph", triples: graphs[graph].map(translatePattern), name: graphs[graph][0].graph };
      });
    }
    function removeQuads(op) {
      return removeQuadsRecursive(op, []);
    }
    function removeQuadsRecursive(op, graphs) {
      if (Array.isArray(op))
        return op.map((sub) => removeQuadsRecursive(sub, graphs));
      if (!op.type)
        return op;
      if (op.type === types.DELETE_INSERT)
        return op;
      if ((op.type === types.PATTERN || op.type === types.PATH) && op.graph) {
        graphs.push(op.graph);
        if (op.graph.name !== "")
          return op.type === types.PATTERN ? factory3.createPattern(op.subject, op.predicate, op.object) : factory3.createPath(op.subject, op.predicate, op.object);
        return op;
      }
      const result = {};
      const keyGraphs = {};
      const globalNames = {};
      for (let key of Object.keys(op)) {
        const newGraphs = [];
        result[key] = removeQuadsRecursive(op[key], newGraphs);
        if (newGraphs.length > 0) {
          keyGraphs[key] = newGraphs;
          for (const graph of newGraphs) {
            globalNames[graph.value] = graph;
          }
        }
      }
      const graphNameSet = Object.keys(globalNames);
      if (graphNameSet.length > 0) {
        if (graphNameSet.length === 1 && ![types.PROJECT, types.SERVICE].includes(op.type))
          graphs.push(globalNames[graphNameSet[0]]);
        else if (op.type === types.BGP) {
          return splitBgpToGraphs(op, keyGraphs.patterns);
        } else {
          for (let key of Object.keys(keyGraphs)) {
            const value = result[key];
            if (Array.isArray(value))
              result[key] = value.map((child, idx) => keyGraphs[key][0].value === "" ? child : factory3.createGraph(child, keyGraphs[key][idx]));
            else if (keyGraphs[key][0].value !== "")
              result[key] = factory3.createGraph(value, keyGraphs[key][0]);
          }
        }
      }
      return result;
    }
    function splitBgpToGraphs(op, graphs) {
      var _a;
      const graphPatterns = {};
      for (let i2 = 0; i2 < op.patterns.length; ++i2) {
        const pattern = op.patterns[i2];
        const graphName = graphs[i2].value;
        graphPatterns[graphName] = (_a = graphPatterns[graphName]) !== null && _a !== void 0 ? _a : { patterns: [], graph: graphs[i2] };
        graphPatterns[graphName].patterns.push(pattern);
      }
      let children = [];
      for (const [graphName, { patterns, graph }] of Object.entries(graphPatterns)) {
        const bgp = factory3.createBgp(patterns);
        children.push(graphName === "" ? bgp : factory3.createGraph(bgp, graph));
      }
      let join = children[0];
      for (let i2 = 1; i2 < children.length; ++i2)
        join = factory3.createJoin([join, children[i2]]);
      return join;
    }
  }
});

// node_modules/sparqlalgebrajs/index.js
var require_sparqlalgebrajs = __commonJS({
  "node_modules/sparqlalgebrajs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = exports.toSparqlJs = exports.toSparql = exports.Factory = exports.Algebra = exports.translate = void 0;
    var sparqlAlgebra_1 = __importDefault(require_sparqlAlgebra());
    exports.translate = sparqlAlgebra_1.default;
    var Algebra = __importStar(require_algebra());
    exports.Algebra = Algebra;
    var factory_1 = __importDefault(require_factory());
    exports.Factory = factory_1.default;
    var sparql_1 = require_sparql2();
    Object.defineProperty(exports, "toSparql", { enumerable: true, get: function() {
      return sparql_1.toSparql;
    } });
    Object.defineProperty(exports, "toSparqlJs", { enumerable: true, get: function() {
      return sparql_1.toSparqlJs;
    } });
    var util_1 = __importDefault(require_util());
    exports.Util = util_1.default;
  }
});

// node_modules/@comunica/bus-query-operation/lib/Bindings.js
var require_Bindings3 = __commonJS({
  "node_modules/@comunica/bus-query-operation/lib/Bindings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.materializeOperation = exports.materializeTerm = void 0;
    var bindings_factory_1 = require_lib6();
    var rdf_string_1 = require_rdf_string();
    var rdf_terms_1 = require_rdf_terms();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var BF = new bindings_factory_1.BindingsFactory();
    function materializeTerm(term, bindings) {
      if (term.termType === "Variable") {
        const value = bindings.get(term);
        if (value) {
          return value;
        }
      }
      if (term.termType === "Quad" && (0, rdf_terms_1.someTermsNested)(term, (value) => value.termType === "Variable")) {
        return (0, rdf_terms_1.mapTermsNested)(term, (subTerm) => materializeTerm(subTerm, bindings));
      }
      return term;
    }
    exports.materializeTerm = materializeTerm;
    function materializeOperation(operation, bindings, options = {}) {
      options = {
        strictTargetVariables: "strictTargetVariables" in options ? options.strictTargetVariables : false,
        bindFilter: "bindFilter" in options ? options.bindFilter : true
      };
      return sparqlalgebrajs_1.Util.mapOperation(operation, {
        path(op, factory3) {
          return {
            recurse: false,
            result: factory3.createPath(materializeTerm(op.subject, bindings), op.predicate, materializeTerm(op.object, bindings), materializeTerm(op.graph, bindings))
          };
        },
        pattern(op, factory3) {
          return {
            recurse: false,
            result: factory3.createPattern(materializeTerm(op.subject, bindings), materializeTerm(op.predicate, bindings), materializeTerm(op.object, bindings), materializeTerm(op.graph, bindings))
          };
        },
        extend(op) {
          if (bindings.has(op.variable)) {
            if (options.strictTargetVariables) {
              throw new Error(`Tried to bind variable ${(0, rdf_string_1.termToString)(op.variable)} in a BIND operator.`);
            } else {
              return {
                recurse: true,
                result: materializeOperation(op.input, bindings, options)
              };
            }
          }
          return {
            recurse: true,
            result: op
          };
        },
        group(op, factory3) {
          if (options.strictTargetVariables) {
            for (const variable of op.variables) {
              if (bindings.has(variable)) {
                throw new Error(`Tried to bind variable ${(0, rdf_string_1.termToString)(variable)} in a GROUP BY operator.`);
              }
            }
            return {
              recurse: true,
              result: op
            };
          }
          const variables = op.variables.filter((variable) => !bindings.has(variable));
          return {
            recurse: true,
            result: factory3.createGroup(op.input, variables, op.aggregates)
          };
        },
        project(op, factory3) {
          if (options.strictTargetVariables) {
            for (const variable of op.variables) {
              if (bindings.has(variable)) {
                throw new Error(`Tried to bind variable ${(0, rdf_string_1.termToString)(variable)} in a SELECT operator.`);
              }
            }
            return {
              recurse: true,
              result: op
            };
          }
          const variables = op.variables.filter((variable) => !bindings.has(variable));
          const subBindings = BF.bindings(op.variables.map((variable) => {
            const binding = bindings.get(variable);
            if (binding) {
              return [variable, binding];
            }
            return;
          }).filter((entry) => Boolean(entry)));
          return {
            recurse: false,
            result: factory3.createProject(materializeOperation(op.input, subBindings, options), variables)
          };
        },
        values(op, factory3) {
          if (options.strictTargetVariables) {
            for (const variable of op.variables) {
              if (bindings.has(variable)) {
                throw new Error(`Tried to bind variable ${(0, rdf_string_1.termToString)(variable)} in a VALUES operator.`);
              }
            }
          } else {
            const variables = op.variables.filter((variable) => !bindings.has(variable));
            const valueBindings = op.bindings.map((binding) => {
              const newBinding = { ...binding };
              let valid = true;
              bindings.forEach((value, key) => {
                const keyString = (0, rdf_string_1.termToString)(key);
                if (keyString in newBinding) {
                  if (!value.equals(newBinding[keyString])) {
                    valid = false;
                  }
                  delete newBinding[keyString];
                }
              });
              return valid ? newBinding : void 0;
            }).filter(Boolean);
            return {
              recurse: true,
              result: factory3.createValues(variables, valueBindings)
            };
          }
          return {
            recurse: false,
            result: op
          };
        },
        expression(op, factory3) {
          if (!options.bindFilter) {
            return {
              recurse: false,
              result: op
            };
          }
          if (op.expressionType === "term") {
            return {
              recurse: false,
              result: factory3.createTermExpression(materializeTerm(op.term, bindings))
            };
          }
          if (op.expressionType === "aggregate" && "variable" in op && bindings.has(op.variable)) {
            if (options.strictTargetVariables) {
              throw new Error(`Tried to bind ${(0, rdf_string_1.termToString)(op.variable)} in a ${op.aggregator} aggregate.`);
            } else {
              return {
                recurse: true,
                result: op
              };
            }
          }
          return {
            recurse: true,
            result: op
          };
        }
      });
    }
    exports.materializeOperation = materializeOperation;
  }
});

// node_modules/@comunica/bus-query-operation/lib/ActorQueryOperation.js
var require_ActorQueryOperation = __commonJS({
  "node_modules/@comunica/bus-query-operation/lib/ActorQueryOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperation = void 0;
    var context_entries_1 = require_lib4();
    var core_1 = require_lib2();
    var data_factory_1 = require_lib5();
    var Bindings_1 = require_Bindings3();
    var bnodeCounter = 0;
    var ActorQueryOperation = class _ActorQueryOperation extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cbqo:components/BusQueryOperation.jsonld#BusQueryOperation>} bus
       */
      constructor(args) {
        super(args);
      }
      /**
       * Safely cast a query operation output to a bindings output.
       * This will throw a runtime error if the output is of the incorrect type.
       * @param {IQueryOperationResult} output A query operation output.
       * @return {IQueryOperationResultBindings} A bindings query operation output.
       */
      static getSafeBindings(output) {
        _ActorQueryOperation.validateQueryOutput(output, "bindings");
        return output;
      }
      /**
       * Safely cast a query operation output to a quads output.
       * This will throw a runtime error if the output is of the incorrect type.
       * @param {IQueryOperationResult} output A query operation output.
       * @return {IQueryOperationResultQuads} A quads query operation output.
       */
      static getSafeQuads(output) {
        _ActorQueryOperation.validateQueryOutput(output, "quads");
        return output;
      }
      /**
       * Safely cast a query operation output to a boolean output.
       * This will throw a runtime error if the output is of the incorrect type.
       * @param {IQueryOperationResult} output A query operation output.
       * @return {IQueryOperationResultBoolean} A boolean query operation output.
       */
      static getSafeBoolean(output) {
        _ActorQueryOperation.validateQueryOutput(output, "boolean");
        return output;
      }
      /**
       * Safely cast a query operation output to a void output.
       * This will throw a runtime error if the output is of the incorrect type.
       * @param {IQueryOperationResult} output A query operation output.
       * @return {IQueryOperationResultVoid} A void query operation output.
       */
      static getSafeVoid(output) {
        _ActorQueryOperation.validateQueryOutput(output, "void");
        return output;
      }
      /**
       * Convert a metadata callback to a lazy callback where the response value is cached.
       * @param {() => Promise<IMetadata>} metadata A metadata callback
       * @return {() => Promise<{[p: string]: any}>} The callback where the response will be cached.
       */
      static cachifyMetadata(metadata) {
        let lastReturn;
        return () => {
          if (!lastReturn) {
            lastReturn = metadata();
            lastReturn.then((lastReturnValue) => lastReturnValue.state.addInvalidateListener(() => {
              lastReturn = void 0;
            })).catch(() => {
            });
          }
          return lastReturn;
        };
      }
      /**
       * Throw an error if the output type does not match the expected type.
       * @param {IQueryOperationResult} output A query operation output.
       * @param {string} expectedType The expected output type.
       */
      static validateQueryOutput(output, expectedType) {
        if (output.type !== expectedType) {
          throw new Error(`Invalid query output type: Expected '${expectedType}' but got '${output.type}'`);
        }
      }
      static getBaseExpressionContext(context) {
        const now = context.get(context_entries_1.KeysInitQuery.queryTimestamp);
        const baseIRI = context.get(context_entries_1.KeysInitQuery.baseIRI);
        const functionArgumentsCache = context.get(context_entries_1.KeysInitQuery.functionArgumentsCache) || {};
        if (context.has(context_entries_1.KeysInitQuery.extensionFunctionCreator) && context.has(context_entries_1.KeysInitQuery.extensionFunctions)) {
          throw new Error("Illegal simultaneous usage of extensionFunctionCreator and extensionFunctions in context");
        }
        let extensionFunctionCreator = context.get(context_entries_1.KeysInitQuery.extensionFunctionCreator);
        const extensionFunctions = context.get(context_entries_1.KeysInitQuery.extensionFunctions);
        if (extensionFunctions) {
          extensionFunctionCreator = (functionNamedNode) => extensionFunctions[functionNamedNode.value];
        }
        return { now, baseIRI, extensionFunctionCreator, functionArgumentsCache };
      }
      /**
       * Create an options object that can be used to construct a expression-evaluator synchronous evaluator.
       * @param context An action context.
       * @param mediatorQueryOperation An optional query query operation mediator.
       *                               If defined, the existence resolver will be defined as `exists`.
       */
      static getExpressionContext(context, mediatorQueryOperation) {
        return {
          ...this.getBaseExpressionContext(context),
          bnode: (input) => new data_factory_1.BlankNodeBindingsScoped(input || `BNODE_${bnodeCounter++}`)
        };
      }
      /**
       * Create an options object that can be used to construct a expression-evaluator asynchronous evaluator.
       * @param context An action context.
       * @param mediatorQueryOperation A query query operation mediator for resolving `exists`.
       */
      static getAsyncExpressionContext(context, mediatorQueryOperation) {
        return {
          ...this.getBaseExpressionContext(context),
          bnode: (input) => Promise.resolve(new data_factory_1.BlankNodeBindingsScoped(input || `BNODE_${bnodeCounter++}`)),
          exists: _ActorQueryOperation.createExistenceResolver(context, mediatorQueryOperation)
        };
      }
      /**
       * Create an existence resolver for usage within an expression context.
       * @param context An action context.
       * @param mediatorQueryOperation A query operation mediator.
       */
      static createExistenceResolver(context, mediatorQueryOperation) {
        return async (expr, bindings) => {
          const operation = (0, Bindings_1.materializeOperation)(expr.input, bindings);
          const outputRaw = await mediatorQueryOperation.mediate({ operation, context });
          const output = _ActorQueryOperation.getSafeBindings(outputRaw);
          return new Promise((resolve, reject) => {
            output.bindingsStream.on("end", () => {
              resolve(false);
            });
            output.bindingsStream.on("error", reject);
            output.bindingsStream.on("data", () => {
              output.bindingsStream.close();
              resolve(true);
            });
          }).then((exists) => expr.not ? !exists : exists);
        };
      }
      /**
       * Throw an error if the context contains the readOnly flag.
       * @param context An action context.
       */
      static throwOnReadOnly(context) {
        if (context.get(context_entries_1.KeysQueryOperation.readOnly)) {
          throw new Error(`Attempted a write operation in read-only mode`);
        }
      }
    };
    exports.ActorQueryOperation = ActorQueryOperation;
  }
});

// node_modules/@comunica/bus-query-operation/lib/ActorQueryOperationTyped.js
var require_ActorQueryOperationTyped = __commonJS({
  "node_modules/@comunica/bus-query-operation/lib/ActorQueryOperationTyped.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationTyped = void 0;
    var context_entries_1 = require_lib4();
    var ActorQueryOperation_1 = require_ActorQueryOperation();
    var ActorQueryOperationTyped = class extends ActorQueryOperation_1.ActorQueryOperation {
      constructor(args, operationName) {
        super({ ...args, operationName });
        if (!this.operationName) {
          throw new Error('A valid "operationName" argument must be provided.');
        }
      }
      async test(action) {
        if (!action.operation) {
          throw new Error("Missing field 'operation' in a query operation action.");
        }
        if (action.operation.type !== this.operationName) {
          throw new Error(`Actor ${this.name} only supports ${this.operationName} operations, but got ${action.operation.type}`);
        }
        const operation = action.operation;
        return this.testOperation(operation, action.context);
      }
      async run(action) {
        const physicalQueryPlanLogger = action.context.get(context_entries_1.KeysInitQuery.physicalQueryPlanLogger);
        if (physicalQueryPlanLogger) {
          physicalQueryPlanLogger.logOperation(action.operation.type, void 0, action.operation, action.context.get(context_entries_1.KeysInitQuery.physicalQueryPlanNode), this.name, {});
          action.context = action.context.set(context_entries_1.KeysInitQuery.physicalQueryPlanNode, action.operation);
        }
        const operation = action.operation;
        const subContext = action.context.set(context_entries_1.KeysQueryOperation.operation, operation);
        const output = await this.runOperation(operation, subContext);
        if ("metadata" in output) {
          output.metadata = ActorQueryOperation_1.ActorQueryOperation.cachifyMetadata(output.metadata);
        }
        return output;
      }
    };
    exports.ActorQueryOperationTyped = ActorQueryOperationTyped;
  }
});

// node_modules/@comunica/bus-query-operation/lib/ActorQueryOperationTypedMediated.js
var require_ActorQueryOperationTypedMediated = __commonJS({
  "node_modules/@comunica/bus-query-operation/lib/ActorQueryOperationTypedMediated.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationTypedMediated = void 0;
    var ActorQueryOperationTyped_1 = require_ActorQueryOperationTyped();
    var ActorQueryOperationTypedMediated = class extends ActorQueryOperationTyped_1.ActorQueryOperationTyped {
      constructor(args, operationName) {
        super(args, operationName);
      }
    };
    exports.ActorQueryOperationTypedMediated = ActorQueryOperationTypedMediated;
  }
});

// node_modules/@comunica/bus-query-operation/lib/BusQueryOperation.js
var require_BusQueryOperation = __commonJS({
  "node_modules/@comunica/bus-query-operation/lib/BusQueryOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BusQueryOperation = void 0;
    var core_1 = require_lib2();
    var BusQueryOperation = class extends core_1.BusIndexed {
      constructor(args) {
        super({
          ...args,
          actorIdentifierFields: ["operationName"],
          actionIdentifierFields: ["operation", "type"]
        });
      }
    };
    exports.BusQueryOperation = BusQueryOperation;
  }
});

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports, module) {
    "use strict";
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once2;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i2 = 1; i2 < arguments.length; i2++)
        args.push(arguments[i2]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i2 = 0; i2 < len; ++i2)
          ReflectApply(listeners[i2], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once3(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i2, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i2 = list.length - 1; i2 >= 0; i2--) {
          if (list[i2] === listener || list[i2].listener === listener) {
            originalListener = list[i2].listener;
            position = i2;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i2;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i2 = 0; i2 < keys.length; ++i2) {
          key = keys[i2];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i2 = listeners.length - 1; i2 >= 0; i2--) {
          this.removeListener(type, listeners[i2]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i2 = 0; i2 < n; ++i2)
        copy[i2] = arr[i2];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i2 = 0; i2 < ret.length; ++i2) {
        ret[i2] = arr[i2].listener || arr[i2];
      }
      return ret;
    }
    function once2(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/asynciterator/dist/linkedlist.js
var require_linkedlist = __commonJS({
  "node_modules/asynciterator/dist/linkedlist.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LinkedList = void 0;
    var LinkedList = class {
      constructor() {
        this._length = 0;
        this._head = null;
        this._tail = null;
      }
      get length() {
        return this._length;
      }
      get first() {
        var _a;
        return (_a = this._head) === null || _a === void 0 ? void 0 : _a.value;
      }
      get last() {
        var _a;
        return (_a = this._tail) === null || _a === void 0 ? void 0 : _a.value;
      }
      get empty() {
        return this._head === null;
      }
      push(value) {
        const node = { value, next: null };
        if (this._tail === null)
          this._head = this._tail = node;
        else
          this._tail.next = this._tail = node;
        this._length++;
      }
      shift() {
        if (this._head === null)
          return void 0;
        const { value, next } = this._head;
        this._head = next;
        if (next === null)
          this._tail = null;
        this._length--;
        return value;
      }
      clear() {
        this._length = 0;
        this._head = this._tail = null;
      }
    };
    exports.LinkedList = LinkedList;
  }
});

// node_modules/asynciterator/dist/taskscheduler.js
var require_taskscheduler = __commonJS({
  "node_modules/asynciterator/dist/taskscheduler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTaskScheduler = void 0;
    var resolved = Promise.resolve(void 0);
    function createTaskScheduler() {
      const scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : (task) => resolved.then(task);
      const scheduleMacrotask = typeof setImmediate === "function" ? setImmediate : (task) => setTimeout(task, 0);
      let i2 = 0;
      let queue = null;
      return (task) => {
        if (queue !== null)
          queue.push(task);
        else if (++i2 < 100)
          scheduleMicrotask(task);
        else {
          queue = [task];
          scheduleMacrotask(() => {
            for (const queued of queue)
              scheduleMicrotask(queued);
            queue = null;
            i2 = 0;
          });
        }
      };
    }
    exports.createTaskScheduler = createTaskScheduler;
  }
});

// node_modules/asynciterator/dist/asynciterator.js
var require_asynciterator = __commonJS({
  "node_modules/asynciterator/dist/asynciterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isIterator = exports.isIterable = exports.isSourceExpression = exports.isPromise = exports.isEventEmitter = exports.isFunction = exports.range = exports.union = exports.fromIterable = exports.fromIterator = exports.fromArray = exports.single = exports.empty = exports.wrap = exports.WrappingIterator = exports.ClonedIterator = exports.UnionIterator = exports.MultiTransformIterator = exports.SimpleTransformIterator = exports.TransformIterator = exports.BufferedIterator = exports.MappingIterator = exports.DESTINATION = exports.identity = exports.IntegerIterator = exports.ArrayIterator = exports.SingletonIterator = exports.EmptyIterator = exports.AsyncIterator = exports.DESTROYED = exports.ENDED = exports.CLOSED = exports.CLOSING = exports.OPEN = exports.INIT = exports.setTaskScheduler = exports.getTaskScheduler = exports.scheduleTask = exports.LinkedList = void 0;
    var events_1 = require_events();
    var linkedlist_1 = require_linkedlist();
    Object.defineProperty(exports, "LinkedList", { enumerable: true, get: function() {
      return linkedlist_1.LinkedList;
    } });
    var taskscheduler_1 = require_taskscheduler();
    var taskScheduler = taskscheduler_1.createTaskScheduler();
    function scheduleTask(task) {
      taskScheduler(task);
    }
    exports.scheduleTask = scheduleTask;
    function getTaskScheduler() {
      return taskScheduler;
    }
    exports.getTaskScheduler = getTaskScheduler;
    function setTaskScheduler(scheduler) {
      taskScheduler = scheduler;
    }
    exports.setTaskScheduler = setTaskScheduler;
    exports.INIT = 1 << 0;
    exports.OPEN = 1 << 1;
    exports.CLOSING = 1 << 2;
    exports.CLOSED = 1 << 3;
    exports.ENDED = 1 << 4;
    exports.DESTROYED = 1 << 5;
    var AsyncIterator = class extends events_1.EventEmitter {
      /** Creates a new `AsyncIterator`. */
      constructor(initialState = exports.OPEN) {
        super();
        this._readable = false;
        this._state = initialState;
        this.on("newListener", waitForDataListener);
      }
      /**
        Changes the iterator to the given state if possible and necessary,
        possibly emitting events to signal that change.
        @protected
        @param {integer} newState The ID of the new state
        @param {boolean} [eventAsync=false] Whether resulting events should be emitted asynchronously
        @returns {boolean} Whether the state was changed
        @emits module:asynciterator.AsyncIterator.end
      */
      _changeState(newState, eventAsync = false) {
        const valid = newState > this._state && this._state < exports.ENDED;
        if (valid) {
          this._state = newState;
          if (newState === exports.ENDED) {
            if (!eventAsync)
              this.emit("end");
            else
              taskScheduler(() => this.emit("end"));
          }
        }
        return valid;
      }
      /**
        Tries to read the next item from the iterator.
        This is the main method for reading the iterator in _on-demand mode_,
        where new items are only created when needed by consumers.
        If no items are currently available, this methods returns `null`.
        The {@link module:asynciterator.event:readable} event
        will then signal when new items might be ready.
        To read all items from the iterator,
        switch to _flow mode_ by subscribing
        to the {@link module:asynciterator.event:data} event.
        When in flow mode, do not use the `read` method.
        @returns {object?} The next item, or `null` if none is available
      */
      read() {
        return null;
      }
      /**
        The iterator emits a `readable` event when it might have new items available
        after having had no items available right before this event.
        If the iterator is not in flow mode, items can be retrieved
        by calling {@link module:asynciterator.AsyncIterator#read}.
        @event module:asynciterator.readable
      */
      /**
        The iterator emits a `data` event with a new item as soon as it becomes available.
        When one or more listeners are attached to the `data` event,
        the iterator switches to _flow mode_,
        generating and emitting new items as fast as possible.
        This drains the source and might create backpressure on the consumers,
        so only subscribe to this event if this behavior is intended.
        In flow mode, don't use {@link module:asynciterator.AsyncIterator#read}.
        To switch back to _on-demand mode_, remove all listeners from the `data` event.
        You can then obtain items through `read` again.
        @event module:asynciterator.data
        @param {object} item The new item
      */
      /**
        Invokes the callback for each remaining item in the iterator.
        Switches the iterator to flow mode.
        @param {Function} callback A function that will be called with each item
        @param {object?} self The `this` pointer for the callback
      */
      forEach(callback, self2) {
        this.on("data", bind(callback, self2));
      }
      /**
        Stops the iterator from generating new items.
        Already generated items or terminating items can still be emitted.
        After this, the iterator will end asynchronously.
        @emits module:asynciterator.AsyncIterator.end
      */
      close() {
        if (this._changeState(exports.CLOSED))
          this._endAsync();
      }
      /**
        Destroy the iterator and stop it from generating new items.
        This will not do anything if the iterator was already ended or destroyed.
        All internal resources will be released an no new items will be emitted,
        even not already generated items.
        Implementors should not override this method,
        but instead implement {@link module:asynciterator.AsyncIterator#_destroy}.
        @param {Error} [cause] An optional error to emit.
        @emits module:asynciterator.AsyncIterator.end
        @emits module:asynciterator.AsyncIterator.error Only if an error is passed.
      */
      destroy(cause) {
        if (!this.done) {
          this._destroy(cause, (error2) => {
            cause = cause || error2;
            if (cause)
              this.emit("error", cause);
            this._end(true);
          });
        }
      }
      /**
        Called by {@link module:asynciterator.AsyncIterator#destroy}.
        Implementers can override this, but this should not be called directly.
        @param {?Error} cause The reason why the iterator is destroyed.
        @param {Function} callback A callback function with an optional error argument.
      */
      _destroy(cause, callback) {
        callback();
      }
      /**
        Ends the iterator and cleans up.
        Should never be called before {@link module:asynciterator.AsyncIterator#close};
        typically, `close` is responsible for calling `_end`.
        @param {boolean} [destroy] If the iterator should be forcefully destroyed.
        @protected
        @emits module:asynciterator.AsyncIterator.end
      */
      _end(destroy = false) {
        if (this._changeState(destroy ? exports.DESTROYED : exports.ENDED)) {
          this._readable = false;
          this.removeAllListeners("readable");
          this.removeAllListeners("data");
          this.removeAllListeners("end");
        }
      }
      /**
        Asynchronously calls `_end`.
        @protected
      */
      _endAsync() {
        taskScheduler(() => this._end());
      }
      /**
        The `end` event is emitted after the last item of the iterator has been read.
        @event module:asynciterator.end
      */
      /**
        Gets or sets whether this iterator might have items available for read.
        A value of `false` means there are _definitely_ no items available;
        a value of `true` means items _might_ be available.
        @type boolean
        @emits module:asynciterator.AsyncIterator.readable
      */
      get readable() {
        return this._readable;
      }
      set readable(readable2) {
        readable2 = Boolean(readable2) && !this.done;
        if (this._readable !== readable2) {
          this._readable = readable2;
          if (readable2)
            taskScheduler(() => this.emit("readable"));
        }
      }
      /**
        Gets whether the iterator has stopped generating new items.
        @type boolean
        @readonly
      */
      get closed() {
        return this._state >= exports.CLOSING;
      }
      /**
        Gets whether the iterator has finished emitting items.
        @type boolean
        @readonly
      */
      get ended() {
        return this._state === exports.ENDED;
      }
      /**
        Gets whether the iterator has been destroyed.
        @type boolean
        @readonly
      */
      get destroyed() {
        return this._state === exports.DESTROYED;
      }
      /**
        Gets whether the iterator will not emit anymore items,
        either due to being closed or due to being destroyed.
        @type boolean
        @readonly
      */
      get done() {
        return this._state >= exports.ENDED;
      }
      /* Generates a textual representation of the iterator. */
      toString() {
        const details = this._toStringDetails();
        return `[${this.constructor.name}${details ? ` ${details}` : ""}]`;
      }
      /**
        Generates details for a textual representation of the iterator.
        @protected
      */
      _toStringDetails() {
        return "";
      }
      /**
        Consume all remaining items of the iterator into an array that will be returned asynchronously.
        @param {object} [options] Settings for array creation
        @param {integer} [options.limit] The maximum number of items to place in the array.
       */
      toArray(options) {
        const items = [];
        const limit = typeof (options === null || options === void 0 ? void 0 : options.limit) === "number" ? options.limit : Infinity;
        return this.ended || limit <= 0 ? Promise.resolve(items) : new Promise((resolve, reject) => {
          const resolveItems = () => resolve(items);
          const pushItem = (item) => {
            items.push(item);
            if (items.length >= limit) {
              this.removeListener("error", reject);
              this.removeListener("data", pushItem);
              this.removeListener("end", resolveItems);
              resolve(items);
            }
          };
          this.on("error", reject);
          this.on("data", pushItem);
          this.on("end", resolveItems);
        });
      }
      /**
        Retrieves the property with the given name from the iterator.
        If no callback is passed, it returns the value of the property
        or `undefined` if the property is not set.
        If a callback is passed, it returns `undefined`
        and calls the callback with the property the moment it is set.
        @param {string} propertyName The name of the property to retrieve
        @param {Function?} [callback] A one-argument callback to receive the property value
        @returns {object?} The value of the property (if set and no callback is given)
      */
      getProperty(propertyName, callback) {
        const properties = this._properties;
        if (!callback)
          return properties && properties[propertyName];
        if (properties && propertyName in properties) {
          taskScheduler(() => callback(properties[propertyName]));
        } else {
          let propertyCallbacks;
          if (!(propertyCallbacks = this._propertyCallbacks))
            this._propertyCallbacks = propertyCallbacks = /* @__PURE__ */ Object.create(null);
          if (propertyName in propertyCallbacks)
            propertyCallbacks[propertyName].push(callback);
          else
            propertyCallbacks[propertyName] = [callback];
        }
        return void 0;
      }
      /**
        Sets the property with the given name to the value.
        @param {string} propertyName The name of the property to set
        @param {object?} value The new value of the property
      */
      setProperty(propertyName, value) {
        const properties = this._properties || (this._properties = /* @__PURE__ */ Object.create(null));
        properties[propertyName] = value;
        const propertyCallbacks = this._propertyCallbacks || {};
        const callbacks = propertyCallbacks[propertyName];
        if (callbacks) {
          delete propertyCallbacks[propertyName];
          taskScheduler(() => {
            for (const callback of callbacks)
              callback(value);
          });
          for (propertyName in propertyCallbacks)
            return;
          delete this._propertyCallbacks;
        }
      }
      /**
        Retrieves all properties of the iterator.
        @returns {object} An object with property names as keys.
      */
      getProperties() {
        const properties = this._properties;
        const copy = {};
        for (const name in properties)
          copy[name] = properties[name];
        return copy;
      }
      /**
        Sets all of the given properties.
        @param {object} properties Key/value pairs of properties to set
      */
      setProperties(properties) {
        for (const propertyName in properties)
          this.setProperty(propertyName, properties[propertyName]);
      }
      /**
        Copies the given properties from the source iterator.
        @param {module:asynciterator.AsyncIterator} source The iterator to copy from
        @param {Array} propertyNames List of property names to copy
      */
      copyProperties(source, propertyNames) {
        for (const propertyName of propertyNames) {
          source.getProperty(propertyName, (value) => this.setProperty(propertyName, value));
        }
      }
      /**
        Transforms items from this iterator.
        After this operation, only read the returned iterator instead of the current one.
        @param {object|Function} [options] Settings of the iterator, or the transformation function
        @param {integer} [options.maxbufferSize=4] The maximum number of items to keep in the buffer
        @param {boolean} [options.autoStart=true] Whether buffering starts directly after construction
        @param {integer} [options.offset] The number of items to skip
        @param {integer} [options.limit] The maximum number of items
        @param {Function} [options.filter] A function to synchronously filter items from the source
        @param {Function} [options.map] A function to synchronously transform items from the source
        @param {Function} [options.transform] A function to asynchronously transform items from the source
        @param {boolean} [options.optional=false] If transforming is optional, the original item is pushed when its mapping yields `null` or its transformation yields no items
        @param {Array|module:asynciterator.AsyncIterator} [options.prepend] Items to insert before the source items
        @param {Array|module:asynciterator.AsyncIterator} [options.append]  Items to insert after the source items
        @returns {module:asynciterator.AsyncIterator} A new iterator that maps the items from this iterator
      */
      transform(options) {
        return new SimpleTransformIterator(this, options);
      }
      /**
        Maps items from this iterator using the given function.
        After this operation, only read the returned iterator instead of the current one.
        @param {Function} map A mapping function to call on this iterator's (remaining) items
        @param {object?} self The `this` pointer for the mapping function
        @returns {module:asynciterator.AsyncIterator} A new iterator that maps the items from this iterator
      */
      map(map, self2) {
        return new MappingIterator(this, bind(map, self2));
      }
      filter(filter, self2) {
        return this.map(function(item) {
          return filter.call(self2 || this, item) ? item : null;
        });
      }
      /**
       * Returns a new iterator containing all of the unique items in the original iterator.
       * @param by - The derived value by which to determine uniqueness (e.g., stringification).
                     Defaults to the identity function.
       * @returns An iterator with duplicates filtered out.
       */
      uniq(by = identity) {
        const uniques = /* @__PURE__ */ new Set();
        return this.filter(function(item) {
          const hashed = by.call(this, item);
          if (!uniques.has(hashed)) {
            uniques.add(hashed);
            return true;
          }
          return false;
        });
      }
      /**
        Prepends the items after those of the current iterator.
        After this operation, only read the returned iterator instead of the current one.
        @param {Array|module:asynciterator.AsyncIterator} items Items to insert before this iterator's (remaining) items
        @returns {module:asynciterator.AsyncIterator} A new iterator that prepends items to this iterator
      */
      prepend(items) {
        return this.transform({ prepend: items });
      }
      /**
        Appends the items after those of the current iterator.
        After this operation, only read the returned iterator instead of the current one.
        @param {Array|module:asynciterator.AsyncIterator} items Items to insert after this iterator's (remaining) items
        @returns {module:asynciterator.AsyncIterator} A new iterator that appends items to this iterator
      */
      append(items) {
        return this.transform({ append: items });
      }
      /**
        Surrounds items of the current iterator with the given items.
        After this operation, only read the returned iterator instead of the current one.
        @param {Array|module:asynciterator.AsyncIterator} prepend Items to insert before this iterator's (remaining) items
        @param {Array|module:asynciterator.AsyncIterator} append Items to insert after this iterator's (remaining) items
        @returns {module:asynciterator.AsyncIterator} A new iterator that appends and prepends items to this iterator
      */
      surround(prepend, append) {
        return this.transform({ prepend, append });
      }
      /**
        Skips the given number of items from the current iterator.
        The current iterator may not be read anymore until the returned iterator ends.
        @param {integer} offset The number of items to skip
        @returns {module:asynciterator.AsyncIterator} A new iterator that skips the given number of items
      */
      skip(offset) {
        return this.map((item) => offset-- > 0 ? null : item);
      }
      /**
        Limits the current iterator to the given number of items.
        The current iterator may not be read anymore until the returned iterator ends.
        @param {integer} limit The maximum number of items
        @returns {module:asynciterator.AsyncIterator} A new iterator with at most the given number of items
      */
      take(limit) {
        return this.transform({ limit });
      }
      /**
        Limits the current iterator to the given range.
        The current iterator may not be read anymore until the returned iterator ends.
        @param {integer} start Index of the first item to return
        @param {integer} end Index of the last item to return
        @returns {module:asynciterator.AsyncIterator} A new iterator with items in the given range
      */
      range(start, end) {
        return this.transform({ offset: start, limit: Math.max(end - start + 1, 0) });
      }
      /**
        Creates a copy of the current iterator,
        containing all items emitted from this point onward.
        Further copies can be created; they will all start from this same point.
        After this operation, only read the returned copies instead of the original iterator.
        @returns {module:asynciterator.AsyncIterator} A new iterator that contains all future items of this iterator
      */
      clone() {
        return new ClonedIterator(this);
      }
    };
    exports.AsyncIterator = AsyncIterator;
    function waitForDataListener(eventName) {
      if (eventName === "data") {
        this.removeListener("newListener", waitForDataListener);
        addSingleListener(this, "readable", emitData);
        if (this.readable)
          taskScheduler(() => emitData.call(this));
      }
    }
    function emitData() {
      let item;
      while (this.listenerCount("data") !== 0 && (item = this.read()) !== null)
        this.emit("data", item);
      if (this.listenerCount("data") === 0 && !this.done) {
        this.removeListener("readable", emitData);
        addSingleListener(this, "newListener", waitForDataListener);
      }
    }
    function addSingleListener(source, eventName, listener) {
      if (!source.listeners(eventName).includes(listener))
        source.on(eventName, listener);
    }
    var EmptyIterator = class extends AsyncIterator {
      /** Creates a new `EmptyIterator`. */
      constructor() {
        super();
        this._changeState(exports.ENDED, true);
      }
    };
    exports.EmptyIterator = EmptyIterator;
    var SingletonIterator = class extends AsyncIterator {
      /**
        Creates a new `SingletonIterator`.
        @param {object} item The item that will be emitted.
      */
      constructor(item) {
        super();
        this._item = item;
        if (item === null)
          this.close();
        else
          this.readable = true;
      }
      /* Reads the item from the iterator. */
      read() {
        const item = this._item;
        this._item = null;
        this.close();
        return item;
      }
      /* Generates details for a textual representation of the iterator. */
      _toStringDetails() {
        return this._item === null ? "" : `(${this._item})`;
      }
    };
    exports.SingletonIterator = SingletonIterator;
    var ArrayIterator = class extends AsyncIterator {
      /**
        Creates a new `ArrayIterator`.
        @param {Array} items The items that will be emitted.
        @param {boolean} [options.autoStart=true] Whether buffering starts directly after construction
        @param {boolean} [options.preserve=true] If false, the passed array can be safely modified
      */
      constructor(items = [], { autoStart = true, preserve = true } = {}) {
        super();
        const buffer2 = preserve || !Array.isArray(items) ? [...items] : items;
        this._index = 0;
        this._sourceStarted = autoStart !== false;
        this._truncateThreshold = preserve ? -1 : 64;
        if (this._sourceStarted && buffer2.length === 0)
          this.close();
        else
          this._buffer = buffer2;
        this.readable = true;
      }
      /* Reads an item from the iterator. */
      read() {
        if (!this._sourceStarted)
          this._sourceStarted = true;
        let item = null;
        if (this._buffer) {
          if (this._index < this._buffer.length)
            item = this._buffer[this._index++];
          if (this._index === this._buffer.length) {
            delete this._buffer;
            this.close();
          } else if (this._index === this._truncateThreshold) {
            this._buffer.splice(0, this._truncateThreshold);
            this._index = 0;
          }
        }
        return item;
      }
      /* Generates details for a textual representation of the iterator. */
      _toStringDetails() {
        return `(${this._buffer ? this._buffer.length - this._index : 0})`;
      }
      /* Called by {@link module:asynciterator.AsyncIterator#destroy} */
      _destroy(cause, callback) {
        delete this._buffer;
        callback();
      }
      /**
       Consume all remaining items of the iterator into an array that will be returned asynchronously.
       @param {object} [options] Settings for array creation
       @param {integer} [options.limit] The maximum number of items to place in the array.
       */
      toArray(options = {}) {
        if (!this._buffer)
          return Promise.resolve([]);
        const { length } = this._buffer;
        const start = this._index;
        const end = typeof options.limit !== "number" ? length : start + options.limit;
        const items = this._buffer.slice(start, end);
        this._index = end;
        if (end >= length)
          this.close();
        return Promise.resolve(items);
      }
    };
    exports.ArrayIterator = ArrayIterator;
    var IntegerIterator = class extends AsyncIterator {
      /**
        Creates a new `IntegerIterator`.
        @param {object} [options] Settings of the iterator
        @param {integer} [options.start=0] The first number to emit
        @param {integer} [options.end=Infinity] The last number to emit
        @param {integer} [options.step=1] The increment between two numbers
      */
      constructor({ start = 0, step = 1, end } = {}) {
        super();
        if (Number.isFinite(start))
          start = Math.trunc(start);
        this._next = start;
        if (Number.isFinite(step))
          step = Math.trunc(step);
        this._step = step;
        const ascending = step >= 0;
        const direction = ascending ? Infinity : -Infinity;
        if (Number.isFinite(end))
          end = Math.trunc(end);
        else if (end !== -direction)
          end = direction;
        this._last = end;
        if (!Number.isFinite(start) || (ascending ? start > end : start < end))
          this.close();
        else
          this.readable = true;
      }
      /* Reads an item from the iterator. */
      read() {
        if (this.closed)
          return null;
        const current = this._next, step = this._step, last = this._last, next = this._next += step;
        if (step >= 0 ? next > last : next < last)
          this.close();
        return current;
      }
      /* Generates details for a textual representation of the iterator. */
      _toStringDetails() {
        return `(${this._next}...${this._last})`;
      }
    };
    exports.IntegerIterator = IntegerIterator;
    function identity(item) {
      return item;
    }
    exports.identity = identity;
    exports.DESTINATION = Symbol("destination");
    var MappingIterator = class extends AsyncIterator {
      /**
       * Applies the given mapping to the source iterator.
       */
      constructor(source, map = identity, options = {}) {
        super();
        this._map = map;
        this._source = ensureSourceAvailable(source);
        this._destroySource = options.destroySource !== false;
        if (source.done) {
          this.close();
        } else {
          this._source[exports.DESTINATION] = this;
          this._source.on("end", destinationClose);
          this._source.on("error", destinationEmitError);
          this._source.on("readable", destinationSetReadable);
          this.readable = this._source.readable;
        }
      }
      /* Tries to read the next item from the iterator. */
      read() {
        if (!this.done) {
          if (this._source.readable) {
            let item, mapped;
            while ((item = this._source.read()) !== null) {
              if ((mapped = this._map(item)) !== null)
                return mapped;
            }
          }
          this.readable = false;
          if (this._source.done)
            this.close();
        }
        return null;
      }
      /* Cleans up the source iterator and ends. */
      _end(destroy) {
        this._source.removeListener("end", destinationClose);
        this._source.removeListener("error", destinationEmitError);
        this._source.removeListener("readable", destinationSetReadable);
        delete this._source[exports.DESTINATION];
        if (this._destroySource)
          this._source.destroy();
        super._end(destroy);
      }
    };
    exports.MappingIterator = MappingIterator;
    function ensureSourceAvailable(source, allowDestination = false) {
      if (!source || !isFunction(source.read) || !isFunction(source.on))
        throw new TypeError(`Invalid source: ${source}`);
      if (!allowDestination && source[exports.DESTINATION])
        throw new Error("The source already has a destination");
      return source;
    }
    var BufferedIterator = class extends AsyncIterator {
      /**
        Creates a new `BufferedIterator`.
        @param {object} [options] Settings of the iterator
        @param {integer} [options.maxBufferSize=4] The number of items to preload in the internal buffer
        @param {boolean} [options.autoStart=true] Whether buffering starts directly after construction
      */
      constructor({ maxBufferSize = 4, autoStart = true } = {}) {
        super(exports.INIT);
        this._buffer = new linkedlist_1.LinkedList();
        this._maxBufferSize = 4;
        this._reading = true;
        this._pushedCount = 0;
        this.maxBufferSize = maxBufferSize;
        taskScheduler(() => this._init(autoStart));
        this._sourceStarted = autoStart !== false;
      }
      /**
        The maximum number of items to preload in the internal buffer.
        A `BufferedIterator` tries to fill its buffer as far as possible.
        Set to `Infinity` to fully drain the source.
        @type number
      */
      get maxBufferSize() {
        return this._maxBufferSize;
      }
      set maxBufferSize(maxBufferSize) {
        if (maxBufferSize !== Infinity) {
          maxBufferSize = !Number.isFinite(maxBufferSize) ? 4 : Math.max(Math.trunc(maxBufferSize), 1);
        }
        if (this._maxBufferSize !== maxBufferSize) {
          this._maxBufferSize = maxBufferSize;
          if (this._state === exports.OPEN)
            this._fillBuffer();
        }
      }
      /**
        Initializing the iterator by calling {@link BufferedIterator#_begin}
        and changing state from INIT to OPEN.
        @protected
        @param {boolean} autoStart Whether reading of items should immediately start after OPEN.
      */
      _init(autoStart) {
        let doneCalled = false;
        this._reading = true;
        this._begin(() => {
          if (doneCalled)
            throw new Error("done callback called multiple times");
          doneCalled = true;
          this._reading = false;
          this._changeState(exports.OPEN);
          if (autoStart)
            this._fillBufferAsync();
          else
            this.readable = true;
        });
      }
      /**
        Writes beginning items and opens iterator resources.
        Should never be called before {@link BufferedIterator#_init};
        typically, `_init` is responsible for calling `_begin`.
        @protected
        @param {function} done To be called when initialization is complete
      */
      _begin(done) {
        done();
      }
      /**
        Tries to read the next item from the iterator.
        If the buffer is empty,
        this method calls {@link BufferedIterator#_read} to fetch items.
        @returns {object?} The next item, or `null` if none is available
      */
      read() {
        if (this.done)
          return null;
        if (!this._sourceStarted)
          this._sourceStarted = true;
        const buffer2 = this._buffer;
        let item;
        if (buffer2.empty) {
          item = null;
          this.readable = false;
        } else {
          item = buffer2.shift();
        }
        if (!this._reading && buffer2.length < this._maxBufferSize) {
          if (!this.closed)
            this._fillBufferAsync();
          else if (buffer2.empty)
            this._endAsync();
        }
        return item;
      }
      /**
        Tries to generate the given number of items.
        Implementers should add `count` items through {@link BufferedIterator#_push}.
        @protected
        @param {integer} count The number of items to generate
        @param {function} done To be called when reading is complete
      */
      _read(count, done) {
        done();
      }
      /**
        Adds an item to the internal buffer.
        @protected
        @param {object} item The item to add
        @emits module:asynciterator.AsyncIterator.readable
      */
      _push(item) {
        if (!this.done) {
          this._pushedCount++;
          this._buffer.push(item);
          this.readable = true;
        }
      }
      /**
        Fills the internal buffer until `this._maxBufferSize` items are present.
        This method calls {@link BufferedIterator#_read} to fetch items.
        @protected
        @emits module:asynciterator.AsyncIterator.readable
      */
      _fillBuffer() {
        let neededItems;
        if (this._reading) {
        } else if (this.closed) {
          this._completeClose();
        } else if ((neededItems = Math.min(this._maxBufferSize - this._buffer.length, 128)) > 0) {
          this._pushedCount = 0;
          this._reading = true;
          this._read(neededItems, () => {
            if (!neededItems)
              throw new Error("done callback called multiple times");
            neededItems = 0;
            this._reading = false;
            if (this.closed) {
              this._completeClose();
            } else if (this._pushedCount) {
              this.readable = true;
              if (this._buffer.length < this._maxBufferSize / 2)
                this._fillBufferAsync();
            }
          });
        }
      }
      /**
        Schedules `_fillBuffer` asynchronously.
      */
      _fillBufferAsync() {
        if (!this._reading) {
          this._reading = true;
          taskScheduler(() => {
            this._reading = false;
            this._fillBuffer();
          });
        }
      }
      /**
        Stops the iterator from generating new items
        after a possible pending read operation has finished.
        Already generated, pending, or terminating items can still be emitted.
        After this, the iterator will end asynchronously.
        @emits module:asynciterator.AsyncIterator.end
      */
      close() {
        if (!this._reading)
          this._completeClose();
        else
          this._changeState(exports.CLOSING);
      }
      /**
        Stops the iterator from generating new items,
        switching from `CLOSING` state into `CLOSED` state.
        @protected
        @emits module:asynciterator.AsyncIterator.end
      */
      _completeClose() {
        if (this._changeState(exports.CLOSED)) {
          this._reading = true;
          this._flush(() => {
            if (!this._reading)
              throw new Error("done callback called multiple times");
            this._reading = false;
            if (this._buffer.empty)
              this._endAsync();
          });
        }
      }
      /* Called by {@link module:asynciterator.AsyncIterator#destroy} */
      _destroy(cause, callback) {
        this._buffer.clear();
        callback();
      }
      /**
        Writes terminating items and closes iterator resources.
        Should never be called before {@link BufferedIterator#close};
        typically, `close` is responsible for calling `_flush`.
        @protected
        @param {function} done To be called when termination is complete
      */
      _flush(done) {
        done();
      }
      /**
        Generates details for a textual representation of the iterator.
        @protected
       */
      _toStringDetails() {
        const buffer2 = this._buffer;
        return `{${buffer2.empty ? "" : `next: ${buffer2.first}, `}buffer: ${buffer2.length}}`;
      }
    };
    exports.BufferedIterator = BufferedIterator;
    var TransformIterator = class extends BufferedIterator {
      /**
        Creates a new `TransformIterator`.
        @param {module:asynciterator.AsyncIterator|Readable} [source] The source this iterator generates items from
        @param {object} [options] Settings of the iterator
        @param {integer} [options.maxBufferSize=4] The maximum number of items to keep in the buffer
        @param {boolean} [options.autoStart=true] Whether buffering starts directly after construction
        @param {boolean} [options.optional=false] If transforming is optional, the original item is pushed when its transformation yields no items
        @param {boolean} [options.destroySource=true] Whether the source should be destroyed when this transformed iterator is closed or destroyed
        @param {module:asynciterator.AsyncIterator} [options.source] The source this iterator generates items from
      */
      constructor(source, options = source || {}) {
        super(options);
        this._boundPush = (item) => this._push(item);
        if (!isSourceExpression(source))
          source = options.source;
        if (isEventEmitter(source)) {
          this.source = source;
        } else if (source) {
          this._createSource = isPromise(source) ? () => source : source;
          if (this._sourceStarted)
            this._loadSourceAsync();
        }
        this._optional = Boolean(options.optional);
        this._destroySource = options.destroySource !== false;
      }
      /**
        The source this iterator generates items from.
        @type module:asynciterator.AsyncIterator
      */
      get source() {
        if (isFunction(this._createSource))
          this._loadSourceAsync();
        return this._source;
      }
      set source(value) {
        const source = this._source = this._validateSource(value);
        source[exports.DESTINATION] = this;
        if (this.done) {
          if (this._destroySource)
            source.destroy();
        } else if (source.done) {
          this.close();
        } else {
          source.on("end", destinationCloseWhenDone);
          source.on("readable", destinationFillBuffer);
          source.on("error", destinationEmitError);
        }
      }
      /**
        Initializes a source that was set through a promise
        @protected
      */
      _loadSourceAsync() {
        if (isFunction(this._createSource)) {
          Promise.resolve(this._createSource()).then((source) => {
            delete this._createSource;
            this.source = source;
            this._fillBuffer();
          }, (error2) => this.emit("error", error2));
          this._createSource = null;
        }
      }
      /**
        Validates whether the given iterator can be used as a source.
        @protected
        @param {object} source The source to validate
        @param {boolean} allowDestination Whether the source can already have a destination
      */
      _validateSource(source, allowDestination = false) {
        if (this._source || typeof this._createSource !== "undefined")
          throw new Error("The source cannot be changed after it has been set");
        return ensureSourceAvailable(source, allowDestination);
      }
      /**
        Tries to read transformed items.
      */
      _read(count, done) {
        const next = () => {
          if (this._pushedCount < count && !this.closed)
            taskScheduler(() => this._readAndTransform(next, done));
          else
            done();
        };
        this._readAndTransform(next, done);
      }
      /**
        Reads a transforms an item
      */
      _readAndTransform(next, done) {
        let item;
        const source = this.source;
        if (!source || source.done || (item = source.read()) === null)
          done();
        else if (!this._optional)
          this._transform(item, next, this._boundPush);
        else
          this._optionalTransform(item, next);
      }
      /**
        Tries to transform the item;
        if the transformation yields no items, pushes the original item.
      */
      _optionalTransform(item, done) {
        const pushedCount = this._pushedCount;
        this._transform(item, () => {
          if (pushedCount === this._pushedCount)
            this._push(item);
          done();
        }, this._boundPush);
      }
      /**
        Generates items based on the item from the source.
        Implementers should add items through {@link BufferedIterator#_push}.
        The default implementation pushes the source item as-is.
        @protected
        @param {object} item The last read item from the source
        @param {function} done To be called when reading is complete
        @param {function} push A callback to push zero or more transformation results.
      */
      _transform(item, done, push) {
        push(item);
        done();
      }
      /**
        Closes the iterator when pending items are transformed.
        @protected
      */
      _closeWhenDone() {
        this.close();
      }
      /* Cleans up the source iterator and ends. */
      _end(destroy) {
        const source = this._source;
        if (source) {
          source.removeListener("end", destinationCloseWhenDone);
          source.removeListener("error", destinationEmitError);
          source.removeListener("readable", destinationFillBuffer);
          delete source[exports.DESTINATION];
          if (this._destroySource)
            source.destroy();
        }
        super._end(destroy);
      }
    };
    exports.TransformIterator = TransformIterator;
    function destinationSetReadable() {
      this[exports.DESTINATION].readable = true;
    }
    function destinationEmitError(error2) {
      this[exports.DESTINATION].emit("error", error2);
    }
    function destinationClose() {
      this[exports.DESTINATION].close();
    }
    function destinationCloseWhenDone() {
      this[exports.DESTINATION]._closeWhenDone();
    }
    function destinationFillBuffer() {
      if (this[exports.DESTINATION]._sourceStarted !== false)
        this[exports.DESTINATION]._fillBuffer();
    }
    var SimpleTransformIterator = class extends TransformIterator {
      /**
        Creates a new `SimpleTransformIterator`.
        @param {module:asynciterator.AsyncIterator|Readable} [source] The source this iterator generates items from
        @param {object|Function} [options] Settings of the iterator, or the transformation function
        @param {integer} [options.maxbufferSize=4] The maximum number of items to keep in the buffer
        @param {boolean} [options.autoStart=true] Whether buffering starts directly after construction
        @param {module:asynciterator.AsyncIterator} [options.source] The source this iterator generates items from
        @param {integer} [options.offset] The number of items to skip
        @param {integer} [options.limit] The maximum number of items
        @param {Function} [options.filter] A function to synchronously filter items from the source
        @param {Function} [options.map] A function to synchronously transform items from the source
        @param {Function} [options.transform] A function to asynchronously transform items from the source
        @param {boolean} [options.optional=false] If transforming is optional, the original item is pushed when its mapping yields `null` or its transformation yields no items
        @param {Array|module:asynciterator.AsyncIterator} [options.prepend] Items to insert before the source items
        @param {Array|module:asynciterator.AsyncIterator} [options.append]  Items to insert after the source items
      */
      constructor(source, options) {
        super(source, options);
        this._offset = 0;
        this._limit = Infinity;
        this._filter = (item) => true;
        options = options || (!isSourceExpression(source) ? source : null);
        if (options) {
          const transform = isFunction(options) ? options : options.transform;
          const { limit, offset, filter, map, prepend, append } = options;
          if (offset === Infinity || limit === -Infinity) {
            this._limit = 0;
          } else {
            if (Number.isFinite(offset))
              this._offset = Math.max(Math.trunc(offset), 0);
            if (Number.isFinite(limit))
              this._limit = Math.max(Math.trunc(limit), 0);
            if (isFunction(filter))
              this._filter = filter;
            if (isFunction(map))
              this._map = map;
            this._transform = isFunction(transform) ? transform : null;
          }
          if (prepend)
            this._prepender = isEventEmitter(prepend) ? prepend : fromArray(prepend);
          if (append)
            this._appender = isEventEmitter(append) ? append : fromArray(append);
        }
      }
      /* Tries to read and transform items */
      _read(count, done) {
        const next = () => this._readAndTransformSimple(count, nextAsync, done);
        this._readAndTransformSimple(count, nextAsync, done);
        function nextAsync() {
          taskScheduler(next);
        }
      }
      /* Reads and transform items */
      _readAndTransformSimple(count, next, done) {
        let item;
        const { source } = this;
        if (!source || source.done) {
          done();
          return;
        }
        if (this._limit === 0)
          this.close();
        while (!this.closed && this._pushedCount < count && (item = source.read()) !== null) {
          if (!this._filter(item) || this._offset !== 0 && this._offset--)
            continue;
          const mappedItem = typeof this._map === "undefined" ? item : this._map(item);
          if (mappedItem === null) {
            if (this._optional)
              this._push(item);
          } else if (!isFunction(this._transform)) {
            this._push(mappedItem);
          } else {
            if (!this._optional)
              this._transform(mappedItem, next, this._boundPush);
            else
              this._optionalTransform(mappedItem, next);
            return;
          }
          if (--this._limit === 0)
            this.close();
        }
        done();
      }
      // Prepends items to the iterator
      _begin(done) {
        this._insert(this._prepender, done);
        delete this._prepender;
      }
      // Appends items to the iterator
      _flush(done) {
        this._insert(this._appender, done);
        delete this._appender;
      }
      // Inserts items in the iterator
      _insert(inserter, done) {
        const push = (item) => this._push(item);
        if (!inserter || inserter.done) {
          done();
        } else {
          inserter.on("data", push);
          inserter.on("end", end);
        }
        function end() {
          inserter.removeListener("data", push);
          inserter.removeListener("end", end);
          done();
        }
      }
    };
    exports.SimpleTransformIterator = SimpleTransformIterator;
    var MultiTransformIterator = class extends TransformIterator {
      /**
       Creates a new `MultiTransformIterator`.
       @param {module:asynciterator.AsyncIterator|Readable} [source] The source this iterator generates items from
       @param {object|Function} [options] Settings of the iterator, or the transformation function
       @param {integer} [options.maxbufferSize=4] The maximum number of items to keep in the buffer
       @param {boolean} [options.autoStart=true] Whether buffering starts directly after construction
       @param {module:asynciterator.AsyncIterator} [options.source] The source this iterator generates items from
       @param {integer} [options.offset] The number of items to skip
       @param {integer} [options.limit] The maximum number of items
       @param {Function} [options.filter] A function to synchronously filter items from the source
       @param {Function} [options.map] A function to synchronously transform items from the source
       @param {Function} [options.transform] A function to asynchronously transform items from the source
       @param {boolean} [options.optional=false] If transforming is optional, the original item is pushed when its mapping yields `null` or its transformation yields no items
       @param {Function} [options.multiTransform] A function to asynchronously transform items to iterators from the source
       @param {Array|module:asynciterator.AsyncIterator} [options.prepend] Items to insert before the source items
       @param {Array|module:asynciterator.AsyncIterator} [options.append]  Items to insert after the source items
       */
      constructor(source, options) {
        super(source, options);
        this._transformerQueue = [];
        if (options) {
          const multiTransform = isFunction(options) ? options : options.multiTransform;
          if (multiTransform)
            this._createTransformer = multiTransform;
        }
      }
      /* Tries to read and transform items */
      _read(count, done) {
        const transformerQueue = this._transformerQueue, optional = this._optional;
        let head, item;
        while ((head = transformerQueue[0]) && head.transformer.done) {
          if (optional && head.item !== null) {
            count--;
            this._push(head.item);
          }
          transformerQueue.shift();
          const { transformer } = head;
          transformer.removeListener("end", destinationFillBuffer);
          transformer.removeListener("readable", destinationFillBuffer);
          transformer.removeListener("error", destinationEmitError);
        }
        const { source } = this;
        while (source && !source.done && transformerQueue.length < this.maxBufferSize) {
          item = source.read();
          if (item === null)
            break;
          const transformer = this._createTransformer(item) || new EmptyIterator();
          transformer[exports.DESTINATION] = this;
          transformer.on("end", destinationFillBuffer);
          transformer.on("readable", destinationFillBuffer);
          transformer.on("error", destinationEmitError);
          transformerQueue.push({ transformer, item });
        }
        head = transformerQueue[0];
        if (head) {
          const { transformer } = head;
          while (count-- > 0 && (item = transformer.read()) !== null) {
            this._push(item);
            if (optional)
              head.item = null;
          }
        } else if (source && source.done) {
          this.close();
        }
        done();
      }
      /**
        Creates a transformer for the given item.
        @param {object} item The last read item from the source
        @returns {module:asynciterator.AsyncIterator} An iterator that transforms the given item
      */
      _createTransformer(item) {
        return new SingletonIterator(item);
      }
      /* Closes the iterator when pending items are transformed. */
      _closeWhenDone() {
        if (!this._transformerQueue.length)
          this.close();
      }
      _end(destroy) {
        super._end(destroy);
        if (this._destroySource) {
          for (const item of this._transformerQueue)
            item.transformer.destroy();
        }
      }
    };
    exports.MultiTransformIterator = MultiTransformIterator;
    var UnionIterator = class extends BufferedIterator {
      /**
        Creates a new `UnionIterator`.
        @param {module:asynciterator.AsyncIterator|Array} [sources] The sources to read from
        @param {object} [options] Settings of the iterator
        @param {boolean} [options.destroySource=true] Whether the sources should be destroyed when transformed iterator is closed or destroyed
      */
      constructor(sources, options = {}) {
        super(options);
        this._sources = [];
        this._currentSource = -1;
        const autoStart = options.autoStart !== false;
        if (isEventEmitter(sources)) {
          sources.on("error", (error2) => this.emit("error", error2));
          this._pending = { loading: false, sources };
          if (autoStart)
            this._loadSources();
        } else if (Array.isArray(sources) && sources.length > 0) {
          for (const source of sources)
            this._addSource(source);
        } else if (autoStart) {
          this.close();
        }
        this._destroySources = options.destroySources !== false;
      }
      // Loads pending sources into the sources list
      _loadSources() {
        const sources = this._pending.sources;
        this._pending.loading = true;
        if (sources.done) {
          delete this._pending;
          this.close();
        } else {
          sources.on("data", (source) => {
            this._addSource(source);
            this._fillBufferAsync();
          });
          sources.on("end", () => {
            delete this._pending;
            this._fillBuffer();
          });
        }
      }
      // Adds the given source to the internal sources array
      _addSource(source) {
        if (isPromise(source))
          source = wrap(source);
        if (!source.done) {
          this._sources.push(source);
          source[exports.DESTINATION] = this;
          source.on("error", destinationEmitError);
          source.on("readable", destinationFillBuffer);
          source.on("end", destinationRemoveEmptySources);
        }
      }
      // Removes sources that will no longer emit items
      _removeEmptySources() {
        this._sources = this._sources.filter((source, index) => {
          if (source.done && index <= this._currentSource)
            this._currentSource--;
          return !source.done;
        });
        this._fillBuffer();
      }
      // Reads items from the next sources
      _read(count, done) {
        var _a;
        if (((_a = this._pending) === null || _a === void 0 ? void 0 : _a.loading) === false)
          this._loadSources();
        let lastCount = 0, item;
        while (lastCount !== (lastCount = count)) {
          for (let i2 = 0; i2 < this._sources.length && count > 0; i2++) {
            this._currentSource = (this._currentSource + 1) % this._sources.length;
            const source = this._sources[this._currentSource];
            if ((item = source.read()) !== null) {
              count--;
              this._push(item);
            }
          }
        }
        if (!this._pending && this._sources.length === 0)
          this.close();
        done();
      }
      _end(destroy = false) {
        super._end(destroy);
        if (this._destroySources) {
          for (const source of this._sources)
            source.destroy();
          if (this._pending) {
            this._pending.sources.destroy();
            delete this._pending;
          }
        }
      }
    };
    exports.UnionIterator = UnionIterator;
    function destinationRemoveEmptySources() {
      this[exports.DESTINATION]._removeEmptySources();
    }
    var ClonedIterator = class extends TransformIterator {
      /**
        Creates a new `ClonedIterator`.
        @param {module:asynciterator.AsyncIterator|Readable} [source] The source this iterator copies items from
      */
      constructor(source) {
        super(source, { autoStart: false });
        this._readPosition = 0;
        this._reading = false;
        if (source)
          this.readable = true;
      }
      _init() {
      }
      close() {
        AsyncIterator.prototype.close.call(this);
      }
      // The source this iterator copies items from
      get source() {
        return super.source;
      }
      set source(value) {
        const source = this._source = this._validateSource(value);
        const history = source && source[exports.DESTINATION] || (source[exports.DESTINATION] = new HistoryReader(source));
        if (this.done) {
          if (this._destroySource)
            source.destroy();
        } else if (history.endsAt(0)) {
          this.close();
        } else {
          history.register(this);
          if (source._sourceStarted === false || history.readAt(0) !== null)
            this.readable = true;
        }
        const propertyCallbacks = this._propertyCallbacks;
        for (const propertyName in propertyCallbacks) {
          const callbacks = propertyCallbacks[propertyName];
          for (const callback of callbacks)
            this._getSourceProperty(propertyName, callback);
        }
      }
      /**
        Validates whether the given iterator can be used as a source.
        @protected
        @param {object} source The source to validate
        @param {boolean} allowDestination Whether the source can already have a destination
      */
      _validateSource(source, allowDestination = false) {
        const history = source && source[exports.DESTINATION];
        return super._validateSource(source, !history || history instanceof HistoryReader);
      }
      // Retrieves the property with the given name from the clone or its source.
      getProperty(propertyName, callback) {
        const { source } = this, properties = this._properties, hasProperty = properties && propertyName in properties;
        if (!callback) {
          return hasProperty ? properties && properties[propertyName] : source && source.getProperty(propertyName);
        }
        super.getProperty(propertyName, callback);
        if (source && !hasProperty)
          this._getSourceProperty(propertyName, callback);
        return void 0;
      }
      // Retrieves the property with the given name from the source
      _getSourceProperty(propertyName, callback) {
        this.source.getProperty(propertyName, (value) => {
          if (!this._properties || !(propertyName in this._properties))
            callback(value);
        });
      }
      // Retrieves all properties of the iterator and its source.
      getProperties() {
        const base = this.source ? this.source.getProperties() : {}, properties = this._properties;
        for (const name in properties)
          base[name] = properties[name];
        return base;
      }
      /* Generates details for a textual representation of the iterator. */
      _toStringDetails() {
        return `{source: ${this.source ? this.source.toString() : "none"}}`;
      }
      /* Tries to read an item */
      read() {
        if (!this._sourceStarted)
          this._sourceStarted = true;
        const source = this.source;
        let item = null;
        if (!this.done && source) {
          const history = source[exports.DESTINATION];
          if ((item = history.readAt(this._readPosition)) !== null)
            this._readPosition++;
          else
            this.readable = false;
          if (history.endsAt(this._readPosition))
            this.close();
        }
        return item;
      }
      /* End the iterator and cleans up. */
      _end(destroy) {
        const source = this.source;
        const history = source === null || source === void 0 ? void 0 : source[exports.DESTINATION];
        if (history)
          history.unregister(this);
        BufferedIterator.prototype._end.call(this, destroy);
      }
    };
    exports.ClonedIterator = ClonedIterator;
    var HistoryReader = class {
      constructor(source) {
        this._history = [];
        this._trackers = /* @__PURE__ */ new Set();
        this._source = source;
        if (!source.done) {
          const setReadable = () => {
            for (const tracker of this._trackers)
              tracker.readable = true;
          };
          const emitError = (error2) => {
            for (const tracker of this._trackers)
              tracker.emit("error", error2);
          };
          const end = () => {
            for (const tracker of this._trackers) {
              if (tracker._sourceStarted !== false && tracker._readPosition === this._history.length)
                tracker.close();
            }
            this._trackers.clear();
            source.removeListener("end", end);
            source.removeListener("error", emitError);
            source.removeListener("readable", setReadable);
          };
          source.on("end", end);
          source.on("error", emitError);
          source.on("readable", setReadable);
        }
      }
      // Registers a clone for history updates
      register(clone) {
        if (!this._source.done)
          this._trackers.add(clone);
      }
      // Unregisters a clone for history updates
      unregister(clone) {
        this._trackers.delete(clone);
      }
      // Tries to read the item at the given history position
      readAt(pos) {
        let item = null;
        if (pos < this._history.length)
          item = this._history[pos];
        else if (!this._source.done && (item = this._source.read()) !== null)
          this._history[pos] = item;
        return item;
      }
      // Determines whether the given position is the end of the source
      endsAt(pos) {
        return this._source.done && this._history.length === pos;
      }
    };
    var WrappingIterator = class extends AsyncIterator {
      constructor(source, opts) {
        super();
        this._source = null;
        this._destroySource = (opts === null || opts === void 0 ? void 0 : opts.destroySource) !== false;
        if (isPromise(source)) {
          this._source = new AsyncIterator();
          source.then((value) => {
            this._source = null;
            this.source = value;
          }).catch((error2) => this.emit("error", error2));
        } else if (source) {
          this.source = source;
        }
      }
      set source(value) {
        let source = value;
        if (this._source !== null)
          throw new Error("The source cannot be changed after it has been set");
        if (isIterable(source))
          source = source[Symbol.iterator]();
        if (isIterator(source)) {
          let iterator = source;
          source = new events_1.EventEmitter();
          source.read = () => {
            if (iterator !== null) {
              let next;
              while (!(next = iterator.next()).done) {
                if (next.value !== null)
                  return next.value;
              }
              iterator = null;
              this.close();
            }
            return null;
          };
        } else {
          source = ensureSourceAvailable(source);
        }
        if (this.done) {
          if (this._destroySource && isFunction(source.destroy))
            source.destroy();
          return;
        }
        source[exports.DESTINATION] = this;
        source.on("end", destinationClose);
        source.on("error", destinationEmitError);
        source.on("readable", destinationSetReadable);
        this._source = source;
        this.readable = source.readable !== false;
      }
      read() {
        if (this._source !== null && this._source.readable !== false) {
          const item = this._source.read();
          if (item !== null)
            return item;
          this.readable = false;
        }
        return null;
      }
      _end(destroy = false) {
        if (this._source !== null) {
          this._source.removeListener("end", destinationClose);
          this._source.removeListener("error", destinationEmitError);
          this._source.removeListener("readable", destinationSetReadable);
          delete this._source[exports.DESTINATION];
          if (this._destroySource && isFunction(this._source.destroy))
            this._source.destroy();
          this._source = null;
        }
        super._end(destroy);
      }
    };
    exports.WrappingIterator = WrappingIterator;
    function wrap(source, options) {
      if (options && ("autoStart" in options || "optional" in options || "source" in options || "maxBufferSize" in options)) {
        if (source && !isEventEmitter(source))
          source = new WrappingIterator(source);
        return new TransformIterator(source, options);
      }
      if (!source)
        return empty();
      if (isPromise(source))
        return new WrappingIterator(source, options);
      if (source instanceof AsyncIterator)
        return source;
      if (Array.isArray(source))
        return fromArray(source);
      if (isIterable(source) || isIterator(source) || isEventEmitter(source))
        return new WrappingIterator(source, options);
      throw new TypeError(`Invalid source: ${source}`);
    }
    exports.wrap = wrap;
    function empty() {
      return new EmptyIterator();
    }
    exports.empty = empty;
    function single(item) {
      return new SingletonIterator(item);
    }
    exports.single = single;
    function fromArray(items) {
      return new ArrayIterator(items);
    }
    exports.fromArray = fromArray;
    function fromIterator(source) {
      return new WrappingIterator(source);
    }
    exports.fromIterator = fromIterator;
    function fromIterable(source) {
      return new WrappingIterator(source);
    }
    exports.fromIterable = fromIterable;
    function union(sources) {
      return new UnionIterator(sources);
    }
    exports.union = union;
    function range(start, end, step) {
      return new IntegerIterator({ start, end, step });
    }
    exports.range = range;
    function bind(fn, self2) {
      return self2 ? fn.bind(self2) : fn;
    }
    function isFunction(object) {
      return typeof object === "function";
    }
    exports.isFunction = isFunction;
    function isEventEmitter(object) {
      return isFunction(object === null || object === void 0 ? void 0 : object.on);
    }
    exports.isEventEmitter = isEventEmitter;
    function isPromise(object) {
      return isFunction(object === null || object === void 0 ? void 0 : object.then);
    }
    exports.isPromise = isPromise;
    function isSourceExpression(object) {
      return object && (isEventEmitter(object) || isPromise(object) || isFunction(object));
    }
    exports.isSourceExpression = isSourceExpression;
    function isIterable(object) {
      return object && Symbol.iterator in object;
    }
    exports.isIterable = isIterable;
    function isIterator(object) {
      return isFunction(object === null || object === void 0 ? void 0 : object.next);
    }
    exports.isIterator = isIterator;
  }
});

// node_modules/@comunica/bus-query-operation/lib/ClosableTransformIterator.js
var require_ClosableTransformIterator = __commonJS({
  "node_modules/@comunica/bus-query-operation/lib/ClosableTransformIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClosableTransformIterator = void 0;
    var asynciterator_1 = require_asynciterator();
    var ClosableTransformIterator = class extends asynciterator_1.TransformIterator {
      constructor(source, options) {
        super(source, options);
        this.onClose = options.onClose;
      }
      _end(destroy) {
        this.onClose();
        super._end(destroy);
      }
    };
    exports.ClosableTransformIterator = ClosableTransformIterator;
  }
});

// node_modules/@comunica/bus-query-operation/lib/index.js
var require_lib7 = __commonJS({
  "node_modules/@comunica/bus-query-operation/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperation(), exports);
    __exportStar(require_ActorQueryOperationTyped(), exports);
    __exportStar(require_ActorQueryOperationTypedMediated(), exports);
    __exportStar(require_Bindings3(), exports);
    __exportStar(require_BusQueryOperation(), exports);
    __exportStar(require_ClosableTransformIterator(), exports);
  }
});

// node_modules/@comunica/actor-init-query/lib/MemoryPhysicalQueryPlanLogger.js
var require_MemoryPhysicalQueryPlanLogger = __commonJS({
  "node_modules/@comunica/actor-init-query/lib/MemoryPhysicalQueryPlanLogger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MemoryPhysicalQueryPlanLogger = void 0;
    var rdf_string_1 = require_rdf_string();
    var MemoryPhysicalQueryPlanLogger = class {
      constructor() {
        this.children = /* @__PURE__ */ new Map();
      }
      logOperation(logicalOperator, physicalOperator, node, parentNode, actor, metadata) {
        const planNode = {
          actor,
          logicalOperator,
          physicalOperator,
          rawNode: node,
          children: [],
          metadata
        };
        this.children.set(node, planNode.children);
        if (!this.rootNode) {
          if (parentNode) {
            throw new Error(`No root node has been set yet, while a parent is being referenced`);
          }
          this.rootNode = planNode;
        } else {
          if (!parentNode) {
            throw new Error(`Detected more than one parent-less node`);
          }
          const children = this.children.get(parentNode);
          if (!children) {
            throw new Error(`Could not find parent node`);
          }
          children.push(planNode);
        }
      }
      toJson() {
        return this.rootNode ? this.planNodeToJson(this.rootNode) : {};
      }
      planNodeToJson(node) {
        return {
          logical: node.logicalOperator,
          physical: node.physicalOperator,
          ...this.getLogicalMetadata(node.rawNode),
          ...node.metadata,
          ...node.children.length > 0 ? { children: node.children.map((child) => this.planNodeToJson(child)) } : {}
        };
      }
      getLogicalMetadata(rawNode) {
        if ("type" in rawNode) {
          const operation = rawNode;
          switch (operation.type) {
            case "pattern":
              return {
                pattern: this.quadToString(operation)
              };
            case "project":
              return {
                variables: operation.variables.map((variable) => variable.value)
              };
          }
        }
        return {};
      }
      quadToString(quad) {
        return `${(0, rdf_string_1.termToString)(quad.subject)} ${(0, rdf_string_1.termToString)(quad.predicate)} ${(0, rdf_string_1.termToString)(quad.object)}${quad.graph.termType === "DefaultGraph" ? "" : ` ${(0, rdf_string_1.termToString)(quad.graph)}`}`;
      }
    };
    exports.MemoryPhysicalQueryPlanLogger = MemoryPhysicalQueryPlanLogger;
  }
});

// node_modules/@comunica/actor-init-query/lib/QueryEngineBase.js
var require_QueryEngineBase = __commonJS({
  "node_modules/@comunica/actor-init-query/lib/QueryEngineBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryEngineBase = void 0;
    var bus_query_operation_1 = require_lib7();
    var context_entries_1 = require_lib4();
    var core_1 = require_lib2();
    var MemoryPhysicalQueryPlanLogger_1 = require_MemoryPhysicalQueryPlanLogger();
    var QueryEngineBase = class _QueryEngineBase {
      constructor(actorInitQuery) {
        this.actorInitQuery = actorInitQuery;
        this.defaultFunctionArgumentsCache = {};
      }
      async queryBindings(query, context) {
        return this.queryOfType(query, context, "bindings");
      }
      async queryQuads(query, context) {
        return this.queryOfType(query, context, "quads");
      }
      async queryBoolean(query, context) {
        return this.queryOfType(query, context, "boolean");
      }
      async queryVoid(query, context) {
        return this.queryOfType(query, context, "void");
      }
      async queryOfType(query, context, expectedType) {
        const result = await this.query(query, context);
        if (result.resultType === expectedType) {
          return await result.execute();
        }
        throw new Error(`Query result type '${expectedType}' was expected, while '${result.resultType}' was found.`);
      }
      /**
       * Evaluate the given query
       * @param query A query string or algebra.
       * @param context An optional query context.
       * @return {Promise<QueryType>} A promise that resolves to the query output.
       */
      async query(query, context) {
        const output = await this.queryOrExplain(query, context);
        if ("explain" in output) {
          throw new Error(`Tried to explain a query when in query-only mode`);
        }
        return output;
      }
      /**
       * Explain the given query
       * @param {string | Algebra.Operation} query A query string or algebra.
       * @param context An optional query context.
       * @param explainMode The explain mode.
       * @return {Promise<QueryType | IQueryExplained>} A promise that resolves to
       *                                                               the query output or explanation.
       */
      async explain(query, context, explainMode) {
        context.explain = explainMode;
        const output = await this.queryOrExplain(query, context);
        return output;
      }
      /**
       * Evaluate or explain the given query
       * @param {string | Algebra.Operation} query A query string or algebra.
       * @param context An optional query context.
       * @return {Promise<QueryType | IQueryExplained>} A promise that resolves to
       *                                                               the query output or explanation.
       */
      async queryOrExplain(query, context) {
        context = context || {};
        for (const key in context) {
          if (this.actorInitQuery.contextKeyShortcuts[key]) {
            context[this.actorInitQuery.contextKeyShortcuts[key]] = context[key];
            delete context[key];
          }
        }
        let actionContext = new core_1.ActionContext(context);
        let queryFormat = { language: "sparql", version: "1.1" };
        if (actionContext.has(context_entries_1.KeysInitQuery.queryFormat)) {
          queryFormat = actionContext.get(context_entries_1.KeysInitQuery.queryFormat);
          actionContext = actionContext.delete(context_entries_1.KeysInitQuery.queryFormat);
          if (queryFormat.language === "graphql") {
            actionContext = actionContext.setDefault(context_entries_1.KeysInitQuery.graphqlSingularizeVariables, {});
          }
        }
        const baseIRI = actionContext.get(context_entries_1.KeysInitQuery.baseIRI);
        actionContext = actionContext.setDefault(context_entries_1.KeysInitQuery.queryTimestamp, /* @__PURE__ */ new Date()).setDefault(context_entries_1.KeysRdfResolveQuadPattern.sourceIds, /* @__PURE__ */ new Map()).setDefault(context_entries_1.KeysCore.log, this.actorInitQuery.logger).setDefault(context_entries_1.KeysInitQuery.functionArgumentsCache, this.defaultFunctionArgumentsCache).setDefault(context_entries_1.KeysRdfResolveQuadPattern.hypermediaSourcesAggregatedStores, /* @__PURE__ */ new Map());
        actionContext = (await this.actorInitQuery.mediatorContextPreprocess.mediate({ context: actionContext })).context;
        const explainMode = actionContext.get(context_entries_1.KeysInitQuery.explain);
        let operation;
        if (typeof query === "string") {
          actionContext = actionContext.set(context_entries_1.KeysInitQuery.queryString, query);
          const queryParseOutput = await this.actorInitQuery.mediatorQueryParse.mediate({ context: actionContext, query, queryFormat, baseIRI });
          operation = queryParseOutput.operation;
          if (queryParseOutput.baseIRI) {
            actionContext = actionContext.set(context_entries_1.KeysInitQuery.baseIRI, queryParseOutput.baseIRI);
          }
        } else {
          operation = query;
        }
        if (explainMode === "parsed") {
          return {
            explain: true,
            type: explainMode,
            data: operation
          };
        }
        if (actionContext.has(context_entries_1.KeysInitQuery.initialBindings)) {
          operation = (0, bus_query_operation_1.materializeOperation)(operation, actionContext.get(context_entries_1.KeysInitQuery.initialBindings));
          actionContext = actionContext.delete(context_entries_1.KeysInitQuery.queryString);
        }
        const mediatorResult = await this.actorInitQuery.mediatorOptimizeQueryOperation.mediate({ context: actionContext, operation });
        operation = mediatorResult.operation;
        actionContext = mediatorResult.context || actionContext;
        if (explainMode === "logical") {
          return {
            explain: true,
            type: explainMode,
            data: operation
          };
        }
        actionContext = actionContext.set(context_entries_1.KeysInitQuery.query, operation);
        let physicalQueryPlanLogger;
        if (explainMode === "physical") {
          physicalQueryPlanLogger = new MemoryPhysicalQueryPlanLogger_1.MemoryPhysicalQueryPlanLogger();
          actionContext = actionContext.set(context_entries_1.KeysInitQuery.physicalQueryPlanLogger, physicalQueryPlanLogger);
        }
        const output = await this.actorInitQuery.mediatorQueryOperation.mediate({
          context: actionContext,
          operation
        });
        output.context = actionContext;
        const finalOutput = _QueryEngineBase.internalToFinalResult(output);
        if (physicalQueryPlanLogger) {
          switch (finalOutput.resultType) {
            case "bindings":
              await (await finalOutput.execute()).toArray();
              break;
            case "quads":
              await (await finalOutput.execute()).toArray();
              break;
            case "boolean":
              await finalOutput.execute();
              break;
            case "void":
              await finalOutput.execute();
              break;
          }
          return {
            explain: true,
            type: explainMode,
            data: physicalQueryPlanLogger.toJson()
          };
        }
        return finalOutput;
      }
      /**
       * @param context An optional context.
       * @return {Promise<{[p: string]: number}>} All available SPARQL (weighted) result media types.
       */
      async getResultMediaTypes(context) {
        context = core_1.ActionContext.ensureActionContext(context);
        return (await this.actorInitQuery.mediatorQueryResultSerializeMediaTypeCombiner.mediate({ context, mediaTypes: true })).mediaTypes;
      }
      /**
       * @param context An optional context.
       * @return {Promise<{[p: string]: number}>} All available SPARQL result media type formats.
       */
      async getResultMediaTypeFormats(context) {
        context = core_1.ActionContext.ensureActionContext(context);
        return (await this.actorInitQuery.mediatorQueryResultSerializeMediaTypeFormatCombiner.mediate({ context, mediaTypeFormats: true })).mediaTypeFormats;
      }
      /**
       * Convert a query result to a string stream based on a certain media type.
       * @param {IQueryOperationResult} queryResult A query result.
       * @param {string} mediaType A media type.
       * @param {ActionContext} context An optional context.
       * @return {Promise<IActorQueryResultSerializeOutput>} A text stream.
       */
      async resultToString(queryResult, mediaType, context) {
        context = core_1.ActionContext.ensureActionContext(context);
        if (!mediaType) {
          switch (queryResult.resultType) {
            case "bindings":
              mediaType = "application/json";
              break;
            case "quads":
              mediaType = "application/trig";
              break;
            default:
              mediaType = "simple";
              break;
          }
        }
        const handle = { ...await _QueryEngineBase.finalToInternalResult(queryResult), context };
        return (await this.actorInitQuery.mediatorQueryResultSerialize.mediate({ context, handle, handleMediaType: mediaType })).handle;
      }
      /**
       * Invalidate all internal caches related to the given page URL.
       * If no page URL is given, then all pages will be invalidated.
       * @param {string} url The page URL to invalidate.
       * @param context An optional ActionContext to pass to the actors.
       * @return {Promise<any>} A promise resolving when the caches have been invalidated.
       */
      invalidateHttpCache(url, context) {
        context = core_1.ActionContext.ensureActionContext(context);
        return this.actorInitQuery.mediatorHttpInvalidate.mediate({ url, context });
      }
      /**
       * Convert an internal query result to a final one.
       * @param internalResult An intermediary query result.
       */
      static internalToFinalResult(internalResult) {
        switch (internalResult.type) {
          case "bindings":
            return {
              resultType: "bindings",
              execute: async () => internalResult.bindingsStream,
              metadata: async () => await internalResult.metadata(),
              context: internalResult.context
            };
          case "quads":
            return {
              resultType: "quads",
              execute: async () => internalResult.quadStream,
              metadata: async () => await internalResult.metadata(),
              context: internalResult.context
            };
          case "boolean":
            return {
              resultType: "boolean",
              execute: async () => internalResult.execute(),
              context: internalResult.context
            };
          case "void":
            return {
              resultType: "void",
              execute: async () => internalResult.execute(),
              context: internalResult.context
            };
        }
      }
      /**
       * Convert a final query result to an internal one.
       * @param finalResult A final query result.
       */
      static async finalToInternalResult(finalResult) {
        switch (finalResult.resultType) {
          case "bindings":
            return {
              type: "bindings",
              bindingsStream: await finalResult.execute(),
              metadata: async () => await finalResult.metadata()
            };
          case "quads":
            return {
              type: "quads",
              quadStream: await finalResult.execute(),
              metadata: async () => await finalResult.metadata()
            };
          case "boolean":
            return {
              type: "boolean",
              execute: () => finalResult.execute()
            };
          case "void":
            return {
              type: "void",
              execute: () => finalResult.execute()
            };
        }
      }
    };
    exports.QueryEngineBase = QueryEngineBase;
  }
});

// node_modules/@comunica/actor-init-query/lib/index-browser.js
var require_index_browser = __commonJS({
  "node_modules/@comunica/actor-init-query/lib/index-browser.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryEngineBase = void 0;
    __exportStar(require_ActorInitQueryBase(), exports);
    __exportStar(require_ActorInitQuery_browser(), exports);
    var QueryEngineBase_1 = require_QueryEngineBase();
    Object.defineProperty(exports, "QueryEngineBase", { enumerable: true, get: function() {
      return QueryEngineBase_1.QueryEngineBase;
    } });
  }
});

// node_modules/@comunica/logger-void/lib/LoggerVoid.js
var require_LoggerVoid = __commonJS({
  "node_modules/@comunica/logger-void/lib/LoggerVoid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LoggerVoid = void 0;
    var types_1 = require_lib();
    var LoggerVoid = class extends types_1.Logger {
      debug() {
      }
      error() {
      }
      fatal() {
      }
      info() {
      }
      trace() {
      }
      warn() {
      }
    };
    exports.LoggerVoid = LoggerVoid;
  }
});

// node_modules/@comunica/logger-void/lib/index.js
var require_lib8 = __commonJS({
  "node_modules/@comunica/logger-void/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_LoggerVoid(), exports);
  }
});

// node_modules/@comunica/bus-context-preprocess/lib/ActorContextPreprocess.js
var require_ActorContextPreprocess = __commonJS({
  "node_modules/@comunica/bus-context-preprocess/lib/ActorContextPreprocess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorContextPreprocess = void 0;
    var core_1 = require_lib2();
    var ActorContextPreprocess = class extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorContextPreprocess = ActorContextPreprocess;
  }
});

// node_modules/@comunica/bus-context-preprocess/lib/index.js
var require_lib9 = __commonJS({
  "node_modules/@comunica/bus-context-preprocess/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorContextPreprocess(), exports);
  }
});

// node_modules/@comunica/actor-context-preprocess-source-to-destination/lib/ActorContextPreprocessSourceToDestination.js
var require_ActorContextPreprocessSourceToDestination = __commonJS({
  "node_modules/@comunica/actor-context-preprocess-source-to-destination/lib/ActorContextPreprocessSourceToDestination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorContextPreprocessSourceToDestination = void 0;
    var bus_context_preprocess_1 = require_lib9();
    var context_entries_1 = require_lib4();
    var ActorContextPreprocessSourceToDestination = class extends bus_context_preprocess_1.ActorContextPreprocess {
      constructor(args) {
        super(args);
      }
      async test(action) {
        return true;
      }
      async run(action) {
        if (action.context.get(context_entries_1.KeysRdfResolveQuadPattern.sources) && !action.context.get(context_entries_1.KeysRdfUpdateQuads.destination)) {
          const sources = action.context.get(context_entries_1.KeysRdfResolveQuadPattern.sources);
          if (sources.length === 1) {
            return { context: action.context.set(context_entries_1.KeysRdfUpdateQuads.destination, sources[0]) };
          }
        }
        return action;
      }
    };
    exports.ActorContextPreprocessSourceToDestination = ActorContextPreprocessSourceToDestination;
  }
});

// node_modules/@comunica/actor-context-preprocess-source-to-destination/lib/index.js
var require_lib10 = __commonJS({
  "node_modules/@comunica/actor-context-preprocess-source-to-destination/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorContextPreprocessSourceToDestination(), exports);
  }
});

// node_modules/@comunica/mediator-combine-pipeline/lib/MediatorCombinePipeline.js
var require_MediatorCombinePipeline = __commonJS({
  "node_modules/@comunica/mediator-combine-pipeline/lib/MediatorCombinePipeline.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorCombinePipeline = void 0;
    var core_1 = require_lib2();
    var MediatorCombinePipeline = class extends core_1.Mediator {
      constructor(args) {
        super(args);
      }
      async mediate(action) {
        let testResults;
        try {
          testResults = this.publish(action);
        } catch {
          return action;
        }
        if (this.filterErrors) {
          const _testResults = [];
          for (const result of testResults) {
            try {
              await result.reply;
              _testResults.push(result);
            } catch {
            }
          }
          testResults = _testResults;
        }
        testResults = await Promise.all(testResults.map(async ({ actor, reply }) => ({ actor, reply: await reply })));
        if (this.order) {
          const getOrder = (elem) => {
            const value = this.field ? elem[this.field] : elem;
            if (typeof value !== "number") {
              throw new Error("Cannot order elements that are not numbers.");
            }
            return value;
          };
          testResults = testResults.sort((actor1, actor2) => (this.order === "increasing" ? 1 : -1) * (getOrder(actor1.reply) - getOrder(actor2.reply)));
        }
        let handle = action;
        for (const { actor } of testResults) {
          handle = { ...handle, ...await actor.runObservable(handle) };
        }
        return handle;
      }
      mediateWith() {
        throw new Error("Method not supported.");
      }
    };
    exports.MediatorCombinePipeline = MediatorCombinePipeline;
  }
});

// node_modules/@comunica/mediator-combine-pipeline/lib/index.js
var require_lib11 = __commonJS({
  "node_modules/@comunica/mediator-combine-pipeline/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MediatorCombinePipeline(), exports);
  }
});

// node_modules/@comunica/bus-hash-bindings/lib/ActorHashBindings.js
var require_ActorHashBindings = __commonJS({
  "node_modules/@comunica/bus-hash-bindings/lib/ActorHashBindings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHashBindings = void 0;
    var core_1 = require_lib2();
    var ActorHashBindings = class extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorHashBindings = ActorHashBindings;
  }
});

// node_modules/@comunica/bus-hash-bindings/lib/index.js
var require_lib12 = __commonJS({
  "node_modules/@comunica/bus-hash-bindings/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHashBindings(), exports);
  }
});

// node_modules/canonicalize/lib/canonicalize.js
var require_canonicalize = __commonJS({
  "node_modules/canonicalize/lib/canonicalize.js"(exports, module) {
    "use strict";
    module.exports = function serialize(object) {
      if (typeof object === "number" && isNaN(object)) {
        throw new Error("NaN is not allowed");
      }
      if (typeof object === "number" && !isFinite(object)) {
        throw new Error("Infinity is not allowed");
      }
      if (object === null || typeof object !== "object") {
        return JSON.stringify(object);
      }
      if (object.toJSON instanceof Function) {
        return serialize(object.toJSON());
      }
      if (Array.isArray(object)) {
        const values2 = object.reduce((t, cv, ci) => {
          const comma = ci === 0 ? "" : ",";
          const value = cv === void 0 || typeof cv === "symbol" ? null : cv;
          return `${t}${comma}${serialize(value)}`;
        }, "");
        return `[${values2}]`;
      }
      const values = Object.keys(object).sort().reduce((t, cv) => {
        if (object[cv] === void 0 || typeof object[cv] === "symbol") {
          return t;
        }
        const comma = t.length === 0 ? "" : ",";
        return `${t}${comma}${serialize(cv)}:${serialize(object[cv])}`;
      }, "");
      return `{${values}}`;
    };
  }
});

// node_modules/@comunica/actor-hash-bindings-sha1/lib/ActorHashBindingsSha1.js
var require_ActorHashBindingsSha1 = __commonJS({
  "node_modules/@comunica/actor-hash-bindings-sha1/lib/ActorHashBindingsSha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHashBindingsSha1 = void 0;
    var bus_hash_bindings_1 = require_lib12();
    var hash_js_1 = require_hash();
    var rdf_string_1 = require_rdf_string();
    var canonicalize = require_canonicalize();
    var ActorHashBindingsSha1 = class extends bus_hash_bindings_1.ActorHashBindings {
      async test(action) {
        if (!action.allowHashCollisions) {
          throw new Error(`Actor ${this.name} can not provide hash functions without hash collisions`);
        }
        return true;
      }
      async run(action) {
        return {
          hashFunction: (bindings) => (0, hash_js_1.sha1)().update(canonicalize(Object.fromEntries([...bindings].map(([key, value]) => [(0, rdf_string_1.termToString)(key), (0, rdf_string_1.termToString)(value)])))).digest("hex"),
          hashCollisions: true
        };
      }
    };
    exports.ActorHashBindingsSha1 = ActorHashBindingsSha1;
  }
});

// node_modules/@comunica/actor-hash-bindings-sha1/lib/index.js
var require_lib13 = __commonJS({
  "node_modules/@comunica/actor-hash-bindings-sha1/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHashBindingsSha1(), exports);
  }
});

// node_modules/@comunica/mediator-race/lib/MediatorRace.js
var require_MediatorRace = __commonJS({
  "node_modules/@comunica/mediator-race/lib/MediatorRace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorRace = void 0;
    var core_1 = require_lib2();
    var MediatorRace = class extends core_1.Mediator {
      constructor(args) {
        super(args);
      }
      mediateWith(action, testResults) {
        return new Promise((resolve, reject) => {
          const errors = [];
          for (const testResult of testResults) {
            testResult.reply.then(() => {
              resolve(testResult.actor);
            }).catch((error2) => {
              errors.push(error2);
              if (errors.length === testResults.length) {
                reject(new Error(`${this.name} mediated over all rejecting actors:
${errors.map((subError) => subError.message).join("\n")}`));
              }
            });
          }
        });
      }
    };
    exports.MediatorRace = MediatorRace;
  }
});

// node_modules/@comunica/mediator-race/lib/index.js
var require_lib14 = __commonJS({
  "node_modules/@comunica/mediator-race/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MediatorRace(), exports);
  }
});

// node_modules/@comunica/bus-optimize-query-operation/lib/ActorOptimizeQueryOperation.js
var require_ActorOptimizeQueryOperation = __commonJS({
  "node_modules/@comunica/bus-optimize-query-operation/lib/ActorOptimizeQueryOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperation = void 0;
    var core_1 = require_lib2();
    var ActorOptimizeQueryOperation = class extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorOptimizeQueryOperation = ActorOptimizeQueryOperation;
  }
});

// node_modules/@comunica/bus-optimize-query-operation/lib/index.js
var require_lib15 = __commonJS({
  "node_modules/@comunica/bus-optimize-query-operation/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperation(), exports);
  }
});

// node_modules/@comunica/actor-optimize-query-operation-join-bgp/lib/ActorOptimizeQueryOperationJoinBgp.js
var require_ActorOptimizeQueryOperationJoinBgp = __commonJS({
  "node_modules/@comunica/actor-optimize-query-operation-join-bgp/lib/ActorOptimizeQueryOperationJoinBgp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationJoinBgp = void 0;
    var bus_optimize_query_operation_1 = require_lib15();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationJoinBgp = class extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      async test(action) {
        return true;
      }
      async run(action) {
        const operation = sparqlalgebrajs_1.Util.mapOperation(action.operation, {
          join(op, factory3) {
            if (op.input.every((subInput) => subInput.type === "bgp")) {
              return {
                recurse: false,
                result: factory3.createBgp(op.input.flatMap((subInput) => subInput.patterns))
              };
            }
            return {
              recurse: false,
              result: op
            };
          }
        });
        return { operation, context: action.context };
      }
    };
    exports.ActorOptimizeQueryOperationJoinBgp = ActorOptimizeQueryOperationJoinBgp;
  }
});

// node_modules/@comunica/actor-optimize-query-operation-join-bgp/lib/index.js
var require_lib16 = __commonJS({
  "node_modules/@comunica/actor-optimize-query-operation-join-bgp/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationJoinBgp(), exports);
  }
});

// node_modules/@comunica/actor-optimize-query-operation-bgp-to-join/lib/ActorOptimizeQueryOperationBgpToJoin.js
var require_ActorOptimizeQueryOperationBgpToJoin = __commonJS({
  "node_modules/@comunica/actor-optimize-query-operation-bgp-to-join/lib/ActorOptimizeQueryOperationBgpToJoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationBgpToJoin = void 0;
    var bus_optimize_query_operation_1 = require_lib15();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationBgpToJoin = class extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      async test(action) {
        return true;
      }
      async run(action) {
        const operation = sparqlalgebrajs_1.Util.mapOperation(action.operation, {
          bgp(op, factory3) {
            return {
              recurse: false,
              result: factory3.createJoin(op.patterns)
            };
          }
        });
        return { operation, context: action.context };
      }
    };
    exports.ActorOptimizeQueryOperationBgpToJoin = ActorOptimizeQueryOperationBgpToJoin;
  }
});

// node_modules/@comunica/actor-optimize-query-operation-bgp-to-join/lib/index.js
var require_lib17 = __commonJS({
  "node_modules/@comunica/actor-optimize-query-operation-bgp-to-join/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationBgpToJoin(), exports);
  }
});

// node_modules/@comunica/actor-optimize-query-operation-join-connected/lib/ActorOptimizeQueryOperationJoinConnected.js
var require_ActorOptimizeQueryOperationJoinConnected = __commonJS({
  "node_modules/@comunica/actor-optimize-query-operation-join-connected/lib/ActorOptimizeQueryOperationJoinConnected.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorOptimizeQueryOperationJoinConnected = void 0;
    var bus_optimize_query_operation_1 = require_lib15();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorOptimizeQueryOperationJoinConnected = class _ActorOptimizeQueryOperationJoinConnected extends bus_optimize_query_operation_1.ActorOptimizeQueryOperation {
      async test(action) {
        return true;
      }
      async run(action) {
        const operation = sparqlalgebrajs_1.Util.mapOperation(action.operation, {
          join(op, factory3) {
            return {
              recurse: false,
              result: _ActorOptimizeQueryOperationJoinConnected.cluster(op, factory3)
            };
          }
        });
        return { operation, context: action.context };
      }
      /**
       * Iteratively cluster join entries based on their overlapping variables.
       * @param op A join operation.
       * @param factory An algebra factory.
       */
      static cluster(op, factory3) {
        const initialClusters = op.input.map((subOp) => ({
          inScopeVariables: Object.fromEntries(sparqlalgebrajs_1.Util.inScopeVariables(subOp).map((variable) => [variable.value, true])),
          entries: [subOp]
        }));
        let oldClusters;
        let newClusters = initialClusters;
        do {
          oldClusters = newClusters;
          newClusters = _ActorOptimizeQueryOperationJoinConnected.clusterIteration(oldClusters);
        } while (oldClusters.length !== newClusters.length);
        const subJoins = newClusters.map((cluster) => factory3.createJoin(cluster.entries));
        return subJoins.length === 1 ? subJoins[0] : factory3.createJoin(subJoins, false);
      }
      /**
       * Perform a single clustering iteration.
       * Clusters will be joined if they have overlapping variables.
       * @param oldCluster
       */
      static clusterIteration(oldCluster) {
        const newClusters = [];
        for (const entry of oldCluster) {
          let joined = false;
          for (const newEntry of newClusters) {
            if (_ActorOptimizeQueryOperationJoinConnected.haveOverlappingVariables(entry.inScopeVariables, newEntry.inScopeVariables)) {
              newEntry.entries = [...newEntry.entries, ...entry.entries];
              newEntry.inScopeVariables = { ...newEntry.inScopeVariables, ...entry.inScopeVariables };
              joined = true;
              break;
            }
          }
          if (!joined) {
            newClusters.push({
              inScopeVariables: entry.inScopeVariables,
              entries: entry.entries
            });
          }
        }
        return newClusters;
      }
      /**
       * Check if the two given variable objects are overlapping.
       * @param variablesA A variables objects.
       * @param variablesB A variables objects.
       */
      static haveOverlappingVariables(variablesA, variablesB) {
        for (const variableA of Object.keys(variablesA)) {
          if (variablesB[variableA]) {
            return true;
          }
        }
        return false;
      }
    };
    exports.ActorOptimizeQueryOperationJoinConnected = ActorOptimizeQueryOperationJoinConnected;
  }
});

// node_modules/@comunica/actor-optimize-query-operation-join-connected/lib/index.js
var require_lib18 = __commonJS({
  "node_modules/@comunica/actor-optimize-query-operation-join-connected/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorOptimizeQueryOperationJoinConnected(), exports);
  }
});

// node_modules/@comunica/bus-query-parse/lib/ActorQueryParse.js
var require_ActorQueryParse = __commonJS({
  "node_modules/@comunica/bus-query-parse/lib/ActorQueryParse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryParse = void 0;
    var core_1 = require_lib2();
    var ActorQueryParse = class extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorQueryParse = ActorQueryParse;
  }
});

// node_modules/@comunica/bus-query-parse/lib/index.js
var require_lib19 = __commonJS({
  "node_modules/@comunica/bus-query-parse/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryParse(), exports);
  }
});

// node_modules/@comunica/actor-query-parse-sparql/lib/ActorQueryParseSparql.js
var require_ActorQueryParseSparql = __commonJS({
  "node_modules/@comunica/actor-query-parse-sparql/lib/ActorQueryParseSparql.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryParseSparql = void 0;
    var bus_query_parse_1 = require_lib19();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var sparqljs_1 = require_sparql();
    var ActorQueryParseSparql = class extends bus_query_parse_1.ActorQueryParse {
      constructor(args) {
        super(args);
        this.prefixes = Object.freeze(this.prefixes);
      }
      async test(action) {
        if (action.queryFormat && action.queryFormat.language !== "sparql") {
          throw new Error("This actor can only parse SPARQL queries");
        }
        return true;
      }
      async run(action) {
        const parser = new sparqljs_1.Parser({ prefixes: this.prefixes, baseIRI: action.baseIRI, sparqlStar: true });
        const parsedSyntax = parser.parse(action.query);
        const baseIRI = parsedSyntax.type === "query" ? parsedSyntax.base : void 0;
        return {
          baseIRI,
          operation: (0, sparqlalgebrajs_1.translate)(parsedSyntax, { quads: true, prefixes: this.prefixes, blankToVariable: true, baseIRI: action.baseIRI })
        };
      }
    };
    exports.ActorQueryParseSparql = ActorQueryParseSparql;
  }
});

// node_modules/@comunica/actor-query-parse-sparql/lib/index.js
var require_lib20 = __commonJS({
  "node_modules/@comunica/actor-query-parse-sparql/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryParseSparql(), exports);
  }
});

// node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerAdapter.js
var require_DirectiveNodeHandlerAdapter = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DirectiveNodeHandlerAdapter = void 0;
    var DirectiveNodeHandlerAdapter = class {
      constructor(targetKind, util, settings) {
        this.targetKind = targetKind;
        this.util = util;
        this.settings = settings;
      }
      /**
       * Get the value of the 'if' argument in a directive.
       * @param {DirectiveNode} directive A directive.
       * @param {IConvertContext} convertContext A convert context.
       * @return {Term} The term.
       */
      getDirectiveConditionalValue(directive, convertContext) {
        const arg = this.util.getArgument(directive.arguments, "if");
        if (!arg) {
          throw new Error(`The directive ${directive.name.value} is missing an if-argument.`);
        }
        const subValue = this.util.handleNodeValue(arg.value, arg.name.value, convertContext);
        if (subValue.terms.length !== 1) {
          throw new Error(`Can not apply the directive ${directive.name.value} with a list.`);
        }
        return subValue.terms[0];
      }
      /**
       * If a `scope: all` directive param is present.
       * @param {DirectiveNode} directive A directive.
       * @return {boolean} If `scope: all` is present.
       */
      isDirectiveScopeAll(directive) {
        const scopeArg = this.util.getArgument(directive.arguments, "scope");
        return scopeArg && scopeArg.value.kind === "EnumValue" && scopeArg.value.value === "all";
      }
    };
    exports.DirectiveNodeHandlerAdapter = DirectiveNodeHandlerAdapter;
  }
});

// node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerInclude.js
var require_DirectiveNodeHandlerInclude = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerInclude.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DirectiveNodeHandlerInclude = void 0;
    var DirectiveNodeHandlerAdapter_1 = require_DirectiveNodeHandlerAdapter();
    var DirectiveNodeHandlerInclude = class extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {
      constructor(util, settings) {
        super("include", util, settings);
      }
      handle(directiveContext, convertContext) {
        const val = this.getDirectiveConditionalValue(directiveContext.directive, convertContext);
        if (val.termType === "Literal" && val.value === "false") {
          return { ignore: true };
        }
        return {};
      }
    };
    exports.DirectiveNodeHandlerInclude = DirectiveNodeHandlerInclude;
  }
});

// node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerOptional.js
var require_DirectiveNodeHandlerOptional = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerOptional.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DirectiveNodeHandlerOptional = void 0;
    var DirectiveNodeHandlerAdapter_1 = require_DirectiveNodeHandlerAdapter();
    var DirectiveNodeHandlerOptional = class extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {
      constructor(util, settings) {
        super("optional", util, settings);
      }
      handle(directiveContext, convertContext) {
        return {
          operationOverrider: (operation) => this.util.operationFactory.createLeftJoin(this.util.operationFactory.createBgp([]), operation)
        };
      }
    };
    exports.DirectiveNodeHandlerOptional = DirectiveNodeHandlerOptional;
  }
});

// node_modules/graphql-to-sparql/lib/IConvertContext.js
var require_IConvertContext = __commonJS({
  "node_modules/graphql-to-sparql/lib/IConvertContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SingularizeState = void 0;
    var SingularizeState;
    (function(SingularizeState2) {
      SingularizeState2[SingularizeState2["SINGLE"] = 0] = "SINGLE";
      SingularizeState2[SingularizeState2["PLURAL"] = 1] = "PLURAL";
    })(SingularizeState = exports.SingularizeState || (exports.SingularizeState = {}));
  }
});

// node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerPlural.js
var require_DirectiveNodeHandlerPlural = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerPlural.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DirectiveNodeHandlerPlural = void 0;
    var IConvertContext_1 = require_IConvertContext();
    var DirectiveNodeHandlerAdapter_1 = require_DirectiveNodeHandlerAdapter();
    var DirectiveNodeHandlerPlural = class extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {
      constructor(util, settings) {
        super("plural", util, settings);
      }
      handle(directiveContext, convertContext) {
        if (this.isDirectiveScopeAll(directiveContext.directive)) {
          convertContext.singularizeState = IConvertContext_1.SingularizeState.PLURAL;
        }
        delete convertContext.singularizeVariables[this.util.nameToVariable(directiveContext.fieldLabel, convertContext).value];
        return {};
      }
    };
    exports.DirectiveNodeHandlerPlural = DirectiveNodeHandlerPlural;
  }
});

// node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerSingle.js
var require_DirectiveNodeHandlerSingle = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerSingle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DirectiveNodeHandlerSingle = void 0;
    var IConvertContext_1 = require_IConvertContext();
    var DirectiveNodeHandlerAdapter_1 = require_DirectiveNodeHandlerAdapter();
    var DirectiveNodeHandlerSingle = class extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {
      constructor(util, settings) {
        super("single", util, settings);
      }
      handle(directiveContext, convertContext) {
        if (this.isDirectiveScopeAll(directiveContext.directive)) {
          convertContext.singularizeState = IConvertContext_1.SingularizeState.SINGLE;
        }
        convertContext.singularizeVariables[this.util.nameToVariable(directiveContext.fieldLabel, convertContext).value] = true;
        return {};
      }
    };
    exports.DirectiveNodeHandlerSingle = DirectiveNodeHandlerSingle;
  }
});

// node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerSkip.js
var require_DirectiveNodeHandlerSkip = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/directivenode/DirectiveNodeHandlerSkip.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DirectiveNodeHandlerSkip = void 0;
    var DirectiveNodeHandlerAdapter_1 = require_DirectiveNodeHandlerAdapter();
    var DirectiveNodeHandlerSkip = class extends DirectiveNodeHandlerAdapter_1.DirectiveNodeHandlerAdapter {
      constructor(util, settings) {
        super("skip", util, settings);
      }
      handle(directiveContext, convertContext) {
        const val = this.getDirectiveConditionalValue(directiveContext.directive, convertContext);
        if (val.termType === "Literal" && val.value === "true") {
          return { ignore: true };
        }
        return {};
      }
    };
    exports.DirectiveNodeHandlerSkip = DirectiveNodeHandlerSkip;
  }
});

// node_modules/graphql-to-sparql/lib/handler/directivenode/index.js
var require_directivenode = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/directivenode/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_DirectiveNodeHandlerAdapter(), exports);
    __exportStar(require_DirectiveNodeHandlerInclude(), exports);
    __exportStar(require_DirectiveNodeHandlerOptional(), exports);
    __exportStar(require_DirectiveNodeHandlerPlural(), exports);
    __exportStar(require_DirectiveNodeHandlerSingle(), exports);
    __exportStar(require_DirectiveNodeHandlerSkip(), exports);
  }
});

// node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerAdapter.js
var require_NodeValueHandlerAdapter = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerAdapter = void 0;
    var NodeValueHandlerAdapter = class {
      constructor(targetKind, util, settings) {
        this.targetKind = targetKind;
        this.util = util;
        this.settings = settings;
      }
    };
    exports.NodeValueHandlerAdapter = NodeValueHandlerAdapter;
  }
});

// node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerBoolean.js
var require_NodeValueHandlerBoolean = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerBoolean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerBoolean = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerBoolean = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("BooleanValue", util, settings);
        this.datatype = this.util.dataFactory.namedNode("http://www.w3.org/2001/XMLSchema#boolean");
      }
      handle(valueNode, fieldName, convertContext) {
        return { terms: [this.util.dataFactory.literal(valueNode.value ? "true" : "false", this.datatype)] };
      }
    };
    exports.NodeValueHandlerBoolean = NodeValueHandlerBoolean;
  }
});

// node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerEnum.js
var require_NodeValueHandlerEnum = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerEnum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerEnum = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerEnum = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("EnumValue", util, settings);
      }
      handle(valueNode, fieldName, convertContext) {
        return { terms: [this.util.valueToNamedNode(valueNode.value, convertContext.context)] };
      }
    };
    exports.NodeValueHandlerEnum = NodeValueHandlerEnum;
  }
});

// node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerFloat.js
var require_NodeValueHandlerFloat = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerFloat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerFloat = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerFloat = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("FloatValue", util, settings);
        this.datatype = this.util.dataFactory.namedNode("http://www.w3.org/2001/XMLSchema#float");
      }
      handle(valueNode, fieldName, convertContext) {
        return { terms: [this.util.dataFactory.literal(valueNode.value, this.datatype)] };
      }
    };
    exports.NodeValueHandlerFloat = NodeValueHandlerFloat;
  }
});

// node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerInt.js
var require_NodeValueHandlerInt = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerInt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerInt = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerInt = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("IntValue", util, settings);
        this.datatype = this.util.dataFactory.namedNode("http://www.w3.org/2001/XMLSchema#integer");
      }
      handle(valueNode, fieldName, convertContext) {
        return { terms: [this.util.dataFactory.literal(valueNode.value, this.datatype)] };
      }
    };
    exports.NodeValueHandlerInt = NodeValueHandlerInt;
  }
});

// node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerList.js
var require_NodeValueHandlerList = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerList = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerList = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("ListValue", util, settings);
        this.nodeFirst = this.util.dataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#first");
        this.nodeRest = this.util.dataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#rest");
        this.nodeNil = this.util.dataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil");
      }
      handle(valueNode, fieldName, convertContext) {
        const listTerms = [];
        let auxiliaryPatterns = [];
        for (const v of valueNode.values) {
          const subValue = this.util.handleNodeValue(v, fieldName, convertContext);
          for (const term of subValue.terms) {
            listTerms.push(term);
          }
          if (subValue.auxiliaryPatterns) {
            auxiliaryPatterns = auxiliaryPatterns.concat(subValue.auxiliaryPatterns);
          }
        }
        if (this.settings.arraysToRdfLists) {
          const firstListNode = this.util.dataFactory.blankNode();
          let listNode = firstListNode;
          let remaining = listTerms.length;
          for (const term of listTerms) {
            auxiliaryPatterns.push(this.util.operationFactory.createPattern(listNode, this.nodeFirst, term, convertContext.graph));
            const nextListNode = --remaining === 0 ? this.nodeNil : this.util.dataFactory.blankNode();
            auxiliaryPatterns.push(this.util.operationFactory.createPattern(listNode, this.nodeRest, nextListNode, convertContext.graph));
            listNode = nextListNode;
          }
          return { terms: [firstListNode], auxiliaryPatterns };
        } else {
          return { terms: listTerms, auxiliaryPatterns };
        }
      }
    };
    exports.NodeValueHandlerList = NodeValueHandlerList;
  }
});

// node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerNull.js
var require_NodeValueHandlerNull = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerNull.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerNull = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerNull = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("NullValue", util, settings);
        this.nil = this.util.dataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil");
      }
      handle(valueNode, fieldName, convertContext) {
        return { terms: [this.nil] };
      }
    };
    exports.NodeValueHandlerNull = NodeValueHandlerNull;
  }
});

// node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerObject.js
var require_NodeValueHandlerObject = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerObject = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerObject = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("ObjectValue", util, settings);
      }
      handle(valueNode, fieldName, convertContext) {
        const subject = this.util.dataFactory.blankNode();
        let auxiliaryObjectPatterns = [];
        for (const field of valueNode.fields) {
          const subValue = this.util.handleNodeValue(field.value, fieldName, convertContext);
          for (const term of subValue.terms) {
            auxiliaryObjectPatterns.push(this.util.createQuadPattern(subject, field.name, term, convertContext.graph, convertContext.context));
          }
          if (subValue.auxiliaryPatterns) {
            auxiliaryObjectPatterns = auxiliaryObjectPatterns.concat(subValue.auxiliaryPatterns);
          }
        }
        return { terms: [subject], auxiliaryPatterns: auxiliaryObjectPatterns };
      }
    };
    exports.NodeValueHandlerObject = NodeValueHandlerObject;
  }
});

// node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerString.js
var require_NodeValueHandlerString = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerString = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerString = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("StringValue", util, settings);
      }
      handle(valueNode, fieldName, convertContext) {
        const contextEntry = convertContext.context.getContextRaw()[fieldName];
        let language;
        let datatype;
        if (contextEntry && typeof contextEntry !== "string") {
          if (contextEntry["@language"]) {
            language = contextEntry["@language"];
          } else if (contextEntry["@type"]) {
            datatype = this.util.dataFactory.namedNode(contextEntry["@type"]);
          }
        }
        return { terms: [this.util.dataFactory.literal(valueNode.value, language || datatype)] };
      }
    };
    exports.NodeValueHandlerString = NodeValueHandlerString;
  }
});

// node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerVariable.js
var require_NodeValueHandlerVariable = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/valuenode/NodeValueHandlerVariable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeValueHandlerVariable = void 0;
    var NodeValueHandlerAdapter_1 = require_NodeValueHandlerAdapter();
    var NodeValueHandlerVariable = class extends NodeValueHandlerAdapter_1.NodeValueHandlerAdapter {
      constructor(util, settings) {
        super("Variable", util, settings);
      }
      handle(valueNode, fieldName, convertContext) {
        const id = valueNode.name.value;
        const value = convertContext.variablesDict[id];
        const meta = convertContext.variablesMetaDict[id];
        if (!value) {
          if (!convertContext.ignoreUnknownVariables && (!meta || meta.mandatory)) {
            throw new Error(`Undefined variable: ${id}`);
          } else {
            const variable = this.util.dataFactory.variable(id);
            if (convertContext.terminalVariables.map((v) => v.value).indexOf(id) < 0) {
              convertContext.terminalVariables.push(variable);
            }
            return { terms: [variable] };
          }
        }
        if (value.kind === "Variable") {
          throw new Error(`Variable refers to another variable: ${id}`);
        }
        if (meta) {
          if (meta.list) {
            if (value.kind !== "ListValue") {
              throw new Error(`Expected a list, but got ${value.kind} for ${id}`);
            }
            if (meta.type) {
              const listValue = value;
              for (const v of listValue.values) {
                if (v.kind !== meta.type) {
                  throw new Error(`Expected ${meta.type}, but got ${v.kind} for ${id}`);
                }
              }
            }
          } else if (meta.type) {
          }
        }
        return this.util.handleNodeValue(value, fieldName, convertContext);
      }
    };
    exports.NodeValueHandlerVariable = NodeValueHandlerVariable;
  }
});

// node_modules/graphql-to-sparql/lib/handler/valuenode/index.js
var require_valuenode = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/valuenode/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_NodeValueHandlerAdapter(), exports);
    __exportStar(require_NodeValueHandlerBoolean(), exports);
    __exportStar(require_NodeValueHandlerEnum(), exports);
    __exportStar(require_NodeValueHandlerFloat(), exports);
    __exportStar(require_NodeValueHandlerInt(), exports);
    __exportStar(require_NodeValueHandlerList(), exports);
    __exportStar(require_NodeValueHandlerNull(), exports);
    __exportStar(require_NodeValueHandlerObject(), exports);
    __exportStar(require_NodeValueHandlerString(), exports);
    __exportStar(require_NodeValueHandlerVariable(), exports);
  }
});

// node_modules/graphql-to-sparql/lib/handler/NodeHandlerAdapter.js
var require_NodeHandlerAdapter = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/NodeHandlerAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerAdapter = void 0;
    var NodeHandlerAdapter = class {
      constructor(targetKind, util, settings) {
        this.targetKind = targetKind;
        this.util = util;
        this.settings = settings;
      }
      /* ----- Node quad context ----- */
      /**
       * Get the quad context of a selection set node that should be used for the whole definition node.
       *
       * This is a pre-processing step of selection sets.
       * Its only purpose is to determine the subject within a selection set,
       * because this subject is needed to link with its parent.
       * In a later phase, the selection set will be processed using the discovered subject,
       * and the field identifying the subject will be ignored.
       *
       * @param {SelectionSetNode} selectionSet A selection set node.
       * @param {string} fieldLabel A field label.
       * @param {IConvertContext} convertContext A convert context.
       * @return {INodeQuadContext} The subject, graph and auxiliary patterns.
       */
      getNodeQuadContextSelectionSet(selectionSet, fieldLabel, convertContext) {
        const nodeQuadContext = {};
        if (selectionSet) {
          for (const selectionNode of selectionSet.selections) {
            if (selectionNode.kind === "Field") {
              const fieldNode = selectionNode;
              this.handleNodeQuadContextField(fieldNode, convertContext, nodeQuadContext, "id", "subject");
              this.handleNodeQuadContextField(fieldNode, convertContext, nodeQuadContext, "graph", "graph");
            }
          }
        }
        return nodeQuadContext;
      }
      /**
       * Handles a single field for determining the node quad context.
       * @param {FieldNode} fieldNode A field node.
       * @param {IConvertContext} convertContext A convert context.
       * @param {INodeQuadContext} nodeQuadContext The node quad context to populate.
       * @param {string} fieldName The field name to check for.
       * @param {'subject' | 'graph'} nodeQuadContextKey The key to fill into the node quad context.
       */
      handleNodeQuadContextField(fieldNode, convertContext, nodeQuadContext, fieldName, nodeQuadContextKey) {
        if (!nodeQuadContext[nodeQuadContextKey] && fieldNode.name.value === fieldName) {
          if (!nodeQuadContext[nodeQuadContextKey]) {
            const argument = this.util.getArgument(fieldNode.arguments, "_");
            if (argument) {
              const valueOutput = this.util.handleNodeValue(argument.value, fieldNode.name.value, convertContext);
              if (valueOutput.terms.length !== 1) {
                throw new Error(`Only single values can be set as ${fieldName}, but got ${valueOutput.terms.length} at ${fieldNode.name.value}`);
              }
              nodeQuadContext[nodeQuadContextKey] = valueOutput.terms[0];
              if (valueOutput.auxiliaryPatterns) {
                if (!nodeQuadContext.auxiliaryPatterns) {
                  nodeQuadContext.auxiliaryPatterns = [];
                }
                nodeQuadContext.auxiliaryPatterns.concat(valueOutput.auxiliaryPatterns);
              }
            }
          }
          if (!nodeQuadContext[nodeQuadContextKey]) {
            const term = this.util.nameToVariable(this.util.getFieldLabel(fieldNode), convertContext);
            convertContext.terminalVariables.push(term);
            nodeQuadContext[nodeQuadContextKey] = term;
          }
        }
      }
      /* ----- Directives ----- */
      /**
       * Get an operation override defined by one of the directives.
       *
       * This should be called before a sub-operation is handled.
       *
       * @param {ReadonlyArray<DirectiveNode>} directives An option directives array.
       * @param {string} fieldLabel The current field label.
       * @param {IConvertContext} convertContext A convert context.
       * @return {IDirectiveNodeHandlerOutput[]} The directive node handler outputs, or null if it should be ignored.
       */
      getDirectiveOutputs(directives, fieldLabel, convertContext) {
        const outputs = [];
        if (directives) {
          for (const directive of directives) {
            const output = this.util.handleDirectiveNode({ directive, fieldLabel }, convertContext);
            if (output) {
              if (output.ignore) {
                return null;
              }
              outputs.push(output);
            }
          }
        }
        return outputs;
      }
      /**
       * Handle the directive outputs with respect to an operation.
       *
       * This should be called after a sub-operation was handled.
       *
       * @param {IDirectiveNodeHandlerOutput[]} directiveOutputs
       * @param {Operation} operation
       * @return {Operation}
       */
      handleDirectiveOutputs(directiveOutputs, operation) {
        for (const directiveOutput of directiveOutputs) {
          if (directiveOutput.ignore) {
            return this.util.operationFactory.createBgp([]);
          }
          if (directiveOutput.operationOverrider) {
            operation = directiveOutput.operationOverrider(operation);
          }
        }
        return operation;
      }
    };
    exports.NodeHandlerAdapter = NodeHandlerAdapter;
  }
});

// node_modules/graphql-to-sparql/lib/handler/NodeHandlerDefinitionAdapter.js
var require_NodeHandlerDefinitionAdapter = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/NodeHandlerDefinitionAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerDefinitionAdapter = void 0;
    var NodeHandlerAdapter_1 = require_NodeHandlerAdapter();
    var NodeHandlerDefinitionAdapter = class extends NodeHandlerAdapter_1.NodeHandlerAdapter {
      constructor(targetKind, util, settings) {
        super(targetKind, util, settings);
      }
    };
    exports.NodeHandlerDefinitionAdapter = NodeHandlerDefinitionAdapter;
  }
});

// node_modules/graphql-to-sparql/lib/handler/NodeHandlerDefinitionFragment.js
var require_NodeHandlerDefinitionFragment = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/NodeHandlerDefinitionFragment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerDefinitionFragment = void 0;
    var NodeHandlerDefinitionAdapter_1 = require_NodeHandlerDefinitionAdapter();
    var NodeHandlerDefinitionFragment = class extends NodeHandlerDefinitionAdapter_1.NodeHandlerDefinitionAdapter {
      constructor(util, settings) {
        super("FragmentDefinition", util, settings);
      }
      handle(operationDefinition, convertContext) {
        throw new Error("Illegal state: fragment definitions must be indexed and removed before processing");
      }
    };
    exports.NodeHandlerDefinitionFragment = NodeHandlerDefinitionFragment;
  }
});

// node_modules/graphql-to-sparql/lib/handler/NodeHandlerDefinitionOperation.js
var require_NodeHandlerDefinitionOperation = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/NodeHandlerDefinitionOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerDefinitionOperation = void 0;
    var NodeHandlerDefinitionAdapter_1 = require_NodeHandlerDefinitionAdapter();
    var NodeHandlerDefinitionOperation = class extends NodeHandlerDefinitionAdapter_1.NodeHandlerDefinitionAdapter {
      constructor(util, settings) {
        super("OperationDefinition", util, settings);
      }
      handle(operationDefinition, convertContext) {
        if (operationDefinition.operation !== "query") {
          throw new Error("Unsupported definition operation: " + operationDefinition.operation);
        }
        if (operationDefinition.variableDefinitions) {
          for (const variableDefinition of operationDefinition.variableDefinitions) {
            const name = variableDefinition.variable.name.value;
            if (variableDefinition.defaultValue) {
              if (!convertContext.variablesDict[name]) {
                convertContext.variablesDict[name] = variableDefinition.defaultValue;
              }
            }
            let typeNode = variableDefinition.type;
            const mandatory = typeNode.kind === "NonNullType";
            if (mandatory) {
              typeNode = typeNode.type;
            }
            const list = typeNode.kind === "ListType";
            if (list) {
              typeNode = typeNode.type;
            }
            const type = typeNode.name.value;
            convertContext.variablesMetaDict[name] = { mandatory, list, type };
          }
        }
        const directiveOutputs = this.getDirectiveOutputs(operationDefinition.directives, operationDefinition.name ? operationDefinition.name.value : "", convertContext);
        if (!directiveOutputs) {
          return this.util.operationFactory.createBgp([]);
        }
        const operation = this.util.joinOperations(operationDefinition.selectionSet.selections.map((selectionNode) => this.util.handleNode(selectionNode, convertContext)));
        return this.handleDirectiveOutputs(directiveOutputs, operation);
      }
    };
    exports.NodeHandlerDefinitionOperation = NodeHandlerDefinitionOperation;
  }
});

// node_modules/graphql-to-sparql/lib/handler/NodeHandlerDocument.js
var require_NodeHandlerDocument = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/NodeHandlerDocument.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerDocument = void 0;
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var NodeHandlerAdapter_1 = require_NodeHandlerAdapter();
    var NodeHandlerDocument = class extends NodeHandlerAdapter_1.NodeHandlerAdapter {
      constructor(util, settings) {
        super("Document", util, settings);
      }
      handle(document2, convertContext) {
        const definitionOperations = document2.definitions.map((definition) => {
          const subjectOutput = this.getNodeQuadContextDefinitionNode(definition, Object.assign(Object.assign({}, convertContext), { ignoreUnknownVariables: true }));
          const queryParseContext = Object.assign(Object.assign({}, convertContext), { graph: subjectOutput.graph || convertContext.graph, subject: subjectOutput.subject || this.util.dataFactory.blankNode() });
          let definitionOperation = this.util.handleNode(definition, queryParseContext);
          if (subjectOutput && subjectOutput.auxiliaryPatterns) {
            definitionOperation = this.util.joinOperations([
              definitionOperation,
              this.util.operationFactory.createBgp(subjectOutput.auxiliaryPatterns)
            ]);
          }
          return definitionOperation;
        });
        const operation = this.util.operationFactory.createProject(definitionOperations.length === 1 ? definitionOperations[0] : this.util.operationFactory.createUnion(definitionOperations), convertContext.terminalVariables);
        return this.translateBlankNodesToVariables(operation);
      }
      /**
       * Get the quad context of a definition node that should be used for the whole definition node.
       * @param {DefinitionNode} definition A definition node.
       * @param {IConvertContext} convertContext A convert context.
       * @return {INodeQuadContext} The subject and optional auxiliary patterns.
       */
      getNodeQuadContextDefinitionNode(definition, convertContext) {
        if (definition.kind === "OperationDefinition") {
          return this.getNodeQuadContextSelectionSet(definition.selectionSet, definition.name ? definition.name.value : "", convertContext);
        }
        throw new Error(`Unsupported definition: ${definition.kind}`);
      }
      /**
       * Translates blank nodes inside the query to variables.
       * @param {Project} operation The operation to translate.
       * @return {Operation} The transformed operation.
       */
      translateBlankNodesToVariables(operation) {
        const self2 = this;
        const blankToVariableMapping = {};
        const variablesRaw = Array.from(operation.variables).reduce((acc, variable) => {
          acc[variable.value] = true;
          return acc;
        }, {});
        return sparqlalgebrajs_1.Util.mapOperation(operation, {
          path: (op, factory3) => {
            return {
              recurse: false,
              result: factory3.createPath(blankToVariable(op.subject), op.predicate, blankToVariable(op.object), blankToVariable(op.graph))
            };
          },
          pattern: (op, factory3) => {
            return {
              recurse: false,
              result: factory3.createPattern(blankToVariable(op.subject), blankToVariable(op.predicate), blankToVariable(op.object), blankToVariable(op.graph))
            };
          }
        });
        function blankToVariable(term) {
          if (term.termType === "BlankNode") {
            let variable = blankToVariableMapping[term.value];
            if (!variable) {
              variable = sparqlalgebrajs_1.Util.createUniqueVariable(term.value, variablesRaw, self2.util.dataFactory);
              variablesRaw[variable.value] = true;
              blankToVariableMapping[term.value] = variable;
            }
            return variable;
          }
          return term;
        }
      }
    };
    exports.NodeHandlerDocument = NodeHandlerDocument;
  }
});

// node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionAdapter.js
var require_NodeHandlerSelectionAdapter = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerSelectionAdapter = void 0;
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var IConvertContext_1 = require_IConvertContext();
    var NodeHandlerAdapter_1 = require_NodeHandlerAdapter();
    var NodeHandlerSelectionAdapter = class extends NodeHandlerAdapter_1.NodeHandlerAdapter {
      constructor(targetKind, util, settings) {
        super(targetKind, util, settings);
      }
      /**
       * Get the quad context of a field node that should be used for the whole definition node.
       * @param {FieldNode} field A field node.
       * @param {string} fieldLabel A field label.
       * @param {IConvertContext} convertContext A convert context.
       * @return {INodeQuadContext} The subject and optional auxiliary patterns.
       */
      getNodeQuadContextFieldNode(field, fieldLabel, convertContext) {
        return this.getNodeQuadContextSelectionSet(field.selectionSet, fieldLabel, Object.assign(Object.assign({}, convertContext), { path: this.util.appendFieldToPath(convertContext.path, fieldLabel) }));
      }
      /**
       * Convert a field node to an operation.
       * @param {IConvertContext} convertContext A convert context.
       * @param {FieldNode} fieldNode The field node to convert.
       * @param {boolean} pushTerminalVariables If terminal variables should be created.
       * @param {Pattern[]} auxiliaryPatterns Optional patterns that should be part of the BGP.
       * @return {Operation} The reslting operation.
       */
      fieldToOperation(convertContext, fieldNode, pushTerminalVariables, auxiliaryPatterns) {
        const nesting = pushTerminalVariables;
        let offset = 0;
        let limit;
        if (fieldNode.name.value === "id" || fieldNode.name.value === "graph") {
          pushTerminalVariables = false;
          if (fieldNode.arguments) {
            for (const argument of fieldNode.arguments) {
              if (argument.name.value === "_") {
                this.util.handleNodeValue(argument.value, fieldNode.name.value, convertContext);
              }
            }
          }
        }
        const fieldLabel = this.util.getFieldLabel(fieldNode);
        if (convertContext.singularizeState === IConvertContext_1.SingularizeState.SINGLE) {
          convertContext.singularizeVariables[this.util.nameToVariable(fieldLabel, convertContext).value] = true;
        }
        if (pushTerminalVariables) {
          const operationOverride = this.handleMetaField(convertContext, fieldLabel, auxiliaryPatterns);
          if (operationOverride) {
            return operationOverride;
          }
        }
        const operations = auxiliaryPatterns ? [this.util.operationFactory.createBgp(auxiliaryPatterns)] : [];
        const subjectOutput = this.getNodeQuadContextFieldNode(fieldNode, fieldLabel, convertContext);
        let object = subjectOutput.subject || this.util.nameToVariable(fieldLabel, convertContext);
        let graph = subjectOutput.graph || convertContext.graph;
        if (subjectOutput.auxiliaryPatterns) {
          operations.push(this.util.operationFactory.createBgp(subjectOutput.auxiliaryPatterns));
        }
        let createQuadPattern = true;
        let overrideObjectTerms = null;
        if (pushTerminalVariables && fieldNode.arguments && fieldNode.arguments.length) {
          for (const argument of fieldNode.arguments) {
            if (argument.name.value === "_") {
              const valueOutput = this.util.handleNodeValue(argument.value, fieldNode.name.value, convertContext);
              overrideObjectTerms = valueOutput.terms;
              operations.push(this.util.operationFactory.createBgp(valueOutput.terms.map((term) => this.util.createQuadPattern(convertContext.subject, fieldNode.name, term, convertContext.graph, convertContext.context))));
              if (valueOutput.auxiliaryPatterns) {
                operations.push(this.util.operationFactory.createBgp(valueOutput.auxiliaryPatterns));
              }
              pushTerminalVariables = false;
              break;
            } else if (argument.name.value === "graph") {
              const valueOutput = this.util.handleNodeValue(argument.value, fieldNode.name.value, convertContext);
              if (valueOutput.terms.length !== 1) {
                throw new Error(`Only single values can be set as graph, but got ${valueOutput.terms.length} at ${fieldNode.name.value}`);
              }
              graph = valueOutput.terms[0];
              convertContext = Object.assign(Object.assign({}, convertContext), { graph });
              if (valueOutput.auxiliaryPatterns) {
                operations.push(this.util.operationFactory.createBgp(valueOutput.auxiliaryPatterns));
              }
              break;
            } else if (argument.name.value === "alt") {
              let pathValue = argument.value;
              if (pathValue.kind !== "ListValue") {
                pathValue = { kind: "ListValue", values: [pathValue] };
              }
              operations.push(this.util.createQuadPath(convertContext.subject, fieldNode.name, pathValue, object, convertContext.graph, convertContext.context));
              createQuadPattern = false;
              break;
            }
          }
        }
        if (pushTerminalVariables && createQuadPattern) {
          operations.push(this.util.operationFactory.createBgp([
            this.util.createQuadPattern(convertContext.subject, fieldNode.name, object, convertContext.graph, convertContext.context)
          ]));
        }
        if (fieldNode.arguments && fieldNode.arguments.length) {
          for (const argument of fieldNode.arguments) {
            if (argument.name.value === "_" || argument.name.value === "graph" || argument.name.value === "alt") {
            } else if (argument.name.value === "first") {
              if (argument.value.kind !== "IntValue") {
                throw new Error("Invalid value type for 'first' argument: " + argument.value.kind);
              }
              limit = parseInt(argument.value.value, 10);
            } else if (argument.name.value === "offset") {
              if (argument.value.kind !== "IntValue") {
                throw new Error("Invalid value type for 'offset' argument: " + argument.value.kind);
              }
              offset = parseInt(argument.value.value, 10);
            } else {
              const valueOutput = this.util.handleNodeValue(argument.value, argument.name.value, convertContext);
              operations.push(this.util.operationFactory.createBgp(valueOutput.terms.map((term) => this.util.createQuadPattern(object, argument.name, term, convertContext.graph, convertContext.context))));
              if (valueOutput.auxiliaryPatterns) {
                operations.push(this.util.operationFactory.createBgp(valueOutput.auxiliaryPatterns));
              }
            }
          }
        }
        const directiveOutputs = this.getDirectiveOutputs(fieldNode.directives, fieldLabel, convertContext);
        if (!directiveOutputs) {
          return this.util.operationFactory.createBgp([]);
        }
        let operation = this.util.joinOperations(operations);
        if (fieldNode.selectionSet && fieldNode.selectionSet.selections.length) {
          if (overrideObjectTerms) {
            if (overrideObjectTerms.length !== 1) {
              throw new Error(`Only single values can be set as id, but got ${overrideObjectTerms.length} at ${fieldNode.name.value}`);
            }
            object = overrideObjectTerms[0];
          }
          const subConvertContext = Object.assign(Object.assign(Object.assign({}, convertContext), nesting ? { path: this.util.appendFieldToPath(convertContext.path, fieldLabel) } : {}), { graph, subject: nesting ? object : convertContext.subject });
          let totalCount = false;
          const selections = fieldNode.selectionSet.selections.filter((selection) => {
            if (selection.kind === "Field" && selection.name.value === "totalCount") {
              totalCount = true;
              return false;
            }
            return true;
          });
          let joinedOperation = this.util.joinOperations(operations.concat(selections.map((selectionNode) => this.util.handleNode(selectionNode, subConvertContext))));
          if (totalCount) {
            const expressionVariable = this.util.dataFactory.variable("var" + this.settings.expressionVariableCounter++);
            const countOverVariable = this.util.dataFactory.variable(object.value + this.settings.variableDelimiter + "totalCount");
            const aggregator = this.util.operationFactory.createBoundAggregate(expressionVariable, "count", this.util.operationFactory.createTermExpression(object), false);
            const countProject = this.util.operationFactory.createProject(this.util.operationFactory.createExtend(this.util.operationFactory.createGroup(operation, [], [aggregator]), countOverVariable, this.util.operationFactory.createTermExpression(expressionVariable)), [countOverVariable]);
            convertContext.terminalVariables.push(countOverVariable);
            if (!selections.length) {
              joinedOperation = countProject;
            } else {
              joinedOperation = this.util.operationFactory.createJoin([
                this.util.operationFactory.createProject(joinedOperation, []),
                countProject
              ]);
            }
          }
          operation = joinedOperation;
        } else if (pushTerminalVariables && object.termType === "Variable") {
          convertContext.terminalVariables.push(object);
        }
        if (offset || limit) {
          operation = this.util.operationFactory.createSlice(this.util.operationFactory.createProject(operation, sparqlalgebrajs_1.Util.inScopeVariables(operation)), offset, limit);
        }
        return this.handleDirectiveOutputs(directiveOutputs, operation);
      }
      /**
       * Check if the given node is a meta field, for things like introspection.
       * If so, return a new operation for this, otherwise, null is returned.
       * @param {IConvertContext} convertContext A convert context.
       * @param {Term} subject The subject.
       * @param {string} fieldLabel The field label to convert.
       * @param {Pattern[]} auxiliaryPatterns Optional patterns that should be part of the BGP.
       * @return {Operation} An operation or undefined.
       */
      handleMetaField(convertContext, fieldLabel, auxiliaryPatterns) {
        if (fieldLabel === "__typename") {
          const object = this.util.nameToVariable(fieldLabel, convertContext);
          convertContext.terminalVariables.push(object);
          return this.util.operationFactory.createBgp([
            this.util.operationFactory.createPattern(convertContext.subject, this.util.dataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"), this.util.nameToVariable(fieldLabel, convertContext), convertContext.graph)
          ].concat(auxiliaryPatterns || []));
        }
      }
    };
    exports.NodeHandlerSelectionAdapter = NodeHandlerSelectionAdapter;
  }
});

// node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionField.js
var require_NodeHandlerSelectionField = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionField.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerSelectionField = void 0;
    var NodeHandlerSelectionAdapter_1 = require_NodeHandlerSelectionAdapter();
    var NodeHandlerSelectionField = class extends NodeHandlerSelectionAdapter_1.NodeHandlerSelectionAdapter {
      constructor(util, settings) {
        super("Field", util, settings);
      }
      handle(fieldNode, convertContext) {
        return this.fieldToOperation(convertContext, fieldNode, true);
      }
    };
    exports.NodeHandlerSelectionField = NodeHandlerSelectionField;
  }
});

// node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionFragmentSpread.js
var require_NodeHandlerSelectionFragmentSpread = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionFragmentSpread.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerSelectionFragmentSpread = void 0;
    var NodeHandlerSelectionAdapter_1 = require_NodeHandlerSelectionAdapter();
    var NodeHandlerSelectionFragmentSpread = class extends NodeHandlerSelectionAdapter_1.NodeHandlerSelectionAdapter {
      constructor(util, settings) {
        super("FragmentSpread", util, settings);
      }
      handle(fragmentSpreadNode, convertContext) {
        const fragmentDefinitionNode = convertContext.fragmentDefinitions[fragmentSpreadNode.name.value];
        if (!fragmentDefinitionNode) {
          throw new Error("Undefined fragment definition: " + fragmentSpreadNode.name.value);
        }
        const fieldNode = {
          alias: void 0,
          arguments: void 0,
          directives: fragmentDefinitionNode.directives,
          kind: "Field",
          name: fragmentSpreadNode.name,
          selectionSet: fragmentDefinitionNode.selectionSet
        };
        const auxiliaryPatterns = [
          this.util.newTypePattern(convertContext.subject, fragmentDefinitionNode.typeCondition, convertContext)
        ];
        return this.util.operationFactory.createLeftJoin(this.util.operationFactory.createBgp([]), this.fieldToOperation(convertContext, fieldNode, false, auxiliaryPatterns));
      }
    };
    exports.NodeHandlerSelectionFragmentSpread = NodeHandlerSelectionFragmentSpread;
  }
});

// node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionInlineFragment.js
var require_NodeHandlerSelectionInlineFragment = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/NodeHandlerSelectionInlineFragment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHandlerSelectionInlineFragment = void 0;
    var NodeHandlerSelectionAdapter_1 = require_NodeHandlerSelectionAdapter();
    var NodeHandlerSelectionInlineFragment = class extends NodeHandlerSelectionAdapter_1.NodeHandlerSelectionAdapter {
      constructor(util, settings) {
        super("InlineFragment", util, settings);
      }
      handle(inlineFragmentNode, convertContext) {
        const fieldNode = {
          alias: void 0,
          arguments: void 0,
          directives: inlineFragmentNode.directives,
          kind: "Field",
          name: { kind: "Name", value: convertContext.subject.value },
          selectionSet: inlineFragmentNode.selectionSet
        };
        const auxiliaryPatterns = inlineFragmentNode.typeCondition ? [this.util.newTypePattern(convertContext.subject, inlineFragmentNode.typeCondition, convertContext)] : [];
        return this.util.operationFactory.createLeftJoin(this.util.operationFactory.createBgp([]), this.fieldToOperation(convertContext, fieldNode, false, auxiliaryPatterns));
      }
    };
    exports.NodeHandlerSelectionInlineFragment = NodeHandlerSelectionInlineFragment;
  }
});

// node_modules/graphql-to-sparql/lib/handler/index.js
var require_handler = __commonJS({
  "node_modules/graphql-to-sparql/lib/handler/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_directivenode(), exports);
    __exportStar(require_valuenode(), exports);
    __exportStar(require_NodeHandlerAdapter(), exports);
    __exportStar(require_NodeHandlerDefinitionAdapter(), exports);
    __exportStar(require_NodeHandlerDefinitionFragment(), exports);
    __exportStar(require_NodeHandlerDefinitionOperation(), exports);
    __exportStar(require_NodeHandlerDocument(), exports);
    __exportStar(require_NodeHandlerSelectionAdapter(), exports);
    __exportStar(require_NodeHandlerSelectionField(), exports);
    __exportStar(require_NodeHandlerSelectionFragmentSpread(), exports);
    __exportStar(require_NodeHandlerSelectionInlineFragment(), exports);
  }
});

// node_modules/graphql/polyfills/symbols.js
var require_symbols = __commonJS({
  "node_modules/graphql/polyfills/symbols.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SYMBOL_TO_STRING_TAG = exports.SYMBOL_ASYNC_ITERATOR = exports.SYMBOL_ITERATOR = void 0;
    var SYMBOL_ITERATOR = typeof Symbol === "function" && Symbol.iterator != null ? Symbol.iterator : "@@iterator";
    exports.SYMBOL_ITERATOR = SYMBOL_ITERATOR;
    var SYMBOL_ASYNC_ITERATOR = typeof Symbol === "function" && Symbol.asyncIterator != null ? Symbol.asyncIterator : "@@asyncIterator";
    exports.SYMBOL_ASYNC_ITERATOR = SYMBOL_ASYNC_ITERATOR;
    var SYMBOL_TO_STRING_TAG = typeof Symbol === "function" && Symbol.toStringTag != null ? Symbol.toStringTag : "@@toStringTag";
    exports.SYMBOL_TO_STRING_TAG = SYMBOL_TO_STRING_TAG;
  }
});

// node_modules/graphql/jsutils/nodejsCustomInspectSymbol.js
var require_nodejsCustomInspectSymbol = __commonJS({
  "node_modules/graphql/jsutils/nodejsCustomInspectSymbol.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var nodejsCustomInspectSymbol = typeof Symbol === "function" && typeof Symbol.for === "function" ? Symbol.for("nodejs.util.inspect.custom") : void 0;
    var _default = nodejsCustomInspectSymbol;
    exports.default = _default;
  }
});

// node_modules/graphql/jsutils/inspect.js
var require_inspect = __commonJS({
  "node_modules/graphql/jsutils/inspect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = inspect;
    var _nodejsCustomInspectSymbol = _interopRequireDefault(require_nodejsCustomInspectSymbol());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var MAX_ARRAY_LENGTH = 10;
    var MAX_RECURSIVE_DEPTH = 2;
    function inspect(value) {
      return formatValue(value, []);
    }
    function formatValue(value, seenValues) {
      switch (_typeof(value)) {
        case "string":
          return JSON.stringify(value);
        case "function":
          return value.name ? "[function ".concat(value.name, "]") : "[function]";
        case "object":
          if (value === null) {
            return "null";
          }
          return formatObjectValue(value, seenValues);
        default:
          return String(value);
      }
    }
    function formatObjectValue(value, previouslySeenValues) {
      if (previouslySeenValues.indexOf(value) !== -1) {
        return "[Circular]";
      }
      var seenValues = [].concat(previouslySeenValues, [value]);
      var customInspectFn = getCustomFn(value);
      if (customInspectFn !== void 0) {
        var customValue = customInspectFn.call(value);
        if (customValue !== value) {
          return typeof customValue === "string" ? customValue : formatValue(customValue, seenValues);
        }
      } else if (Array.isArray(value)) {
        return formatArray(value, seenValues);
      }
      return formatObject(value, seenValues);
    }
    function formatObject(object, seenValues) {
      var keys = Object.keys(object);
      if (keys.length === 0) {
        return "{}";
      }
      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return "[" + getObjectTag(object) + "]";
      }
      var properties = keys.map(function(key) {
        var value = formatValue(object[key], seenValues);
        return key + ": " + value;
      });
      return "{ " + properties.join(", ") + " }";
    }
    function formatArray(array, seenValues) {
      if (array.length === 0) {
        return "[]";
      }
      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return "[Array]";
      }
      var len = Math.min(MAX_ARRAY_LENGTH, array.length);
      var remaining = array.length - len;
      var items = [];
      for (var i2 = 0; i2 < len; ++i2) {
        items.push(formatValue(array[i2], seenValues));
      }
      if (remaining === 1) {
        items.push("... 1 more item");
      } else if (remaining > 1) {
        items.push("... ".concat(remaining, " more items"));
      }
      return "[" + items.join(", ") + "]";
    }
    function getCustomFn(object) {
      var customInspectFn = object[String(_nodejsCustomInspectSymbol.default)];
      if (typeof customInspectFn === "function") {
        return customInspectFn;
      }
      if (typeof object.inspect === "function") {
        return object.inspect;
      }
    }
    function getObjectTag(object) {
      var tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
      if (tag === "Object" && typeof object.constructor === "function") {
        var name = object.constructor.name;
        if (typeof name === "string" && name !== "") {
          return name;
        }
      }
      return tag;
    }
  }
});

// node_modules/graphql/jsutils/devAssert.js
var require_devAssert = __commonJS({
  "node_modules/graphql/jsutils/devAssert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = devAssert;
    function devAssert(condition, message) {
      var booleanCondition = Boolean(condition);
      if (!booleanCondition) {
        throw new Error(message);
      }
    }
  }
});

// node_modules/graphql/jsutils/instanceOf.js
var require_instanceOf = __commonJS({
  "node_modules/graphql/jsutils/instanceOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _inspect = _interopRequireDefault(require_inspect());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var _default = false ? (
      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
      // eslint-disable-next-line no-shadow
      function instanceOf(value, constructor) {
        return value instanceof constructor;
      }
    ) : (
      // eslint-disable-next-line no-shadow
      function instanceOf(value, constructor) {
        if (value instanceof constructor) {
          return true;
        }
        if (_typeof(value) === "object" && value !== null) {
          var _value$constructor;
          var className = constructor.prototype[Symbol.toStringTag];
          var valueClassName = (
            // We still need to support constructor's name to detect conflicts with older versions of this library.
            Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name
          );
          if (className === valueClassName) {
            var stringifiedValue = (0, _inspect.default)(value);
            throw new Error("Cannot use ".concat(className, ' "').concat(stringifiedValue, '" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.'));
          }
        }
        return false;
      }
    );
    exports.default = _default;
  }
});

// node_modules/graphql/language/source.js
var require_source = __commonJS({
  "node_modules/graphql/language/source.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isSource = isSource;
    exports.Source = void 0;
    var _symbols = require_symbols();
    var _inspect = _interopRequireDefault(require_inspect());
    var _devAssert = _interopRequireDefault(require_devAssert());
    var _instanceOf = _interopRequireDefault(require_instanceOf());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Source = /* @__PURE__ */ function() {
      function Source2(body) {
        var name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "GraphQL request";
        var locationOffset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
          line: 1,
          column: 1
        };
        typeof body === "string" || (0, _devAssert.default)(0, "Body must be a string. Received: ".concat((0, _inspect.default)(body), "."));
        this.body = body;
        this.name = name;
        this.locationOffset = locationOffset;
        this.locationOffset.line > 0 || (0, _devAssert.default)(0, "line in locationOffset is 1-indexed and must be positive.");
        this.locationOffset.column > 0 || (0, _devAssert.default)(0, "column in locationOffset is 1-indexed and must be positive.");
      }
      _createClass(Source2, [{
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return "Source";
        }
      }]);
      return Source2;
    }();
    exports.Source = Source;
    function isSource(source) {
      return (0, _instanceOf.default)(source, Source);
    }
  }
});

// node_modules/graphql/language/location.js
var require_location = __commonJS({
  "node_modules/graphql/language/location.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getLocation = getLocation;
    function getLocation(source, position) {
      var lineRegexp = /\r\n|[\n\r]/g;
      var line = 1;
      var column = position + 1;
      var match;
      while ((match = lineRegexp.exec(source.body)) && match.index < position) {
        line += 1;
        column = position + 1 - (match.index + match[0].length);
      }
      return {
        line,
        column
      };
    }
  }
});

// node_modules/graphql/language/printLocation.js
var require_printLocation = __commonJS({
  "node_modules/graphql/language/printLocation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.printLocation = printLocation;
    exports.printSourceLocation = printSourceLocation;
    var _location = require_location();
    function printLocation(location2) {
      return printSourceLocation(location2.source, (0, _location.getLocation)(location2.source, location2.start));
    }
    function printSourceLocation(source, sourceLocation) {
      var firstLineColumnOffset = source.locationOffset.column - 1;
      var body = whitespace(firstLineColumnOffset) + source.body;
      var lineIndex = sourceLocation.line - 1;
      var lineOffset = source.locationOffset.line - 1;
      var lineNum = sourceLocation.line + lineOffset;
      var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
      var columnNum = sourceLocation.column + columnOffset;
      var locationStr = "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n");
      var lines = body.split(/\r\n|[\n\r]/g);
      var locationLine = lines[lineIndex];
      if (locationLine.length > 120) {
        var subLineIndex = Math.floor(columnNum / 80);
        var subLineColumnNum = columnNum % 80;
        var subLines = [];
        for (var i2 = 0; i2 < locationLine.length; i2 += 80) {
          subLines.push(locationLine.slice(i2, i2 + 80));
        }
        return locationStr + printPrefixedLines([["".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function(subLine) {
          return ["", subLine];
        }), [[" ", whitespace(subLineColumnNum - 1) + "^"], ["", subLines[subLineIndex + 1]]]));
      }
      return locationStr + printPrefixedLines([
        // Lines specified like this: ["prefix", "string"],
        ["".concat(lineNum - 1), lines[lineIndex - 1]],
        ["".concat(lineNum), locationLine],
        ["", whitespace(columnNum - 1) + "^"],
        ["".concat(lineNum + 1), lines[lineIndex + 1]]
      ]);
    }
    function printPrefixedLines(lines) {
      var existingLines = lines.filter(function(_ref) {
        var _ = _ref[0], line = _ref[1];
        return line !== void 0;
      });
      var padLen = Math.max.apply(Math, existingLines.map(function(_ref2) {
        var prefix = _ref2[0];
        return prefix.length;
      }));
      return existingLines.map(function(_ref3) {
        var prefix = _ref3[0], line = _ref3[1];
        return leftPad(padLen, prefix) + (line ? " | " + line : " |");
      }).join("\n");
    }
    function whitespace(len) {
      return Array(len + 1).join(" ");
    }
    function leftPad(len, str) {
      return whitespace(len - str.length) + str;
    }
  }
});

// node_modules/graphql/language/kinds.js
var require_kinds = __commonJS({
  "node_modules/graphql/language/kinds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Kind = void 0;
    var Kind = Object.freeze({
      // Name
      NAME: "Name",
      // Document
      DOCUMENT: "Document",
      OPERATION_DEFINITION: "OperationDefinition",
      VARIABLE_DEFINITION: "VariableDefinition",
      SELECTION_SET: "SelectionSet",
      FIELD: "Field",
      ARGUMENT: "Argument",
      // Fragments
      FRAGMENT_SPREAD: "FragmentSpread",
      INLINE_FRAGMENT: "InlineFragment",
      FRAGMENT_DEFINITION: "FragmentDefinition",
      // Values
      VARIABLE: "Variable",
      INT: "IntValue",
      FLOAT: "FloatValue",
      STRING: "StringValue",
      BOOLEAN: "BooleanValue",
      NULL: "NullValue",
      ENUM: "EnumValue",
      LIST: "ListValue",
      OBJECT: "ObjectValue",
      OBJECT_FIELD: "ObjectField",
      // Directives
      DIRECTIVE: "Directive",
      // Types
      NAMED_TYPE: "NamedType",
      LIST_TYPE: "ListType",
      NON_NULL_TYPE: "NonNullType",
      // Type System Definitions
      SCHEMA_DEFINITION: "SchemaDefinition",
      OPERATION_TYPE_DEFINITION: "OperationTypeDefinition",
      // Type Definitions
      SCALAR_TYPE_DEFINITION: "ScalarTypeDefinition",
      OBJECT_TYPE_DEFINITION: "ObjectTypeDefinition",
      FIELD_DEFINITION: "FieldDefinition",
      INPUT_VALUE_DEFINITION: "InputValueDefinition",
      INTERFACE_TYPE_DEFINITION: "InterfaceTypeDefinition",
      UNION_TYPE_DEFINITION: "UnionTypeDefinition",
      ENUM_TYPE_DEFINITION: "EnumTypeDefinition",
      ENUM_VALUE_DEFINITION: "EnumValueDefinition",
      INPUT_OBJECT_TYPE_DEFINITION: "InputObjectTypeDefinition",
      // Directive Definitions
      DIRECTIVE_DEFINITION: "DirectiveDefinition",
      // Type System Extensions
      SCHEMA_EXTENSION: "SchemaExtension",
      // Type Extensions
      SCALAR_TYPE_EXTENSION: "ScalarTypeExtension",
      OBJECT_TYPE_EXTENSION: "ObjectTypeExtension",
      INTERFACE_TYPE_EXTENSION: "InterfaceTypeExtension",
      UNION_TYPE_EXTENSION: "UnionTypeExtension",
      ENUM_TYPE_EXTENSION: "EnumTypeExtension",
      INPUT_OBJECT_TYPE_EXTENSION: "InputObjectTypeExtension"
    });
    exports.Kind = Kind;
  }
});

// node_modules/graphql/language/tokenKind.js
var require_tokenKind = __commonJS({
  "node_modules/graphql/language/tokenKind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TokenKind = void 0;
    var TokenKind = Object.freeze({
      SOF: "<SOF>",
      EOF: "<EOF>",
      BANG: "!",
      DOLLAR: "$",
      AMP: "&",
      PAREN_L: "(",
      PAREN_R: ")",
      SPREAD: "...",
      COLON: ":",
      EQUALS: "=",
      AT: "@",
      BRACKET_L: "[",
      BRACKET_R: "]",
      BRACE_L: "{",
      PIPE: "|",
      BRACE_R: "}",
      NAME: "Name",
      INT: "Int",
      FLOAT: "Float",
      STRING: "String",
      BLOCK_STRING: "BlockString",
      COMMENT: "Comment"
    });
    exports.TokenKind = TokenKind;
  }
});

// node_modules/graphql/jsutils/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/graphql/jsutils/isObjectLike.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isObjectLike;
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function isObjectLike(value) {
      return _typeof(value) == "object" && value !== null;
    }
  }
});

// node_modules/graphql/error/GraphQLError.js
var require_GraphQLError = __commonJS({
  "node_modules/graphql/error/GraphQLError.js"(exports) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.printError = printError;
    exports.GraphQLError = void 0;
    var _isObjectLike = _interopRequireDefault(require_isObjectLike());
    var _symbols = require_symbols();
    var _location = require_location();
    var _printLocation = require_printLocation();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
        return _setPrototypeOf(Wrapper, Class2);
      };
      return _wrapNativeSuper(Class);
    }
    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2)
            _setPrototypeOf(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var GraphQLError = /* @__PURE__ */ function(_Error) {
      _inherits(GraphQLError2, _Error);
      var _super = _createSuper(GraphQLError2);
      function GraphQLError2(message, nodes, source, positions, path, originalError, extensions) {
        var _nodeLocations, _nodeLocations2, _nodeLocations3;
        var _this;
        _classCallCheck(this, GraphQLError2);
        _this = _super.call(this, message);
        _this.name = "GraphQLError";
        _this.originalError = originalError !== null && originalError !== void 0 ? originalError : void 0;
        _this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0);
        var nodeLocations = [];
        for (var _i2 = 0, _ref3 = (_this$nodes = _this.nodes) !== null && _this$nodes !== void 0 ? _this$nodes : []; _i2 < _ref3.length; _i2++) {
          var _this$nodes;
          var _ref4 = _ref3[_i2];
          var loc = _ref4.loc;
          if (loc != null) {
            nodeLocations.push(loc);
          }
        }
        nodeLocations = undefinedIfEmpty(nodeLocations);
        _this.source = source !== null && source !== void 0 ? source : (_nodeLocations = nodeLocations) === null || _nodeLocations === void 0 ? void 0 : _nodeLocations[0].source;
        _this.positions = positions !== null && positions !== void 0 ? positions : (_nodeLocations2 = nodeLocations) === null || _nodeLocations2 === void 0 ? void 0 : _nodeLocations2.map(function(loc2) {
          return loc2.start;
        });
        _this.locations = positions && source ? positions.map(function(pos) {
          return (0, _location.getLocation)(source, pos);
        }) : (_nodeLocations3 = nodeLocations) === null || _nodeLocations3 === void 0 ? void 0 : _nodeLocations3.map(function(loc2) {
          return (0, _location.getLocation)(loc2.source, loc2.start);
        });
        _this.path = path !== null && path !== void 0 ? path : void 0;
        var originalExtensions = originalError === null || originalError === void 0 ? void 0 : originalError.extensions;
        if (extensions == null && (0, _isObjectLike.default)(originalExtensions)) {
          _this.extensions = _objectSpread({}, originalExtensions);
        } else {
          _this.extensions = extensions !== null && extensions !== void 0 ? extensions : {};
        }
        Object.defineProperties(_assertThisInitialized(_this), {
          message: {
            enumerable: true
          },
          locations: {
            enumerable: _this.locations != null
          },
          path: {
            enumerable: _this.path != null
          },
          extensions: {
            enumerable: _this.extensions != null && Object.keys(_this.extensions).length > 0
          },
          name: {
            enumerable: false
          },
          nodes: {
            enumerable: false
          },
          source: {
            enumerable: false
          },
          positions: {
            enumerable: false
          },
          originalError: {
            enumerable: false
          }
        });
        if (originalError !== null && originalError !== void 0 && originalError.stack) {
          Object.defineProperty(_assertThisInitialized(_this), "stack", {
            value: originalError.stack,
            writable: true,
            configurable: true
          });
          return _possibleConstructorReturn(_this);
        }
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError2);
        } else {
          Object.defineProperty(_assertThisInitialized(_this), "stack", {
            value: Error().stack,
            writable: true,
            configurable: true
          });
        }
        return _this;
      }
      _createClass(GraphQLError2, [{
        key: "toString",
        value: function toString() {
          return printError(this);
        }
        // FIXME: workaround to not break chai comparisons, should be remove in v16
        // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
      }, {
        key: _symbols.SYMBOL_TO_STRING_TAG,
        get: function get() {
          return "Object";
        }
      }]);
      return GraphQLError2;
    }(/* @__PURE__ */ _wrapNativeSuper(Error));
    exports.GraphQLError = GraphQLError;
    function undefinedIfEmpty(array) {
      return array === void 0 || array.length === 0 ? void 0 : array;
    }
    function printError(error2) {
      var output = error2.message;
      if (error2.nodes) {
        for (var _i4 = 0, _error$nodes2 = error2.nodes; _i4 < _error$nodes2.length; _i4++) {
          var node = _error$nodes2[_i4];
          if (node.loc) {
            output += "\n\n" + (0, _printLocation.printLocation)(node.loc);
          }
        }
      } else if (error2.source && error2.locations) {
        for (var _i6 = 0, _error$locations2 = error2.locations; _i6 < _error$locations2.length; _i6++) {
          var location2 = _error$locations2[_i6];
          output += "\n\n" + (0, _printLocation.printSourceLocation)(error2.source, location2);
        }
      }
      return output;
    }
  }
});

// node_modules/graphql/error/syntaxError.js
var require_syntaxError = __commonJS({
  "node_modules/graphql/error/syntaxError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.syntaxError = syntaxError;
    var _GraphQLError = require_GraphQLError();
    function syntaxError(source, position, description) {
      return new _GraphQLError.GraphQLError("Syntax Error: ".concat(description), void 0, source, [position]);
    }
  }
});

// node_modules/graphql/jsutils/invariant.js
var require_invariant = __commonJS({
  "node_modules/graphql/jsutils/invariant.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = invariant;
    function invariant(condition, message) {
      var booleanCondition = Boolean(condition);
      if (!booleanCondition) {
        throw new Error(message != null ? message : "Unexpected invariant triggered.");
      }
    }
  }
});

// node_modules/graphql/jsutils/defineInspect.js
var require_defineInspect = __commonJS({
  "node_modules/graphql/jsutils/defineInspect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = defineInspect;
    var _invariant = _interopRequireDefault(require_invariant());
    var _nodejsCustomInspectSymbol = _interopRequireDefault(require_nodejsCustomInspectSymbol());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function defineInspect(classObject) {
      var fn = classObject.prototype.toJSON;
      typeof fn === "function" || (0, _invariant.default)(0);
      classObject.prototype.inspect = fn;
      if (_nodejsCustomInspectSymbol.default) {
        classObject.prototype[_nodejsCustomInspectSymbol.default] = fn;
      }
    }
  }
});

// node_modules/graphql/language/ast.js
var require_ast = __commonJS({
  "node_modules/graphql/language/ast.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isNode = isNode;
    exports.Token = exports.Location = void 0;
    var _defineInspect = _interopRequireDefault(require_defineInspect());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var Location = /* @__PURE__ */ function() {
      function Location2(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }
      var _proto = Location2.prototype;
      _proto.toJSON = function toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      };
      return Location2;
    }();
    exports.Location = Location;
    (0, _defineInspect.default)(Location);
    var Token = /* @__PURE__ */ function() {
      function Token2(kind, start, end, line, column, prev, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = prev;
        this.next = null;
      }
      var _proto2 = Token2.prototype;
      _proto2.toJSON = function toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      };
      return Token2;
    }();
    exports.Token = Token;
    (0, _defineInspect.default)(Token);
    function isNode(maybeNode) {
      return maybeNode != null && typeof maybeNode.kind === "string";
    }
  }
});

// node_modules/graphql/language/blockString.js
var require_blockString = __commonJS({
  "node_modules/graphql/language/blockString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.dedentBlockStringValue = dedentBlockStringValue;
    exports.getBlockStringIndentation = getBlockStringIndentation;
    exports.printBlockString = printBlockString;
    function dedentBlockStringValue(rawString) {
      var lines = rawString.split(/\r\n|[\n\r]/g);
      var commonIndent = getBlockStringIndentation(rawString);
      if (commonIndent !== 0) {
        for (var i2 = 1; i2 < lines.length; i2++) {
          lines[i2] = lines[i2].slice(commonIndent);
        }
      }
      var startLine = 0;
      while (startLine < lines.length && isBlank(lines[startLine])) {
        ++startLine;
      }
      var endLine = lines.length;
      while (endLine > startLine && isBlank(lines[endLine - 1])) {
        --endLine;
      }
      return lines.slice(startLine, endLine).join("\n");
    }
    function isBlank(str) {
      for (var i2 = 0; i2 < str.length; ++i2) {
        if (str[i2] !== " " && str[i2] !== "	") {
          return false;
        }
      }
      return true;
    }
    function getBlockStringIndentation(value) {
      var _commonIndent;
      var isFirstLine = true;
      var isEmptyLine = true;
      var indent = 0;
      var commonIndent = null;
      for (var i2 = 0; i2 < value.length; ++i2) {
        switch (value.charCodeAt(i2)) {
          case 13:
            if (value.charCodeAt(i2 + 1) === 10) {
              ++i2;
            }
          case 10:
            isFirstLine = false;
            isEmptyLine = true;
            indent = 0;
            break;
          case 9:
          case 32:
            ++indent;
            break;
          default:
            if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {
              commonIndent = indent;
            }
            isEmptyLine = false;
        }
      }
      return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;
    }
    function printBlockString(value) {
      var indentation = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var preferMultipleLines = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var isSingleLine = value.indexOf("\n") === -1;
      var hasLeadingSpace = value[0] === " " || value[0] === "	";
      var hasTrailingQuote = value[value.length - 1] === '"';
      var hasTrailingSlash = value[value.length - 1] === "\\";
      var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
      var result = "";
      if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
        result += "\n" + indentation;
      }
      result += indentation ? value.replace(/\n/g, "\n" + indentation) : value;
      if (printAsMultipleLines) {
        result += "\n";
      }
      return '"""' + result.replace(/"""/g, '\\"""') + '"""';
    }
  }
});

// node_modules/graphql/language/lexer.js
var require_lexer = __commonJS({
  "node_modules/graphql/language/lexer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isPunctuatorTokenKind = isPunctuatorTokenKind;
    exports.Lexer = void 0;
    var _syntaxError = require_syntaxError();
    var _ast = require_ast();
    var _tokenKind = require_tokenKind();
    var _blockString = require_blockString();
    var Lexer = /* @__PURE__ */ function() {
      function Lexer2(source) {
        var startOfFileToken = new _ast.Token(_tokenKind.TokenKind.SOF, 0, 0, 0, 0, null);
        this.source = source;
        this.lastToken = startOfFileToken;
        this.token = startOfFileToken;
        this.line = 1;
        this.lineStart = 0;
      }
      var _proto = Lexer2.prototype;
      _proto.advance = function advance() {
        this.lastToken = this.token;
        var token = this.token = this.lookahead();
        return token;
      };
      _proto.lookahead = function lookahead() {
        var token = this.token;
        if (token.kind !== _tokenKind.TokenKind.EOF) {
          do {
            var _token$next;
            token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);
          } while (token.kind === _tokenKind.TokenKind.COMMENT);
        }
        return token;
      };
      return Lexer2;
    }();
    exports.Lexer = Lexer;
    function isPunctuatorTokenKind(kind) {
      return kind === _tokenKind.TokenKind.BANG || kind === _tokenKind.TokenKind.DOLLAR || kind === _tokenKind.TokenKind.AMP || kind === _tokenKind.TokenKind.PAREN_L || kind === _tokenKind.TokenKind.PAREN_R || kind === _tokenKind.TokenKind.SPREAD || kind === _tokenKind.TokenKind.COLON || kind === _tokenKind.TokenKind.EQUALS || kind === _tokenKind.TokenKind.AT || kind === _tokenKind.TokenKind.BRACKET_L || kind === _tokenKind.TokenKind.BRACKET_R || kind === _tokenKind.TokenKind.BRACE_L || kind === _tokenKind.TokenKind.PIPE || kind === _tokenKind.TokenKind.BRACE_R;
    }
    function printCharCode(code) {
      return (
        // NaN/undefined represents access beyond the end of the file.
        isNaN(code) ? _tokenKind.TokenKind.EOF : (
          // Trust JSON for ASCII.
          code < 127 ? JSON.stringify(String.fromCharCode(code)) : (
            // Otherwise print the escaped form.
            '"\\u'.concat(("00" + code.toString(16).toUpperCase()).slice(-4), '"')
          )
        )
      );
    }
    function readToken(lexer, prev) {
      var source = lexer.source;
      var body = source.body;
      var bodyLength = body.length;
      var pos = prev.end;
      while (pos < bodyLength) {
        var code = body.charCodeAt(pos);
        var _line = lexer.line;
        var _col = 1 + pos - lexer.lineStart;
        switch (code) {
          case 65279:
          case 9:
          case 32:
          case 44:
            ++pos;
            continue;
          case 10:
            ++pos;
            ++lexer.line;
            lexer.lineStart = pos;
            continue;
          case 13:
            if (body.charCodeAt(pos + 1) === 10) {
              pos += 2;
            } else {
              ++pos;
            }
            ++lexer.line;
            lexer.lineStart = pos;
            continue;
          case 33:
            return new _ast.Token(_tokenKind.TokenKind.BANG, pos, pos + 1, _line, _col, prev);
          case 35:
            return readComment(source, pos, _line, _col, prev);
          case 36:
            return new _ast.Token(_tokenKind.TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);
          case 38:
            return new _ast.Token(_tokenKind.TokenKind.AMP, pos, pos + 1, _line, _col, prev);
          case 40:
            return new _ast.Token(_tokenKind.TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);
          case 41:
            return new _ast.Token(_tokenKind.TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);
          case 46:
            if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {
              return new _ast.Token(_tokenKind.TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);
            }
            break;
          case 58:
            return new _ast.Token(_tokenKind.TokenKind.COLON, pos, pos + 1, _line, _col, prev);
          case 61:
            return new _ast.Token(_tokenKind.TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);
          case 64:
            return new _ast.Token(_tokenKind.TokenKind.AT, pos, pos + 1, _line, _col, prev);
          case 91:
            return new _ast.Token(_tokenKind.TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);
          case 93:
            return new _ast.Token(_tokenKind.TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);
          case 123:
            return new _ast.Token(_tokenKind.TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);
          case 124:
            return new _ast.Token(_tokenKind.TokenKind.PIPE, pos, pos + 1, _line, _col, prev);
          case 125:
            return new _ast.Token(_tokenKind.TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);
          case 34:
            if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {
              return readBlockString(source, pos, _line, _col, prev, lexer);
            }
            return readString(source, pos, _line, _col, prev);
          case 45:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return readNumber(source, pos, code, _line, _col, prev);
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 95:
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
            return readName(source, pos, _line, _col, prev);
        }
        throw (0, _syntaxError.syntaxError)(source, pos, unexpectedCharacterMessage(code));
      }
      var line = lexer.line;
      var col = 1 + pos - lexer.lineStart;
      return new _ast.Token(_tokenKind.TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
    }
    function unexpectedCharacterMessage(code) {
      if (code < 32 && code !== 9 && code !== 10 && code !== 13) {
        return "Cannot contain the invalid character ".concat(printCharCode(code), ".");
      }
      if (code === 39) {
        return `Unexpected single quote character ('), did you mean to use a double quote (")?`;
      }
      return "Cannot parse the unexpected character ".concat(printCharCode(code), ".");
    }
    function readComment(source, start, line, col, prev) {
      var body = source.body;
      var code;
      var position = start;
      do {
        code = body.charCodeAt(++position);
      } while (!isNaN(code) && // SourceCharacter but not LineTerminator
      (code > 31 || code === 9));
      return new _ast.Token(_tokenKind.TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));
    }
    function readNumber(source, start, firstCode, line, col, prev) {
      var body = source.body;
      var code = firstCode;
      var position = start;
      var isFloat = false;
      if (code === 45) {
        code = body.charCodeAt(++position);
      }
      if (code === 48) {
        code = body.charCodeAt(++position);
        if (code >= 48 && code <= 57) {
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, unexpected digit after 0: ".concat(printCharCode(code), "."));
        }
      } else {
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
      }
      if (code === 46) {
        isFloat = true;
        code = body.charCodeAt(++position);
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
      }
      if (code === 69 || code === 101) {
        isFloat = true;
        code = body.charCodeAt(++position);
        if (code === 43 || code === 45) {
          code = body.charCodeAt(++position);
        }
        position = readDigits(source, position, code);
        code = body.charCodeAt(position);
      }
      if (code === 46 || isNameStart(code)) {
        throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
      }
      return new _ast.Token(isFloat ? _tokenKind.TokenKind.FLOAT : _tokenKind.TokenKind.INT, start, position, line, col, prev, body.slice(start, position));
    }
    function readDigits(source, start, firstCode) {
      var body = source.body;
      var position = start;
      var code = firstCode;
      if (code >= 48 && code <= 57) {
        do {
          code = body.charCodeAt(++position);
        } while (code >= 48 && code <= 57);
        return position;
      }
      throw (0, _syntaxError.syntaxError)(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
    }
    function readString(source, start, line, col, prev) {
      var body = source.body;
      var position = start + 1;
      var chunkStart = position;
      var code = 0;
      var value = "";
      while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator
      code !== 10 && code !== 13) {
        if (code === 34) {
          value += body.slice(chunkStart, position);
          return new _ast.Token(_tokenKind.TokenKind.STRING, start, position + 1, line, col, prev, value);
        }
        if (code < 32 && code !== 9) {
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
        }
        ++position;
        if (code === 92) {
          value += body.slice(chunkStart, position - 1);
          code = body.charCodeAt(position);
          switch (code) {
            case 34:
              value += '"';
              break;
            case 47:
              value += "/";
              break;
            case 92:
              value += "\\";
              break;
            case 98:
              value += "\b";
              break;
            case 102:
              value += "\f";
              break;
            case 110:
              value += "\n";
              break;
            case 114:
              value += "\r";
              break;
            case 116:
              value += "	";
              break;
            case 117: {
              var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));
              if (charCode < 0) {
                var invalidSequence = body.slice(position + 1, position + 5);
                throw (0, _syntaxError.syntaxError)(source, position, "Invalid character escape sequence: \\u".concat(invalidSequence, "."));
              }
              value += String.fromCharCode(charCode);
              position += 4;
              break;
            }
            default:
              throw (0, _syntaxError.syntaxError)(source, position, "Invalid character escape sequence: \\".concat(String.fromCharCode(code), "."));
          }
          ++position;
          chunkStart = position;
        }
      }
      throw (0, _syntaxError.syntaxError)(source, position, "Unterminated string.");
    }
    function readBlockString(source, start, line, col, prev, lexer) {
      var body = source.body;
      var position = start + 3;
      var chunkStart = position;
      var code = 0;
      var rawValue = "";
      while (position < body.length && !isNaN(code = body.charCodeAt(position))) {
        if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
          rawValue += body.slice(chunkStart, position);
          return new _ast.Token(_tokenKind.TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockString.dedentBlockStringValue)(rawValue));
        }
        if (code < 32 && code !== 9 && code !== 10 && code !== 13) {
          throw (0, _syntaxError.syntaxError)(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
        }
        if (code === 10) {
          ++position;
          ++lexer.line;
          lexer.lineStart = position;
        } else if (code === 13) {
          if (body.charCodeAt(position + 1) === 10) {
            position += 2;
          } else {
            ++position;
          }
          ++lexer.line;
          lexer.lineStart = position;
        } else if (
          // Escape Triple-Quote (\""")
          code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34
        ) {
          rawValue += body.slice(chunkStart, position) + '"""';
          position += 4;
          chunkStart = position;
        } else {
          ++position;
        }
      }
      throw (0, _syntaxError.syntaxError)(source, position, "Unterminated string.");
    }
    function uniCharCode(a, b, c, d) {
      return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
    }
    function char2hex(a) {
      return a >= 48 && a <= 57 ? a - 48 : a >= 65 && a <= 70 ? a - 55 : a >= 97 && a <= 102 ? a - 87 : -1;
    }
    function readName(source, start, line, col, prev) {
      var body = source.body;
      var bodyLength = body.length;
      var position = start + 1;
      var code = 0;
      while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _
      code >= 48 && code <= 57 || // 0-9
      code >= 65 && code <= 90 || // A-Z
      code >= 97 && code <= 122)) {
        ++position;
      }
      return new _ast.Token(_tokenKind.TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));
    }
    function isNameStart(code) {
      return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;
    }
  }
});

// node_modules/graphql/language/directiveLocation.js
var require_directiveLocation = __commonJS({
  "node_modules/graphql/language/directiveLocation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DirectiveLocation = void 0;
    var DirectiveLocation = Object.freeze({
      // Request Definitions
      QUERY: "QUERY",
      MUTATION: "MUTATION",
      SUBSCRIPTION: "SUBSCRIPTION",
      FIELD: "FIELD",
      FRAGMENT_DEFINITION: "FRAGMENT_DEFINITION",
      FRAGMENT_SPREAD: "FRAGMENT_SPREAD",
      INLINE_FRAGMENT: "INLINE_FRAGMENT",
      VARIABLE_DEFINITION: "VARIABLE_DEFINITION",
      // Type System Definitions
      SCHEMA: "SCHEMA",
      SCALAR: "SCALAR",
      OBJECT: "OBJECT",
      FIELD_DEFINITION: "FIELD_DEFINITION",
      ARGUMENT_DEFINITION: "ARGUMENT_DEFINITION",
      INTERFACE: "INTERFACE",
      UNION: "UNION",
      ENUM: "ENUM",
      ENUM_VALUE: "ENUM_VALUE",
      INPUT_OBJECT: "INPUT_OBJECT",
      INPUT_FIELD_DEFINITION: "INPUT_FIELD_DEFINITION"
    });
    exports.DirectiveLocation = DirectiveLocation;
  }
});

// node_modules/graphql/language/parser.js
var require_parser = __commonJS({
  "node_modules/graphql/language/parser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parse = parse;
    exports.parseValue = parseValue;
    exports.parseType = parseType;
    exports.Parser = void 0;
    var _syntaxError = require_syntaxError();
    var _kinds = require_kinds();
    var _ast = require_ast();
    var _tokenKind = require_tokenKind();
    var _source = require_source();
    var _directiveLocation = require_directiveLocation();
    var _lexer = require_lexer();
    function parse(source, options) {
      var parser = new Parser4(source, options);
      return parser.parseDocument();
    }
    function parseValue(source, options) {
      var parser = new Parser4(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      var value = parser.parseValueLiteral(false);
      parser.expectToken(_tokenKind.TokenKind.EOF);
      return value;
    }
    function parseType(source, options) {
      var parser = new Parser4(source, options);
      parser.expectToken(_tokenKind.TokenKind.SOF);
      var type = parser.parseTypeReference();
      parser.expectToken(_tokenKind.TokenKind.EOF);
      return type;
    }
    var Parser4 = /* @__PURE__ */ function() {
      function Parser5(source, options) {
        var sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
        this._lexer = new _lexer.Lexer(sourceObj);
        this._options = options;
      }
      var _proto = Parser5.prototype;
      _proto.parseName = function parseName() {
        var token = this.expectToken(_tokenKind.TokenKind.NAME);
        return {
          kind: _kinds.Kind.NAME,
          value: token.value,
          loc: this.loc(token)
        };
      };
      _proto.parseDocument = function parseDocument() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.DOCUMENT,
          definitions: this.many(_tokenKind.TokenKind.SOF, this.parseDefinition, _tokenKind.TokenKind.EOF),
          loc: this.loc(start)
        };
      };
      _proto.parseDefinition = function parseDefinition() {
        if (this.peek(_tokenKind.TokenKind.NAME)) {
          switch (this._lexer.token.value) {
            case "query":
            case "mutation":
            case "subscription":
              return this.parseOperationDefinition();
            case "fragment":
              return this.parseFragmentDefinition();
            case "schema":
            case "scalar":
            case "type":
            case "interface":
            case "union":
            case "enum":
            case "input":
            case "directive":
              return this.parseTypeSystemDefinition();
            case "extend":
              return this.parseTypeSystemExtension();
          }
        } else if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
          return this.parseOperationDefinition();
        } else if (this.peekDescription()) {
          return this.parseTypeSystemDefinition();
        }
        throw this.unexpected();
      };
      _proto.parseOperationDefinition = function parseOperationDefinition() {
        var start = this._lexer.token;
        if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
          return {
            kind: _kinds.Kind.OPERATION_DEFINITION,
            operation: "query",
            name: void 0,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        }
        var operation = this.parseOperationType();
        var name;
        if (this.peek(_tokenKind.TokenKind.NAME)) {
          name = this.parseName();
        }
        return {
          kind: _kinds.Kind.OPERATION_DEFINITION,
          operation,
          name,
          variableDefinitions: this.parseVariableDefinitions(),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      };
      _proto.parseOperationType = function parseOperationType() {
        var operationToken = this.expectToken(_tokenKind.TokenKind.NAME);
        switch (operationToken.value) {
          case "query":
            return "query";
          case "mutation":
            return "mutation";
          case "subscription":
            return "subscription";
        }
        throw this.unexpected(operationToken);
      };
      _proto.parseVariableDefinitions = function parseVariableDefinitions() {
        return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseVariableDefinition, _tokenKind.TokenKind.PAREN_R);
      };
      _proto.parseVariableDefinition = function parseVariableDefinition() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.VARIABLE_DEFINITION,
          variable: this.parseVariable(),
          type: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseTypeReference()),
          defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.parseValueLiteral(true) : void 0,
          directives: this.parseDirectives(true),
          loc: this.loc(start)
        };
      };
      _proto.parseVariable = function parseVariable() {
        var start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.DOLLAR);
        return {
          kind: _kinds.Kind.VARIABLE,
          name: this.parseName(),
          loc: this.loc(start)
        };
      };
      _proto.parseSelectionSet = function parseSelectionSet() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.SELECTION_SET,
          selections: this.many(_tokenKind.TokenKind.BRACE_L, this.parseSelection, _tokenKind.TokenKind.BRACE_R),
          loc: this.loc(start)
        };
      };
      _proto.parseSelection = function parseSelection() {
        return this.peek(_tokenKind.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
      };
      _proto.parseField = function parseField() {
        var start = this._lexer.token;
        var nameOrAlias = this.parseName();
        var alias;
        var name;
        if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {
          alias = nameOrAlias;
          name = this.parseName();
        } else {
          name = nameOrAlias;
        }
        return {
          kind: _kinds.Kind.FIELD,
          alias,
          name,
          arguments: this.parseArguments(false),
          directives: this.parseDirectives(false),
          selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0,
          loc: this.loc(start)
        };
      };
      _proto.parseArguments = function parseArguments(isConst) {
        var item = isConst ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(_tokenKind.TokenKind.PAREN_L, item, _tokenKind.TokenKind.PAREN_R);
      };
      _proto.parseArgument = function parseArgument() {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        return {
          kind: _kinds.Kind.ARGUMENT,
          name,
          value: this.parseValueLiteral(false),
          loc: this.loc(start)
        };
      };
      _proto.parseConstArgument = function parseConstArgument() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.ARGUMENT,
          name: this.parseName(),
          value: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseValueLiteral(true)),
          loc: this.loc(start)
        };
      };
      _proto.parseFragment = function parseFragment() {
        var start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.SPREAD);
        var hasTypeCondition = this.expectOptionalKeyword("on");
        if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {
          return {
            kind: _kinds.Kind.FRAGMENT_SPREAD,
            name: this.parseFragmentName(),
            directives: this.parseDirectives(false),
            loc: this.loc(start)
          };
        }
        return {
          kind: _kinds.Kind.INLINE_FRAGMENT,
          typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      };
      _proto.parseFragmentDefinition = function parseFragmentDefinition() {
        var _this$_options;
        var start = this._lexer.token;
        this.expectKeyword("fragment");
        if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {
          return {
            kind: _kinds.Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            variableDefinitions: this.parseVariableDefinitions(),
            typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        }
        return {
          kind: _kinds.Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      };
      _proto.parseFragmentName = function parseFragmentName() {
        if (this._lexer.token.value === "on") {
          throw this.unexpected();
        }
        return this.parseName();
      };
      _proto.parseValueLiteral = function parseValueLiteral(isConst) {
        var token = this._lexer.token;
        switch (token.kind) {
          case _tokenKind.TokenKind.BRACKET_L:
            return this.parseList(isConst);
          case _tokenKind.TokenKind.BRACE_L:
            return this.parseObject(isConst);
          case _tokenKind.TokenKind.INT:
            this._lexer.advance();
            return {
              kind: _kinds.Kind.INT,
              value: token.value,
              loc: this.loc(token)
            };
          case _tokenKind.TokenKind.FLOAT:
            this._lexer.advance();
            return {
              kind: _kinds.Kind.FLOAT,
              value: token.value,
              loc: this.loc(token)
            };
          case _tokenKind.TokenKind.STRING:
          case _tokenKind.TokenKind.BLOCK_STRING:
            return this.parseStringLiteral();
          case _tokenKind.TokenKind.NAME:
            this._lexer.advance();
            switch (token.value) {
              case "true":
                return {
                  kind: _kinds.Kind.BOOLEAN,
                  value: true,
                  loc: this.loc(token)
                };
              case "false":
                return {
                  kind: _kinds.Kind.BOOLEAN,
                  value: false,
                  loc: this.loc(token)
                };
              case "null":
                return {
                  kind: _kinds.Kind.NULL,
                  loc: this.loc(token)
                };
              default:
                return {
                  kind: _kinds.Kind.ENUM,
                  value: token.value,
                  loc: this.loc(token)
                };
            }
          case _tokenKind.TokenKind.DOLLAR:
            if (!isConst) {
              return this.parseVariable();
            }
            break;
        }
        throw this.unexpected();
      };
      _proto.parseStringLiteral = function parseStringLiteral() {
        var token = this._lexer.token;
        this._lexer.advance();
        return {
          kind: _kinds.Kind.STRING,
          value: token.value,
          block: token.kind === _tokenKind.TokenKind.BLOCK_STRING,
          loc: this.loc(token)
        };
      };
      _proto.parseList = function parseList(isConst) {
        var _this = this;
        var start = this._lexer.token;
        var item = function item2() {
          return _this.parseValueLiteral(isConst);
        };
        return {
          kind: _kinds.Kind.LIST,
          values: this.any(_tokenKind.TokenKind.BRACKET_L, item, _tokenKind.TokenKind.BRACKET_R),
          loc: this.loc(start)
        };
      };
      _proto.parseObject = function parseObject(isConst) {
        var _this2 = this;
        var start = this._lexer.token;
        var item = function item2() {
          return _this2.parseObjectField(isConst);
        };
        return {
          kind: _kinds.Kind.OBJECT,
          fields: this.any(_tokenKind.TokenKind.BRACE_L, item, _tokenKind.TokenKind.BRACE_R),
          loc: this.loc(start)
        };
      };
      _proto.parseObjectField = function parseObjectField(isConst) {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        return {
          kind: _kinds.Kind.OBJECT_FIELD,
          name,
          value: this.parseValueLiteral(isConst),
          loc: this.loc(start)
        };
      };
      _proto.parseDirectives = function parseDirectives(isConst) {
        var directives = [];
        while (this.peek(_tokenKind.TokenKind.AT)) {
          directives.push(this.parseDirective(isConst));
        }
        return directives;
      };
      _proto.parseDirective = function parseDirective(isConst) {
        var start = this._lexer.token;
        this.expectToken(_tokenKind.TokenKind.AT);
        return {
          kind: _kinds.Kind.DIRECTIVE,
          name: this.parseName(),
          arguments: this.parseArguments(isConst),
          loc: this.loc(start)
        };
      };
      _proto.parseTypeReference = function parseTypeReference() {
        var start = this._lexer.token;
        var type;
        if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {
          type = this.parseTypeReference();
          this.expectToken(_tokenKind.TokenKind.BRACKET_R);
          type = {
            kind: _kinds.Kind.LIST_TYPE,
            type,
            loc: this.loc(start)
          };
        } else {
          type = this.parseNamedType();
        }
        if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {
          return {
            kind: _kinds.Kind.NON_NULL_TYPE,
            type,
            loc: this.loc(start)
          };
        }
        return type;
      };
      _proto.parseNamedType = function parseNamedType() {
        var start = this._lexer.token;
        return {
          kind: _kinds.Kind.NAMED_TYPE,
          name: this.parseName(),
          loc: this.loc(start)
        };
      };
      _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {
        var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;
        if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaDefinition();
            case "scalar":
              return this.parseScalarTypeDefinition();
            case "type":
              return this.parseObjectTypeDefinition();
            case "interface":
              return this.parseInterfaceTypeDefinition();
            case "union":
              return this.parseUnionTypeDefinition();
            case "enum":
              return this.parseEnumTypeDefinition();
            case "input":
              return this.parseInputObjectTypeDefinition();
            case "directive":
              return this.parseDirectiveDefinition();
          }
        }
        throw this.unexpected(keywordToken);
      };
      _proto.peekDescription = function peekDescription() {
        return this.peek(_tokenKind.TokenKind.STRING) || this.peek(_tokenKind.TokenKind.BLOCK_STRING);
      };
      _proto.parseDescription = function parseDescription() {
        if (this.peekDescription()) {
          return this.parseStringLiteral();
        }
      };
      _proto.parseSchemaDefinition = function parseSchemaDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("schema");
        var directives = this.parseDirectives(true);
        var operationTypes = this.many(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
        return {
          kind: _kinds.Kind.SCHEMA_DEFINITION,
          description,
          directives,
          operationTypes,
          loc: this.loc(start)
        };
      };
      _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {
        var start = this._lexer.token;
        var operation = this.parseOperationType();
        this.expectToken(_tokenKind.TokenKind.COLON);
        var type = this.parseNamedType();
        return {
          kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
          operation,
          type,
          loc: this.loc(start)
        };
      };
      _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("scalar");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
          description,
          name,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("type");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
          kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {
        var _this$_options2;
        if (!this.expectOptionalKeyword("implements")) {
          return [];
        }
        if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {
          var types = [];
          this.expectOptionalToken(_tokenKind.TokenKind.AMP);
          do {
            types.push(this.parseNamedType());
          } while (this.expectOptionalToken(_tokenKind.TokenKind.AMP) || this.peek(_tokenKind.TokenKind.NAME));
          return types;
        }
        return this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType);
      };
      _proto.parseFieldsDefinition = function parseFieldsDefinition() {
        var _this$_options3;
        if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(_tokenKind.TokenKind.BRACE_L) && this._lexer.lookahead().kind === _tokenKind.TokenKind.BRACE_R) {
          this._lexer.advance();
          this._lexer.advance();
          return [];
        }
        return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseFieldDefinition, _tokenKind.TokenKind.BRACE_R);
      };
      _proto.parseFieldDefinition = function parseFieldDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        this.expectToken(_tokenKind.TokenKind.COLON);
        var type = this.parseTypeReference();
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.FIELD_DEFINITION,
          description,
          name,
          arguments: args,
          type,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseArgumentDefs = function parseArgumentDefs() {
        return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseInputValueDef, _tokenKind.TokenKind.PAREN_R);
      };
      _proto.parseInputValueDef = function parseInputValueDef() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        this.expectToken(_tokenKind.TokenKind.COLON);
        var type = this.parseTypeReference();
        var defaultValue;
        if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {
          defaultValue = this.parseValueLiteral(true);
        }
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
          description,
          name,
          type,
          defaultValue,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("interface");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
          kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("union");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var types = this.parseUnionMemberTypes();
        return {
          kind: _kinds.Kind.UNION_TYPE_DEFINITION,
          description,
          name,
          directives,
          types,
          loc: this.loc(start)
        };
      };
      _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {
        return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType) : [];
      };
      _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("enum");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var values = this.parseEnumValuesDefinition();
        return {
          kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
          description,
          name,
          directives,
          values,
          loc: this.loc(start)
        };
      };
      _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {
        return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseEnumValueDefinition, _tokenKind.TokenKind.BRACE_R);
      };
      _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        return {
          kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
          description,
          name,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("input");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();
        return {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description,
          name,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {
        return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseInputValueDef, _tokenKind.TokenKind.BRACE_R);
      };
      _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {
        var keywordToken = this._lexer.lookahead();
        if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaExtension();
            case "scalar":
              return this.parseScalarTypeExtension();
            case "type":
              return this.parseObjectTypeExtension();
            case "interface":
              return this.parseInterfaceTypeExtension();
            case "union":
              return this.parseUnionTypeExtension();
            case "enum":
              return this.parseEnumTypeExtension();
            case "input":
              return this.parseInputObjectTypeExtension();
          }
        }
        throw this.unexpected(keywordToken);
      };
      _proto.parseSchemaExtension = function parseSchemaExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("schema");
        var directives = this.parseDirectives(true);
        var operationTypes = this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
        if (directives.length === 0 && operationTypes.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.SCHEMA_EXTENSION,
          directives,
          operationTypes,
          loc: this.loc(start)
        };
      };
      _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("scalar");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        if (directives.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
          name,
          directives,
          loc: this.loc(start)
        };
      };
      _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("type");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("interface");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("union");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var types = this.parseUnionMemberTypes();
        if (directives.length === 0 && types.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.UNION_TYPE_EXTENSION,
          name,
          directives,
          types,
          loc: this.loc(start)
        };
      };
      _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("enum");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var values = this.parseEnumValuesDefinition();
        if (directives.length === 0 && values.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
          name,
          directives,
          values,
          loc: this.loc(start)
        };
      };
      _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("input");
        var name = this.parseName();
        var directives = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();
        if (directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name,
          directives,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("directive");
        this.expectToken(_tokenKind.TokenKind.AT);
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        var repeatable = this.expectOptionalKeyword("repeatable");
        this.expectKeyword("on");
        var locations = this.parseDirectiveLocations();
        return {
          kind: _kinds.Kind.DIRECTIVE_DEFINITION,
          description,
          name,
          arguments: args,
          repeatable,
          locations,
          loc: this.loc(start)
        };
      };
      _proto.parseDirectiveLocations = function parseDirectiveLocations() {
        return this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseDirectiveLocation);
      };
      _proto.parseDirectiveLocation = function parseDirectiveLocation() {
        var start = this._lexer.token;
        var name = this.parseName();
        if (_directiveLocation.DirectiveLocation[name.value] !== void 0) {
          return name;
        }
        throw this.unexpected(start);
      };
      _proto.loc = function loc(startToken) {
        var _this$_options4;
        if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {
          return new _ast.Location(startToken, this._lexer.lastToken, this._lexer.source);
        }
      };
      _proto.peek = function peek(kind) {
        return this._lexer.token.kind === kind;
      };
      _proto.expectToken = function expectToken(kind) {
        var token = this._lexer.token;
        if (token.kind === kind) {
          this._lexer.advance();
          return token;
        }
        throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
      };
      _proto.expectOptionalToken = function expectOptionalToken(kind) {
        var token = this._lexer.token;
        if (token.kind === kind) {
          this._lexer.advance();
          return token;
        }
        return void 0;
      };
      _proto.expectKeyword = function expectKeyword(value) {
        var token = this._lexer.token;
        if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
          this._lexer.advance();
        } else {
          throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, 'Expected "'.concat(value, '", found ').concat(getTokenDesc(token), "."));
        }
      };
      _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {
        var token = this._lexer.token;
        if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
          this._lexer.advance();
          return true;
        }
        return false;
      };
      _proto.unexpected = function unexpected(atToken) {
        var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
        return (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
      };
      _proto.any = function any(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];
        while (!this.expectOptionalToken(closeKind)) {
          nodes.push(parseFn.call(this));
        }
        return nodes;
      };
      _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {
        if (this.expectOptionalToken(openKind)) {
          var nodes = [];
          do {
            nodes.push(parseFn.call(this));
          } while (!this.expectOptionalToken(closeKind));
          return nodes;
        }
        return [];
      };
      _proto.many = function many(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));
        return nodes;
      };
      _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {
        this.expectOptionalToken(delimiterKind);
        var nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (this.expectOptionalToken(delimiterKind));
        return nodes;
      };
      return Parser5;
    }();
    exports.Parser = Parser4;
    function getTokenDesc(token) {
      var value = token.value;
      return getTokenKindDesc(token.kind) + (value != null ? ' "'.concat(value, '"') : "");
    }
    function getTokenKindDesc(kind) {
      return (0, _lexer.isPunctuatorTokenKind)(kind) ? '"'.concat(kind, '"') : kind;
    }
  }
});

// node_modules/graphql/language/visitor.js
var require_visitor = __commonJS({
  "node_modules/graphql/language/visitor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.visit = visit;
    exports.visitInParallel = visitInParallel;
    exports.getVisitFn = getVisitFn;
    exports.BREAK = exports.QueryDocumentKeys = void 0;
    var _inspect = _interopRequireDefault(require_inspect());
    var _ast = require_ast();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var QueryDocumentKeys = {
      Name: [],
      Document: ["definitions"],
      OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"],
      VariableDefinition: ["variable", "type", "defaultValue", "directives"],
      Variable: ["name"],
      SelectionSet: ["selections"],
      Field: ["alias", "name", "arguments", "directives", "selectionSet"],
      Argument: ["name", "value"],
      FragmentSpread: ["name", "directives"],
      InlineFragment: ["typeCondition", "directives", "selectionSet"],
      FragmentDefinition: [
        "name",
        // Note: fragment variable definitions are experimental and may be changed
        // or removed in the future.
        "variableDefinitions",
        "typeCondition",
        "directives",
        "selectionSet"
      ],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ["values"],
      ObjectValue: ["fields"],
      ObjectField: ["name", "value"],
      Directive: ["name", "arguments"],
      NamedType: ["name"],
      ListType: ["type"],
      NonNullType: ["type"],
      SchemaDefinition: ["description", "directives", "operationTypes"],
      OperationTypeDefinition: ["type"],
      ScalarTypeDefinition: ["description", "name", "directives"],
      ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
      FieldDefinition: ["description", "name", "arguments", "type", "directives"],
      InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"],
      InterfaceTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
      UnionTypeDefinition: ["description", "name", "directives", "types"],
      EnumTypeDefinition: ["description", "name", "directives", "values"],
      EnumValueDefinition: ["description", "name", "directives"],
      InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
      DirectiveDefinition: ["description", "name", "arguments", "locations"],
      SchemaExtension: ["directives", "operationTypes"],
      ScalarTypeExtension: ["name", "directives"],
      ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
      InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
      UnionTypeExtension: ["name", "directives", "types"],
      EnumTypeExtension: ["name", "directives", "values"],
      InputObjectTypeExtension: ["name", "directives", "fields"]
    };
    exports.QueryDocumentKeys = QueryDocumentKeys;
    var BREAK = Object.freeze({});
    exports.BREAK = BREAK;
    function visit(root, visitor) {
      var visitorKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : QueryDocumentKeys;
      var stack = void 0;
      var inArray = Array.isArray(root);
      var keys = [root];
      var index = -1;
      var edits = [];
      var node = void 0;
      var key = void 0;
      var parent = void 0;
      var path = [];
      var ancestors = [];
      var newRoot = root;
      do {
        index++;
        var isLeaving = index === keys.length;
        var isEdited = isLeaving && edits.length !== 0;
        if (isLeaving) {
          key = ancestors.length === 0 ? void 0 : path[path.length - 1];
          node = parent;
          parent = ancestors.pop();
          if (isEdited) {
            if (inArray) {
              node = node.slice();
            } else {
              var clone = {};
              for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
                var k = _Object$keys2[_i2];
                clone[k] = node[k];
              }
              node = clone;
            }
            var editOffset = 0;
            for (var ii = 0; ii < edits.length; ii++) {
              var editKey = edits[ii][0];
              var editValue = edits[ii][1];
              if (inArray) {
                editKey -= editOffset;
              }
              if (inArray && editValue === null) {
                node.splice(editKey, 1);
                editOffset++;
              } else {
                node[editKey] = editValue;
              }
            }
          }
          index = stack.index;
          keys = stack.keys;
          edits = stack.edits;
          inArray = stack.inArray;
          stack = stack.prev;
        } else {
          key = parent ? inArray ? index : keys[index] : void 0;
          node = parent ? parent[key] : newRoot;
          if (node === null || node === void 0) {
            continue;
          }
          if (parent) {
            path.push(key);
          }
        }
        var result = void 0;
        if (!Array.isArray(node)) {
          if (!(0, _ast.isNode)(node)) {
            throw new Error("Invalid AST Node: ".concat((0, _inspect.default)(node), "."));
          }
          var visitFn = getVisitFn(visitor, node.kind, isLeaving);
          if (visitFn) {
            result = visitFn.call(visitor, node, key, parent, path, ancestors);
            if (result === BREAK) {
              break;
            }
            if (result === false) {
              if (!isLeaving) {
                path.pop();
                continue;
              }
            } else if (result !== void 0) {
              edits.push([key, result]);
              if (!isLeaving) {
                if ((0, _ast.isNode)(result)) {
                  node = result;
                } else {
                  path.pop();
                  continue;
                }
              }
            }
          }
        }
        if (result === void 0 && isEdited) {
          edits.push([key, node]);
        }
        if (isLeaving) {
          path.pop();
        } else {
          var _visitorKeys$node$kin;
          stack = {
            inArray,
            index,
            keys,
            edits,
            prev: stack
          };
          inArray = Array.isArray(node);
          keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
          index = -1;
          edits = [];
          if (parent) {
            ancestors.push(parent);
          }
          parent = node;
        }
      } while (stack !== void 0);
      if (edits.length !== 0) {
        newRoot = edits[edits.length - 1][1];
      }
      return newRoot;
    }
    function visitInParallel(visitors) {
      var skipping = new Array(visitors.length);
      return {
        enter: function enter(node) {
          for (var i2 = 0; i2 < visitors.length; i2++) {
            if (skipping[i2] == null) {
              var fn = getVisitFn(
                visitors[i2],
                node.kind,
                /* isLeaving */
                false
              );
              if (fn) {
                var result = fn.apply(visitors[i2], arguments);
                if (result === false) {
                  skipping[i2] = node;
                } else if (result === BREAK) {
                  skipping[i2] = BREAK;
                } else if (result !== void 0) {
                  return result;
                }
              }
            }
          }
        },
        leave: function leave(node) {
          for (var i2 = 0; i2 < visitors.length; i2++) {
            if (skipping[i2] == null) {
              var fn = getVisitFn(
                visitors[i2],
                node.kind,
                /* isLeaving */
                true
              );
              if (fn) {
                var result = fn.apply(visitors[i2], arguments);
                if (result === BREAK) {
                  skipping[i2] = BREAK;
                } else if (result !== void 0 && result !== false) {
                  return result;
                }
              }
            } else if (skipping[i2] === node) {
              skipping[i2] = null;
            }
          }
        }
      };
    }
    function getVisitFn(visitor, kind, isLeaving) {
      var kindVisitor = visitor[kind];
      if (kindVisitor) {
        if (!isLeaving && typeof kindVisitor === "function") {
          return kindVisitor;
        }
        var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;
        if (typeof kindSpecificVisitor === "function") {
          return kindSpecificVisitor;
        }
      } else {
        var specificVisitor = isLeaving ? visitor.leave : visitor.enter;
        if (specificVisitor) {
          if (typeof specificVisitor === "function") {
            return specificVisitor;
          }
          var specificKindVisitor = specificVisitor[kind];
          if (typeof specificKindVisitor === "function") {
            return specificKindVisitor;
          }
        }
      }
    }
  }
});

// node_modules/graphql/language/printer.js
var require_printer = __commonJS({
  "node_modules/graphql/language/printer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.print = print;
    var _visitor = require_visitor();
    var _blockString = require_blockString();
    function print(ast) {
      return (0, _visitor.visit)(ast, {
        leave: printDocASTReducer
      });
    }
    var MAX_LINE_LENGTH = 80;
    var printDocASTReducer = {
      Name: function Name(node) {
        return node.value;
      },
      Variable: function Variable2(node) {
        return "$" + node.name;
      },
      // Document
      Document: function Document(node) {
        return join(node.definitions, "\n\n") + "\n";
      },
      OperationDefinition: function OperationDefinition(node) {
        var op = node.operation;
        var name = node.name;
        var varDefs = wrap("(", join(node.variableDefinitions, ", "), ")");
        var directives = join(node.directives, " ");
        var selectionSet = node.selectionSet;
        return !name && !directives && !varDefs && op === "query" ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], " ");
      },
      VariableDefinition: function VariableDefinition(_ref) {
        var variable = _ref.variable, type = _ref.type, defaultValue = _ref.defaultValue, directives = _ref.directives;
        return variable + ": " + type + wrap(" = ", defaultValue) + wrap(" ", join(directives, " "));
      },
      SelectionSet: function SelectionSet(_ref2) {
        var selections = _ref2.selections;
        return block(selections);
      },
      Field: function Field(_ref3) {
        var alias = _ref3.alias, name = _ref3.name, args = _ref3.arguments, directives = _ref3.directives, selectionSet = _ref3.selectionSet;
        var prefix = wrap("", alias, ": ") + name;
        var argsLine = prefix + wrap("(", join(args, ", "), ")");
        if (argsLine.length > MAX_LINE_LENGTH) {
          argsLine = prefix + wrap("(\n", indent(join(args, "\n")), "\n)");
        }
        return join([argsLine, join(directives, " "), selectionSet], " ");
      },
      Argument: function Argument(_ref4) {
        var name = _ref4.name, value = _ref4.value;
        return name + ": " + value;
      },
      // Fragments
      FragmentSpread: function FragmentSpread(_ref5) {
        var name = _ref5.name, directives = _ref5.directives;
        return "..." + name + wrap(" ", join(directives, " "));
      },
      InlineFragment: function InlineFragment(_ref6) {
        var typeCondition = _ref6.typeCondition, directives = _ref6.directives, selectionSet = _ref6.selectionSet;
        return join(["...", wrap("on ", typeCondition), join(directives, " "), selectionSet], " ");
      },
      FragmentDefinition: function FragmentDefinition(_ref7) {
        var name = _ref7.name, typeCondition = _ref7.typeCondition, variableDefinitions = _ref7.variableDefinitions, directives = _ref7.directives, selectionSet = _ref7.selectionSet;
        return (
          // Note: fragment variable definitions are experimental and may be changed
          // or removed in the future.
          "fragment ".concat(name).concat(wrap("(", join(variableDefinitions, ", "), ")"), " ") + "on ".concat(typeCondition, " ").concat(wrap("", join(directives, " "), " ")) + selectionSet
        );
      },
      // Value
      IntValue: function IntValue(_ref8) {
        var value = _ref8.value;
        return value;
      },
      FloatValue: function FloatValue(_ref9) {
        var value = _ref9.value;
        return value;
      },
      StringValue: function StringValue(_ref10, key) {
        var value = _ref10.value, isBlockString = _ref10.block;
        return isBlockString ? (0, _blockString.printBlockString)(value, key === "description" ? "" : "  ") : JSON.stringify(value);
      },
      BooleanValue: function BooleanValue(_ref11) {
        var value = _ref11.value;
        return value ? "true" : "false";
      },
      NullValue: function NullValue() {
        return "null";
      },
      EnumValue: function EnumValue(_ref12) {
        var value = _ref12.value;
        return value;
      },
      ListValue: function ListValue(_ref13) {
        var values = _ref13.values;
        return "[" + join(values, ", ") + "]";
      },
      ObjectValue: function ObjectValue(_ref14) {
        var fields = _ref14.fields;
        return "{" + join(fields, ", ") + "}";
      },
      ObjectField: function ObjectField(_ref15) {
        var name = _ref15.name, value = _ref15.value;
        return name + ": " + value;
      },
      // Directive
      Directive: function Directive(_ref16) {
        var name = _ref16.name, args = _ref16.arguments;
        return "@" + name + wrap("(", join(args, ", "), ")");
      },
      // Type
      NamedType: function NamedType(_ref17) {
        var name = _ref17.name;
        return name;
      },
      ListType: function ListType(_ref18) {
        var type = _ref18.type;
        return "[" + type + "]";
      },
      NonNullType: function NonNullType(_ref19) {
        var type = _ref19.type;
        return type + "!";
      },
      // Type System Definitions
      SchemaDefinition: addDescription(function(_ref20) {
        var directives = _ref20.directives, operationTypes = _ref20.operationTypes;
        return join(["schema", join(directives, " "), block(operationTypes)], " ");
      }),
      OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
        var operation = _ref21.operation, type = _ref21.type;
        return operation + ": " + type;
      },
      ScalarTypeDefinition: addDescription(function(_ref22) {
        var name = _ref22.name, directives = _ref22.directives;
        return join(["scalar", name, join(directives, " ")], " ");
      }),
      ObjectTypeDefinition: addDescription(function(_ref23) {
        var name = _ref23.name, interfaces = _ref23.interfaces, directives = _ref23.directives, fields = _ref23.fields;
        return join(["type", name, wrap("implements ", join(interfaces, " & ")), join(directives, " "), block(fields)], " ");
      }),
      FieldDefinition: addDescription(function(_ref24) {
        var name = _ref24.name, args = _ref24.arguments, type = _ref24.type, directives = _ref24.directives;
        return name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + ": " + type + wrap(" ", join(directives, " "));
      }),
      InputValueDefinition: addDescription(function(_ref25) {
        var name = _ref25.name, type = _ref25.type, defaultValue = _ref25.defaultValue, directives = _ref25.directives;
        return join([name + ": " + type, wrap("= ", defaultValue), join(directives, " ")], " ");
      }),
      InterfaceTypeDefinition: addDescription(function(_ref26) {
        var name = _ref26.name, interfaces = _ref26.interfaces, directives = _ref26.directives, fields = _ref26.fields;
        return join(["interface", name, wrap("implements ", join(interfaces, " & ")), join(directives, " "), block(fields)], " ");
      }),
      UnionTypeDefinition: addDescription(function(_ref27) {
        var name = _ref27.name, directives = _ref27.directives, types = _ref27.types;
        return join(["union", name, join(directives, " "), types && types.length !== 0 ? "= " + join(types, " | ") : ""], " ");
      }),
      EnumTypeDefinition: addDescription(function(_ref28) {
        var name = _ref28.name, directives = _ref28.directives, values = _ref28.values;
        return join(["enum", name, join(directives, " "), block(values)], " ");
      }),
      EnumValueDefinition: addDescription(function(_ref29) {
        var name = _ref29.name, directives = _ref29.directives;
        return join([name, join(directives, " ")], " ");
      }),
      InputObjectTypeDefinition: addDescription(function(_ref30) {
        var name = _ref30.name, directives = _ref30.directives, fields = _ref30.fields;
        return join(["input", name, join(directives, " "), block(fields)], " ");
      }),
      DirectiveDefinition: addDescription(function(_ref31) {
        var name = _ref31.name, args = _ref31.arguments, repeatable = _ref31.repeatable, locations = _ref31.locations;
        return "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join(locations, " | ");
      }),
      SchemaExtension: function SchemaExtension(_ref32) {
        var directives = _ref32.directives, operationTypes = _ref32.operationTypes;
        return join(["extend schema", join(directives, " "), block(operationTypes)], " ");
      },
      ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
        var name = _ref33.name, directives = _ref33.directives;
        return join(["extend scalar", name, join(directives, " ")], " ");
      },
      ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
        var name = _ref34.name, interfaces = _ref34.interfaces, directives = _ref34.directives, fields = _ref34.fields;
        return join(["extend type", name, wrap("implements ", join(interfaces, " & ")), join(directives, " "), block(fields)], " ");
      },
      InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
        var name = _ref35.name, interfaces = _ref35.interfaces, directives = _ref35.directives, fields = _ref35.fields;
        return join(["extend interface", name, wrap("implements ", join(interfaces, " & ")), join(directives, " "), block(fields)], " ");
      },
      UnionTypeExtension: function UnionTypeExtension(_ref36) {
        var name = _ref36.name, directives = _ref36.directives, types = _ref36.types;
        return join(["extend union", name, join(directives, " "), types && types.length !== 0 ? "= " + join(types, " | ") : ""], " ");
      },
      EnumTypeExtension: function EnumTypeExtension(_ref37) {
        var name = _ref37.name, directives = _ref37.directives, values = _ref37.values;
        return join(["extend enum", name, join(directives, " "), block(values)], " ");
      },
      InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
        var name = _ref38.name, directives = _ref38.directives, fields = _ref38.fields;
        return join(["extend input", name, join(directives, " "), block(fields)], " ");
      }
    };
    function addDescription(cb) {
      return function(node) {
        return join([node.description, cb(node)], "\n");
      };
    }
    function join(maybeArray) {
      var _maybeArray$filter$jo;
      var separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function(x) {
        return x;
      }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
    }
    function block(array) {
      return wrap("{\n", indent(join(array, "\n")), "\n}");
    }
    function wrap(start, maybeString) {
      var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
      return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
    }
    function indent(str) {
      return wrap("  ", str.replace(/\n/g, "\n  "));
    }
    function isMultiline(str) {
      return str.indexOf("\n") !== -1;
    }
    function hasMultilineItems(maybeArray) {
      return maybeArray != null && maybeArray.some(isMultiline);
    }
  }
});

// node_modules/graphql/language/predicates.js
var require_predicates = __commonJS({
  "node_modules/graphql/language/predicates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isDefinitionNode = isDefinitionNode;
    exports.isExecutableDefinitionNode = isExecutableDefinitionNode;
    exports.isSelectionNode = isSelectionNode;
    exports.isValueNode = isValueNode;
    exports.isTypeNode = isTypeNode;
    exports.isTypeSystemDefinitionNode = isTypeSystemDefinitionNode;
    exports.isTypeDefinitionNode = isTypeDefinitionNode;
    exports.isTypeSystemExtensionNode = isTypeSystemExtensionNode;
    exports.isTypeExtensionNode = isTypeExtensionNode;
    var _kinds = require_kinds();
    function isDefinitionNode(node) {
      return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);
    }
    function isExecutableDefinitionNode(node) {
      return node.kind === _kinds.Kind.OPERATION_DEFINITION || node.kind === _kinds.Kind.FRAGMENT_DEFINITION;
    }
    function isSelectionNode(node) {
      return node.kind === _kinds.Kind.FIELD || node.kind === _kinds.Kind.FRAGMENT_SPREAD || node.kind === _kinds.Kind.INLINE_FRAGMENT;
    }
    function isValueNode(node) {
      return node.kind === _kinds.Kind.VARIABLE || node.kind === _kinds.Kind.INT || node.kind === _kinds.Kind.FLOAT || node.kind === _kinds.Kind.STRING || node.kind === _kinds.Kind.BOOLEAN || node.kind === _kinds.Kind.NULL || node.kind === _kinds.Kind.ENUM || node.kind === _kinds.Kind.LIST || node.kind === _kinds.Kind.OBJECT;
    }
    function isTypeNode(node) {
      return node.kind === _kinds.Kind.NAMED_TYPE || node.kind === _kinds.Kind.LIST_TYPE || node.kind === _kinds.Kind.NON_NULL_TYPE;
    }
    function isTypeSystemDefinitionNode(node) {
      return node.kind === _kinds.Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === _kinds.Kind.DIRECTIVE_DEFINITION;
    }
    function isTypeDefinitionNode(node) {
      return node.kind === _kinds.Kind.SCALAR_TYPE_DEFINITION || node.kind === _kinds.Kind.OBJECT_TYPE_DEFINITION || node.kind === _kinds.Kind.INTERFACE_TYPE_DEFINITION || node.kind === _kinds.Kind.UNION_TYPE_DEFINITION || node.kind === _kinds.Kind.ENUM_TYPE_DEFINITION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION;
    }
    function isTypeSystemExtensionNode(node) {
      return node.kind === _kinds.Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
    }
    function isTypeExtensionNode(node) {
      return node.kind === _kinds.Kind.SCALAR_TYPE_EXTENSION || node.kind === _kinds.Kind.OBJECT_TYPE_EXTENSION || node.kind === _kinds.Kind.INTERFACE_TYPE_EXTENSION || node.kind === _kinds.Kind.UNION_TYPE_EXTENSION || node.kind === _kinds.Kind.ENUM_TYPE_EXTENSION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
    }
  }
});

// node_modules/graphql/language/index.js
var require_language = __commonJS({
  "node_modules/graphql/language/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Source", {
      enumerable: true,
      get: function get() {
        return _source.Source;
      }
    });
    Object.defineProperty(exports, "getLocation", {
      enumerable: true,
      get: function get() {
        return _location.getLocation;
      }
    });
    Object.defineProperty(exports, "printLocation", {
      enumerable: true,
      get: function get() {
        return _printLocation.printLocation;
      }
    });
    Object.defineProperty(exports, "printSourceLocation", {
      enumerable: true,
      get: function get() {
        return _printLocation.printSourceLocation;
      }
    });
    Object.defineProperty(exports, "Kind", {
      enumerable: true,
      get: function get() {
        return _kinds.Kind;
      }
    });
    Object.defineProperty(exports, "TokenKind", {
      enumerable: true,
      get: function get() {
        return _tokenKind.TokenKind;
      }
    });
    Object.defineProperty(exports, "Lexer", {
      enumerable: true,
      get: function get() {
        return _lexer.Lexer;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function get() {
        return _parser.parse;
      }
    });
    Object.defineProperty(exports, "parseValue", {
      enumerable: true,
      get: function get() {
        return _parser.parseValue;
      }
    });
    Object.defineProperty(exports, "parseType", {
      enumerable: true,
      get: function get() {
        return _parser.parseType;
      }
    });
    Object.defineProperty(exports, "print", {
      enumerable: true,
      get: function get() {
        return _printer.print;
      }
    });
    Object.defineProperty(exports, "visit", {
      enumerable: true,
      get: function get() {
        return _visitor.visit;
      }
    });
    Object.defineProperty(exports, "visitInParallel", {
      enumerable: true,
      get: function get() {
        return _visitor.visitInParallel;
      }
    });
    Object.defineProperty(exports, "getVisitFn", {
      enumerable: true,
      get: function get() {
        return _visitor.getVisitFn;
      }
    });
    Object.defineProperty(exports, "BREAK", {
      enumerable: true,
      get: function get() {
        return _visitor.BREAK;
      }
    });
    Object.defineProperty(exports, "Location", {
      enumerable: true,
      get: function get() {
        return _ast.Location;
      }
    });
    Object.defineProperty(exports, "Token", {
      enumerable: true,
      get: function get() {
        return _ast.Token;
      }
    });
    Object.defineProperty(exports, "isDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isExecutableDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isExecutableDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isSelectionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isSelectionNode;
      }
    });
    Object.defineProperty(exports, "isValueNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isValueNode;
      }
    });
    Object.defineProperty(exports, "isTypeNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeSystemDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeDefinitionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeDefinitionNode;
      }
    });
    Object.defineProperty(exports, "isTypeSystemExtensionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeSystemExtensionNode;
      }
    });
    Object.defineProperty(exports, "isTypeExtensionNode", {
      enumerable: true,
      get: function get() {
        return _predicates.isTypeExtensionNode;
      }
    });
    Object.defineProperty(exports, "DirectiveLocation", {
      enumerable: true,
      get: function get() {
        return _directiveLocation.DirectiveLocation;
      }
    });
    var _source = require_source();
    var _location = require_location();
    var _printLocation = require_printLocation();
    var _kinds = require_kinds();
    var _tokenKind = require_tokenKind();
    var _lexer = require_lexer();
    var _parser = require_parser();
    var _printer = require_printer();
    var _visitor = require_visitor();
    var _ast = require_ast();
    var _predicates = require_predicates();
    var _directiveLocation = require_directiveLocation();
  }
});

// node_modules/cross-fetch/dist/browser-polyfill.js
var require_browser_polyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-polyfill.js"(exports) {
    (function(self2) {
      var irrelevant = function(exports2) {
        var support = {
          searchParams: "URLSearchParams" in self2,
          iterable: "Symbol" in self2 && "iterator" in Symbol,
          blob: "FileReader" in self2 && "Blob" in self2 && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in self2,
          arrayBuffer: "ArrayBuffer" in self2
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
            throw new TypeError("Invalid character in header field name");
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers3(headers) {
          this.map = {};
          if (headers instanceof Headers3) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers3.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers3.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers3.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers3.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers3.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers3.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers3.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers3.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers3.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers3.prototype[Symbol.iterator] = Headers3.prototype.entries;
        }
        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i2 = 0; i2 < view.length; i2++) {
            chars[i2] = String.fromCharCode(view[i2]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this._bodyInit = body;
            if (!body) {
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers3(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers3(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal;
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers3();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              headers.append(key, value);
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response2(bodyInit, options) {
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = "statusText" in options ? options.statusText : "OK";
          this.headers = new Headers3(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers3(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response = new Response2(null, { status: 0, statusText: "" });
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports2.DOMException = self2.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error2 = Error(message);
            this.stack = error2.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request2(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              resolve(new Response2(body, options));
            };
            xhr.onerror = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.ontimeout = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.onabort = function() {
              reject(new exports2.DOMException("Aborted", "AbortError"));
            };
            xhr.open(request.method, request.url, true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr && support.blob) {
              xhr.responseType = "blob";
            }
            request.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value);
            });
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!self2.fetch) {
          self2.fetch = fetch2;
          self2.Headers = Headers3;
          self2.Request = Request2;
          self2.Response = Response2;
        }
        exports2.Headers = Headers3;
        exports2.Request = Request2;
        exports2.Response = Response2;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(typeof self !== "undefined" ? self : exports);
  }
});

// node_modules/relative-to-absolute-iri/lib/Resolve.js
var require_Resolve = __commonJS({
  "node_modules/relative-to-absolute-iri/lib/Resolve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removeDotSegmentsOfPath = exports.removeDotSegments = exports.resolve = void 0;
    function resolve(relativeIRI, baseIRI) {
      baseIRI = baseIRI || "";
      const baseFragmentPos = baseIRI.indexOf("#");
      if (baseFragmentPos > 0) {
        baseIRI = baseIRI.substr(0, baseFragmentPos);
      }
      if (!relativeIRI.length) {
        if (baseIRI.indexOf(":") < 0) {
          throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);
        }
        return baseIRI;
      }
      if (relativeIRI.startsWith("?")) {
        const baseQueryPos = baseIRI.indexOf("?");
        if (baseQueryPos > 0) {
          baseIRI = baseIRI.substr(0, baseQueryPos);
        }
        return baseIRI + relativeIRI;
      }
      if (relativeIRI.startsWith("#")) {
        return baseIRI + relativeIRI;
      }
      if (!baseIRI.length) {
        const relativeColonPos = relativeIRI.indexOf(":");
        if (relativeColonPos < 0) {
          throw new Error(`Found invalid relative IRI '${relativeIRI}' for a missing baseIRI`);
        }
        return removeDotSegmentsOfPath(relativeIRI, relativeColonPos);
      }
      const valueColonPos = relativeIRI.indexOf(":");
      if (valueColonPos >= 0) {
        return removeDotSegmentsOfPath(relativeIRI, valueColonPos);
      }
      const baseColonPos = baseIRI.indexOf(":");
      if (baseColonPos < 0) {
        throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);
      }
      const baseIRIScheme = baseIRI.substr(0, baseColonPos + 1);
      if (relativeIRI.indexOf("//") === 0) {
        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
      }
      let baseSlashAfterColonPos;
      if (baseIRI.indexOf("//", baseColonPos) === baseColonPos + 1) {
        baseSlashAfterColonPos = baseIRI.indexOf("/", baseColonPos + 3);
        if (baseSlashAfterColonPos < 0) {
          if (baseIRI.length > baseColonPos + 3) {
            return baseIRI + "/" + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
          } else {
            return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
          }
        }
      } else {
        baseSlashAfterColonPos = baseIRI.indexOf("/", baseColonPos + 1);
        if (baseSlashAfterColonPos < 0) {
          return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);
        }
      }
      if (relativeIRI.indexOf("/") === 0) {
        return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);
      }
      let baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);
      const baseIRILastSlashPos = baseIRIPath.lastIndexOf("/");
      if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {
        baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1);
        if (relativeIRI[0] === "." && relativeIRI[1] !== "." && relativeIRI[1] !== "/" && relativeIRI[2]) {
          relativeIRI = relativeIRI.substr(1);
        }
      }
      relativeIRI = baseIRIPath + relativeIRI;
      relativeIRI = removeDotSegments(relativeIRI);
      return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;
    }
    exports.resolve = resolve;
    function removeDotSegments(path) {
      const segmentBuffers = [];
      let i2 = 0;
      while (i2 < path.length) {
        switch (path[i2]) {
          case "/":
            if (path[i2 + 1] === ".") {
              if (path[i2 + 2] === ".") {
                if (!isCharacterAllowedAfterRelativePathSegment(path[i2 + 3])) {
                  segmentBuffers.push([]);
                  i2++;
                  break;
                }
                segmentBuffers.pop();
                if (!path[i2 + 3]) {
                  segmentBuffers.push([]);
                }
                i2 += 3;
              } else {
                if (!isCharacterAllowedAfterRelativePathSegment(path[i2 + 2])) {
                  segmentBuffers.push([]);
                  i2++;
                  break;
                }
                if (!path[i2 + 2]) {
                  segmentBuffers.push([]);
                }
                i2 += 2;
              }
            } else {
              segmentBuffers.push([]);
              i2++;
            }
            break;
          case "#":
          case "?":
            if (!segmentBuffers.length) {
              segmentBuffers.push([]);
            }
            segmentBuffers[segmentBuffers.length - 1].push(path.substr(i2));
            i2 = path.length;
            break;
          default:
            if (!segmentBuffers.length) {
              segmentBuffers.push([]);
            }
            segmentBuffers[segmentBuffers.length - 1].push(path[i2]);
            i2++;
            break;
        }
      }
      return "/" + segmentBuffers.map((buffer2) => buffer2.join("")).join("/");
    }
    exports.removeDotSegments = removeDotSegments;
    function removeDotSegmentsOfPath(iri, colonPosition) {
      let searchOffset = colonPosition + 1;
      if (colonPosition >= 0) {
        if (iri[colonPosition + 1] === "/" && iri[colonPosition + 2] === "/") {
          searchOffset = colonPosition + 3;
        }
      } else {
        if (iri[0] === "/" && iri[1] === "/") {
          searchOffset = 2;
        }
      }
      const pathSeparator = iri.indexOf("/", searchOffset);
      if (pathSeparator < 0) {
        return iri;
      }
      const base = iri.substr(0, pathSeparator);
      const path = iri.substr(pathSeparator);
      return base + removeDotSegments(path);
    }
    exports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;
    function isCharacterAllowedAfterRelativePathSegment(character) {
      return !character || character === "#" || character === "?" || character === "/";
    }
  }
});

// node_modules/relative-to-absolute-iri/index.js
var require_relative_to_absolute_iri = __commonJS({
  "node_modules/relative-to-absolute-iri/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Resolve(), exports);
  }
});

// node_modules/jsonld-context-parser/lib/ErrorCoded.js
var require_ErrorCoded = __commonJS({
  "node_modules/jsonld-context-parser/lib/ErrorCoded.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERROR_CODES = exports.ErrorCoded = void 0;
    var ErrorCoded = class extends Error {
      /* istanbul ignore next */
      constructor(message, code) {
        super(message);
        this.code = code;
      }
    };
    exports.ErrorCoded = ErrorCoded;
    var ERROR_CODES;
    (function(ERROR_CODES2) {
      ERROR_CODES2["COLLIDING_KEYWORDS"] = "colliding keywords";
      ERROR_CODES2["CONFLICTING_INDEXES"] = "conflicting indexes";
      ERROR_CODES2["CYCLIC_IRI_MAPPING"] = "cyclic IRI mapping";
      ERROR_CODES2["INVALID_ID_VALUE"] = "invalid @id value";
      ERROR_CODES2["INVALID_INDEX_VALUE"] = "invalid @index value";
      ERROR_CODES2["INVALID_NEST_VALUE"] = "invalid @nest value";
      ERROR_CODES2["INVALID_PREFIX_VALUE"] = "invalid @prefix value";
      ERROR_CODES2["INVALID_PROPAGATE_VALUE"] = "invalid @propagate value";
      ERROR_CODES2["INVALID_REVERSE_VALUE"] = "invalid @reverse value";
      ERROR_CODES2["INVALID_IMPORT_VALUE"] = "invalid @import value";
      ERROR_CODES2["INVALID_VERSION_VALUE"] = "invalid @version value";
      ERROR_CODES2["INVALID_BASE_IRI"] = "invalid base IRI";
      ERROR_CODES2["INVALID_CONTAINER_MAPPING"] = "invalid container mapping";
      ERROR_CODES2["INVALID_CONTEXT_ENTRY"] = "invalid context entry";
      ERROR_CODES2["INVALID_CONTEXT_NULLIFICATION"] = "invalid context nullification";
      ERROR_CODES2["INVALID_DEFAULT_LANGUAGE"] = "invalid default language";
      ERROR_CODES2["INVALID_INCLUDED_VALUE"] = "invalid @included value";
      ERROR_CODES2["INVALID_IRI_MAPPING"] = "invalid IRI mapping";
      ERROR_CODES2["INVALID_JSON_LITERAL"] = "invalid JSON literal";
      ERROR_CODES2["INVALID_KEYWORD_ALIAS"] = "invalid keyword alias";
      ERROR_CODES2["INVALID_LANGUAGE_MAP_VALUE"] = "invalid language map value";
      ERROR_CODES2["INVALID_LANGUAGE_MAPPING"] = "invalid language mapping";
      ERROR_CODES2["INVALID_LANGUAGE_TAGGED_STRING"] = "invalid language-tagged string";
      ERROR_CODES2["INVALID_LANGUAGE_TAGGED_VALUE"] = "invalid language-tagged value";
      ERROR_CODES2["INVALID_LOCAL_CONTEXT"] = "invalid local context";
      ERROR_CODES2["INVALID_REMOTE_CONTEXT"] = "invalid remote context";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY"] = "invalid reverse property";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY_MAP"] = "invalid reverse property map";
      ERROR_CODES2["INVALID_REVERSE_PROPERTY_VALUE"] = "invalid reverse property value";
      ERROR_CODES2["INVALID_SCOPED_CONTEXT"] = "invalid scoped context";
      ERROR_CODES2["INVALID_SCRIPT_ELEMENT"] = "invalid script element";
      ERROR_CODES2["INVALID_SET_OR_LIST_OBJECT"] = "invalid set or list object";
      ERROR_CODES2["INVALID_TERM_DEFINITION"] = "invalid term definition";
      ERROR_CODES2["INVALID_TYPE_MAPPING"] = "invalid type mapping";
      ERROR_CODES2["INVALID_TYPE_VALUE"] = "invalid type value";
      ERROR_CODES2["INVALID_TYPED_VALUE"] = "invalid typed value";
      ERROR_CODES2["INVALID_VALUE_OBJECT"] = "invalid value object";
      ERROR_CODES2["INVALID_VALUE_OBJECT_VALUE"] = "invalid value object value";
      ERROR_CODES2["INVALID_VOCAB_MAPPING"] = "invalid vocab mapping";
      ERROR_CODES2["IRI_CONFUSED_WITH_PREFIX"] = "IRI confused with prefix";
      ERROR_CODES2["KEYWORD_REDEFINITION"] = "keyword redefinition";
      ERROR_CODES2["LOADING_DOCUMENT_FAILED"] = "loading document failed";
      ERROR_CODES2["LOADING_REMOTE_CONTEXT_FAILED"] = "loading remote context failed";
      ERROR_CODES2["MULTIPLE_CONTEXT_LINK_HEADERS"] = "multiple context link headers";
      ERROR_CODES2["PROCESSING_MODE_CONFLICT"] = "processing mode conflict";
      ERROR_CODES2["PROTECTED_TERM_REDEFINITION"] = "protected term redefinition";
      ERROR_CODES2["CONTEXT_OVERFLOW"] = "context overflow";
      ERROR_CODES2["INVALID_BASE_DIRECTION"] = "invalid base direction";
      ERROR_CODES2["RECURSIVE_CONTEXT_INCLUSION"] = "recursive context inclusion";
      ERROR_CODES2["INVALID_STREAMING_KEY_ORDER"] = "invalid streaming key order";
      ERROR_CODES2["INVALID_EMBEDDED_NODE"] = "invalid embedded node";
      ERROR_CODES2["INVALID_ANNOTATION"] = "invalid annotation";
    })(ERROR_CODES = exports.ERROR_CODES || (exports.ERROR_CODES = {}));
  }
});

// node_modules/http-link-header/lib/link.js
var require_link = __commonJS({
  "node_modules/http-link-header/lib/link.js"(exports, module) {
    "use strict";
    var COMPATIBLE_ENCODING_PATTERN = /^utf-?8|ascii|utf-?16-?le|ucs-?2|base-?64|latin-?1$/i;
    var WS_TRIM_PATTERN = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    var WS_CHAR_PATTERN = /\s|\uFEFF|\xA0/;
    var WS_FOLD_PATTERN = /\r?\n[\x20\x09]+/g;
    var DELIMITER_PATTERN = /[;,"]/;
    var WS_DELIMITER_PATTERN = /[;,"]|\s/;
    var TOKEN_PATTERN = /^[!#$%&'*+\-\.^_`|~\da-zA-Z]+$/;
    var STATE = {
      IDLE: 1 << 0,
      URI: 1 << 1,
      ATTR: 1 << 2
    };
    function trim(value) {
      return value.replace(WS_TRIM_PATTERN, "");
    }
    function hasWhitespace(value) {
      return WS_CHAR_PATTERN.test(value);
    }
    function skipWhitespace(value, offset) {
      while (hasWhitespace(value[offset])) {
        offset++;
      }
      return offset;
    }
    function needsQuotes(value) {
      return WS_DELIMITER_PATTERN.test(value) || !TOKEN_PATTERN.test(value);
    }
    function shallowCompareObjects(object1, object2) {
      return Object.keys(object1).length === Object.keys(object2).length && Object.keys(object1).every(
        (key) => key in object2 && object1[key] === object2[key]
      );
    }
    var Link = class _Link {
      /**
       * Link
       * @constructor
       * @param {String} [value]
       * @returns {Link}
       */
      constructor(value) {
        this.refs = [];
        if (value) {
          this.parse(value);
        }
      }
      /**
       * Get refs with given relation type
       * @param {String} value
       * @returns {Array<Object>}
       */
      rel(value) {
        var links = [];
        var type = value.toLowerCase();
        for (var i2 = 0; i2 < this.refs.length; i2++) {
          if (this.refs[i2].rel.toLowerCase() === type) {
            links.push(this.refs[i2]);
          }
        }
        return links;
      }
      /**
       * Get refs where given attribute has a given value
       * @param {String} attr
       * @param {String} value
       * @returns {Array<Object>}
       */
      get(attr, value) {
        attr = attr.toLowerCase();
        var links = [];
        for (var i2 = 0; i2 < this.refs.length; i2++) {
          if (this.refs[i2][attr] === value) {
            links.push(this.refs[i2]);
          }
        }
        return links;
      }
      /** Sets a reference. */
      set(link) {
        this.refs.push(link);
        return this;
      }
      /**
       * Sets a reference if a reference with similar properties isn’t already set.
       */
      setUnique(link) {
        if (!this.refs.some((ref) => shallowCompareObjects(ref, link))) {
          this.refs.push(link);
        }
        return this;
      }
      has(attr, value) {
        attr = attr.toLowerCase();
        for (var i2 = 0; i2 < this.refs.length; i2++) {
          if (this.refs[i2][attr] === value) {
            return true;
          }
        }
        return false;
      }
      parse(value, offset) {
        offset = offset || 0;
        value = offset ? value.slice(offset) : value;
        value = trim(value).replace(WS_FOLD_PATTERN, "");
        var state = STATE.IDLE;
        var length = value.length;
        var offset = 0;
        var ref = null;
        while (offset < length) {
          if (state === STATE.IDLE) {
            if (hasWhitespace(value[offset])) {
              offset++;
              continue;
            } else if (value[offset] === "<") {
              if (ref != null) {
                ref.rel != null ? this.refs.push(..._Link.expandRelations(ref)) : this.refs.push(ref);
              }
              var end = value.indexOf(">", offset);
              if (end === -1)
                throw new Error("Expected end of URI delimiter at offset " + offset);
              ref = { uri: value.slice(offset + 1, end) };
              offset = end;
              state = STATE.URI;
            } else {
              throw new Error('Unexpected character "' + value[offset] + '" at offset ' + offset);
            }
            offset++;
          } else if (state === STATE.URI) {
            if (hasWhitespace(value[offset])) {
              offset++;
              continue;
            } else if (value[offset] === ";") {
              state = STATE.ATTR;
              offset++;
            } else if (value[offset] === ",") {
              state = STATE.IDLE;
              offset++;
            } else {
              throw new Error('Unexpected character "' + value[offset] + '" at offset ' + offset);
            }
          } else if (state === STATE.ATTR) {
            if (value[offset] === ";" || hasWhitespace(value[offset])) {
              offset++;
              continue;
            }
            var end = value.indexOf("=", offset);
            if (end === -1)
              end = value.indexOf(";", offset);
            if (end === -1)
              end = value.length;
            var attr = trim(value.slice(offset, end)).toLowerCase();
            var attrValue = "";
            offset = end + 1;
            offset = skipWhitespace(value, offset);
            if (value[offset] === '"') {
              offset++;
              while (offset < length) {
                if (value[offset] === '"') {
                  offset++;
                  break;
                }
                if (value[offset] === "\\") {
                  offset++;
                }
                attrValue += value[offset];
                offset++;
              }
            } else {
              var end = offset + 1;
              while (!DELIMITER_PATTERN.test(value[end]) && end < length) {
                end++;
              }
              attrValue = value.slice(offset, end);
              offset = end;
            }
            if (ref[attr] && _Link.isSingleOccurenceAttr(attr)) {
            } else if (attr[attr.length - 1] === "*") {
              ref[attr] = _Link.parseExtendedValue(attrValue);
            } else {
              attrValue = attr === "type" ? attrValue.toLowerCase() : attrValue;
              if (ref[attr] != null) {
                if (Array.isArray(ref[attr])) {
                  ref[attr].push(attrValue);
                } else {
                  ref[attr] = [ref[attr], attrValue];
                }
              } else {
                ref[attr] = attrValue;
              }
            }
            switch (value[offset]) {
              case ",":
                state = STATE.IDLE;
                break;
              case ";":
                state = STATE.ATTR;
                break;
            }
            offset++;
          } else {
            throw new Error('Unknown parser state "' + state + '"');
          }
        }
        if (ref != null) {
          ref.rel != null ? this.refs.push(..._Link.expandRelations(ref)) : this.refs.push(ref);
        }
        ref = null;
        return this;
      }
      toString() {
        var refs = [];
        var link = "";
        var ref = null;
        for (var i2 = 0; i2 < this.refs.length; i2++) {
          ref = this.refs[i2];
          link = Object.keys(this.refs[i2]).reduce(function(link2, attr) {
            if (attr === "uri")
              return link2;
            return link2 + "; " + _Link.formatAttribute(attr, ref[attr]);
          }, "<" + ref.uri + ">");
          refs.push(link);
        }
        return refs.join(", ");
      }
    };
    Link.isCompatibleEncoding = function(value) {
      return COMPATIBLE_ENCODING_PATTERN.test(value);
    };
    Link.parse = function(value, offset) {
      return new Link().parse(value, offset);
    };
    Link.isSingleOccurenceAttr = function(attr) {
      return attr === "rel" || attr === "type" || attr === "media" || attr === "title" || attr === "title*";
    };
    Link.isTokenAttr = function(attr) {
      return attr === "rel" || attr === "type" || attr === "anchor";
    };
    Link.escapeQuotes = function(value) {
      return value.replace(/"/g, '\\"');
    };
    Link.expandRelations = function(ref) {
      var rels = ref.rel.split(" ");
      return rels.map(function(rel) {
        var value = Object.assign({}, ref);
        value.rel = rel;
        return value;
      });
    };
    Link.parseExtendedValue = function(value) {
      var parts = /([^']+)?(?:'([^']*)')?(.+)/.exec(value);
      return {
        language: parts[2].toLowerCase(),
        encoding: Link.isCompatibleEncoding(parts[1]) ? null : parts[1].toLowerCase(),
        value: Link.isCompatibleEncoding(parts[1]) ? decodeURIComponent(parts[3]) : parts[3]
      };
    };
    Link.formatExtendedAttribute = function(attr, data) {
      var encoding = (data.encoding || "utf-8").toUpperCase();
      var language = data.language || "en";
      var encodedValue = "";
      if (Buffer.isBuffer(data.value) && Link.isCompatibleEncoding(encoding)) {
        encodedValue = data.value.toString(encoding);
      } else if (Buffer.isBuffer(data.value)) {
        encodedValue = data.value.toString("hex").replace(/[0-9a-f]{2}/gi, "%$1");
      } else {
        encodedValue = encodeURIComponent(data.value);
      }
      return attr + "=" + encoding + "'" + language + "'" + encodedValue;
    };
    Link.formatAttribute = function(attr, value) {
      if (Array.isArray(value)) {
        return value.map((item) => {
          return Link.formatAttribute(attr, item);
        }).join("; ");
      }
      if (attr[attr.length - 1] === "*" || typeof value !== "string") {
        return Link.formatExtendedAttribute(attr, value);
      }
      if (Link.isTokenAttr(attr)) {
        value = needsQuotes(value) ? '"' + Link.escapeQuotes(value) + '"' : Link.escapeQuotes(value);
      } else if (needsQuotes(value)) {
        value = encodeURIComponent(value);
        value = value.replace(/%20/g, " ").replace(/%2C/g, ",").replace(/%3B/g, ";");
        value = '"' + value + '"';
      }
      return attr + "=" + value;
    };
    module.exports = Link;
  }
});

// node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js
var require_FetchDocumentLoader = __commonJS({
  "node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchDocumentLoader = void 0;
    require_browser_polyfill();
    var ErrorCoded_1 = require_ErrorCoded();
    var http_link_header_1 = require_link();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var FetchDocumentLoader = class {
      constructor(fetcher) {
        this.fetcher = fetcher;
      }
      async load(url) {
        const response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: "application/ld+json" }) });
        if (response.ok && response.headers) {
          let mediaType = response.headers.get("Content-Type");
          if (mediaType) {
            const colonPos = mediaType.indexOf(";");
            if (colonPos > 0) {
              mediaType = mediaType.substr(0, colonPos);
            }
          }
          if (mediaType === "application/ld+json") {
            return await response.json();
          } else {
            if (response.headers.has("Link")) {
              let alternateUrl;
              response.headers.forEach((value, key) => {
                if (key === "link") {
                  const linkHeader = (0, http_link_header_1.parse)(value);
                  for (const link of linkHeader.get("type", "application/ld+json")) {
                    if (link.rel === "alternate") {
                      if (alternateUrl) {
                        throw new Error("Multiple JSON-LD alternate links were found on " + url);
                      }
                      alternateUrl = (0, relative_to_absolute_iri_1.resolve)(link.uri, url);
                    }
                  }
                }
              });
              if (alternateUrl) {
                return this.load(alternateUrl);
              }
            }
            throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);
          }
        } else {
          throw new Error(response.statusText || `Status code: ${response.status}`);
        }
      }
    };
    exports.FetchDocumentLoader = FetchDocumentLoader;
  }
});

// node_modules/jsonld-context-parser/lib/Util.js
var require_Util = __commonJS({
  "node_modules/jsonld-context-parser/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var Util = class _Util {
      /**
       * Check if the given term is a valid compact IRI.
       * Otherwise, it may be an IRI.
       * @param {string} term A term.
       * @return {boolean} If it is a compact IRI.
       */
      static isCompactIri(term) {
        return term.indexOf(":") > 0 && !(term && term[0] === "#");
      }
      /**
       * Get the prefix from the given term.
       * @see https://json-ld.org/spec/latest/json-ld/#compact-iris
       * @param {string} term A term that is an URL or a prefixed URL.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @return {string} The prefix or null.
       */
      static getPrefix(term, context) {
        if (term && term[0] === "#") {
          return null;
        }
        const separatorPos = term.indexOf(":");
        if (separatorPos >= 0) {
          if (term.length > separatorPos + 1 && term.charAt(separatorPos + 1) === "/" && term.charAt(separatorPos + 2) === "/") {
            return null;
          }
          const prefix = term.substr(0, separatorPos);
          if (prefix === "_") {
            return null;
          }
          if (context[prefix]) {
            return prefix;
          }
        }
        return null;
      }
      /**
       * From a given context entry value, get the string value, or the @id field.
       * @param contextValue A value for a term in a context.
       * @return {string} The id value, or null.
       */
      static getContextValueId(contextValue) {
        if (contextValue === null || typeof contextValue === "string") {
          return contextValue;
        }
        const id = contextValue["@id"];
        return id ? id : null;
      }
      /**
       * Check if the given simple term definition (string-based value of a context term)
       * should be considered a prefix.
       * @param value A simple term definition value.
       * @param options Options that define the way how expansion must be done.
       */
      static isSimpleTermDefinitionPrefix(value, options) {
        return !_Util.isPotentialKeyword(value) && (options.allowPrefixNonGenDelims || typeof value === "string" && (value[0] === "_" || _Util.isPrefixIriEndingWithGenDelim(value)));
      }
      /**
       * Check if the given keyword is of the keyword format "@"1*ALPHA.
       * @param {string} keyword A potential keyword.
       * @return {boolean} If the given keyword is of the keyword format.
       */
      static isPotentialKeyword(keyword) {
        return typeof keyword === "string" && _Util.KEYWORD_REGEX.test(keyword);
      }
      /**
       * Check if the given prefix ends with a gen-delim character.
       * @param {string} prefixIri A prefix IRI.
       * @return {boolean} If the given prefix IRI is valid.
       */
      static isPrefixIriEndingWithGenDelim(prefixIri) {
        return _Util.ENDS_WITH_GEN_DELIM.test(prefixIri);
      }
      /**
       * Check if the given context value can be a prefix value.
       * @param value A context value.
       * @return {boolean} If it can be a prefix value.
       */
      static isPrefixValue(value) {
        return value && (typeof value === "string" || value && typeof value === "object");
      }
      /**
       * Check if the given IRI is valid.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIri(iri) {
        return Boolean(iri && _Util.IRI_REGEX.test(iri));
      }
      /**
       * Check if the given IRI is valid, this includes the possibility of being a relative IRI.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIriWeak(iri) {
        return !!iri && iri[0] !== ":" && _Util.IRI_REGEX_WEAK.test(iri);
      }
      /**
       * Check if the given keyword is a defined according to the JSON-LD specification.
       * @param {string} keyword A potential keyword.
       * @return {boolean} If the given keyword is valid.
       */
      static isValidKeyword(keyword) {
        return _Util.VALID_KEYWORDS[keyword];
      }
      /**
       * Check if the given term is protected in the context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {string} key A context term.
       * @return {boolean} If the given term has an @protected flag.
       */
      static isTermProtected(context, key) {
        const value = context[key];
        return !(typeof value === "string") && value && value["@protected"];
      }
      /**
       * Check if the given context has at least one protected term.
       * @param context A context.
       * @return If the context has a protected term.
       */
      static hasProtectedTerms(context) {
        for (const key of Object.keys(context)) {
          if (_Util.isTermProtected(context, key)) {
            return true;
          }
        }
        return false;
      }
      /**
       * Check if the given key is an internal reserved keyword.
       * @param key A context key.
       */
      static isReservedInternalKeyword(key) {
        return key.startsWith("@__");
      }
      /**
       * Check if two objects are deepEqual to on another.
       * @param object1 The first object to test.
       * @param object2 The second object to test.
       */
      static deepEqual(object1, object2) {
        const objKeys1 = Object.keys(object1);
        const objKeys2 = Object.keys(object2);
        if (objKeys1.length !== objKeys2.length)
          return false;
        return objKeys1.every((key) => {
          const value1 = object1[key];
          const value2 = object2[key];
          return value1 === value2 || value1 !== null && value2 !== null && typeof value1 === "object" && typeof value2 === "object" && this.deepEqual(value1, value2);
        });
      }
    };
    Util.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ "<>{}|\\\[\]`#]*(#[^#]*)?$/;
    Util.IRI_REGEX_WEAK = /(?::[^:])|\//;
    Util.KEYWORD_REGEX = /^@[a-z]+$/i;
    Util.ENDS_WITH_GEN_DELIM = /[:/?#\[\]@]$/;
    Util.REGEX_LANGUAGE_TAG = /^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/;
    Util.REGEX_DIRECTION_TAG = /^(ltr)|(rtl)$/;
    Util.VALID_KEYWORDS = {
      "@annotation": true,
      "@base": true,
      "@container": true,
      "@context": true,
      "@direction": true,
      "@graph": true,
      "@id": true,
      "@import": true,
      "@included": true,
      "@index": true,
      "@json": true,
      "@language": true,
      "@list": true,
      "@nest": true,
      "@none": true,
      "@prefix": true,
      "@propagate": true,
      "@protected": true,
      "@reverse": true,
      "@set": true,
      "@type": true,
      "@value": true,
      "@version": true,
      "@vocab": true
    };
    Util.EXPAND_KEYS_BLACKLIST = [
      "@base",
      "@vocab",
      "@language",
      "@version",
      "@direction"
    ];
    Util.ALIAS_DOMAIN_BLACKLIST = [
      "@container",
      "@graph",
      "@id",
      "@index",
      "@list",
      "@nest",
      "@none",
      "@prefix",
      "@reverse",
      "@set",
      "@type",
      "@value",
      "@version"
    ];
    Util.ALIAS_RANGE_BLACKLIST = [
      "@context",
      "@preserve"
    ];
    Util.CONTAINERS = [
      "@list",
      "@set",
      "@index",
      "@language",
      "@graph",
      "@id",
      "@type"
    ];
    Util.CONTAINERS_1_0 = [
      "@list",
      "@set",
      "@index"
    ];
    exports.Util = Util;
  }
});

// node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js
var require_JsonLdContextNormalized = __commonJS({
  "node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultExpandOptions = exports.JsonLdContextNormalized = void 0;
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var ErrorCoded_1 = require_ErrorCoded();
    var Util_1 = require_Util();
    var JsonLdContextNormalized = class {
      constructor(contextRaw) {
        this.contextRaw = contextRaw;
      }
      /**
       * @return The raw inner context.
       */
      getContextRaw() {
        return this.contextRaw;
      }
      /**
       * Expand the term or prefix of the given term if it has one,
       * otherwise return the term as-is.
       *
       * This will try to expand the IRI as much as possible.
       *
       * Iff in vocab-mode, then other references to other terms in the context can be used,
       * such as to `myTerm`:
       * ```
       * {
       *   "myTerm": "http://example.org/myLongTerm"
       * }
       * ```
       *
       * @param {string} term A term that is an URL or a prefixed URL.
       * @param {boolean} expandVocab If the term is a predicate or type and should be expanded based on @vocab,
       *                              otherwise it is considered a regular term that is expanded based on @base.
       * @param {IExpandOptions} options Options that define the way how expansion must be done.
       * @return {string} The expanded term, the term as-is, or null if it was explicitly disabled in the context.
       * @throws If the term is aliased to an invalid value (not a string, IRI or keyword).
       */
      expandTerm(term, expandVocab, options = exports.defaultExpandOptions) {
        const contextValue = this.contextRaw[term];
        if (contextValue === null || contextValue && contextValue["@id"] === null) {
          return null;
        }
        let validIriMapping = true;
        if (contextValue && expandVocab) {
          const value = Util_1.Util.getContextValueId(contextValue);
          if (value && value !== term) {
            if (typeof value !== "string" || !Util_1.Util.isValidIri(value) && !Util_1.Util.isValidKeyword(value)) {
              if (!Util_1.Util.isPotentialKeyword(value)) {
                validIriMapping = false;
              }
            } else {
              return value;
            }
          }
        }
        const prefix = Util_1.Util.getPrefix(term, this.contextRaw);
        const vocab = this.contextRaw["@vocab"];
        const vocabRelative = (!!vocab || vocab === "") && vocab.indexOf(":") < 0;
        const base = this.contextRaw["@base"];
        const potentialKeyword = Util_1.Util.isPotentialKeyword(term);
        if (prefix) {
          const contextPrefixValue = this.contextRaw[prefix];
          const value = Util_1.Util.getContextValueId(contextPrefixValue);
          if (value) {
            if (typeof contextPrefixValue === "string" || !options.allowPrefixForcing) {
              if (!Util_1.Util.isSimpleTermDefinitionPrefix(value, options)) {
                return term;
              }
            } else {
              if (value[0] !== "_" && !potentialKeyword && !contextPrefixValue["@prefix"] && !(term in this.contextRaw)) {
                return term;
              }
            }
            return value + term.substr(prefix.length + 1);
          }
        } else if (expandVocab && (vocab || vocab === "" || options.allowVocabRelativeToBase && (base && vocabRelative)) && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {
          if (vocabRelative) {
            if (options.allowVocabRelativeToBase) {
              return (vocab || base ? (0, relative_to_absolute_iri_1.resolve)(vocab, base) : "") + term;
            } else {
              throw new ErrorCoded_1.ErrorCoded(`Relative vocab expansion for term '${term}' with vocab '${vocab}' is not allowed.`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);
            }
          } else {
            return vocab + term;
          }
        } else if (!expandVocab && base && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {
          return (0, relative_to_absolute_iri_1.resolve)(term, base);
        }
        if (validIriMapping) {
          return term;
        } else {
          throw new ErrorCoded_1.ErrorCoded(`Invalid IRI mapping found for context entry '${term}': '${JSON.stringify(contextValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
        }
      }
      /**
       * Compact the given term using @base, @vocab, an aliased term, or a prefixed term.
       *
       * This will try to compact the IRI as much as possible.
       *
       * @param {string} iri An IRI to compact.
       * @param {boolean} vocab If the term is a predicate or type and should be compacted based on @vocab,
       *                        otherwise it is considered a regular term that is compacted based on @base.
       * @return {string} The compacted term or the IRI as-is.
       */
      compactIri(iri, vocab) {
        if (vocab && this.contextRaw["@vocab"] && iri.startsWith(this.contextRaw["@vocab"])) {
          return iri.substr(this.contextRaw["@vocab"].length);
        }
        if (!vocab && this.contextRaw["@base"] && iri.startsWith(this.contextRaw["@base"])) {
          return iri.substr(this.contextRaw["@base"].length);
        }
        const shortestPrefixing = { prefix: "", suffix: iri };
        for (const key in this.contextRaw) {
          const value = this.contextRaw[key];
          if (value && !Util_1.Util.isPotentialKeyword(key)) {
            const contextIri = Util_1.Util.getContextValueId(value);
            if (iri.startsWith(contextIri)) {
              const suffix = iri.substr(contextIri.length);
              if (!suffix) {
                if (vocab) {
                  return key;
                }
              } else if (suffix.length < shortestPrefixing.suffix.length) {
                shortestPrefixing.prefix = key;
                shortestPrefixing.suffix = suffix;
              }
            }
          }
        }
        if (shortestPrefixing.prefix) {
          return shortestPrefixing.prefix + ":" + shortestPrefixing.suffix;
        }
        return iri;
      }
    };
    exports.JsonLdContextNormalized = JsonLdContextNormalized;
    exports.defaultExpandOptions = {
      allowPrefixForcing: true,
      allowPrefixNonGenDelims: false,
      allowVocabRelativeToBase: true
    };
  }
});

// node_modules/jsonld-context-parser/lib/ContextParser.js
var require_ContextParser = __commonJS({
  "node_modules/jsonld-context-parser/lib/ContextParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContextParser = void 0;
    require_browser_polyfill();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var ErrorCoded_1 = require_ErrorCoded();
    var FetchDocumentLoader_1 = require_FetchDocumentLoader();
    var JsonLdContextNormalized_1 = require_JsonLdContextNormalized();
    var Util_1 = require_Util();
    var ContextParser = class _ContextParser {
      constructor(options) {
        options = options || {};
        this.documentLoader = options.documentLoader || new FetchDocumentLoader_1.FetchDocumentLoader();
        this.documentCache = {};
        this.validateContext = !options.skipValidation;
        this.expandContentTypeToBase = !!options.expandContentTypeToBase;
        this.remoteContextsDepthLimit = options.remoteContextsDepthLimit || 32;
        this.redirectSchemaOrgHttps = "redirectSchemaOrgHttps" in options ? !!options.redirectSchemaOrgHttps : true;
      }
      /**
       * Validate the given @language value.
       * An error will be thrown if it is invalid.
       * @param value An @language value.
       * @param {boolean} strictRange If the string value should be strictly checked against a regex.
       * @param {string} errorCode The error code to emit on errors.
       * @return {boolean} If validation passed.
       *                   Can only be false if strictRange is false and the string value did not pass the regex.
       */
      static validateLanguage(value, strictRange, errorCode) {
        if (typeof value !== "string") {
          throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a string, got '${JSON.stringify(value)}'`, errorCode);
        }
        if (!Util_1.Util.REGEX_LANGUAGE_TAG.test(value)) {
          if (strictRange) {
            throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a valid language tag, got '${JSON.stringify(value)}'`, errorCode);
          } else {
            return false;
          }
        }
        return true;
      }
      /**
       * Validate the given @direction value.
       * An error will be thrown if it is invalid.
       * @param value An @direction value.
       * @param {boolean} strictValues If the string value should be strictly checked against a regex.
       * @return {boolean} If validation passed.
       *                   Can only be false if strictRange is false and the string value did not pass the regex.
       */
      static validateDirection(value, strictValues) {
        if (typeof value !== "string") {
          throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be a string, got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);
        }
        if (!Util_1.Util.REGEX_DIRECTION_TAG.test(value)) {
          if (strictValues) {
            throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be 'ltr' or 'rtl', got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);
          } else {
            return false;
          }
        }
        return true;
      }
      /**
       * Add an @id term for all @reverse terms.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @return {IJsonLdContextNormalizedRaw} The mutated input context.
       */
      idifyReverseTerms(context) {
        for (const key of Object.keys(context)) {
          let value = context[key];
          if (value && typeof value === "object") {
            if (value["@reverse"] && !value["@id"]) {
              if (typeof value["@reverse"] !== "string" || Util_1.Util.isValidKeyword(value["@reverse"])) {
                throw new ErrorCoded_1.ErrorCoded(`Invalid @reverse value, must be absolute IRI or blank node: '${value["@reverse"]}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
              }
              value = context[key] = Object.assign(Object.assign({}, value), { "@id": value["@reverse"] });
              value["@id"] = value["@reverse"];
              if (Util_1.Util.isPotentialKeyword(value["@reverse"])) {
                delete value["@reverse"];
              } else {
                value["@reverse"] = true;
              }
            }
          }
        }
        return context;
      }
      /**
       * Expand all prefixed terms in the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {boolean} expandContentTypeToBase If @type inside the context may be expanded
       *                                          via @base if @vocab is set to null.
       * @param {string[]} keys Optional set of keys from the context to expand. If left undefined, all
       * keys in the context will be expanded.
       */
      expandPrefixedTerms(context, expandContentTypeToBase, keys) {
        const contextRaw = context.getContextRaw();
        for (const key of keys || Object.keys(contextRaw)) {
          if (Util_1.Util.EXPAND_KEYS_BLACKLIST.indexOf(key) < 0 && !Util_1.Util.isReservedInternalKeyword(key)) {
            const keyValue = contextRaw[key];
            if (Util_1.Util.isPotentialKeyword(key) && Util_1.Util.ALIAS_DOMAIN_BLACKLIST.indexOf(key) >= 0) {
              if (key !== "@type" || typeof contextRaw[key] === "object" && !(contextRaw[key]["@protected"] || contextRaw[key]["@container"] === "@set")) {
                throw new ErrorCoded_1.ErrorCoded(`Keywords can not be aliased to something else.
Tried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);
              }
            }
            if (Util_1.Util.ALIAS_RANGE_BLACKLIST.indexOf(Util_1.Util.getContextValueId(keyValue)) >= 0) {
              throw new ErrorCoded_1.ErrorCoded(`Aliasing to certain keywords is not allowed.
Tried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.INVALID_KEYWORD_ALIAS);
            }
            if (keyValue && Util_1.Util.isPotentialKeyword(Util_1.Util.getContextValueId(keyValue)) && keyValue["@prefix"] === true) {
              throw new ErrorCoded_1.ErrorCoded(`Tried to use keyword aliases as prefix: '${key}': '${JSON.stringify(keyValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
            while (Util_1.Util.isPrefixValue(contextRaw[key])) {
              const value = contextRaw[key];
              let changed = false;
              if (typeof value === "string") {
                contextRaw[key] = context.expandTerm(value, true);
                changed = changed || value !== contextRaw[key];
              } else {
                const id = value["@id"];
                const type = value["@type"];
                const canAddIdEntry = !("@prefix" in value) || Util_1.Util.isValidIri(key);
                if ("@id" in value) {
                  if (id !== void 0 && id !== null && typeof id === "string") {
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@id": context.expandTerm(id, true) });
                    changed = changed || id !== contextRaw[key]["@id"];
                  }
                } else if (!Util_1.Util.isPotentialKeyword(key) && canAddIdEntry) {
                  const newId = context.expandTerm(key, true);
                  if (newId !== key) {
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@id": newId });
                    changed = true;
                  }
                }
                if (type && typeof type === "string" && type !== "@vocab" && (!value["@container"] || !value["@container"]["@type"]) && canAddIdEntry) {
                  let expandedType = context.expandTerm(type, true);
                  if (expandContentTypeToBase && type === expandedType) {
                    expandedType = context.expandTerm(type, false);
                  }
                  if (expandedType !== type) {
                    changed = true;
                    contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { "@type": expandedType });
                  }
                }
              }
              if (!changed) {
                break;
              }
            }
          }
        }
      }
      /**
       * Normalize the @language entries in the given context to lowercase.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} parseOptions The parsing options.
       */
      normalize(context, { processingMode, normalizeLanguageTags }) {
        if (normalizeLanguageTags || processingMode === 1) {
          for (const key of Object.keys(context)) {
            if (key === "@language" && typeof context[key] === "string") {
              context[key] = context[key].toLowerCase();
            } else {
              const value = context[key];
              if (value && typeof value === "object") {
                if (typeof value["@language"] === "string") {
                  const lowercase = value["@language"].toLowerCase();
                  if (lowercase !== value["@language"]) {
                    context[key] = Object.assign(Object.assign({}, value), { "@language": lowercase });
                  }
                }
              }
            }
          }
        }
      }
      /**
       * Convert all @container strings and array values to hash-based values.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       */
      containersToHash(context) {
        for (const key of Object.keys(context)) {
          const value = context[key];
          if (value && typeof value === "object") {
            if (typeof value["@container"] === "string") {
              context[key] = Object.assign(Object.assign({}, value), { "@container": { [value["@container"]]: true } });
            } else if (Array.isArray(value["@container"])) {
              const newValue = {};
              for (const containerValue of value["@container"]) {
                newValue[containerValue] = true;
              }
              context[key] = Object.assign(Object.assign({}, value), { "@container": newValue });
            }
          }
        }
      }
      /**
       * Normalize and apply context-level @protected terms onto each term separately.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {number} processingMode The processing mode.
       */
      applyScopedProtected(context, { processingMode }, expandOptions) {
        if (processingMode && processingMode >= 1.1) {
          if (context["@protected"]) {
            for (const key of Object.keys(context)) {
              if (Util_1.Util.isReservedInternalKeyword(key)) {
                continue;
              }
              if (!Util_1.Util.isPotentialKeyword(key) && !Util_1.Util.isTermProtected(context, key)) {
                const value = context[key];
                if (value && typeof value === "object") {
                  if (!("@protected" in context[key])) {
                    context[key] = Object.assign(Object.assign({}, context[key]), { "@protected": true });
                  }
                } else {
                  context[key] = {
                    "@id": value,
                    "@protected": true
                  };
                  if (Util_1.Util.isSimpleTermDefinitionPrefix(value, expandOptions)) {
                    context[key] = Object.assign(Object.assign({}, context[key]), { "@prefix": true });
                  }
                }
              }
            }
            delete context["@protected"];
          }
        }
      }
      /**
       * Check if the given context inheritance does not contain any overrides of protected terms.
       * @param {IJsonLdContextNormalizedRaw} contextBefore The context that may contain some protected terms.
       * @param {IJsonLdContextNormalizedRaw} contextAfter A new context that is being applied on the first one.
       * @param {IExpandOptions} expandOptions Options that are needed for any expansions during this validation.
       * @param {string[]} keys Optional set of keys from the context to validate. If left undefined, all
       * keys defined in contextAfter will be checked.
       */
      validateKeywordRedefinitions(contextBefore, contextAfter, expandOptions, keys) {
        for (const key of keys !== null && keys !== void 0 ? keys : Object.keys(contextAfter)) {
          if (Util_1.Util.isTermProtected(contextBefore, key)) {
            if (typeof contextAfter[key] === "string") {
              contextAfter[key] = { "@id": contextAfter[key], "@protected": true };
            } else {
              contextAfter[key] = Object.assign(Object.assign({}, contextAfter[key]), { "@protected": true });
            }
            if (!Util_1.Util.deepEqual(contextBefore[key], contextAfter[key])) {
              throw new ErrorCoded_1.ErrorCoded(`Attempted to override the protected keyword ${key} from ${JSON.stringify(Util_1.Util.getContextValueId(contextBefore[key]))} to ${JSON.stringify(Util_1.Util.getContextValueId(contextAfter[key]))}`, ErrorCoded_1.ERROR_CODES.PROTECTED_TERM_REDEFINITION);
            }
          }
        }
      }
      /**
       * Validate the entries of the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} options The parse options.
       */
      validate(context, { processingMode }) {
        for (const key of Object.keys(context)) {
          if (Util_1.Util.isReservedInternalKeyword(key)) {
            continue;
          }
          if (key === "") {
            throw new ErrorCoded_1.ErrorCoded(`The empty term is not allowed, got: '${key}': '${JSON.stringify(context[key])}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
          }
          const value = context[key];
          const valueType = typeof value;
          if (Util_1.Util.isPotentialKeyword(key)) {
            switch (key.substr(1)) {
              case "vocab":
                if (value !== null && valueType !== "string") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @vocab IRI: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);
                }
                break;
              case "base":
                if (value !== null && valueType !== "string") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @base IRI: ${context[key]}`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_IRI);
                }
                break;
              case "language":
                if (value !== null) {
                  _ContextParser.validateLanguage(value, true, ErrorCoded_1.ERROR_CODES.INVALID_DEFAULT_LANGUAGE);
                }
                break;
              case "version":
                if (value !== null && valueType !== "number") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @version number: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);
                }
                break;
              case "direction":
                if (value !== null) {
                  _ContextParser.validateDirection(value, true);
                }
                break;
              case "propagate":
                if (processingMode === 1) {
                  throw new ErrorCoded_1.ErrorCoded(`Found an illegal @propagate keyword: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
                }
                if (value !== null && valueType !== "boolean") {
                  throw new ErrorCoded_1.ErrorCoded(`Found an invalid @propagate value: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_PROPAGATE_VALUE);
                }
                break;
            }
            if (Util_1.Util.isValidKeyword(key) && Util_1.Util.isValidKeyword(Util_1.Util.getContextValueId(value))) {
              throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${Util_1.Util.getContextValueId(value)}'`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);
            }
            continue;
          }
          if (value !== null) {
            switch (valueType) {
              case "string":
                if (Util_1.Util.getPrefix(value, context) === key) {
                  throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);
                }
                if (Util_1.Util.isValidIriWeak(key)) {
                  if (value === "@type") {
                    throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                  } else if (Util_1.Util.isValidIri(value) && value !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {
                    throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                  }
                }
                break;
              case "object":
                if (!Util_1.Util.isCompactIri(key) && !("@id" in value) && (value["@type"] === "@id" ? !context["@base"] : !context["@vocab"])) {
                  throw new ErrorCoded_1.ErrorCoded(`Missing @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                }
                for (const objectKey of Object.keys(value)) {
                  const objectValue = value[objectKey];
                  if (!objectValue) {
                    continue;
                  }
                  switch (objectKey) {
                    case "@id":
                      if (Util_1.Util.isValidKeyword(objectValue) && objectValue !== "@type" && objectValue !== "@id" && objectValue !== "@graph" && objectValue !== "@nest") {
                        throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                      }
                      if (Util_1.Util.isValidIriWeak(key)) {
                        if (objectValue === "@type") {
                          throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                        } else if (Util_1.Util.isValidIri(objectValue) && objectValue !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {
                          throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                        }
                      }
                      if (typeof objectValue !== "string") {
                        throw new ErrorCoded_1.ErrorCoded(`Detected non-string @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);
                      }
                      if (Util_1.Util.getPrefix(objectValue, context) === key) {
                        throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);
                      }
                      break;
                    case "@type":
                      if (value["@container"] === "@type" && objectValue !== "@id" && objectValue !== "@vocab") {
                        throw new ErrorCoded_1.ErrorCoded(`@container: @type only allows @type: @id or @vocab, but got: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      if (typeof objectValue !== "string") {
                        throw new ErrorCoded_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      if (objectValue !== "@id" && objectValue !== "@vocab" && (processingMode === 1 || objectValue !== "@json") && (processingMode === 1 || objectValue !== "@none") && (objectValue[0] === "_" || !Util_1.Util.isValidIri(objectValue))) {
                        throw new ErrorCoded_1.ErrorCoded(`A context @type must be an absolute IRI, found: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);
                      }
                      break;
                    case "@reverse":
                      if (typeof objectValue === "string" && value["@id"] && value["@id"] !== objectValue) {
                        throw new ErrorCoded_1.ErrorCoded(`Found non-matching @id and @reverse term values in '${key}':'${objectValue}' and '${value["@id"]}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                      }
                      if ("@nest" in value) {
                        throw new ErrorCoded_1.ErrorCoded(`@nest is not allowed in the reverse property '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                      }
                      break;
                    case "@container":
                      if (processingMode === 1) {
                        if (Object.keys(objectValue).length > 1 || Util_1.Util.CONTAINERS_1_0.indexOf(Object.keys(objectValue)[0]) < 0) {
                          throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${Object.keys(objectValue)}') in 1.0, must be only one of ${Util_1.Util.CONTAINERS_1_0.join(", ")}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);
                        }
                      }
                      for (const containerValue of Object.keys(objectValue)) {
                        if (containerValue === "@list" && value["@reverse"]) {
                          throw new ErrorCoded_1.ErrorCoded(`Term value can not be @container: @list and @reverse at the same time on '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);
                        }
                        if (Util_1.Util.CONTAINERS.indexOf(containerValue) < 0) {
                          throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${containerValue}'), must be one of ${Util_1.Util.CONTAINERS.join(", ")}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);
                        }
                      }
                      break;
                    case "@language":
                      _ContextParser.validateLanguage(objectValue, true, ErrorCoded_1.ERROR_CODES.INVALID_LANGUAGE_MAPPING);
                      break;
                    case "@direction":
                      _ContextParser.validateDirection(objectValue, true);
                      break;
                    case "@prefix":
                      if (objectValue !== null && typeof objectValue !== "boolean") {
                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @prefix boolean in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_PREFIX_VALUE);
                      }
                      if (!("@id" in value) && !Util_1.Util.isValidIri(key)) {
                        throw new ErrorCoded_1.ErrorCoded(`Invalid @prefix definition for '${key}' ('${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
                      }
                      break;
                    case "@index":
                      if (processingMode === 1 || !value["@container"] || !value["@container"]["@index"]) {
                        throw new ErrorCoded_1.ErrorCoded(`Attempt to add illegal key to value object: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
                      }
                      break;
                    case "@nest":
                      if (Util_1.Util.isPotentialKeyword(objectValue) && objectValue !== "@nest") {
                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @nest value in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_NEST_VALUE);
                      }
                  }
                }
                break;
              default:
                throw new ErrorCoded_1.ErrorCoded(`Found an invalid term value: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
          }
        }
      }
      /**
       * Apply the @base context entry to the given context under certain circumstances.
       * @param context A context.
       * @param options Parsing options.
       * @param inheritFromParent If the @base value from the parent context can be inherited.
       * @return The given context.
       */
      applyBaseEntry(context, options, inheritFromParent) {
        if (typeof context === "string") {
          return context;
        }
        if (inheritFromParent && !("@base" in context) && options.parentContext && typeof options.parentContext === "object" && "@base" in options.parentContext) {
          context["@base"] = options.parentContext["@base"];
          if (options.parentContext["@__baseDocument"]) {
            context["@__baseDocument"] = true;
          }
        }
        if (options.baseIRI && !options.external) {
          if (!("@base" in context)) {
            context["@base"] = options.baseIRI;
            context["@__baseDocument"] = true;
          } else if (context["@base"] !== null && typeof context["@base"] === "string" && !Util_1.Util.isValidIri(context["@base"])) {
            context["@base"] = (0, relative_to_absolute_iri_1.resolve)(context["@base"], options.parentContext && options.parentContext["@base"] || options.baseIRI);
          }
        }
        return context;
      }
      /**
       * Resolve relative context IRIs, or return full IRIs as-is.
       * @param {string} contextIri A context IRI.
       * @param {string} baseIRI A base IRI.
       * @return {string} The normalized context IRI.
       */
      normalizeContextIri(contextIri, baseIRI) {
        if (!Util_1.Util.isValidIri(contextIri)) {
          try {
            contextIri = (0, relative_to_absolute_iri_1.resolve)(contextIri, baseIRI);
          } catch (_a) {
            throw new Error(`Invalid context IRI: ${contextIri}`);
          }
        }
        if (this.redirectSchemaOrgHttps && contextIri.startsWith("http://schema.org")) {
          contextIri = "https://schema.org/";
        }
        return contextIri;
      }
      /**
       * Parse scoped contexts in the given context.
       * @param {IJsonLdContextNormalizedRaw} context A context.
       * @param {IParseOptions} options Parsing options.
       * @return {IJsonLdContextNormalizedRaw} The mutated input context.
       * @param {string[]} keys Optional set of keys from the context to parseInnerContexts of. If left undefined, all
       * keys in the context will be iterated over.
       */
      async parseInnerContexts(context, options, keys) {
        for (const key of keys !== null && keys !== void 0 ? keys : Object.keys(context)) {
          const value = context[key];
          if (value && typeof value === "object") {
            if ("@context" in value && value["@context"] !== null && !options.ignoreScopedContexts) {
              if (this.validateContext) {
                try {
                  const parentContext = Object.assign(Object.assign({}, context), { [key]: Object.assign({}, context[key]) });
                  delete parentContext[key]["@context"];
                  await this.parse(value["@context"], Object.assign(Object.assign({}, options), { external: false, parentContext, ignoreProtection: true, ignoreRemoteScopedContexts: true, ignoreScopedContexts: true }));
                } catch (e) {
                  throw new ErrorCoded_1.ErrorCoded(e.message, ErrorCoded_1.ERROR_CODES.INVALID_SCOPED_CONTEXT);
                }
              }
              context[key] = Object.assign(Object.assign({}, value), { "@context": (await this.parse(value["@context"], Object.assign(Object.assign({}, options), { external: false, minimalProcessing: true, ignoreRemoteScopedContexts: true, parentContext: context }))).getContextRaw() });
            }
          }
        }
        return context;
      }
      async parse(context, options = {}, internalOptions = {}) {
        const { baseIRI, parentContext, external, processingMode = _ContextParser.DEFAULT_PROCESSING_MODE, normalizeLanguageTags, ignoreProtection, minimalProcessing } = options;
        const remoteContexts = options.remoteContexts || {};
        if (Object.keys(remoteContexts).length >= this.remoteContextsDepthLimit) {
          throw new ErrorCoded_1.ErrorCoded("Detected an overflow in remote context inclusions: " + Object.keys(remoteContexts), ErrorCoded_1.ERROR_CODES.CONTEXT_OVERFLOW);
        }
        if (context === null || context === void 0) {
          if (!ignoreProtection && parentContext && Util_1.Util.hasProtectedTerms(parentContext)) {
            throw new ErrorCoded_1.ErrorCoded("Illegal context nullification when terms are protected", ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_NULLIFICATION);
          }
          return new JsonLdContextNormalized_1.JsonLdContextNormalized(this.applyBaseEntry({}, options, false));
        } else if (typeof context === "string") {
          const contextIri = this.normalizeContextIri(context, baseIRI);
          const overriddenLoad = this.getOverriddenLoad(contextIri, options);
          if (overriddenLoad) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(overriddenLoad);
          }
          const parsedStringContext = await this.parse(await this.load(contextIri), Object.assign(Object.assign({}, options), { baseIRI: contextIri, external: true, remoteContexts: Object.assign(Object.assign({}, remoteContexts), { [contextIri]: true }) }));
          this.applyBaseEntry(parsedStringContext.getContextRaw(), options, true);
          return parsedStringContext;
        } else if (Array.isArray(context)) {
          const contextIris = [];
          const contexts = await Promise.all(context.map((subContext, i2) => {
            if (typeof subContext === "string") {
              const contextIri = this.normalizeContextIri(subContext, baseIRI);
              contextIris[i2] = contextIri;
              const overriddenLoad = this.getOverriddenLoad(contextIri, options);
              if (overriddenLoad) {
                return overriddenLoad;
              }
              return this.load(contextIri);
            } else {
              return subContext;
            }
          }));
          if (minimalProcessing) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(contexts);
          }
          const reducedContexts = await contexts.reduce((accContextPromise, contextEntry, i2) => accContextPromise.then((accContext) => this.parse(
            contextEntry,
            Object.assign(Object.assign({}, options), { baseIRI: contextIris[i2] || options.baseIRI, external: !!contextIris[i2] || options.external, parentContext: accContext.getContextRaw(), remoteContexts: contextIris[i2] ? Object.assign(Object.assign({}, remoteContexts), { [contextIris[i2]]: true }) : remoteContexts }),
            // @ts-expect-error: This third argument causes a type error because we have hidden it from consumers
            {
              skipValidation: i2 < contexts.length - 1
            }
          )), Promise.resolve(new JsonLdContextNormalized_1.JsonLdContextNormalized(parentContext || {})));
          this.applyBaseEntry(reducedContexts.getContextRaw(), options, true);
          return reducedContexts;
        } else if (typeof context === "object") {
          if ("@context" in context) {
            return await this.parse(context["@context"], options);
          }
          context = Object.assign({}, context);
          if (external) {
            delete context["@base"];
          }
          this.applyBaseEntry(context, options, true);
          this.containersToHash(context);
          if (minimalProcessing) {
            return new JsonLdContextNormalized_1.JsonLdContextNormalized(context);
          }
          let importContext = {};
          if ("@import" in context) {
            if (processingMode >= 1.1) {
              if (typeof context["@import"] !== "string") {
                throw new ErrorCoded_1.ErrorCoded("An @import value must be a string, but got " + typeof context["@import"], ErrorCoded_1.ERROR_CODES.INVALID_IMPORT_VALUE);
              }
              importContext = await this.loadImportContext(this.normalizeContextIri(context["@import"], baseIRI));
              delete context["@import"];
            } else {
              throw new ErrorCoded_1.ErrorCoded("Context importing is not supported in JSON-LD 1.0", ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
            }
          }
          this.applyScopedProtected(importContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);
          const newContext = Object.assign(importContext, context);
          this.idifyReverseTerms(newContext);
          this.normalize(newContext, { processingMode, normalizeLanguageTags });
          this.applyScopedProtected(newContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);
          const keys = Object.keys(newContext);
          const overlappingKeys = [];
          if (typeof parentContext === "object") {
            for (const key in parentContext) {
              if (key in newContext) {
                overlappingKeys.push(key);
              } else {
                newContext[key] = parentContext[key];
              }
            }
          }
          await this.parseInnerContexts(newContext, options, keys);
          const newContextWrapped = new JsonLdContextNormalized_1.JsonLdContextNormalized(newContext);
          if ((newContext && newContext["@version"] || _ContextParser.DEFAULT_PROCESSING_MODE) >= 1.1 && (context["@vocab"] && typeof context["@vocab"] === "string" || context["@vocab"] === "")) {
            if (parentContext && "@vocab" in parentContext && context["@vocab"].indexOf(":") < 0) {
              newContext["@vocab"] = parentContext["@vocab"] + context["@vocab"];
            } else if (Util_1.Util.isCompactIri(context["@vocab"]) || context["@vocab"] in newContext) {
              newContext["@vocab"] = newContextWrapped.expandTerm(context["@vocab"], true);
            }
          }
          this.expandPrefixedTerms(newContextWrapped, this.expandContentTypeToBase, keys);
          if (!ignoreProtection && parentContext && processingMode >= 1.1) {
            this.validateKeywordRedefinitions(parentContext, newContext, JsonLdContextNormalized_1.defaultExpandOptions, overlappingKeys);
          }
          if (this.validateContext && !internalOptions.skipValidation) {
            this.validate(newContext, { processingMode });
          }
          return newContextWrapped;
        } else {
          throw new ErrorCoded_1.ErrorCoded(`Tried parsing a context that is not a string, array or object, but got ${context}`, ErrorCoded_1.ERROR_CODES.INVALID_LOCAL_CONTEXT);
        }
      }
      /**
       * Fetch the given URL as a raw JSON-LD context.
       * @param url An URL.
       * @return A promise resolving to a raw JSON-LD context.
       */
      async load(url) {
        const cached = this.documentCache[url];
        if (cached) {
          return cached;
        }
        let document2;
        try {
          document2 = await this.documentLoader.load(url);
        } catch (e) {
          throw new ErrorCoded_1.ErrorCoded(`Failed to load remote context ${url}: ${e.message}`, ErrorCoded_1.ERROR_CODES.LOADING_REMOTE_CONTEXT_FAILED);
        }
        if (!("@context" in document2)) {
          throw new ErrorCoded_1.ErrorCoded(`Missing @context in remote context at ${url}`, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);
        }
        return this.documentCache[url] = document2["@context"];
      }
      /**
       * Override the given context that may be loaded.
       *
       * This will check whether or not the url is recursively being loaded.
       * @param url An URL.
       * @param options Parsing options.
       * @return An overridden context, or null.
       *         Optionally an error can be thrown if a cyclic context is detected.
       */
      getOverriddenLoad(url, options) {
        if (url in (options.remoteContexts || {})) {
          if (options.ignoreRemoteScopedContexts) {
            return url;
          } else {
            throw new ErrorCoded_1.ErrorCoded("Detected a cyclic context inclusion of " + url, ErrorCoded_1.ERROR_CODES.RECURSIVE_CONTEXT_INCLUSION);
          }
        }
        return null;
      }
      /**
       * Load an @import'ed context.
       * @param importContextIri The full URI of an @import value.
       */
      async loadImportContext(importContextIri) {
        let importContext = await this.load(importContextIri);
        if (typeof importContext !== "object" || Array.isArray(importContext)) {
          throw new ErrorCoded_1.ErrorCoded("An imported context must be a single object: " + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);
        }
        if ("@import" in importContext) {
          throw new ErrorCoded_1.ErrorCoded("An imported context can not import another context: " + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);
        }
        importContext = Object.assign({}, importContext);
        this.containersToHash(importContext);
        return importContext;
      }
    };
    ContextParser.DEFAULT_PROCESSING_MODE = 1.1;
    exports.ContextParser = ContextParser;
  }
});

// node_modules/jsonld-context-parser/lib/IDocumentLoader.js
var require_IDocumentLoader = __commonJS({
  "node_modules/jsonld-context-parser/lib/IDocumentLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/jsonld-context-parser/lib/JsonLdContext.js
var require_JsonLdContext = __commonJS({
  "node_modules/jsonld-context-parser/lib/JsonLdContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/jsonld-context-parser/index.js
var require_jsonld_context_parser = __commonJS({
  "node_modules/jsonld-context-parser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ContextParser(), exports);
    __exportStar(require_ErrorCoded(), exports);
    __exportStar(require_FetchDocumentLoader(), exports);
    __exportStar(require_IDocumentLoader(), exports);
    __exportStar(require_JsonLdContext(), exports);
    __exportStar(require_JsonLdContextNormalized(), exports);
    __exportStar(require_Util(), exports);
  }
});

// node_modules/graphql-to-sparql/lib/Util.js
var require_Util2 = __commonJS({
  "node_modules/graphql-to-sparql/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var Util = class {
      constructor(settings) {
        this.nodeHandlers = {};
        this.nodeValueHandlers = {};
        this.directiveNodeHandlers = {};
        this.settings = settings;
        this.dataFactory = settings.dataFactory || new rdf_data_factory_1.DataFactory();
        this.operationFactory = new sparqlalgebrajs_1.Factory(this.dataFactory);
        this.contextParser = new jsonld_context_parser_1.ContextParser();
      }
      /**
       * Register a new {@link NodeHandlerAdapter}.
       * @param {NodeHandlerAdapter<any>} nodeHandler A handler for converting GraphQL nodes to operations.
       */
      registerNodeHandler(nodeHandler) {
        this.nodeHandlers[nodeHandler.targetKind] = nodeHandler;
      }
      /**
       * Register a new {@link NodeValueHandlerAdapter}
       * @param {NodeValueHandlerAdapter<any>} nodeValueHandler A handler for converting GraphQL value nodes
       *                                                        to terms and patterns.
       */
      registerNodeValueHandler(nodeValueHandler) {
        this.nodeValueHandlers[nodeValueHandler.targetKind] = nodeValueHandler;
      }
      /**
       * Register a new {@link DirectiveNodeHandlerAdapter}
       * @param {DirectiveNodeHandlerAdapter} directiveNodeHandler A handler for handling GraphQL directives.
       */
      registerDirectiveNodeHandler(directiveNodeHandler) {
        this.directiveNodeHandlers[directiveNodeHandler.targetKind] = directiveNodeHandler;
      }
      /**
       * Get the operation for the given GraphQL node.
       * @param {T} node A GraphQL node.
       * @param {IConvertContext} convertContext A conversion context.
       * @return {Operation} A SPARQL algebra operation.
       */
      handleNode(node, convertContext) {
        const nodeHandler = this.nodeHandlers[node.kind];
        if (!nodeHandler) {
          throw new Error(`Unsupported GraphQL node '${node.kind}'`);
        }
        return nodeHandler.handle(node, convertContext);
      }
      /**
       * Get the terms and patterns for the given value node.
       * @param {T} node A GraphQL node.
       * @param {string} fieldName The name of the field or argument in which the value was encapsulated.
       * @param {IConvertContext} convertContext A conversion context.
       * @return {IValueNodeHandlerOutput} The RDF terms and patterns.
       */
      handleNodeValue(node, fieldName, convertContext) {
        const nodeValueHandler = this.nodeValueHandlers[node.kind];
        if (!nodeValueHandler) {
          throw new Error(`Unsupported GraphQL value node '${node.kind}'`);
        }
        return nodeValueHandler.handle(node, fieldName, convertContext);
      }
      /**
       * Get the handler output for the given directive.
       * @param {IDirectiveContext} directiveContext The current directive context.
       * @param {IConvertContext} convertContext A conversion context.
       * @return {IDirectiveNodeHandlerOutput} The directive node handler output or null.
       */
      handleDirectiveNode(directiveContext, convertContext) {
        const directiveNodeHandler = this.directiveNodeHandlers[directiveContext.directive.name.value];
        if (!directiveNodeHandler) {
          return null;
        }
        return directiveNodeHandler.handle(directiveContext, convertContext);
      }
      /**
       * Join the given array of operations.
       * If all operations are BGPs, then a single big BGP with all patterns from the given BGPs will be created.
       * @param {Operation[]} operations An array of operations.
       * @return {Operation} A single joined operation.
       */
      joinOperations(operations) {
        if (operations.length === 1) {
          return operations[0];
        }
        const bgps = [];
        const nonBgps = [];
        for (const operation of operations) {
          if (operation.type === "bgp") {
            bgps.push(operation);
          } else {
            nonBgps.push(operation);
          }
        }
        if (bgps.length === operations.length) {
          return this.joinOperationsAsBgp(bgps);
        } else if (bgps.length === operations.length - 1 && nonBgps[0].type === "leftjoin" && nonBgps[0].input[0].type === "bgp") {
          const originalLeftJoin = nonBgps[0];
          bgps.push(originalLeftJoin.input[0]);
          return this.operationFactory.createLeftJoin(this.joinOperationsAsBgp(bgps), originalLeftJoin.input[1]);
        } else if (nonBgps.length === operations.length) {
          return this.joinOperationsAsNestedJoin(nonBgps);
        } else {
          return this.joinOperationsAsNestedJoin([
            this.joinOperationsAsBgp(bgps),
            this.joinOperationsAsNestedJoin(nonBgps)
          ]);
        }
      }
      joinOperationsAsBgp(operations) {
        return this.operationFactory.createBgp([].concat.apply([], operations.map((op) => op.patterns)));
      }
      joinOperationsAsNestedJoin(operations) {
        return this.operationFactory.createJoin(operations);
      }
      /**
       * Append a field's label to a path.
       * @param {string[]} path A path.
       * @param {string} fieldLabel A field label.
       * @return {string[]} A new path array.
       */
      appendFieldToPath(path, fieldLabel) {
        return path.concat([fieldLabel]);
      }
      /**
       * Get the label of a field by taking into account the alias.
       * @param {FieldNode} field A field node.
       * @return {string} The field name or alias.
       */
      getFieldLabel(field) {
        return (field.alias ? field.alias : field.name).value;
      }
      /**
       * Convert a field node to a variable built from the node name and the current path inside the context.
       * @param {string} fieldLabel A field label.
       * @param {IConvertContext} convertContext A convert context.
       * @param {string} variableDelimiter A variable delimiter.
       * @return {Variable} A variable.
       */
      nameToVariable(fieldLabel, convertContext) {
        return this.dataFactory.variable((convertContext.path.length ? convertContext.path.join(this.settings.variableDelimiter) + this.settings.variableDelimiter : "") + fieldLabel);
      }
      /**
       * Convert a GraphQL term into a URI using the given context.
       * @param {string} value A GraphQL term.
       * @param {IContext} context A JSON-LD context.
       * @return {NamedNode} A named node.
       */
      valueToNamedNode(value, context) {
        const contextValue = context.expandTerm(value, true);
        if (this.settings.requireContext && !contextValue) {
          throw new Error("No context entry was found for " + value);
        }
        return this.dataFactory.namedNode(contextValue || value);
      }
      /**
       * Get an argument by name.
       * This will return null if the argument could not be found.
       * @param {ReadonlyArray<ArgumentNode>} args Arguments or null.
       * @param {string} name The name of an argument.
       * @return {ArgumentNode} The named argument.
       */
      getArgument(args, name) {
        if (args) {
          for (const argument of args) {
            if (argument.name.value === name) {
              return argument;
            }
          }
        }
      }
      /**
       * Create a pattern with an rdf:type predicate.
       * @param {Term} subject The subject.
       * @param {NamedTypeNode} typeCondition The object name.
       * @param {IConvertContext} convertContext A convert context.
       * @return {Pattern} A pattern.
       */
      newTypePattern(subject, typeCondition, convertContext) {
        return this.operationFactory.createPattern(subject, this.dataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"), this.valueToNamedNode(typeCondition.name.value, convertContext.context), convertContext.graph);
      }
      /**
       * Create a quad pattern when the predicate is a name node that needs to be translated using the context.
       * @param {Term} subject The subject.
       * @param {NameNode} predicateName The name node for the predicate.
       * @param {Term} object The object.
       * @param {Term} graph The graph.
       * @param {IContext} context A context.
       * @return {Pattern} A quad pattern.
       */
      createQuadPattern(subject, predicateName, object, graph, context) {
        const predicate = this.valueToNamedNode(predicateName.value, context);
        if (context && context.getContextRaw()[predicateName.value] && context.getContextRaw()[predicateName.value]["@reverse"]) {
          return this.operationFactory.createPattern(object, predicate, subject, graph);
        }
        return this.operationFactory.createPattern(subject, predicate, object, graph);
      }
      /**
       * Create a quad path when the predicate is a list node with field alternatives
       * that need to be translated using the context.
       * @param {Term} subject The subject.
       * @param {NameNode} predicateName The name node for the predicate.
       * @param {Term} object The object.
       * @param {Term} graph The graph.
       * @param {IContext} context A context.
       * @return {Path} A quad property path.
       */
      createQuadPath(subject, predicateName, predicateAlternatives, object, graph, context) {
        const predicateInitial = this.valueToNamedNode(predicateName.value, context);
        let pathSymbol = this.operationFactory.createLink(predicateInitial);
        for (const predicateAlternative of predicateAlternatives.values) {
          if (predicateAlternative.kind !== "EnumValue") {
            throw new Error("Invalid value type for 'alt' argument, must be EnumValue, but got " + predicateAlternative.kind);
          }
          pathSymbol = this.operationFactory.createAlt([
            pathSymbol,
            this.operationFactory.createLink(this.valueToNamedNode(predicateAlternative.value, context))
          ]);
        }
        if (context && context.getContextRaw()[predicateName.value] && context.getContextRaw()[predicateName.value]["@reverse"]) {
          return this.operationFactory.createPath(object, pathSymbol, subject, graph);
        }
        return this.operationFactory.createPath(subject, pathSymbol, object, graph);
      }
    };
    exports.Util = Util;
  }
});

// node_modules/graphql-to-sparql/lib/Converter.js
var require_Converter = __commonJS({
  "node_modules/graphql-to-sparql/lib/Converter.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Converter = void 0;
    var language_1 = require_language();
    var handler_1 = require_handler();
    var directivenode_1 = require_directivenode();
    var IConvertContext_1 = require_IConvertContext();
    var Util_1 = require_Util2();
    var Converter = class _Converter {
      constructor(settings) {
        settings = settings || {};
        settings.variableDelimiter = settings.variableDelimiter || "_";
        settings.expressionVariableCounter = settings.expressionVariableCounter || 0;
        this.util = new Util_1.Util(settings);
        this.initializeNodeHandlers(settings);
      }
      static registerNodeHandlers(util, settings) {
        util.registerNodeHandler(new handler_1.NodeHandlerDocument(util, settings));
        util.registerNodeHandler(new handler_1.NodeHandlerDefinitionOperation(util, settings));
        util.registerNodeHandler(new handler_1.NodeHandlerDefinitionFragment(util, settings));
        util.registerNodeHandler(new handler_1.NodeHandlerSelectionFragmentSpread(util, settings));
        util.registerNodeHandler(new handler_1.NodeHandlerSelectionInlineFragment(util, settings));
        util.registerNodeHandler(new handler_1.NodeHandlerSelectionField(util, settings));
      }
      static registerNodeValueHandlers(util, settings) {
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerVariable(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerInt(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerFloat(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerString(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerBoolean(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerNull(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerEnum(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerList(util, settings));
        util.registerNodeValueHandler(new handler_1.NodeValueHandlerObject(util, settings));
      }
      static registerDirectiveNodeHandlers(util, settings) {
        util.registerDirectiveNodeHandler(new directivenode_1.DirectiveNodeHandlerInclude(util, settings));
        util.registerDirectiveNodeHandler(new directivenode_1.DirectiveNodeHandlerOptional(util, settings));
        util.registerDirectiveNodeHandler(new directivenode_1.DirectiveNodeHandlerPlural(util, settings));
        util.registerDirectiveNodeHandler(new directivenode_1.DirectiveNodeHandlerSingle(util, settings));
        util.registerDirectiveNodeHandler(new directivenode_1.DirectiveNodeHandlerSkip(util, settings));
      }
      /**
       * Translates a GraphQL query into SPARQL algebra.
       * @param {string | DocumentNode} graphqlQuery A GraphQL query string or node.
       * @param {IContext} context A JSON-LD context.
       * @param {IConvertOptions} options An options object.
       * @return {Promise<Operation>} A promise resolving to an operation.
       */
      graphqlToSparqlAlgebra(graphqlQuery, context, options) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.graphqlToSparqlAlgebraRawContext(graphqlQuery, yield this.util.contextParser.parse(context), options);
        });
      }
      /**
       * Translates a GraphQL query into SPARQL algebra.
       * @param {string | DocumentNode} graphqlQuery A GraphQL query string or node.
       * @param {IContext} context A JSON-LD context.
       * @param {IConvertOptions} options An options object.
       * @return {Operation} An operation.
       */
      graphqlToSparqlAlgebraRawContext(graphqlQuery, context, options) {
        options = options || {};
        const document2 = typeof graphqlQuery === "string" ? (0, language_1.parse)(graphqlQuery) : graphqlQuery;
        const fragmentDefinitions = this.indexFragments(document2);
        const convertContext = {
          context,
          fragmentDefinitions,
          graph: this.util.dataFactory.defaultGraph(),
          path: [],
          singularizeState: IConvertContext_1.SingularizeState.PLURAL,
          singularizeVariables: options.singularizeVariables || {},
          subject: null,
          terminalVariables: [],
          variablesDict: options.variablesDict || {},
          variablesMetaDict: {}
        };
        return this.util.handleNode(document2, convertContext);
      }
      /**
       * Create an index of all fragment definitions in the given document.
       *
       * This will assign a new array of definition nodes without fragment definition.
       *
       * @param {DocumentNode} document A document node.
       * @return {{[p: string]: FragmentDefinitionNode}} An index of fragment definition nodes.
       */
      indexFragments(document2) {
        const fragmentDefinitions = {};
        const newDefinitions = [];
        for (const definition of document2.definitions) {
          if (definition.kind === "FragmentDefinition") {
            fragmentDefinitions[definition.name.value] = definition;
          } else {
            newDefinitions.push(definition);
          }
        }
        document2.definitions = newDefinitions;
        return fragmentDefinitions;
      }
      initializeNodeHandlers(settings) {
        _Converter.registerNodeHandlers(this.util, settings);
        _Converter.registerNodeValueHandlers(this.util, settings);
        _Converter.registerDirectiveNodeHandlers(this.util, settings);
      }
    };
    exports.Converter = Converter;
  }
});

// node_modules/graphql-to-sparql/lib/IConvertSettings.js
var require_IConvertSettings = __commonJS({
  "node_modules/graphql-to-sparql/lib/IConvertSettings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/graphql-to-sparql/index.js
var require_graphql_to_sparql = __commonJS({
  "node_modules/graphql-to-sparql/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_handler(), exports);
    __exportStar(require_Converter(), exports);
    __exportStar(require_IConvertContext(), exports);
    __exportStar(require_IConvertSettings(), exports);
    __exportStar(require_Util2(), exports);
  }
});

// node_modules/@comunica/actor-query-parse-graphql/lib/ActorQueryParseGraphql.js
var require_ActorQueryParseGraphql = __commonJS({
  "node_modules/@comunica/actor-query-parse-graphql/lib/ActorQueryParseGraphql.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryParseGraphql = void 0;
    var bus_query_parse_1 = require_lib19();
    var context_entries_1 = require_lib4();
    var graphql_to_sparql_1 = require_graphql_to_sparql();
    var ActorQueryParseGraphql = class extends bus_query_parse_1.ActorQueryParse {
      constructor(args) {
        super(args);
        this.graphqlToSparql = new graphql_to_sparql_1.Converter({ requireContext: true });
      }
      async test(action) {
        if (action.queryFormat?.language !== "graphql") {
          throw new Error("This actor can only parse GraphQL queries");
        }
        return true;
      }
      async run(action) {
        const context = action.context.get(context_entries_1.KeysInitQuery.jsonLdContext) || {};
        const options = {
          // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
          singularizeVariables: action.context.get(context_entries_1.KeysInitQuery.graphqlSingularizeVariables)
        };
        return { operation: await this.graphqlToSparql.graphqlToSparqlAlgebra(action.query, context, options) };
      }
    };
    exports.ActorQueryParseGraphql = ActorQueryParseGraphql;
  }
});

// node_modules/@comunica/actor-query-parse-graphql/lib/index.js
var require_lib21 = __commonJS({
  "node_modules/@comunica/actor-query-parse-graphql/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryParseGraphql(), exports);
  }
});

// node_modules/@comunica/actor-abstract-mediatyped/lib/ActorAbstractMediaTyped.js
var require_ActorAbstractMediaTyped = __commonJS({
  "node_modules/@comunica/actor-abstract-mediatyped/lib/ActorAbstractMediaTyped.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorAbstractMediaTyped = void 0;
    var core_1 = require_lib2();
    var ActorAbstractMediaTyped = class extends core_1.Actor {
      constructor(args) {
        super(args);
      }
      async run(action) {
        if ("handle" in action) {
          const typedAction = action;
          return { handle: await this.runHandle(typedAction.handle, typedAction.handleMediaType, action.context) };
        }
        if ("mediaTypes" in action) {
          return { mediaTypes: await this.getMediaTypes(action.context) };
        }
        if ("mediaTypeFormats" in action) {
          return { mediaTypeFormats: await this.getMediaTypeFormats(action.context) };
        }
        throw new Error("Either a handle, mediaTypes or mediaTypeFormats action needs to be provided");
      }
      async test(action) {
        if ("handle" in action) {
          const typedAction = action;
          return { handle: await this.testHandle(typedAction.handle, typedAction.handleMediaType, action.context) };
        }
        if ("mediaTypes" in action) {
          return { mediaTypes: await this.testMediaType(action.context) };
        }
        if ("mediaTypeFormats" in action) {
          return { mediaTypeFormats: await this.testMediaTypeFormats(action.context) };
        }
        throw new Error("Either a handle, mediaTypes or mediaTypeFormats action needs to be provided");
      }
    };
    exports.ActorAbstractMediaTyped = ActorAbstractMediaTyped;
  }
});

// node_modules/@comunica/actor-abstract-mediatyped/lib/ActorAbstractMediaTypedFixed.js
var require_ActorAbstractMediaTypedFixed = __commonJS({
  "node_modules/@comunica/actor-abstract-mediatyped/lib/ActorAbstractMediaTypedFixed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorAbstractMediaTypedFixed = void 0;
    var ActorAbstractMediaTyped_1 = require_ActorAbstractMediaTyped();
    var ActorAbstractMediaTypedFixed = class extends ActorAbstractMediaTyped_1.ActorAbstractMediaTyped {
      constructor(args) {
        super(args);
        const scale = this.priorityScale || this.priorityScale === 0 ? this.priorityScale : 1;
        if (this.mediaTypePriorities) {
          Object.entries(this.mediaTypePriorities).forEach(([key, value], index) => {
            this.mediaTypePriorities[key] = scale * value;
          });
        }
        this.mediaTypePriorities = Object.freeze(this.mediaTypePriorities);
        this.mediaTypeFormats = Object.freeze(this.mediaTypeFormats);
      }
      async testHandle(action, mediaType, context) {
        if (!mediaType || !(mediaType in this.mediaTypePriorities)) {
          throw new Error(`Unrecognized media type: ${mediaType}`);
        }
        return await this.testHandleChecked(action, context);
      }
      async testMediaType(context) {
        return true;
      }
      async getMediaTypes(context) {
        return this.mediaTypePriorities;
      }
      async testMediaTypeFormats(context) {
        return true;
      }
      async getMediaTypeFormats(context) {
        return this.mediaTypeFormats;
      }
    };
    exports.ActorAbstractMediaTypedFixed = ActorAbstractMediaTypedFixed;
  }
});

// node_modules/@comunica/actor-abstract-mediatyped/lib/index.js
var require_lib22 = __commonJS({
  "node_modules/@comunica/actor-abstract-mediatyped/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorAbstractMediaTyped(), exports);
    __exportStar(require_ActorAbstractMediaTypedFixed(), exports);
  }
});

// node_modules/@comunica/bus-query-result-serialize/lib/ActorQueryResultSerialize.js
var require_ActorQueryResultSerialize = __commonJS({
  "node_modules/@comunica/bus-query-result-serialize/lib/ActorQueryResultSerialize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerialize = void 0;
    var actor_abstract_mediatyped_1 = require_lib22();
    var ActorQueryResultSerialize = class extends actor_abstract_mediatyped_1.ActorAbstractMediaTyped {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorQueryResultSerialize = ActorQueryResultSerialize;
  }
});

// node_modules/@comunica/bus-query-result-serialize/lib/ActorQueryResultSerializeFixedMediaTypes.js
var require_ActorQueryResultSerializeFixedMediaTypes = __commonJS({
  "node_modules/@comunica/bus-query-result-serialize/lib/ActorQueryResultSerializeFixedMediaTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeFixedMediaTypes = void 0;
    var actor_abstract_mediatyped_1 = require_lib22();
    var ActorQueryResultSerializeFixedMediaTypes = class extends actor_abstract_mediatyped_1.ActorAbstractMediaTypedFixed {
      /* eslint-disable max-len */
      /**
       * TODO: rm this (and eslint-disable) once we remove the abstract media typed actor
       * @param args - @defaultNested {<cbqrs:components/ActorQueryResultSerialize.jsonld#ActorQueryResultSerialize_default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
      /* eslint-enable max-len */
      async testHandleChecked(action, context) {
        return true;
      }
    };
    exports.ActorQueryResultSerializeFixedMediaTypes = ActorQueryResultSerializeFixedMediaTypes;
  }
});

// node_modules/@comunica/bus-query-result-serialize/lib/index.js
var require_lib23 = __commonJS({
  "node_modules/@comunica/bus-query-result-serialize/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerialize(), exports);
    __exportStar(require_ActorQueryResultSerializeFixedMediaTypes(), exports);
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i2 = 0, len = code.length; i2 < len; ++i2) {
      lookup[i2] = code[i2];
      revLookup[code.charCodeAt(i2)] = i2;
    }
    var i2;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i3;
      for (i3 = 0; i3 < len2; i3 += 4) {
        tmp = revLookup[b64.charCodeAt(i3)] << 18 | revLookup[b64.charCodeAt(i3 + 1)] << 12 | revLookup[b64.charCodeAt(i3 + 2)] << 6 | revLookup[b64.charCodeAt(i3 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i3)] << 2 | revLookup[b64.charCodeAt(i3 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i3)] << 10 | revLookup[b64.charCodeAt(i3 + 1)] << 4 | revLookup[b64.charCodeAt(i3 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i3 = start; i3 < end; i3 += 3) {
        tmp = (uint8[i3] << 16 & 16711680) + (uint8[i3 + 1] << 8 & 65280) + (uint8[i3 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i3 = 0, len22 = len2 - extraBytes; i3 < len22; i3 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len22 ? len22 : i3 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports) {
    exports.read = function(buffer2, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i2 = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer2[offset + i2];
      i2 += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer2[offset + i2], i2 += d, nBits -= 8) {
      }
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer2[offset + i2], i2 += d, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer2, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i2 = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer2[offset + i2] = m & 255, i2 += d, m /= 256, mLen -= 8) {
      }
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer2[offset + i2] = e & 255, i2 += d, e /= 256, eLen -= 8) {
      }
      buffer2[offset + i2 - d] |= s * 128;
    };
  }
});

// node_modules/buffer/index.js
var require_buffer = __commonJS({
  "node_modules/buffer/index.js"(exports) {
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer2;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer2.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer2.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function Buffer2(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer2.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer2.from(valueOf, encodingOrOffset, length);
      }
      const b = fromObject(value);
      if (b)
        return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer2.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer2, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer2.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      const length = byteLength(string, encoding) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      const length = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length);
      for (let i2 = 0; i2 < length; i2 += 1) {
        buf[i2] = array[i2] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer2.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer2.alloc(+length);
    }
    Buffer2.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer2.prototype;
    };
    Buffer2.compare = function compare(a, b) {
      if (isInstance(a, Uint8Array))
        a = Buffer2.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array))
        b = Buffer2.from(b, b.offset, b.byteLength);
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b)
        return 0;
      let x = a.length;
      let y = b.length;
      for (let i2 = 0, len = Math.min(x, y); i2 < len; ++i2) {
        if (a[i2] !== b[i2]) {
          x = a[i2];
          y = b[i2];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      let i2;
      if (length === void 0) {
        length = 0;
        for (i2 = 0; i2 < list.length; ++i2) {
          length += list[i2].length;
        }
      }
      const buffer2 = Buffer2.allocUnsafe(length);
      let pos = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        let buf = list[i2];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer2.length) {
            if (!Buffer2.isBuffer(buf))
              buf = Buffer2.from(buf);
            buf.copy(buffer2, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer2,
              buf,
              pos
            );
          }
        } else if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer2, pos);
        }
        pos += buf.length;
      }
      return buffer2;
    };
    function byteLength(string, encoding) {
      if (Buffer2.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
        );
      }
      const len = string.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0)
        return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.prototype._isBuffer = true;
    function swap(b, n, m) {
      const i2 = b[n];
      b[n] = b[m];
      b[m] = i2;
    }
    Buffer2.prototype.swap16 = function swap16() {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i2 = 0; i2 < len; i2 += 2) {
        swap(this, i2, i2 + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i2 = 0; i2 < len; i2 += 4) {
        swap(this, i2, i2 + 3);
        swap(this, i2 + 1, i2 + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i2 = 0; i2 < len; i2 += 8) {
        swap(this, i2, i2 + 7);
        swap(this, i2 + 1, i2 + 6);
        swap(this, i2 + 2, i2 + 5);
        swap(this, i2 + 3, i2 + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString() {
      const length = this.length;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
    Buffer2.prototype.equals = function equals(b) {
      if (!Buffer2.isBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer2.compare(this, b) === 0;
    };
    Buffer2.prototype.inspect = function inspect() {
      let str = "";
      const max = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max)
        str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
    }
    Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer2.from(target, target.offset, target.byteLength);
      }
      if (!Buffer2.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      let x = thisEnd - thisStart;
      let y = end - start;
      const len = Math.min(x, y);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i2 = 0; i2 < len; ++i2) {
        if (thisCopy[i2] !== targetCopy[i2]) {
          x = thisCopy[i2];
          y = targetCopy[i2];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
      if (buffer2.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer2.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer2.length + byteOffset;
      if (byteOffset >= buffer2.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer2.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer2.from(val, encoding);
      }
      if (Buffer2.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i3) {
        if (indexSize === 1) {
          return buf[i3];
        } else {
          return buf.readUInt16BE(i3 * indexSize);
        }
      }
      let i2;
      if (dir) {
        let foundIndex = -1;
        for (i2 = byteOffset; i2 < arrLength; i2++) {
          if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i2;
            if (i2 - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i2 -= i2 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i2 = byteOffset; i2 >= 0; i2--) {
          let found = true;
          for (let j = 0; j < valLength; j++) {
            if (read(arr, i2 + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found)
            return i2;
        }
      }
      return -1;
    }
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i2;
      for (i2 = 0; i2 < length; ++i2) {
        const parsed = parseInt(string.substr(i2 * 2, 2), 16);
        if (numberIsNaN(parsed))
          return i2;
        buf[offset + i2] = parsed;
      }
      return i2;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer2.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i2 = start;
      while (i2 < end) {
        const firstByte = buf[i2];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i2 + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i2 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              fourthByte = buf[i2 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i2 += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i2 = 0;
      while (i2 < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      let out = "";
      for (let i2 = start; i2 < end; ++i2) {
        out += hexSliceLookupTable[buf[i2]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = "";
      for (let i2 = 0; i2 < bytes.length - 1; i2 += 2) {
        res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
      }
      return res;
    }
    Buffer2.prototype.slice = function slice(start, end) {
      const len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer2.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i2 = 0;
      while (++i2 < byteLength2 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      let val = this[offset + --byteLength2];
      let mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo) + (BigInt(hi) << BigInt(32));
    });
    Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo);
    });
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i2 = 0;
      while (++i2 < byteLength2 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let i2 = byteLength2;
      let mul = 1;
      let val = this[offset + --i2];
      while (i2 > 0 && (mul *= 256)) {
        val += this[offset + --i2] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
    });
    Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first << 24) + // Overflow
      this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
    });
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer2.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let mul = 1;
      let i2 = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength2 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let i2 = byteLength2 - 1;
      let mul = 1;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset;
    }
    function wrtBigUInt64BE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8;
    }
    Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i2 = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i2 = byteLength2 - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer2.isBuffer(target))
        throw new TypeError("argument should be a Buffer");
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("Index out of range");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          const code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      let i2;
      if (typeof val === "number") {
        for (i2 = start; i2 < end; ++i2) {
          this[i2] = val;
        }
      } else {
        const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i2 = 0; i2 < end - start; ++i2) {
          this[i2 + start] = bytes[i2 % len];
        }
      }
      return this;
    };
    var errors = {};
    function E(sym, getMessage, Base) {
      errors[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name) {
        if (name) {
          return `${name} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E(
      "ERR_INVALID_ARG_TYPE",
      function(name, actual) {
        return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E(
      "ERR_OUT_OF_RANGE",
      function(str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i2 = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i2 >= start + 4; i2 -= 3) {
        res = `_${val.slice(i2 - 3, i2)}${res}`;
      }
      return `${val.slice(0, i2)}${res}`;
    }
    function checkBounds(buf, offset, byteLength2) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
        boundsError(offset, buf.length - (byteLength2 + 1));
      }
    }
    function checkIntBI(value, min, max, buf, offset, byteLength2) {
      if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength2 > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
          }
        } else {
          range = `>= ${min}${n} and <= ${max}${n}`;
        }
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
      }
      checkBounds(buf, offset, byteLength2);
    }
    function validateNumber(value, name) {
      if (typeof value !== "number") {
        throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
      }
    }
    function boundsError(value, length, type) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
      }
      if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors.ERR_OUT_OF_RANGE(
        type || "offset",
        `>= ${type ? 1 : 0} and <= ${length}`,
        value
      );
    }
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2)
        return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      let codePoint;
      const length = string.length;
      let leadSurrogate = null;
      const bytes = [];
      for (let i2 = 0; i2 < length; ++i2) {
        codePoint = string.charCodeAt(i2);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i2 + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        byteArray.push(str.charCodeAt(i2) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      let c, hi, lo;
      const byteArray = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        if ((units -= 2) < 0)
          break;
        c = str.charCodeAt(i2);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      let i2;
      for (i2 = 0; i2 < length; ++i2) {
        if (i2 + offset >= dst.length || i2 >= src.length)
          break;
        dst[i2 + offset] = src[i2];
      }
      return i2;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i2 = 0; i2 < 16; ++i2) {
        const i16 = i2 * 16;
        for (let j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i2] + alphabet[j];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  }
});

// node_modules/readable-stream/lib/ours/primordials.js
var require_primordials = __commonJS({
  "node_modules/readable-stream/lib/ours/primordials.js"(exports, module) {
    "use strict";
    module.exports = {
      ArrayIsArray(self2) {
        return Array.isArray(self2);
      },
      ArrayPrototypeIncludes(self2, el) {
        return self2.includes(el);
      },
      ArrayPrototypeIndexOf(self2, el) {
        return self2.indexOf(el);
      },
      ArrayPrototypeJoin(self2, sep) {
        return self2.join(sep);
      },
      ArrayPrototypeMap(self2, fn) {
        return self2.map(fn);
      },
      ArrayPrototypePop(self2, el) {
        return self2.pop(el);
      },
      ArrayPrototypePush(self2, el) {
        return self2.push(el);
      },
      ArrayPrototypeSlice(self2, start, end) {
        return self2.slice(start, end);
      },
      Error,
      FunctionPrototypeCall(fn, thisArgs, ...args) {
        return fn.call(thisArgs, ...args);
      },
      FunctionPrototypeSymbolHasInstance(self2, instance) {
        return Function.prototype[Symbol.hasInstance].call(self2, instance);
      },
      MathFloor: Math.floor,
      Number,
      NumberIsInteger: Number.isInteger,
      NumberIsNaN: Number.isNaN,
      NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER,
      NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER,
      NumberParseInt: Number.parseInt,
      ObjectDefineProperties(self2, props) {
        return Object.defineProperties(self2, props);
      },
      ObjectDefineProperty(self2, name, prop) {
        return Object.defineProperty(self2, name, prop);
      },
      ObjectGetOwnPropertyDescriptor(self2, name) {
        return Object.getOwnPropertyDescriptor(self2, name);
      },
      ObjectKeys(obj) {
        return Object.keys(obj);
      },
      ObjectSetPrototypeOf(target, proto) {
        return Object.setPrototypeOf(target, proto);
      },
      Promise,
      PromisePrototypeCatch(self2, fn) {
        return self2.catch(fn);
      },
      PromisePrototypeThen(self2, thenFn, catchFn) {
        return self2.then(thenFn, catchFn);
      },
      PromiseReject(err) {
        return Promise.reject(err);
      },
      PromiseResolve(val) {
        return Promise.resolve(val);
      },
      ReflectApply: Reflect.apply,
      RegExpPrototypeTest(self2, value) {
        return self2.test(value);
      },
      SafeSet: Set,
      String,
      StringPrototypeSlice(self2, start, end) {
        return self2.slice(start, end);
      },
      StringPrototypeToLowerCase(self2) {
        return self2.toLowerCase();
      },
      StringPrototypeToUpperCase(self2) {
        return self2.toUpperCase();
      },
      StringPrototypeTrim(self2) {
        return self2.trim();
      },
      Symbol,
      SymbolFor: Symbol.for,
      SymbolAsyncIterator: Symbol.asyncIterator,
      SymbolHasInstance: Symbol.hasInstance,
      SymbolIterator: Symbol.iterator,
      SymbolDispose: Symbol.dispose || Symbol("Symbol.dispose"),
      SymbolAsyncDispose: Symbol.asyncDispose || Symbol("Symbol.asyncDispose"),
      TypedArrayPrototypeSet(self2, buf, len) {
        return self2.set(buf, len);
      },
      Boolean,
      Uint8Array
    };
  }
});

// node_modules/abort-controller/browser.js
var require_browser2 = __commonJS({
  "node_modules/abort-controller/browser.js"(exports, module) {
    "use strict";
    var { AbortController, AbortSignal } = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : (
      /* otherwise */
      void 0
    );
    module.exports = AbortController;
    module.exports.AbortSignal = AbortSignal;
    module.exports.default = AbortController;
  }
});

// node_modules/readable-stream/lib/ours/util.js
var require_util2 = __commonJS({
  "node_modules/readable-stream/lib/ours/util.js"(exports, module) {
    "use strict";
    var bufferModule = require_buffer();
    var { kResistStopPropagation, SymbolDispose } = require_primordials();
    var AbortSignal = globalThis.AbortSignal || require_browser2().AbortSignal;
    var AbortController = globalThis.AbortController || require_browser2().AbortController;
    var AsyncFunction = Object.getPrototypeOf(async function() {
    }).constructor;
    var Blob2 = globalThis.Blob || bufferModule.Blob;
    var isBlob = typeof Blob2 !== "undefined" ? function isBlob2(b) {
      return b instanceof Blob2;
    } : function isBlob2(b) {
      return false;
    };
    var validateAbortSignal = (signal, name) => {
      if (signal !== void 0 && (signal === null || typeof signal !== "object" || !("aborted" in signal))) {
        throw new ERR_INVALID_ARG_TYPE(name, "AbortSignal", signal);
      }
    };
    var validateFunction = (value, name) => {
      if (typeof value !== "function")
        throw new ERR_INVALID_ARG_TYPE(name, "Function", value);
    };
    var AggregateError = class extends Error {
      constructor(errors) {
        if (!Array.isArray(errors)) {
          throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);
        }
        let message = "";
        for (let i2 = 0; i2 < errors.length; i2++) {
          message += `    ${errors[i2].stack}
`;
        }
        super(message);
        this.name = "AggregateError";
        this.errors = errors;
      }
    };
    module.exports = {
      AggregateError,
      kEmptyObject: Object.freeze({}),
      once(callback) {
        let called = false;
        return function(...args) {
          if (called) {
            return;
          }
          called = true;
          callback.apply(this, args);
        };
      },
      createDeferredPromise: function() {
        let resolve;
        let reject;
        const promise = new Promise((res, rej) => {
          resolve = res;
          reject = rej;
        });
        return {
          promise,
          resolve,
          reject
        };
      },
      promisify(fn) {
        return new Promise((resolve, reject) => {
          fn((err, ...args) => {
            if (err) {
              return reject(err);
            }
            return resolve(...args);
          });
        });
      },
      debuglog() {
        return function() {
        };
      },
      format(format, ...args) {
        return format.replace(/%([sdifj])/g, function(...[_unused, type]) {
          const replacement = args.shift();
          if (type === "f") {
            return replacement.toFixed(6);
          } else if (type === "j") {
            return JSON.stringify(replacement);
          } else if (type === "s" && typeof replacement === "object") {
            const ctor = replacement.constructor !== Object ? replacement.constructor.name : "";
            return `${ctor} {}`.trim();
          } else {
            return replacement.toString();
          }
        });
      },
      inspect(value) {
        switch (typeof value) {
          case "string":
            if (value.includes("'")) {
              if (!value.includes('"')) {
                return `"${value}"`;
              } else if (!value.includes("`") && !value.includes("${")) {
                return `\`${value}\``;
              }
            }
            return `'${value}'`;
          case "number":
            if (isNaN(value)) {
              return "NaN";
            } else if (Object.is(value, -0)) {
              return String(value);
            }
            return value;
          case "bigint":
            return `${String(value)}n`;
          case "boolean":
          case "undefined":
            return String(value);
          case "object":
            return "{}";
        }
      },
      types: {
        isAsyncFunction(fn) {
          return fn instanceof AsyncFunction;
        },
        isArrayBufferView(arr) {
          return ArrayBuffer.isView(arr);
        }
      },
      isBlob,
      deprecate(fn, message) {
        return fn;
      },
      addAbortListener: require_events().addAbortListener || function addAbortListener(signal, listener) {
        if (signal === void 0) {
          throw new ERR_INVALID_ARG_TYPE("signal", "AbortSignal", signal);
        }
        validateAbortSignal(signal, "signal");
        validateFunction(listener, "listener");
        let removeEventListener;
        if (signal.aborted) {
          queueMicrotask(() => listener());
        } else {
          signal.addEventListener("abort", listener, {
            __proto__: null,
            once: true,
            [kResistStopPropagation]: true
          });
          removeEventListener = () => {
            signal.removeEventListener("abort", listener);
          };
        }
        return {
          __proto__: null,
          [SymbolDispose]() {
            var _removeEventListener;
            (_removeEventListener = removeEventListener) === null || _removeEventListener === void 0 ? void 0 : _removeEventListener();
          }
        };
      },
      AbortSignalAny: AbortSignal.any || function AbortSignalAny(signals) {
        if (signals.length === 1) {
          return signals[0];
        }
        const ac = new AbortController();
        const abort = () => ac.abort();
        signals.forEach((signal) => {
          validateAbortSignal(signal, "signals");
          signal.addEventListener("abort", abort, {
            once: true
          });
        });
        ac.signal.addEventListener(
          "abort",
          () => {
            signals.forEach((signal) => signal.removeEventListener("abort", abort));
          },
          {
            once: true
          }
        );
        return ac.signal;
      }
    };
    module.exports.promisify.custom = Symbol.for("nodejs.util.promisify.custom");
  }
});

// node_modules/readable-stream/lib/ours/errors.js
var require_errors = __commonJS({
  "node_modules/readable-stream/lib/ours/errors.js"(exports, module) {
    "use strict";
    var { format, inspect, AggregateError: CustomAggregateError } = require_util2();
    var AggregateError = globalThis.AggregateError || CustomAggregateError;
    var kIsNodeError = Symbol("kIsNodeError");
    var kTypes = [
      "string",
      "function",
      "number",
      "object",
      // Accept 'Function' and 'Object' as alternative to the lower cased version.
      "Function",
      "Object",
      "boolean",
      "bigint",
      "symbol"
    ];
    var classRegExp = /^([A-Z][a-z0-9]*)+$/;
    var nodeInternalPrefix = "__node_internal_";
    var codes = {};
    function assert(value, message) {
      if (!value) {
        throw new codes.ERR_INTERNAL_ASSERTION(message);
      }
    }
    function addNumericalSeparator(val) {
      let res = "";
      let i2 = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i2 >= start + 4; i2 -= 3) {
        res = `_${val.slice(i2 - 3, i2)}${res}`;
      }
      return `${val.slice(0, i2)}${res}`;
    }
    function getMessage(key, msg, args) {
      if (typeof msg === "function") {
        assert(
          msg.length <= args.length,
          // Default options do not count.
          `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${msg.length}).`
        );
        return msg(...args);
      }
      const expectedLength = (msg.match(/%[dfijoOs]/g) || []).length;
      assert(
        expectedLength === args.length,
        `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`
      );
      if (args.length === 0) {
        return msg;
      }
      return format(msg, ...args);
    }
    function E(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      class NodeError extends Base {
        constructor(...args) {
          super(getMessage(code, message, args));
        }
        toString() {
          return `${this.name} [${code}]: ${this.message}`;
        }
      }
      Object.defineProperties(NodeError.prototype, {
        name: {
          value: Base.name,
          writable: true,
          enumerable: false,
          configurable: true
        },
        toString: {
          value() {
            return `${this.name} [${code}]: ${this.message}`;
          },
          writable: true,
          enumerable: false,
          configurable: true
        }
      });
      NodeError.prototype.code = code;
      NodeError.prototype[kIsNodeError] = true;
      codes[code] = NodeError;
    }
    function hideStackFrames(fn) {
      const hidden = nodeInternalPrefix + fn.name;
      Object.defineProperty(fn, "name", {
        value: hidden
      });
      return fn;
    }
    function aggregateTwoErrors(innerError, outerError) {
      if (innerError && outerError && innerError !== outerError) {
        if (Array.isArray(outerError.errors)) {
          outerError.errors.push(innerError);
          return outerError;
        }
        const err = new AggregateError([outerError, innerError], outerError.message);
        err.code = outerError.code;
        return err;
      }
      return innerError || outerError;
    }
    var AbortError = class extends Error {
      constructor(message = "The operation was aborted", options = void 0) {
        if (options !== void 0 && typeof options !== "object") {
          throw new codes.ERR_INVALID_ARG_TYPE("options", "Object", options);
        }
        super(message, options);
        this.code = "ABORT_ERR";
        this.name = "AbortError";
      }
    };
    E("ERR_ASSERTION", "%s", Error);
    E(
      "ERR_INVALID_ARG_TYPE",
      (name, expected, actual) => {
        assert(typeof name === "string", "'name' must be a string");
        if (!Array.isArray(expected)) {
          expected = [expected];
        }
        let msg = "The ";
        if (name.endsWith(" argument")) {
          msg += `${name} `;
        } else {
          msg += `"${name}" ${name.includes(".") ? "property" : "argument"} `;
        }
        msg += "must be ";
        const types = [];
        const instances = [];
        const other = [];
        for (const value of expected) {
          assert(typeof value === "string", "All expected entries have to be of type string");
          if (kTypes.includes(value)) {
            types.push(value.toLowerCase());
          } else if (classRegExp.test(value)) {
            instances.push(value);
          } else {
            assert(value !== "object", 'The value "object" should be written as "Object"');
            other.push(value);
          }
        }
        if (instances.length > 0) {
          const pos = types.indexOf("object");
          if (pos !== -1) {
            types.splice(types, pos, 1);
            instances.push("Object");
          }
        }
        if (types.length > 0) {
          switch (types.length) {
            case 1:
              msg += `of type ${types[0]}`;
              break;
            case 2:
              msg += `one of type ${types[0]} or ${types[1]}`;
              break;
            default: {
              const last = types.pop();
              msg += `one of type ${types.join(", ")}, or ${last}`;
            }
          }
          if (instances.length > 0 || other.length > 0) {
            msg += " or ";
          }
        }
        if (instances.length > 0) {
          switch (instances.length) {
            case 1:
              msg += `an instance of ${instances[0]}`;
              break;
            case 2:
              msg += `an instance of ${instances[0]} or ${instances[1]}`;
              break;
            default: {
              const last = instances.pop();
              msg += `an instance of ${instances.join(", ")}, or ${last}`;
            }
          }
          if (other.length > 0) {
            msg += " or ";
          }
        }
        switch (other.length) {
          case 0:
            break;
          case 1:
            if (other[0].toLowerCase() !== other[0]) {
              msg += "an ";
            }
            msg += `${other[0]}`;
            break;
          case 2:
            msg += `one of ${other[0]} or ${other[1]}`;
            break;
          default: {
            const last = other.pop();
            msg += `one of ${other.join(", ")}, or ${last}`;
          }
        }
        if (actual == null) {
          msg += `. Received ${actual}`;
        } else if (typeof actual === "function" && actual.name) {
          msg += `. Received function ${actual.name}`;
        } else if (typeof actual === "object") {
          var _actual$constructor;
          if ((_actual$constructor = actual.constructor) !== null && _actual$constructor !== void 0 && _actual$constructor.name) {
            msg += `. Received an instance of ${actual.constructor.name}`;
          } else {
            const inspected = inspect(actual, {
              depth: -1
            });
            msg += `. Received ${inspected}`;
          }
        } else {
          let inspected = inspect(actual, {
            colors: false
          });
          if (inspected.length > 25) {
            inspected = `${inspected.slice(0, 25)}...`;
          }
          msg += `. Received type ${typeof actual} (${inspected})`;
        }
        return msg;
      },
      TypeError
    );
    E(
      "ERR_INVALID_ARG_VALUE",
      (name, value, reason = "is invalid") => {
        let inspected = inspect(value);
        if (inspected.length > 128) {
          inspected = inspected.slice(0, 128) + "...";
        }
        const type = name.includes(".") ? "property" : "argument";
        return `The ${type} '${name}' ${reason}. Received ${inspected}`;
      },
      TypeError
    );
    E(
      "ERR_INVALID_RETURN_VALUE",
      (input, name, value) => {
        var _value$constructor;
        const type = value !== null && value !== void 0 && (_value$constructor = value.constructor) !== null && _value$constructor !== void 0 && _value$constructor.name ? `instance of ${value.constructor.name}` : `type ${typeof value}`;
        return `Expected ${input} to be returned from the "${name}" function but got ${type}.`;
      },
      TypeError
    );
    E(
      "ERR_MISSING_ARGS",
      (...args) => {
        assert(args.length > 0, "At least one arg needs to be specified");
        let msg;
        const len = args.length;
        args = (Array.isArray(args) ? args : [args]).map((a) => `"${a}"`).join(" or ");
        switch (len) {
          case 1:
            msg += `The ${args[0]} argument`;
            break;
          case 2:
            msg += `The ${args[0]} and ${args[1]} arguments`;
            break;
          default:
            {
              const last = args.pop();
              msg += `The ${args.join(", ")}, and ${last} arguments`;
            }
            break;
        }
        return `${msg} must be specified`;
      },
      TypeError
    );
    E(
      "ERR_OUT_OF_RANGE",
      (str, range, input) => {
        assert(range, 'Missing "range" argument');
        let received;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > 2n ** 32n || input < -(2n ** 32n)) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        } else {
          received = inspect(input);
        }
        return `The value of "${str}" is out of range. It must be ${range}. Received ${received}`;
      },
      RangeError
    );
    E("ERR_MULTIPLE_CALLBACK", "Callback called multiple times", Error);
    E("ERR_METHOD_NOT_IMPLEMENTED", "The %s method is not implemented", Error);
    E("ERR_STREAM_ALREADY_FINISHED", "Cannot call %s after a stream was finished", Error);
    E("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable", Error);
    E("ERR_STREAM_DESTROYED", "Cannot call %s after a stream was destroyed", Error);
    E("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    E("ERR_STREAM_PREMATURE_CLOSE", "Premature close", Error);
    E("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF", Error);
    E("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event", Error);
    E("ERR_STREAM_WRITE_AFTER_END", "write after end", Error);
    E("ERR_UNKNOWN_ENCODING", "Unknown encoding: %s", TypeError);
    module.exports = {
      AbortError,
      aggregateTwoErrors: hideStackFrames(aggregateTwoErrors),
      hideStackFrames,
      codes
    };
  }
});

// node_modules/readable-stream/lib/internal/validators.js
var require_validators = __commonJS({
  "node_modules/readable-stream/lib/internal/validators.js"(exports, module) {
    "use strict";
    var {
      ArrayIsArray,
      ArrayPrototypeIncludes,
      ArrayPrototypeJoin,
      ArrayPrototypeMap,
      NumberIsInteger,
      NumberIsNaN,
      NumberMAX_SAFE_INTEGER,
      NumberMIN_SAFE_INTEGER,
      NumberParseInt,
      ObjectPrototypeHasOwnProperty,
      RegExpPrototypeExec,
      String: String2,
      StringPrototypeToUpperCase,
      StringPrototypeTrim
    } = require_primordials();
    var {
      hideStackFrames,
      codes: { ERR_SOCKET_BAD_PORT, ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_INVALID_ARG_VALUE, ERR_OUT_OF_RANGE, ERR_UNKNOWN_SIGNAL }
    } = require_errors();
    var { normalizeEncoding } = require_util2();
    var { isAsyncFunction, isArrayBufferView } = require_util2().types;
    var signals = {};
    function isInt32(value) {
      return value === (value | 0);
    }
    function isUint32(value) {
      return value === value >>> 0;
    }
    var octalReg = /^[0-7]+$/;
    var modeDesc = "must be a 32-bit unsigned integer or an octal string";
    function parseFileMode(value, name, def) {
      if (typeof value === "undefined") {
        value = def;
      }
      if (typeof value === "string") {
        if (RegExpPrototypeExec(octalReg, value) === null) {
          throw new ERR_INVALID_ARG_VALUE(name, value, modeDesc);
        }
        value = NumberParseInt(value, 8);
      }
      validateUint32(value, name);
      return value;
    }
    var validateInteger = hideStackFrames((value, name, min = NumberMIN_SAFE_INTEGER, max = NumberMAX_SAFE_INTEGER) => {
      if (typeof value !== "number")
        throw new ERR_INVALID_ARG_TYPE2(name, "number", value);
      if (!NumberIsInteger(value))
        throw new ERR_OUT_OF_RANGE(name, "an integer", value);
      if (value < min || value > max)
        throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
    });
    var validateInt32 = hideStackFrames((value, name, min = -2147483648, max = 2147483647) => {
      if (typeof value !== "number") {
        throw new ERR_INVALID_ARG_TYPE2(name, "number", value);
      }
      if (!NumberIsInteger(value)) {
        throw new ERR_OUT_OF_RANGE(name, "an integer", value);
      }
      if (value < min || value > max) {
        throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
      }
    });
    var validateUint32 = hideStackFrames((value, name, positive = false) => {
      if (typeof value !== "number") {
        throw new ERR_INVALID_ARG_TYPE2(name, "number", value);
      }
      if (!NumberIsInteger(value)) {
        throw new ERR_OUT_OF_RANGE(name, "an integer", value);
      }
      const min = positive ? 1 : 0;
      const max = 4294967295;
      if (value < min || value > max) {
        throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
      }
    });
    function validateString(value, name) {
      if (typeof value !== "string")
        throw new ERR_INVALID_ARG_TYPE2(name, "string", value);
    }
    function validateNumber(value, name, min = void 0, max) {
      if (typeof value !== "number")
        throw new ERR_INVALID_ARG_TYPE2(name, "number", value);
      if (min != null && value < min || max != null && value > max || (min != null || max != null) && NumberIsNaN(value)) {
        throw new ERR_OUT_OF_RANGE(
          name,
          `${min != null ? `>= ${min}` : ""}${min != null && max != null ? " && " : ""}${max != null ? `<= ${max}` : ""}`,
          value
        );
      }
    }
    var validateOneOf = hideStackFrames((value, name, oneOf) => {
      if (!ArrayPrototypeIncludes(oneOf, value)) {
        const allowed = ArrayPrototypeJoin(
          ArrayPrototypeMap(oneOf, (v) => typeof v === "string" ? `'${v}'` : String2(v)),
          ", "
        );
        const reason = "must be one of: " + allowed;
        throw new ERR_INVALID_ARG_VALUE(name, value, reason);
      }
    });
    function validateBoolean(value, name) {
      if (typeof value !== "boolean")
        throw new ERR_INVALID_ARG_TYPE2(name, "boolean", value);
    }
    function getOwnPropertyValueOrDefault(options, key, defaultValue) {
      return options == null || !ObjectPrototypeHasOwnProperty(options, key) ? defaultValue : options[key];
    }
    var validateObject = hideStackFrames((value, name, options = null) => {
      const allowArray = getOwnPropertyValueOrDefault(options, "allowArray", false);
      const allowFunction = getOwnPropertyValueOrDefault(options, "allowFunction", false);
      const nullable = getOwnPropertyValueOrDefault(options, "nullable", false);
      if (!nullable && value === null || !allowArray && ArrayIsArray(value) || typeof value !== "object" && (!allowFunction || typeof value !== "function")) {
        throw new ERR_INVALID_ARG_TYPE2(name, "Object", value);
      }
    });
    var validateDictionary = hideStackFrames((value, name) => {
      if (value != null && typeof value !== "object" && typeof value !== "function") {
        throw new ERR_INVALID_ARG_TYPE2(name, "a dictionary", value);
      }
    });
    var validateArray = hideStackFrames((value, name, minLength = 0) => {
      if (!ArrayIsArray(value)) {
        throw new ERR_INVALID_ARG_TYPE2(name, "Array", value);
      }
      if (value.length < minLength) {
        const reason = `must be longer than ${minLength}`;
        throw new ERR_INVALID_ARG_VALUE(name, value, reason);
      }
    });
    function validateStringArray(value, name) {
      validateArray(value, name);
      for (let i2 = 0; i2 < value.length; i2++) {
        validateString(value[i2], `${name}[${i2}]`);
      }
    }
    function validateBooleanArray(value, name) {
      validateArray(value, name);
      for (let i2 = 0; i2 < value.length; i2++) {
        validateBoolean(value[i2], `${name}[${i2}]`);
      }
    }
    function validateAbortSignalArray(value, name) {
      validateArray(value, name);
      for (let i2 = 0; i2 < value.length; i2++) {
        const signal = value[i2];
        const indexedName = `${name}[${i2}]`;
        if (signal == null) {
          throw new ERR_INVALID_ARG_TYPE2(indexedName, "AbortSignal", signal);
        }
        validateAbortSignal(signal, indexedName);
      }
    }
    function validateSignalName(signal, name = "signal") {
      validateString(signal, name);
      if (signals[signal] === void 0) {
        if (signals[StringPrototypeToUpperCase(signal)] !== void 0) {
          throw new ERR_UNKNOWN_SIGNAL(signal + " (signals must use all capital letters)");
        }
        throw new ERR_UNKNOWN_SIGNAL(signal);
      }
    }
    var validateBuffer = hideStackFrames((buffer2, name = "buffer") => {
      if (!isArrayBufferView(buffer2)) {
        throw new ERR_INVALID_ARG_TYPE2(name, ["Buffer", "TypedArray", "DataView"], buffer2);
      }
    });
    function validateEncoding(data, encoding) {
      const normalizedEncoding = normalizeEncoding(encoding);
      const length = data.length;
      if (normalizedEncoding === "hex" && length % 2 !== 0) {
        throw new ERR_INVALID_ARG_VALUE("encoding", encoding, `is invalid for data of length ${length}`);
      }
    }
    function validatePort(port, name = "Port", allowZero = true) {
      if (typeof port !== "number" && typeof port !== "string" || typeof port === "string" && StringPrototypeTrim(port).length === 0 || +port !== +port >>> 0 || port > 65535 || port === 0 && !allowZero) {
        throw new ERR_SOCKET_BAD_PORT(name, port, allowZero);
      }
      return port | 0;
    }
    var validateAbortSignal = hideStackFrames((signal, name) => {
      if (signal !== void 0 && (signal === null || typeof signal !== "object" || !("aborted" in signal))) {
        throw new ERR_INVALID_ARG_TYPE2(name, "AbortSignal", signal);
      }
    });
    var validateFunction = hideStackFrames((value, name) => {
      if (typeof value !== "function")
        throw new ERR_INVALID_ARG_TYPE2(name, "Function", value);
    });
    var validatePlainFunction = hideStackFrames((value, name) => {
      if (typeof value !== "function" || isAsyncFunction(value))
        throw new ERR_INVALID_ARG_TYPE2(name, "Function", value);
    });
    var validateUndefined = hideStackFrames((value, name) => {
      if (value !== void 0)
        throw new ERR_INVALID_ARG_TYPE2(name, "undefined", value);
    });
    function validateUnion(value, name, union) {
      if (!ArrayPrototypeIncludes(union, value)) {
        throw new ERR_INVALID_ARG_TYPE2(name, `('${ArrayPrototypeJoin(union, "|")}')`, value);
      }
    }
    var linkValueRegExp = /^(?:<[^>]*>)(?:\s*;\s*[^;"\s]+(?:=(")?[^;"\s]*\1)?)*$/;
    function validateLinkHeaderFormat(value, name) {
      if (typeof value === "undefined" || !RegExpPrototypeExec(linkValueRegExp, value)) {
        throw new ERR_INVALID_ARG_VALUE(
          name,
          value,
          'must be an array or string of format "</styles.css>; rel=preload; as=style"'
        );
      }
    }
    function validateLinkHeaderValue(hints) {
      if (typeof hints === "string") {
        validateLinkHeaderFormat(hints, "hints");
        return hints;
      } else if (ArrayIsArray(hints)) {
        const hintsLength = hints.length;
        let result = "";
        if (hintsLength === 0) {
          return result;
        }
        for (let i2 = 0; i2 < hintsLength; i2++) {
          const link = hints[i2];
          validateLinkHeaderFormat(link, "hints");
          result += link;
          if (i2 !== hintsLength - 1) {
            result += ", ";
          }
        }
        return result;
      }
      throw new ERR_INVALID_ARG_VALUE(
        "hints",
        hints,
        'must be an array or string of format "</styles.css>; rel=preload; as=style"'
      );
    }
    module.exports = {
      isInt32,
      isUint32,
      parseFileMode,
      validateArray,
      validateStringArray,
      validateBooleanArray,
      validateAbortSignalArray,
      validateBoolean,
      validateBuffer,
      validateDictionary,
      validateEncoding,
      validateFunction,
      validateInt32,
      validateInteger,
      validateNumber,
      validateObject,
      validateOneOf,
      validatePlainFunction,
      validatePort,
      validateSignalName,
      validateString,
      validateUint32,
      validateUndefined,
      validateUnion,
      validateAbortSignal,
      validateLinkHeaderValue
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/utils.js
var require_utils2 = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/utils.js"(exports, module) {
    "use strict";
    var { SymbolAsyncIterator, SymbolIterator, SymbolFor } = require_primordials();
    var kIsDestroyed = SymbolFor("nodejs.stream.destroyed");
    var kIsErrored = SymbolFor("nodejs.stream.errored");
    var kIsReadable = SymbolFor("nodejs.stream.readable");
    var kIsWritable = SymbolFor("nodejs.stream.writable");
    var kIsDisturbed = SymbolFor("nodejs.stream.disturbed");
    var kIsClosedPromise = SymbolFor("nodejs.webstream.isClosedPromise");
    var kControllerErrorFunction = SymbolFor("nodejs.webstream.controllerErrorFunction");
    function isReadableNodeStream(obj, strict = false) {
      var _obj$_readableState;
      return !!(obj && typeof obj.pipe === "function" && typeof obj.on === "function" && (!strict || typeof obj.pause === "function" && typeof obj.resume === "function") && (!obj._writableState || ((_obj$_readableState = obj._readableState) === null || _obj$_readableState === void 0 ? void 0 : _obj$_readableState.readable) !== false) && // Duplex
      (!obj._writableState || obj._readableState));
    }
    function isWritableNodeStream(obj) {
      var _obj$_writableState;
      return !!(obj && typeof obj.write === "function" && typeof obj.on === "function" && (!obj._readableState || ((_obj$_writableState = obj._writableState) === null || _obj$_writableState === void 0 ? void 0 : _obj$_writableState.writable) !== false));
    }
    function isDuplexNodeStream(obj) {
      return !!(obj && typeof obj.pipe === "function" && obj._readableState && typeof obj.on === "function" && typeof obj.write === "function");
    }
    function isNodeStream(obj) {
      return obj && (obj._readableState || obj._writableState || typeof obj.write === "function" && typeof obj.on === "function" || typeof obj.pipe === "function" && typeof obj.on === "function");
    }
    function isReadableStream2(obj) {
      return !!(obj && !isNodeStream(obj) && typeof obj.pipeThrough === "function" && typeof obj.getReader === "function" && typeof obj.cancel === "function");
    }
    function isWritableStream(obj) {
      return !!(obj && !isNodeStream(obj) && typeof obj.getWriter === "function" && typeof obj.abort === "function");
    }
    function isTransformStream(obj) {
      return !!(obj && !isNodeStream(obj) && typeof obj.readable === "object" && typeof obj.writable === "object");
    }
    function isWebStream(obj) {
      return isReadableStream2(obj) || isWritableStream(obj) || isTransformStream(obj);
    }
    function isIterable(obj, isAsync) {
      if (obj == null)
        return false;
      if (isAsync === true)
        return typeof obj[SymbolAsyncIterator] === "function";
      if (isAsync === false)
        return typeof obj[SymbolIterator] === "function";
      return typeof obj[SymbolAsyncIterator] === "function" || typeof obj[SymbolIterator] === "function";
    }
    function isDestroyed(stream) {
      if (!isNodeStream(stream))
        return null;
      const wState = stream._writableState;
      const rState = stream._readableState;
      const state = wState || rState;
      return !!(stream.destroyed || stream[kIsDestroyed] || state !== null && state !== void 0 && state.destroyed);
    }
    function isWritableEnded(stream) {
      if (!isWritableNodeStream(stream))
        return null;
      if (stream.writableEnded === true)
        return true;
      const wState = stream._writableState;
      if (wState !== null && wState !== void 0 && wState.errored)
        return false;
      if (typeof (wState === null || wState === void 0 ? void 0 : wState.ended) !== "boolean")
        return null;
      return wState.ended;
    }
    function isWritableFinished(stream, strict) {
      if (!isWritableNodeStream(stream))
        return null;
      if (stream.writableFinished === true)
        return true;
      const wState = stream._writableState;
      if (wState !== null && wState !== void 0 && wState.errored)
        return false;
      if (typeof (wState === null || wState === void 0 ? void 0 : wState.finished) !== "boolean")
        return null;
      return !!(wState.finished || strict === false && wState.ended === true && wState.length === 0);
    }
    function isReadableEnded(stream) {
      if (!isReadableNodeStream(stream))
        return null;
      if (stream.readableEnded === true)
        return true;
      const rState = stream._readableState;
      if (!rState || rState.errored)
        return false;
      if (typeof (rState === null || rState === void 0 ? void 0 : rState.ended) !== "boolean")
        return null;
      return rState.ended;
    }
    function isReadableFinished(stream, strict) {
      if (!isReadableNodeStream(stream))
        return null;
      const rState = stream._readableState;
      if (rState !== null && rState !== void 0 && rState.errored)
        return false;
      if (typeof (rState === null || rState === void 0 ? void 0 : rState.endEmitted) !== "boolean")
        return null;
      return !!(rState.endEmitted || strict === false && rState.ended === true && rState.length === 0);
    }
    function isReadable(stream) {
      if (stream && stream[kIsReadable] != null)
        return stream[kIsReadable];
      if (typeof (stream === null || stream === void 0 ? void 0 : stream.readable) !== "boolean")
        return null;
      if (isDestroyed(stream))
        return false;
      return isReadableNodeStream(stream) && stream.readable && !isReadableFinished(stream);
    }
    function isWritable(stream) {
      if (stream && stream[kIsWritable] != null)
        return stream[kIsWritable];
      if (typeof (stream === null || stream === void 0 ? void 0 : stream.writable) !== "boolean")
        return null;
      if (isDestroyed(stream))
        return false;
      return isWritableNodeStream(stream) && stream.writable && !isWritableEnded(stream);
    }
    function isFinished(stream, opts) {
      if (!isNodeStream(stream)) {
        return null;
      }
      if (isDestroyed(stream)) {
        return true;
      }
      if ((opts === null || opts === void 0 ? void 0 : opts.readable) !== false && isReadable(stream)) {
        return false;
      }
      if ((opts === null || opts === void 0 ? void 0 : opts.writable) !== false && isWritable(stream)) {
        return false;
      }
      return true;
    }
    function isWritableErrored(stream) {
      var _stream$_writableStat, _stream$_writableStat2;
      if (!isNodeStream(stream)) {
        return null;
      }
      if (stream.writableErrored) {
        return stream.writableErrored;
      }
      return (_stream$_writableStat = (_stream$_writableStat2 = stream._writableState) === null || _stream$_writableStat2 === void 0 ? void 0 : _stream$_writableStat2.errored) !== null && _stream$_writableStat !== void 0 ? _stream$_writableStat : null;
    }
    function isReadableErrored(stream) {
      var _stream$_readableStat, _stream$_readableStat2;
      if (!isNodeStream(stream)) {
        return null;
      }
      if (stream.readableErrored) {
        return stream.readableErrored;
      }
      return (_stream$_readableStat = (_stream$_readableStat2 = stream._readableState) === null || _stream$_readableStat2 === void 0 ? void 0 : _stream$_readableStat2.errored) !== null && _stream$_readableStat !== void 0 ? _stream$_readableStat : null;
    }
    function isClosed(stream) {
      if (!isNodeStream(stream)) {
        return null;
      }
      if (typeof stream.closed === "boolean") {
        return stream.closed;
      }
      const wState = stream._writableState;
      const rState = stream._readableState;
      if (typeof (wState === null || wState === void 0 ? void 0 : wState.closed) === "boolean" || typeof (rState === null || rState === void 0 ? void 0 : rState.closed) === "boolean") {
        return (wState === null || wState === void 0 ? void 0 : wState.closed) || (rState === null || rState === void 0 ? void 0 : rState.closed);
      }
      if (typeof stream._closed === "boolean" && isOutgoingMessage(stream)) {
        return stream._closed;
      }
      return null;
    }
    function isOutgoingMessage(stream) {
      return typeof stream._closed === "boolean" && typeof stream._defaultKeepAlive === "boolean" && typeof stream._removedConnection === "boolean" && typeof stream._removedContLen === "boolean";
    }
    function isServerResponse(stream) {
      return typeof stream._sent100 === "boolean" && isOutgoingMessage(stream);
    }
    function isServerRequest(stream) {
      var _stream$req;
      return typeof stream._consuming === "boolean" && typeof stream._dumped === "boolean" && ((_stream$req = stream.req) === null || _stream$req === void 0 ? void 0 : _stream$req.upgradeOrConnect) === void 0;
    }
    function willEmitClose(stream) {
      if (!isNodeStream(stream))
        return null;
      const wState = stream._writableState;
      const rState = stream._readableState;
      const state = wState || rState;
      return !state && isServerResponse(stream) || !!(state && state.autoDestroy && state.emitClose && state.closed === false);
    }
    function isDisturbed(stream) {
      var _stream$kIsDisturbed;
      return !!(stream && ((_stream$kIsDisturbed = stream[kIsDisturbed]) !== null && _stream$kIsDisturbed !== void 0 ? _stream$kIsDisturbed : stream.readableDidRead || stream.readableAborted));
    }
    function isErrored(stream) {
      var _ref, _ref2, _ref3, _ref4, _ref5, _stream$kIsErrored, _stream$_readableStat3, _stream$_writableStat3, _stream$_readableStat4, _stream$_writableStat4;
      return !!(stream && ((_ref = (_ref2 = (_ref3 = (_ref4 = (_ref5 = (_stream$kIsErrored = stream[kIsErrored]) !== null && _stream$kIsErrored !== void 0 ? _stream$kIsErrored : stream.readableErrored) !== null && _ref5 !== void 0 ? _ref5 : stream.writableErrored) !== null && _ref4 !== void 0 ? _ref4 : (_stream$_readableStat3 = stream._readableState) === null || _stream$_readableStat3 === void 0 ? void 0 : _stream$_readableStat3.errorEmitted) !== null && _ref3 !== void 0 ? _ref3 : (_stream$_writableStat3 = stream._writableState) === null || _stream$_writableStat3 === void 0 ? void 0 : _stream$_writableStat3.errorEmitted) !== null && _ref2 !== void 0 ? _ref2 : (_stream$_readableStat4 = stream._readableState) === null || _stream$_readableStat4 === void 0 ? void 0 : _stream$_readableStat4.errored) !== null && _ref !== void 0 ? _ref : (_stream$_writableStat4 = stream._writableState) === null || _stream$_writableStat4 === void 0 ? void 0 : _stream$_writableStat4.errored));
    }
    module.exports = {
      isDestroyed,
      kIsDestroyed,
      isDisturbed,
      kIsDisturbed,
      isErrored,
      kIsErrored,
      isReadable,
      kIsReadable,
      kIsClosedPromise,
      kControllerErrorFunction,
      kIsWritable,
      isClosed,
      isDuplexNodeStream,
      isFinished,
      isIterable,
      isReadableNodeStream,
      isReadableStream: isReadableStream2,
      isReadableEnded,
      isReadableFinished,
      isReadableErrored,
      isNodeStream,
      isWebStream,
      isWritable,
      isWritableNodeStream,
      isWritableStream,
      isWritableEnded,
      isWritableFinished,
      isWritableErrored,
      isServerRequest,
      isServerResponse,
      willEmitClose,
      isTransformStream
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
    var process2 = require_browser();
    var { AbortError, codes } = require_errors();
    var { ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_STREAM_PREMATURE_CLOSE } = codes;
    var { kEmptyObject, once: once2 } = require_util2();
    var { validateAbortSignal, validateFunction, validateObject, validateBoolean } = require_validators();
    var { Promise: Promise2, PromisePrototypeThen, SymbolDispose } = require_primordials();
    var {
      isClosed,
      isReadable,
      isReadableNodeStream,
      isReadableStream: isReadableStream2,
      isReadableFinished,
      isReadableErrored,
      isWritable,
      isWritableNodeStream,
      isWritableStream,
      isWritableFinished,
      isWritableErrored,
      isNodeStream,
      willEmitClose: _willEmitClose,
      kIsClosedPromise
    } = require_utils2();
    var addAbortListener;
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    var nop = () => {
    };
    function eos(stream, options, callback) {
      var _options$readable, _options$writable;
      if (arguments.length === 2) {
        callback = options;
        options = kEmptyObject;
      } else if (options == null) {
        options = kEmptyObject;
      } else {
        validateObject(options, "options");
      }
      validateFunction(callback, "callback");
      validateAbortSignal(options.signal, "options.signal");
      callback = once2(callback);
      if (isReadableStream2(stream) || isWritableStream(stream)) {
        return eosWeb(stream, options, callback);
      }
      if (!isNodeStream(stream)) {
        throw new ERR_INVALID_ARG_TYPE2("stream", ["ReadableStream", "WritableStream", "Stream"], stream);
      }
      const readable2 = (_options$readable = options.readable) !== null && _options$readable !== void 0 ? _options$readable : isReadableNodeStream(stream);
      const writable = (_options$writable = options.writable) !== null && _options$writable !== void 0 ? _options$writable : isWritableNodeStream(stream);
      const wState = stream._writableState;
      const rState = stream._readableState;
      const onlegacyfinish = () => {
        if (!stream.writable) {
          onfinish();
        }
      };
      let willEmitClose = _willEmitClose(stream) && isReadableNodeStream(stream) === readable2 && isWritableNodeStream(stream) === writable;
      let writableFinished = isWritableFinished(stream, false);
      const onfinish = () => {
        writableFinished = true;
        if (stream.destroyed) {
          willEmitClose = false;
        }
        if (willEmitClose && (!stream.readable || readable2)) {
          return;
        }
        if (!readable2 || readableFinished) {
          callback.call(stream);
        }
      };
      let readableFinished = isReadableFinished(stream, false);
      const onend = () => {
        readableFinished = true;
        if (stream.destroyed) {
          willEmitClose = false;
        }
        if (willEmitClose && (!stream.writable || writable)) {
          return;
        }
        if (!writable || writableFinished) {
          callback.call(stream);
        }
      };
      const onerror = (err) => {
        callback.call(stream, err);
      };
      let closed = isClosed(stream);
      const onclose = () => {
        closed = true;
        const errored = isWritableErrored(stream) || isReadableErrored(stream);
        if (errored && typeof errored !== "boolean") {
          return callback.call(stream, errored);
        }
        if (readable2 && !readableFinished && isReadableNodeStream(stream, true)) {
          if (!isReadableFinished(stream, false))
            return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
        }
        if (writable && !writableFinished) {
          if (!isWritableFinished(stream, false))
            return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
        }
        callback.call(stream);
      };
      const onclosed = () => {
        closed = true;
        const errored = isWritableErrored(stream) || isReadableErrored(stream);
        if (errored && typeof errored !== "boolean") {
          return callback.call(stream, errored);
        }
        callback.call(stream);
      };
      const onrequest = () => {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        if (!willEmitClose) {
          stream.on("abort", onclose);
        }
        if (stream.req) {
          onrequest();
        } else {
          stream.on("request", onrequest);
        }
      } else if (writable && !wState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      if (!willEmitClose && typeof stream.aborted === "boolean") {
        stream.on("aborted", onclose);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (options.error !== false) {
        stream.on("error", onerror);
      }
      stream.on("close", onclose);
      if (closed) {
        process2.nextTick(onclose);
      } else if (wState !== null && wState !== void 0 && wState.errorEmitted || rState !== null && rState !== void 0 && rState.errorEmitted) {
        if (!willEmitClose) {
          process2.nextTick(onclosed);
        }
      } else if (!readable2 && (!willEmitClose || isReadable(stream)) && (writableFinished || isWritable(stream) === false)) {
        process2.nextTick(onclosed);
      } else if (!writable && (!willEmitClose || isWritable(stream)) && (readableFinished || isReadable(stream) === false)) {
        process2.nextTick(onclosed);
      } else if (rState && stream.req && stream.aborted) {
        process2.nextTick(onclosed);
      }
      const cleanup = () => {
        callback = nop;
        stream.removeListener("aborted", onclose);
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
      if (options.signal && !closed) {
        const abort = () => {
          const endCallback = callback;
          cleanup();
          endCallback.call(
            stream,
            new AbortError(void 0, {
              cause: options.signal.reason
            })
          );
        };
        if (options.signal.aborted) {
          process2.nextTick(abort);
        } else {
          addAbortListener = addAbortListener || require_util2().addAbortListener;
          const disposable = addAbortListener(options.signal, abort);
          const originalCallback = callback;
          callback = once2((...args) => {
            disposable[SymbolDispose]();
            originalCallback.apply(stream, args);
          });
        }
      }
      return cleanup;
    }
    function eosWeb(stream, options, callback) {
      let isAborted = false;
      let abort = nop;
      if (options.signal) {
        abort = () => {
          isAborted = true;
          callback.call(
            stream,
            new AbortError(void 0, {
              cause: options.signal.reason
            })
          );
        };
        if (options.signal.aborted) {
          process2.nextTick(abort);
        } else {
          addAbortListener = addAbortListener || require_util2().addAbortListener;
          const disposable = addAbortListener(options.signal, abort);
          const originalCallback = callback;
          callback = once2((...args) => {
            disposable[SymbolDispose]();
            originalCallback.apply(stream, args);
          });
        }
      }
      const resolverFn = (...args) => {
        if (!isAborted) {
          process2.nextTick(() => callback.apply(stream, args));
        }
      };
      PromisePrototypeThen(stream[kIsClosedPromise].promise, resolverFn, resolverFn);
      return nop;
    }
    function finished(stream, opts) {
      var _opts;
      let autoCleanup = false;
      if (opts === null) {
        opts = kEmptyObject;
      }
      if ((_opts = opts) !== null && _opts !== void 0 && _opts.cleanup) {
        validateBoolean(opts.cleanup, "cleanup");
        autoCleanup = opts.cleanup;
      }
      return new Promise2((resolve, reject) => {
        const cleanup = eos(stream, opts, (err) => {
          if (autoCleanup) {
            cleanup();
          }
          if (err) {
            reject(err);
          } else {
            resolve();
          }
        });
      });
    }
    module.exports = eos;
    module.exports.finished = finished;
  }
});

// node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
    "use strict";
    var process2 = require_browser();
    var {
      aggregateTwoErrors,
      codes: { ERR_MULTIPLE_CALLBACK },
      AbortError
    } = require_errors();
    var { Symbol: Symbol2 } = require_primordials();
    var { kIsDestroyed, isDestroyed, isFinished, isServerRequest } = require_utils2();
    var kDestroy = Symbol2("kDestroy");
    var kConstruct = Symbol2("kConstruct");
    function checkError(err, w, r) {
      if (err) {
        err.stack;
        if (w && !w.errored) {
          w.errored = err;
        }
        if (r && !r.errored) {
          r.errored = err;
        }
      }
    }
    function destroy(err, cb) {
      const r = this._readableState;
      const w = this._writableState;
      const s = w || r;
      if (w !== null && w !== void 0 && w.destroyed || r !== null && r !== void 0 && r.destroyed) {
        if (typeof cb === "function") {
          cb();
        }
        return this;
      }
      checkError(err, w, r);
      if (w) {
        w.destroyed = true;
      }
      if (r) {
        r.destroyed = true;
      }
      if (!s.constructed) {
        this.once(kDestroy, function(er) {
          _destroy(this, aggregateTwoErrors(er, err), cb);
        });
      } else {
        _destroy(this, err, cb);
      }
      return this;
    }
    function _destroy(self2, err, cb) {
      let called = false;
      function onDestroy(err2) {
        if (called) {
          return;
        }
        called = true;
        const r = self2._readableState;
        const w = self2._writableState;
        checkError(err2, w, r);
        if (w) {
          w.closed = true;
        }
        if (r) {
          r.closed = true;
        }
        if (typeof cb === "function") {
          cb(err2);
        }
        if (err2) {
          process2.nextTick(emitErrorCloseNT, self2, err2);
        } else {
          process2.nextTick(emitCloseNT, self2);
        }
      }
      try {
        self2._destroy(err || null, onDestroy);
      } catch (err2) {
        onDestroy(err2);
      }
    }
    function emitErrorCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      const r = self2._readableState;
      const w = self2._writableState;
      if (w) {
        w.closeEmitted = true;
      }
      if (r) {
        r.closeEmitted = true;
      }
      if (w !== null && w !== void 0 && w.emitClose || r !== null && r !== void 0 && r.emitClose) {
        self2.emit("close");
      }
    }
    function emitErrorNT(self2, err) {
      const r = self2._readableState;
      const w = self2._writableState;
      if (w !== null && w !== void 0 && w.errorEmitted || r !== null && r !== void 0 && r.errorEmitted) {
        return;
      }
      if (w) {
        w.errorEmitted = true;
      }
      if (r) {
        r.errorEmitted = true;
      }
      self2.emit("error", err);
    }
    function undestroy() {
      const r = this._readableState;
      const w = this._writableState;
      if (r) {
        r.constructed = true;
        r.closed = false;
        r.closeEmitted = false;
        r.destroyed = false;
        r.errored = null;
        r.errorEmitted = false;
        r.reading = false;
        r.ended = r.readable === false;
        r.endEmitted = r.readable === false;
      }
      if (w) {
        w.constructed = true;
        w.destroyed = false;
        w.closed = false;
        w.closeEmitted = false;
        w.errored = null;
        w.errorEmitted = false;
        w.finalCalled = false;
        w.prefinished = false;
        w.ended = w.writable === false;
        w.ending = w.writable === false;
        w.finished = w.writable === false;
      }
    }
    function errorOrDestroy(stream, err, sync) {
      const r = stream._readableState;
      const w = stream._writableState;
      if (w !== null && w !== void 0 && w.destroyed || r !== null && r !== void 0 && r.destroyed) {
        return this;
      }
      if (r !== null && r !== void 0 && r.autoDestroy || w !== null && w !== void 0 && w.autoDestroy)
        stream.destroy(err);
      else if (err) {
        err.stack;
        if (w && !w.errored) {
          w.errored = err;
        }
        if (r && !r.errored) {
          r.errored = err;
        }
        if (sync) {
          process2.nextTick(emitErrorNT, stream, err);
        } else {
          emitErrorNT(stream, err);
        }
      }
    }
    function construct(stream, cb) {
      if (typeof stream._construct !== "function") {
        return;
      }
      const r = stream._readableState;
      const w = stream._writableState;
      if (r) {
        r.constructed = false;
      }
      if (w) {
        w.constructed = false;
      }
      stream.once(kConstruct, cb);
      if (stream.listenerCount(kConstruct) > 1) {
        return;
      }
      process2.nextTick(constructNT, stream);
    }
    function constructNT(stream) {
      let called = false;
      function onConstruct(err) {
        if (called) {
          errorOrDestroy(stream, err !== null && err !== void 0 ? err : new ERR_MULTIPLE_CALLBACK());
          return;
        }
        called = true;
        const r = stream._readableState;
        const w = stream._writableState;
        const s = w || r;
        if (r) {
          r.constructed = true;
        }
        if (w) {
          w.constructed = true;
        }
        if (s.destroyed) {
          stream.emit(kDestroy, err);
        } else if (err) {
          errorOrDestroy(stream, err, true);
        } else {
          process2.nextTick(emitConstructNT, stream);
        }
      }
      try {
        stream._construct((err) => {
          process2.nextTick(onConstruct, err);
        });
      } catch (err) {
        process2.nextTick(onConstruct, err);
      }
    }
    function emitConstructNT(stream) {
      stream.emit(kConstruct);
    }
    function isRequest(stream) {
      return (stream === null || stream === void 0 ? void 0 : stream.setHeader) && typeof stream.abort === "function";
    }
    function emitCloseLegacy(stream) {
      stream.emit("close");
    }
    function emitErrorCloseLegacy(stream, err) {
      stream.emit("error", err);
      process2.nextTick(emitCloseLegacy, stream);
    }
    function destroyer(stream, err) {
      if (!stream || isDestroyed(stream)) {
        return;
      }
      if (!err && !isFinished(stream)) {
        err = new AbortError();
      }
      if (isServerRequest(stream)) {
        stream.socket = null;
        stream.destroy(err);
      } else if (isRequest(stream)) {
        stream.abort();
      } else if (isRequest(stream.req)) {
        stream.req.abort();
      } else if (typeof stream.destroy === "function") {
        stream.destroy(err);
      } else if (typeof stream.close === "function") {
        stream.close();
      } else if (err) {
        process2.nextTick(emitErrorCloseLegacy, stream, err);
      } else {
        process2.nextTick(emitCloseLegacy, stream);
      }
      if (!stream.destroyed) {
        stream[kIsDestroyed] = true;
      }
    }
    module.exports = {
      construct,
      destroyer,
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/legacy.js
var require_legacy = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/legacy.js"(exports, module) {
    "use strict";
    var { ArrayIsArray, ObjectSetPrototypeOf } = require_primordials();
    var { EventEmitter: EE } = require_events();
    function Stream(opts) {
      EE.call(this, opts);
    }
    ObjectSetPrototypeOf(Stream.prototype, EE.prototype);
    ObjectSetPrototypeOf(Stream, EE);
    Stream.prototype.pipe = function(dest, options) {
      const source = this;
      function ondata(chunk) {
        if (dest.writable && dest.write(chunk) === false && source.pause) {
          source.pause();
        }
      }
      source.on("data", ondata);
      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }
      dest.on("drain", ondrain);
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
      }
      let didOnEnd = false;
      function onend() {
        if (didOnEnd)
          return;
        didOnEnd = true;
        dest.end();
      }
      function onclose() {
        if (didOnEnd)
          return;
        didOnEnd = true;
        if (typeof dest.destroy === "function")
          dest.destroy();
      }
      function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, "error") === 0) {
          this.emit("error", er);
        }
      }
      prependListener(source, "error", onerror);
      prependListener(dest, "error", onerror);
      function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
      }
      source.on("end", cleanup);
      source.on("close", cleanup);
      dest.on("close", cleanup);
      dest.emit("pipe", source);
      return dest;
    };
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (ArrayIsArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    module.exports = {
      Stream,
      prependListener
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/add-abort-signal.js
var require_add_abort_signal = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/add-abort-signal.js"(exports, module) {
    "use strict";
    var { SymbolDispose } = require_primordials();
    var { AbortError, codes } = require_errors();
    var { isNodeStream, isWebStream, kControllerErrorFunction } = require_utils2();
    var eos = require_end_of_stream();
    var { ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2 } = codes;
    var addAbortListener;
    var validateAbortSignal = (signal, name) => {
      if (typeof signal !== "object" || !("aborted" in signal)) {
        throw new ERR_INVALID_ARG_TYPE2(name, "AbortSignal", signal);
      }
    };
    module.exports.addAbortSignal = function addAbortSignal(signal, stream) {
      validateAbortSignal(signal, "signal");
      if (!isNodeStream(stream) && !isWebStream(stream)) {
        throw new ERR_INVALID_ARG_TYPE2("stream", ["ReadableStream", "WritableStream", "Stream"], stream);
      }
      return module.exports.addAbortSignalNoValidate(signal, stream);
    };
    module.exports.addAbortSignalNoValidate = function(signal, stream) {
      if (typeof signal !== "object" || !("aborted" in signal)) {
        return stream;
      }
      const onAbort = isNodeStream(stream) ? () => {
        stream.destroy(
          new AbortError(void 0, {
            cause: signal.reason
          })
        );
      } : () => {
        stream[kControllerErrorFunction](
          new AbortError(void 0, {
            cause: signal.reason
          })
        );
      };
      if (signal.aborted) {
        onAbort();
      } else {
        addAbortListener = addAbortListener || require_util2().addAbortListener;
        const disposable = addAbortListener(signal, onAbort);
        eos(stream, disposable[SymbolDispose]);
      }
      return stream;
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
    "use strict";
    var { StringPrototypeSlice, SymbolIterator, TypedArrayPrototypeSet, Uint8Array: Uint8Array2 } = require_primordials();
    var { Buffer: Buffer2 } = require_buffer();
    var { inspect } = require_util2();
    module.exports = class BufferList {
      constructor() {
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      push(v) {
        const entry = {
          data: v,
          next: null
        };
        if (this.length > 0)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
        ++this.length;
      }
      unshift(v) {
        const entry = {
          data: v,
          next: this.head
        };
        if (this.length === 0)
          this.tail = entry;
        this.head = entry;
        ++this.length;
      }
      shift() {
        if (this.length === 0)
          return;
        const ret = this.head.data;
        if (this.length === 1)
          this.head = this.tail = null;
        else
          this.head = this.head.next;
        --this.length;
        return ret;
      }
      clear() {
        this.head = this.tail = null;
        this.length = 0;
      }
      join(s) {
        if (this.length === 0)
          return "";
        let p = this.head;
        let ret = "" + p.data;
        while ((p = p.next) !== null)
          ret += s + p.data;
        return ret;
      }
      concat(n) {
        if (this.length === 0)
          return Buffer2.alloc(0);
        const ret = Buffer2.allocUnsafe(n >>> 0);
        let p = this.head;
        let i2 = 0;
        while (p) {
          TypedArrayPrototypeSet(ret, p.data, i2);
          i2 += p.data.length;
          p = p.next;
        }
        return ret;
      }
      // Consumes a specified amount of bytes or characters from the buffered data.
      consume(n, hasStrings) {
        const data = this.head.data;
        if (n < data.length) {
          const slice = data.slice(0, n);
          this.head.data = data.slice(n);
          return slice;
        }
        if (n === data.length) {
          return this.shift();
        }
        return hasStrings ? this._getString(n) : this._getBuffer(n);
      }
      first() {
        return this.head.data;
      }
      *[SymbolIterator]() {
        for (let p = this.head; p; p = p.next) {
          yield p.data;
        }
      }
      // Consumes a specified amount of characters from the buffered data.
      _getString(n) {
        let ret = "";
        let p = this.head;
        let c = 0;
        do {
          const str = p.data;
          if (n > str.length) {
            ret += str;
            n -= str.length;
          } else {
            if (n === str.length) {
              ret += str;
              ++c;
              if (p.next)
                this.head = p.next;
              else
                this.head = this.tail = null;
            } else {
              ret += StringPrototypeSlice(str, 0, n);
              this.head = p;
              p.data = StringPrototypeSlice(str, n);
            }
            break;
          }
          ++c;
        } while ((p = p.next) !== null);
        this.length -= c;
        return ret;
      }
      // Consumes a specified amount of bytes from the buffered data.
      _getBuffer(n) {
        const ret = Buffer2.allocUnsafe(n);
        const retLen = n;
        let p = this.head;
        let c = 0;
        do {
          const buf = p.data;
          if (n > buf.length) {
            TypedArrayPrototypeSet(ret, buf, retLen - n);
            n -= buf.length;
          } else {
            if (n === buf.length) {
              TypedArrayPrototypeSet(ret, buf, retLen - n);
              ++c;
              if (p.next)
                this.head = p.next;
              else
                this.head = this.tail = null;
            } else {
              TypedArrayPrototypeSet(ret, new Uint8Array2(buf.buffer, buf.byteOffset, n), retLen - n);
              this.head = p;
              p.data = buf.slice(n);
            }
            break;
          }
          ++c;
        } while ((p = p.next) !== null);
        this.length -= c;
        return ret;
      }
      // Make sure the linked list only shows the minimal necessary information.
      [Symbol.for("nodejs.util.inspect.custom")](_, options) {
        return inspect(this, {
          ...options,
          // Only inspect one level.
          depth: 0,
          // It should not recurse.
          customInspect: false
        });
      }
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
    "use strict";
    var { MathFloor, NumberIsInteger } = require_primordials();
    var { validateInteger } = require_validators();
    var { ERR_INVALID_ARG_VALUE } = require_errors().codes;
    var defaultHighWaterMarkBytes = 16 * 1024;
    var defaultHighWaterMarkObjectMode = 16;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getDefaultHighWaterMark(objectMode) {
      return objectMode ? defaultHighWaterMarkObjectMode : defaultHighWaterMarkBytes;
    }
    function setDefaultHighWaterMark(objectMode, value) {
      validateInteger(value, "value", 0);
      if (objectMode) {
        defaultHighWaterMarkObjectMode = value;
      } else {
        defaultHighWaterMarkBytes = value;
      }
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      const hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!NumberIsInteger(hwm) || hwm < 0) {
          const name = isDuplex ? `options.${duplexKey}` : "options.highWaterMark";
          throw new ERR_INVALID_ARG_VALUE(name, hwm);
        }
        return MathFloor(hwm);
      }
      return getDefaultHighWaterMark(state.objectMode);
    }
    module.exports = {
      getHighWaterMark,
      getDefaultHighWaterMark,
      setDefaultHighWaterMark
    };
  }
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/safe-buffer/index.js"(exports, module) {
    var buffer2 = require_buffer();
    var Buffer2 = buffer2.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module.exports = buffer2;
    } else {
      copyProps(buffer2, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer2.SlowBuffer(size);
    };
  }
});

// node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({
  "node_modules/string_decoder/lib/string_decoder.js"(exports) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc)
        return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried)
              return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
        throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0)
        return "";
      var r;
      var i2;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === void 0)
          return "";
        i2 = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i2 = 0;
      }
      if (i2 < buf.length)
        return r ? r + this.text(buf, i2) : this.text(buf, i2);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127)
        return 0;
      else if (byte >> 5 === 6)
        return 2;
      else if (byte >> 4 === 14)
        return 3;
      else if (byte >> 3 === 30)
        return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i2) {
      var j = buf.length - 1;
      if (j < i2)
        return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i2 || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i2 || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2)
            nb = 0;
          else
            self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "\uFFFD";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "\uFFFD";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "\uFFFD";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== void 0)
        return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i2) {
      var total = utf8CheckIncomplete(this, buf, i2);
      if (!this.lastNeed)
        return buf.toString("utf8", i2);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i2, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + "\uFFFD";
      return r;
    }
    function utf16Text(buf, i2) {
      if ((buf.length - i2) % 2 === 0) {
        var r = buf.toString("utf16le", i2);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i2, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i2) {
      var n = (buf.length - i2) % 3;
      if (n === 0)
        return buf.toString("base64", i2);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i2, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/readable-stream/lib/internal/streams/from.js
var require_from = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/from.js"(exports, module) {
    "use strict";
    var process2 = require_browser();
    var { PromisePrototypeThen, SymbolAsyncIterator, SymbolIterator } = require_primordials();
    var { Buffer: Buffer2 } = require_buffer();
    var { ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_STREAM_NULL_VALUES } = require_errors().codes;
    function from(Readable6, iterable, opts) {
      let iterator;
      if (typeof iterable === "string" || iterable instanceof Buffer2) {
        return new Readable6({
          objectMode: true,
          ...opts,
          read() {
            this.push(iterable);
            this.push(null);
          }
        });
      }
      let isAsync;
      if (iterable && iterable[SymbolAsyncIterator]) {
        isAsync = true;
        iterator = iterable[SymbolAsyncIterator]();
      } else if (iterable && iterable[SymbolIterator]) {
        isAsync = false;
        iterator = iterable[SymbolIterator]();
      } else {
        throw new ERR_INVALID_ARG_TYPE2("iterable", ["Iterable"], iterable);
      }
      const readable2 = new Readable6({
        objectMode: true,
        highWaterMark: 1,
        // TODO(ronag): What options should be allowed?
        ...opts
      });
      let reading = false;
      readable2._read = function() {
        if (!reading) {
          reading = true;
          next();
        }
      };
      readable2._destroy = function(error2, cb) {
        PromisePrototypeThen(
          close(error2),
          () => process2.nextTick(cb, error2),
          // nextTick is here in case cb throws
          (e) => process2.nextTick(cb, e || error2)
        );
      };
      async function close(error2) {
        const hadError = error2 !== void 0 && error2 !== null;
        const hasThrow = typeof iterator.throw === "function";
        if (hadError && hasThrow) {
          const { value, done } = await iterator.throw(error2);
          await value;
          if (done) {
            return;
          }
        }
        if (typeof iterator.return === "function") {
          const { value } = await iterator.return();
          await value;
        }
      }
      async function next() {
        for (; ; ) {
          try {
            const { value, done } = isAsync ? await iterator.next() : iterator.next();
            if (done) {
              readable2.push(null);
            } else {
              const res = value && typeof value.then === "function" ? await value : value;
              if (res === null) {
                reading = false;
                throw new ERR_STREAM_NULL_VALUES();
              } else if (readable2.push(res)) {
                continue;
              } else {
                reading = false;
              }
            }
          } catch (err) {
            readable2.destroy(err);
          }
          break;
        }
      }
      return readable2;
    }
    module.exports = from;
  }
});

// node_modules/readable-stream/lib/internal/streams/readable.js
var require_readable = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/readable.js"(exports, module) {
    var process2 = require_browser();
    var {
      ArrayPrototypeIndexOf,
      NumberIsInteger,
      NumberIsNaN,
      NumberParseInt,
      ObjectDefineProperties,
      ObjectKeys,
      ObjectSetPrototypeOf,
      Promise: Promise2,
      SafeSet,
      SymbolAsyncDispose,
      SymbolAsyncIterator,
      Symbol: Symbol2
    } = require_primordials();
    module.exports = Readable6;
    Readable6.ReadableState = ReadableState;
    var { EventEmitter: EE } = require_events();
    var { Stream, prependListener } = require_legacy();
    var { Buffer: Buffer2 } = require_buffer();
    var { addAbortSignal } = require_add_abort_signal();
    var eos = require_end_of_stream();
    var debug = require_util2().debuglog("stream", (fn) => {
      debug = fn;
    });
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var { getHighWaterMark, getDefaultHighWaterMark } = require_state();
    var {
      aggregateTwoErrors,
      codes: {
        ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2,
        ERR_METHOD_NOT_IMPLEMENTED,
        ERR_OUT_OF_RANGE,
        ERR_STREAM_PUSH_AFTER_EOF,
        ERR_STREAM_UNSHIFT_AFTER_END_EVENT
      },
      AbortError
    } = require_errors();
    var { validateObject } = require_validators();
    var kPaused = Symbol2("kPaused");
    var { StringDecoder } = require_string_decoder();
    var from = require_from();
    ObjectSetPrototypeOf(Readable6.prototype, Stream.prototype);
    ObjectSetPrototypeOf(Readable6, Stream);
    var nop = () => {
    };
    var { errorOrDestroy } = destroyImpl;
    var kObjectMode = 1 << 0;
    var kEnded = 1 << 1;
    var kEndEmitted = 1 << 2;
    var kReading = 1 << 3;
    var kConstructed = 1 << 4;
    var kSync = 1 << 5;
    var kNeedReadable = 1 << 6;
    var kEmittedReadable = 1 << 7;
    var kReadableListening = 1 << 8;
    var kResumeScheduled = 1 << 9;
    var kErrorEmitted = 1 << 10;
    var kEmitClose = 1 << 11;
    var kAutoDestroy = 1 << 12;
    var kDestroyed = 1 << 13;
    var kClosed = 1 << 14;
    var kCloseEmitted = 1 << 15;
    var kMultiAwaitDrain = 1 << 16;
    var kReadingMore = 1 << 17;
    var kDataEmitted = 1 << 18;
    function makeBitMapDescriptor(bit) {
      return {
        enumerable: false,
        get() {
          return (this.state & bit) !== 0;
        },
        set(value) {
          if (value)
            this.state |= bit;
          else
            this.state &= ~bit;
        }
      };
    }
    ObjectDefineProperties(ReadableState.prototype, {
      objectMode: makeBitMapDescriptor(kObjectMode),
      ended: makeBitMapDescriptor(kEnded),
      endEmitted: makeBitMapDescriptor(kEndEmitted),
      reading: makeBitMapDescriptor(kReading),
      // Stream is still being constructed and cannot be
      // destroyed until construction finished or failed.
      // Async construction is opt in, therefore we start as
      // constructed.
      constructed: makeBitMapDescriptor(kConstructed),
      // A flag to be able to tell if the event 'readable'/'data' is emitted
      // immediately, or on a later tick.  We set this to true at first, because
      // any actions that shouldn't happen until "later" should generally also
      // not happen before the first read call.
      sync: makeBitMapDescriptor(kSync),
      // Whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      needReadable: makeBitMapDescriptor(kNeedReadable),
      emittedReadable: makeBitMapDescriptor(kEmittedReadable),
      readableListening: makeBitMapDescriptor(kReadableListening),
      resumeScheduled: makeBitMapDescriptor(kResumeScheduled),
      // True if the error was already emitted and should not be thrown again.
      errorEmitted: makeBitMapDescriptor(kErrorEmitted),
      emitClose: makeBitMapDescriptor(kEmitClose),
      autoDestroy: makeBitMapDescriptor(kAutoDestroy),
      // Has it been destroyed.
      destroyed: makeBitMapDescriptor(kDestroyed),
      // Indicates whether the stream has finished destroying.
      closed: makeBitMapDescriptor(kClosed),
      // True if close has been emitted or would have been emitted
      // depending on emitClose.
      closeEmitted: makeBitMapDescriptor(kCloseEmitted),
      multiAwaitDrain: makeBitMapDescriptor(kMultiAwaitDrain),
      // If true, a maybeReadMore has been scheduled.
      readingMore: makeBitMapDescriptor(kReadingMore),
      dataEmitted: makeBitMapDescriptor(kDataEmitted)
    });
    function ReadableState(options, stream, isDuplex) {
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof require_duplex();
      this.state = kEmitClose | kAutoDestroy | kConstructed | kSync;
      if (options && options.objectMode)
        this.state |= kObjectMode;
      if (isDuplex && options && options.readableObjectMode)
        this.state |= kObjectMode;
      this.highWaterMark = options ? getHighWaterMark(this, options, "readableHighWaterMark", isDuplex) : getDefaultHighWaterMark(false);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = [];
      this.flowing = null;
      this[kPaused] = null;
      if (options && options.emitClose === false)
        this.state &= ~kEmitClose;
      if (options && options.autoDestroy === false)
        this.state &= ~kAutoDestroy;
      this.errored = null;
      this.defaultEncoding = options && options.defaultEncoding || "utf8";
      this.awaitDrainWriters = null;
      this.decoder = null;
      this.encoding = null;
      if (options && options.encoding) {
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable6(options) {
      if (!(this instanceof Readable6))
        return new Readable6(options);
      const isDuplex = this instanceof require_duplex();
      this._readableState = new ReadableState(options, this, isDuplex);
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.construct === "function")
          this._construct = options.construct;
        if (options.signal && !isDuplex)
          addAbortSignal(options.signal, this);
      }
      Stream.call(this, options);
      destroyImpl.construct(this, () => {
        if (this._readableState.needReadable) {
          maybeReadMore(this, this._readableState);
        }
      });
    }
    Readable6.prototype.destroy = destroyImpl.destroy;
    Readable6.prototype._undestroy = destroyImpl.undestroy;
    Readable6.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable6.prototype[EE.captureRejectionSymbol] = function(err) {
      this.destroy(err);
    };
    Readable6.prototype[SymbolAsyncDispose] = function() {
      let error2;
      if (!this.destroyed) {
        error2 = this.readableEnded ? null : new AbortError();
        this.destroy(error2);
      }
      return new Promise2((resolve, reject) => eos(this, (err) => err && err !== error2 ? reject(err) : resolve(null)));
    };
    Readable6.prototype.push = function(chunk, encoding) {
      return readableAddChunk(this, chunk, encoding, false);
    };
    Readable6.prototype.unshift = function(chunk, encoding) {
      return readableAddChunk(this, chunk, encoding, true);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront) {
      debug("readableAddChunk", chunk);
      const state = stream._readableState;
      let err;
      if ((state.state & kObjectMode) === 0) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (state.encoding !== encoding) {
            if (addToFront && state.encoding) {
              chunk = Buffer2.from(chunk, encoding).toString(state.encoding);
            } else {
              chunk = Buffer2.from(chunk, encoding);
              encoding = "";
            }
          }
        } else if (chunk instanceof Buffer2) {
          encoding = "";
        } else if (Stream._isUint8Array(chunk)) {
          chunk = Stream._uint8ArrayToBuffer(chunk);
          encoding = "";
        } else if (chunk != null) {
          err = new ERR_INVALID_ARG_TYPE2("chunk", ["string", "Buffer", "Uint8Array"], chunk);
        }
      }
      if (err) {
        errorOrDestroy(stream, err);
      } else if (chunk === null) {
        state.state &= ~kReading;
        onEofChunk(stream, state);
      } else if ((state.state & kObjectMode) !== 0 || chunk && chunk.length > 0) {
        if (addToFront) {
          if ((state.state & kEndEmitted) !== 0)
            errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
          else if (state.destroyed || state.errored)
            return false;
          else
            addChunk(stream, state, chunk, true);
        } else if (state.ended) {
          errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state.destroyed || state.errored) {
          return false;
        } else {
          state.state &= ~kReading;
          if (state.decoder && !encoding) {
            chunk = state.decoder.write(chunk);
            if (state.objectMode || chunk.length !== 0)
              addChunk(stream, state, chunk, false);
            else
              maybeReadMore(stream, state);
          } else {
            addChunk(stream, state, chunk, false);
          }
        }
      } else if (!addToFront) {
        state.state &= ~kReading;
        maybeReadMore(stream, state);
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync && stream.listenerCount("data") > 0) {
        if ((state.state & kMultiAwaitDrain) !== 0) {
          state.awaitDrainWriters.clear();
        } else {
          state.awaitDrainWriters = null;
        }
        state.dataEmitted = true;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if ((state.state & kNeedReadable) !== 0)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    Readable6.prototype.isPaused = function() {
      const state = this._readableState;
      return state[kPaused] === true || state.flowing === false;
    };
    Readable6.prototype.setEncoding = function(enc) {
      const decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      const buffer2 = this._readableState.buffer;
      let content = "";
      for (const data of buffer2) {
        content += decoder.write(data);
      }
      buffer2.clear();
      if (content !== "")
        buffer2.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n > MAX_HWM) {
        throw new ERR_OUT_OF_RANGE("size", "<= 1GiB", n);
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if ((state.state & kObjectMode) !== 0)
        return 1;
      if (NumberIsNaN(n)) {
        if (state.flowing && state.length)
          return state.buffer.first().length;
        return state.length;
      }
      if (n <= state.length)
        return n;
      return state.ended ? state.length : 0;
    }
    Readable6.prototype.read = function(n) {
      debug("read", n);
      if (n === void 0) {
        n = NaN;
      } else if (!NumberIsInteger(n)) {
        n = NumberParseInt(n, 10);
      }
      const state = this._readableState;
      const nOrig = n;
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n !== 0)
        state.state &= ~kEmittedReadable;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      let doRead = (state.state & kNeedReadable) !== 0;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading || state.destroyed || state.errored || !state.constructed) {
        doRead = false;
        debug("reading, ended or constructing", doRead);
      } else if (doRead) {
        debug("do read");
        state.state |= kReading | kSync;
        if (state.length === 0)
          state.state |= kNeedReadable;
        try {
          this._read(state.highWaterMark);
        } catch (err) {
          errorOrDestroy(this, err);
        }
        state.state &= ~kSync;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      let ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        if (state.multiAwaitDrain) {
          state.awaitDrainWriters.clear();
        } else {
          state.awaitDrainWriters = null;
        }
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null && !state.errorEmitted && !state.closeEmitted) {
        state.dataEmitted = true;
        this.emit("data", ret);
      }
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        const chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        state.emittedReadable = true;
        emitReadable_(stream);
      }
    }
    function emitReadable(stream) {
      const state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process2.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      const state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && !state.errored && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore && state.constructed) {
        state.readingMore = true;
        process2.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        const len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable6.prototype._read = function(n) {
      throw new ERR_METHOD_NOT_IMPLEMENTED("_read()");
    };
    Readable6.prototype.pipe = function(dest, pipeOpts) {
      const src = this;
      const state = this._readableState;
      if (state.pipes.length === 1) {
        if (!state.multiAwaitDrain) {
          state.multiAwaitDrain = true;
          state.awaitDrainWriters = new SafeSet(state.awaitDrainWriters ? [state.awaitDrainWriters] : []);
        }
      }
      state.pipes.push(dest);
      debug("pipe count=%d opts=%j", state.pipes.length, pipeOpts);
      const doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process2.stdout && dest !== process2.stderr;
      const endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process2.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable2, unpipeInfo) {
        debug("onunpipe");
        if (readable2 === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      let ondrain;
      let cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        if (ondrain) {
          dest.removeListener("drain", ondrain);
        }
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (ondrain && state.awaitDrainWriters && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      function pause() {
        if (!cleanedUp) {
          if (state.pipes.length === 1 && state.pipes[0] === dest) {
            debug("false write response, pause", 0);
            state.awaitDrainWriters = dest;
            state.multiAwaitDrain = false;
          } else if (state.pipes.length > 1 && state.pipes.includes(dest)) {
            debug("false write response, pause", state.awaitDrainWriters.size);
            state.awaitDrainWriters.add(dest);
          }
          src.pause();
        }
        if (!ondrain) {
          ondrain = pipeOnDrain(src, dest);
          dest.on("drain", ondrain);
        }
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        const ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (dest.listenerCount("error") === 0) {
          const s = dest._writableState || dest._readableState;
          if (s && !s.errorEmitted) {
            errorOrDestroy(dest, er);
          } else {
            dest.emit("error", er);
          }
        }
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (dest.writableNeedDrain === true) {
        pause();
      } else if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src, dest) {
      return function pipeOnDrainFunctionResult() {
        const state = src._readableState;
        if (state.awaitDrainWriters === dest) {
          debug("pipeOnDrain", 1);
          state.awaitDrainWriters = null;
        } else if (state.multiAwaitDrain) {
          debug("pipeOnDrain", state.awaitDrainWriters.size);
          state.awaitDrainWriters.delete(dest);
        }
        if ((!state.awaitDrainWriters || state.awaitDrainWriters.size === 0) && src.listenerCount("data")) {
          src.resume();
        }
      };
    }
    Readable6.prototype.unpipe = function(dest) {
      const state = this._readableState;
      const unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipes.length === 0)
        return this;
      if (!dest) {
        const dests = state.pipes;
        state.pipes = [];
        this.pause();
        for (let i2 = 0; i2 < dests.length; i2++)
          dests[i2].emit("unpipe", this, {
            hasUnpiped: false
          });
        return this;
      }
      const index = ArrayPrototypeIndexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      if (state.pipes.length === 0)
        this.pause();
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable6.prototype.on = function(ev, fn) {
      const res = Stream.prototype.on.call(this, ev, fn);
      const state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process2.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable6.prototype.addListener = Readable6.prototype.on;
    Readable6.prototype.removeListener = function(ev, fn) {
      const res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process2.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable6.prototype.off = Readable6.prototype.removeListener;
    Readable6.prototype.removeAllListeners = function(ev) {
      const res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process2.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      const state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && state[kPaused] === false) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      } else if (!state.readableListening) {
        state.flowing = null;
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable6.prototype.resume = function() {
      const state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state[kPaused] = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process2.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable6.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState[kPaused] = true;
      return this;
    };
    function flow(stream) {
      const state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null)
        ;
    }
    Readable6.prototype.wrap = function(stream) {
      let paused = false;
      stream.on("data", (chunk) => {
        if (!this.push(chunk) && stream.pause) {
          paused = true;
          stream.pause();
        }
      });
      stream.on("end", () => {
        this.push(null);
      });
      stream.on("error", (err) => {
        errorOrDestroy(this, err);
      });
      stream.on("close", () => {
        this.destroy();
      });
      stream.on("destroy", () => {
        this.destroy();
      });
      this._read = () => {
        if (paused && stream.resume) {
          paused = false;
          stream.resume();
        }
      };
      const streamKeys = ObjectKeys(stream);
      for (let j = 1; j < streamKeys.length; j++) {
        const i2 = streamKeys[j];
        if (this[i2] === void 0 && typeof stream[i2] === "function") {
          this[i2] = stream[i2].bind(stream);
        }
      }
      return this;
    };
    Readable6.prototype[SymbolAsyncIterator] = function() {
      return streamToAsyncIterator(this);
    };
    Readable6.prototype.iterator = function(options) {
      if (options !== void 0) {
        validateObject(options, "options");
      }
      return streamToAsyncIterator(this, options);
    };
    function streamToAsyncIterator(stream, options) {
      if (typeof stream.read !== "function") {
        stream = Readable6.wrap(stream, {
          objectMode: true
        });
      }
      const iter = createAsyncIterator(stream, options);
      iter.stream = stream;
      return iter;
    }
    async function* createAsyncIterator(stream, options) {
      let callback = nop;
      function next(resolve) {
        if (this === stream) {
          callback();
          callback = nop;
        } else {
          callback = resolve;
        }
      }
      stream.on("readable", next);
      let error2;
      const cleanup = eos(
        stream,
        {
          writable: false
        },
        (err) => {
          error2 = err ? aggregateTwoErrors(error2, err) : null;
          callback();
          callback = nop;
        }
      );
      try {
        while (true) {
          const chunk = stream.destroyed ? null : stream.read();
          if (chunk !== null) {
            yield chunk;
          } else if (error2) {
            throw error2;
          } else if (error2 === null) {
            return;
          } else {
            await new Promise2(next);
          }
        }
      } catch (err) {
        error2 = aggregateTwoErrors(error2, err);
        throw error2;
      } finally {
        if ((error2 || (options === null || options === void 0 ? void 0 : options.destroyOnReturn) !== false) && (error2 === void 0 || stream._readableState.autoDestroy)) {
          destroyImpl.destroyer(stream, null);
        } else {
          stream.off("readable", next);
          cleanup();
        }
      }
    }
    ObjectDefineProperties(Readable6.prototype, {
      readable: {
        __proto__: null,
        get() {
          const r = this._readableState;
          return !!r && r.readable !== false && !r.destroyed && !r.errorEmitted && !r.endEmitted;
        },
        set(val) {
          if (this._readableState) {
            this._readableState.readable = !!val;
          }
        }
      },
      readableDidRead: {
        __proto__: null,
        enumerable: false,
        get: function() {
          return this._readableState.dataEmitted;
        }
      },
      readableAborted: {
        __proto__: null,
        enumerable: false,
        get: function() {
          return !!(this._readableState.readable !== false && (this._readableState.destroyed || this._readableState.errored) && !this._readableState.endEmitted);
        }
      },
      readableHighWaterMark: {
        __proto__: null,
        enumerable: false,
        get: function() {
          return this._readableState.highWaterMark;
        }
      },
      readableBuffer: {
        __proto__: null,
        enumerable: false,
        get: function() {
          return this._readableState && this._readableState.buffer;
        }
      },
      readableFlowing: {
        __proto__: null,
        enumerable: false,
        get: function() {
          return this._readableState.flowing;
        },
        set: function(state) {
          if (this._readableState) {
            this._readableState.flowing = state;
          }
        }
      },
      readableLength: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._readableState.length;
        }
      },
      readableObjectMode: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._readableState ? this._readableState.objectMode : false;
        }
      },
      readableEncoding: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._readableState ? this._readableState.encoding : null;
        }
      },
      errored: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._readableState ? this._readableState.errored : null;
        }
      },
      closed: {
        __proto__: null,
        get() {
          return this._readableState ? this._readableState.closed : false;
        }
      },
      destroyed: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._readableState ? this._readableState.destroyed : false;
        },
        set(value) {
          if (!this._readableState) {
            return;
          }
          this._readableState.destroyed = value;
        }
      },
      readableEnded: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._readableState ? this._readableState.endEmitted : false;
        }
      }
    });
    ObjectDefineProperties(ReadableState.prototype, {
      // Legacy getter for `pipesCount`.
      pipesCount: {
        __proto__: null,
        get() {
          return this.pipes.length;
        }
      },
      // Legacy property for `paused`.
      paused: {
        __proto__: null,
        get() {
          return this[kPaused] !== false;
        },
        set(value) {
          this[kPaused] = !!value;
        }
      }
    });
    Readable6._fromList = fromList;
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      let ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      const state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process2.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.errored && !state.closeEmitted && !state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.emit("end");
        if (stream.writable && stream.allowHalfOpen === false) {
          process2.nextTick(endWritableNT, stream);
        } else if (state.autoDestroy) {
          const wState = stream._writableState;
          const autoDestroy = !wState || wState.autoDestroy && // We don't expect the writable to ever 'finish'
          // if writable is explicitly set to false.
          (wState.finished || wState.writable === false);
          if (autoDestroy) {
            stream.destroy();
          }
        }
      }
    }
    function endWritableNT(stream) {
      const writable = stream.writable && !stream.writableEnded && !stream.destroyed;
      if (writable) {
        stream.end();
      }
    }
    Readable6.from = function(iterable, opts) {
      return from(Readable6, iterable, opts);
    };
    var webStreamsAdapters;
    function lazyWebStreams() {
      if (webStreamsAdapters === void 0)
        webStreamsAdapters = {};
      return webStreamsAdapters;
    }
    Readable6.fromWeb = function(readableStream, options) {
      return lazyWebStreams().newStreamReadableFromReadableStream(readableStream, options);
    };
    Readable6.toWeb = function(streamReadable, options) {
      return lazyWebStreams().newReadableStreamFromStreamReadable(streamReadable, options);
    };
    Readable6.wrap = function(src, options) {
      var _ref, _src$readableObjectMo;
      return new Readable6({
        objectMode: (_ref = (_src$readableObjectMo = src.readableObjectMode) !== null && _src$readableObjectMo !== void 0 ? _src$readableObjectMo : src.objectMode) !== null && _ref !== void 0 ? _ref : true,
        ...options,
        destroy(err, callback) {
          destroyImpl.destroyer(src, err);
          callback(err);
        }
      }).wrap(src);
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/writable.js
var require_writable = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/writable.js"(exports, module) {
    var process2 = require_browser();
    var {
      ArrayPrototypeSlice,
      Error: Error2,
      FunctionPrototypeSymbolHasInstance,
      ObjectDefineProperty,
      ObjectDefineProperties,
      ObjectSetPrototypeOf,
      StringPrototypeToLowerCase,
      Symbol: Symbol2,
      SymbolHasInstance
    } = require_primordials();
    module.exports = Writable;
    Writable.WritableState = WritableState;
    var { EventEmitter: EE } = require_events();
    var Stream = require_legacy().Stream;
    var { Buffer: Buffer2 } = require_buffer();
    var destroyImpl = require_destroy();
    var { addAbortSignal } = require_add_abort_signal();
    var { getHighWaterMark, getDefaultHighWaterMark } = require_state();
    var {
      ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2,
      ERR_METHOD_NOT_IMPLEMENTED,
      ERR_MULTIPLE_CALLBACK,
      ERR_STREAM_CANNOT_PIPE,
      ERR_STREAM_DESTROYED,
      ERR_STREAM_ALREADY_FINISHED,
      ERR_STREAM_NULL_VALUES,
      ERR_STREAM_WRITE_AFTER_END,
      ERR_UNKNOWN_ENCODING
    } = require_errors().codes;
    var { errorOrDestroy } = destroyImpl;
    ObjectSetPrototypeOf(Writable.prototype, Stream.prototype);
    ObjectSetPrototypeOf(Writable, Stream);
    function nop() {
    }
    var kOnFinished = Symbol2("kOnFinished");
    function WritableState(options, stream, isDuplex) {
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof require_duplex();
      this.objectMode = !!(options && options.objectMode);
      if (isDuplex)
        this.objectMode = this.objectMode || !!(options && options.writableObjectMode);
      this.highWaterMark = options ? getHighWaterMark(this, options, "writableHighWaterMark", isDuplex) : getDefaultHighWaterMark(false);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      const noDecode = !!(options && options.decodeStrings === false);
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options && options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = onwrite.bind(void 0, stream);
      this.writecb = null;
      this.writelen = 0;
      this.afterWriteTickInfo = null;
      resetBuffer(this);
      this.pendingcb = 0;
      this.constructed = true;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = !options || options.emitClose !== false;
      this.autoDestroy = !options || options.autoDestroy !== false;
      this.errored = null;
      this.closed = false;
      this.closeEmitted = false;
      this[kOnFinished] = [];
    }
    function resetBuffer(state) {
      state.buffered = [];
      state.bufferedIndex = 0;
      state.allBuffers = true;
      state.allNoop = true;
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      return ArrayPrototypeSlice(this.buffered, this.bufferedIndex);
    };
    ObjectDefineProperty(WritableState.prototype, "bufferedRequestCount", {
      __proto__: null,
      get() {
        return this.buffered.length - this.bufferedIndex;
      }
    });
    function Writable(options) {
      const isDuplex = this instanceof require_duplex();
      if (!isDuplex && !FunctionPrototypeSymbolHasInstance(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
        if (typeof options.construct === "function")
          this._construct = options.construct;
        if (options.signal)
          addAbortSignal(options.signal, this);
      }
      Stream.call(this, options);
      destroyImpl.construct(this, () => {
        const state = this._writableState;
        if (!state.writing) {
          clearBuffer(this, state);
        }
        finishMaybe(this, state);
      });
    }
    ObjectDefineProperty(Writable, SymbolHasInstance, {
      __proto__: null,
      value: function(object) {
        if (FunctionPrototypeSymbolHasInstance(this, object))
          return true;
        if (this !== Writable)
          return false;
        return object && object._writableState instanceof WritableState;
      }
    });
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function _write(stream, chunk, encoding, cb) {
      const state = stream._writableState;
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = state.defaultEncoding;
      } else {
        if (!encoding)
          encoding = state.defaultEncoding;
        else if (encoding !== "buffer" && !Buffer2.isEncoding(encoding))
          throw new ERR_UNKNOWN_ENCODING(encoding);
        if (typeof cb !== "function")
          cb = nop;
      }
      if (chunk === null) {
        throw new ERR_STREAM_NULL_VALUES();
      } else if (!state.objectMode) {
        if (typeof chunk === "string") {
          if (state.decodeStrings !== false) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "buffer";
          }
        } else if (chunk instanceof Buffer2) {
          encoding = "buffer";
        } else if (Stream._isUint8Array(chunk)) {
          chunk = Stream._uint8ArrayToBuffer(chunk);
          encoding = "buffer";
        } else {
          throw new ERR_INVALID_ARG_TYPE2("chunk", ["string", "Buffer", "Uint8Array"], chunk);
        }
      }
      let err;
      if (state.ending) {
        err = new ERR_STREAM_WRITE_AFTER_END();
      } else if (state.destroyed) {
        err = new ERR_STREAM_DESTROYED("write");
      }
      if (err) {
        process2.nextTick(cb, err);
        errorOrDestroy(stream, err, true);
        return err;
      }
      state.pendingcb++;
      return writeOrBuffer(stream, state, chunk, encoding, cb);
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      return _write(this, chunk, encoding, cb) === true;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      const state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = StringPrototypeToLowerCase(encoding);
      if (!Buffer2.isEncoding(encoding))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    function writeOrBuffer(stream, state, chunk, encoding, callback) {
      const len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      const ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked || state.errored || !state.constructed) {
        state.buffered.push({
          chunk,
          encoding,
          callback
        });
        if (state.allBuffers && encoding !== "buffer") {
          state.allBuffers = false;
        }
        if (state.allNoop && callback !== nop) {
          state.allNoop = false;
        }
      } else {
        state.writelen = len;
        state.writecb = callback;
        state.writing = true;
        state.sync = true;
        stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      return ret && !state.errored && !state.destroyed;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, er, cb) {
      --state.pendingcb;
      cb(er);
      errorBuffer(state);
      errorOrDestroy(stream, er);
    }
    function onwrite(stream, er) {
      const state = stream._writableState;
      const sync = state.sync;
      const cb = state.writecb;
      if (typeof cb !== "function") {
        errorOrDestroy(stream, new ERR_MULTIPLE_CALLBACK());
        return;
      }
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
      if (er) {
        er.stack;
        if (!state.errored) {
          state.errored = er;
        }
        if (stream._readableState && !stream._readableState.errored) {
          stream._readableState.errored = er;
        }
        if (sync) {
          process2.nextTick(onwriteError, stream, state, er, cb);
        } else {
          onwriteError(stream, state, er, cb);
        }
      } else {
        if (state.buffered.length > state.bufferedIndex) {
          clearBuffer(stream, state);
        }
        if (sync) {
          if (state.afterWriteTickInfo !== null && state.afterWriteTickInfo.cb === cb) {
            state.afterWriteTickInfo.count++;
          } else {
            state.afterWriteTickInfo = {
              count: 1,
              cb,
              stream,
              state
            };
            process2.nextTick(afterWriteTick, state.afterWriteTickInfo);
          }
        } else {
          afterWrite(stream, state, 1, cb);
        }
      }
    }
    function afterWriteTick({ stream, state, count, cb }) {
      state.afterWriteTickInfo = null;
      return afterWrite(stream, state, count, cb);
    }
    function afterWrite(stream, state, count, cb) {
      const needDrain = !state.ending && !stream.destroyed && state.length === 0 && state.needDrain;
      if (needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
      while (count-- > 0) {
        state.pendingcb--;
        cb();
      }
      if (state.destroyed) {
        errorBuffer(state);
      }
      finishMaybe(stream, state);
    }
    function errorBuffer(state) {
      if (state.writing) {
        return;
      }
      for (let n = state.bufferedIndex; n < state.buffered.length; ++n) {
        var _state$errored;
        const { chunk, callback } = state.buffered[n];
        const len = state.objectMode ? 1 : chunk.length;
        state.length -= len;
        callback(
          (_state$errored = state.errored) !== null && _state$errored !== void 0 ? _state$errored : new ERR_STREAM_DESTROYED("write")
        );
      }
      const onfinishCallbacks = state[kOnFinished].splice(0);
      for (let i2 = 0; i2 < onfinishCallbacks.length; i2++) {
        var _state$errored2;
        onfinishCallbacks[i2](
          (_state$errored2 = state.errored) !== null && _state$errored2 !== void 0 ? _state$errored2 : new ERR_STREAM_DESTROYED("end")
        );
      }
      resetBuffer(state);
    }
    function clearBuffer(stream, state) {
      if (state.corked || state.bufferProcessing || state.destroyed || !state.constructed) {
        return;
      }
      const { buffered, bufferedIndex, objectMode } = state;
      const bufferedLength = buffered.length - bufferedIndex;
      if (!bufferedLength) {
        return;
      }
      let i2 = bufferedIndex;
      state.bufferProcessing = true;
      if (bufferedLength > 1 && stream._writev) {
        state.pendingcb -= bufferedLength - 1;
        const callback = state.allNoop ? nop : (err) => {
          for (let n = i2; n < buffered.length; ++n) {
            buffered[n].callback(err);
          }
        };
        const chunks2 = state.allNoop && i2 === 0 ? buffered : ArrayPrototypeSlice(buffered, i2);
        chunks2.allBuffers = state.allBuffers;
        doWrite(stream, state, true, state.length, chunks2, "", callback);
        resetBuffer(state);
      } else {
        do {
          const { chunk, encoding, callback } = buffered[i2];
          buffered[i2++] = null;
          const len = objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, callback);
        } while (i2 < buffered.length && !state.writing);
        if (i2 === buffered.length) {
          resetBuffer(state);
        } else if (i2 > 256) {
          buffered.splice(0, i2);
          state.bufferedIndex = 0;
        } else {
          state.bufferedIndex = i2;
        }
      }
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      if (this._writev) {
        this._writev(
          [
            {
              chunk,
              encoding
            }
          ],
          cb
        );
      } else {
        throw new ERR_METHOD_NOT_IMPLEMENTED("_write()");
      }
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      const state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      let err;
      if (chunk !== null && chunk !== void 0) {
        const ret = _write(this, chunk, encoding);
        if (ret instanceof Error2) {
          err = ret;
        }
      }
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (err) {
      } else if (!state.errored && !state.ending) {
        state.ending = true;
        finishMaybe(this, state, true);
        state.ended = true;
      } else if (state.finished) {
        err = new ERR_STREAM_ALREADY_FINISHED("end");
      } else if (state.destroyed) {
        err = new ERR_STREAM_DESTROYED("end");
      }
      if (typeof cb === "function") {
        if (err || state.finished) {
          process2.nextTick(cb, err);
        } else {
          state[kOnFinished].push(cb);
        }
      }
      return this;
    };
    function needFinish(state) {
      return state.ending && !state.destroyed && state.constructed && state.length === 0 && !state.errored && state.buffered.length === 0 && !state.finished && !state.writing && !state.errorEmitted && !state.closeEmitted;
    }
    function callFinal(stream, state) {
      let called = false;
      function onFinish(err) {
        if (called) {
          errorOrDestroy(stream, err !== null && err !== void 0 ? err : ERR_MULTIPLE_CALLBACK());
          return;
        }
        called = true;
        state.pendingcb--;
        if (err) {
          const onfinishCallbacks = state[kOnFinished].splice(0);
          for (let i2 = 0; i2 < onfinishCallbacks.length; i2++) {
            onfinishCallbacks[i2](err);
          }
          errorOrDestroy(stream, err, state.sync);
        } else if (needFinish(state)) {
          state.prefinished = true;
          stream.emit("prefinish");
          state.pendingcb++;
          process2.nextTick(finish, stream, state);
        }
      }
      state.sync = true;
      state.pendingcb++;
      try {
        stream._final(onFinish);
      } catch (err) {
        onFinish(err);
      }
      state.sync = false;
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.finalCalled = true;
          callFinal(stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state, sync) {
      if (needFinish(state)) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          if (sync) {
            state.pendingcb++;
            process2.nextTick(
              (stream2, state2) => {
                if (needFinish(state2)) {
                  finish(stream2, state2);
                } else {
                  state2.pendingcb--;
                }
              },
              stream,
              state
            );
          } else if (needFinish(state)) {
            state.pendingcb++;
            finish(stream, state);
          }
        }
      }
    }
    function finish(stream, state) {
      state.pendingcb--;
      state.finished = true;
      const onfinishCallbacks = state[kOnFinished].splice(0);
      for (let i2 = 0; i2 < onfinishCallbacks.length; i2++) {
        onfinishCallbacks[i2]();
      }
      stream.emit("finish");
      if (state.autoDestroy) {
        const rState = stream._readableState;
        const autoDestroy = !rState || rState.autoDestroy && // We don't expect the readable to ever 'end'
        // if readable is explicitly set to false.
        (rState.endEmitted || rState.readable === false);
        if (autoDestroy) {
          stream.destroy();
        }
      }
    }
    ObjectDefineProperties(Writable.prototype, {
      closed: {
        __proto__: null,
        get() {
          return this._writableState ? this._writableState.closed : false;
        }
      },
      destroyed: {
        __proto__: null,
        get() {
          return this._writableState ? this._writableState.destroyed : false;
        },
        set(value) {
          if (this._writableState) {
            this._writableState.destroyed = value;
          }
        }
      },
      writable: {
        __proto__: null,
        get() {
          const w = this._writableState;
          return !!w && w.writable !== false && !w.destroyed && !w.errored && !w.ending && !w.ended;
        },
        set(val) {
          if (this._writableState) {
            this._writableState.writable = !!val;
          }
        }
      },
      writableFinished: {
        __proto__: null,
        get() {
          return this._writableState ? this._writableState.finished : false;
        }
      },
      writableObjectMode: {
        __proto__: null,
        get() {
          return this._writableState ? this._writableState.objectMode : false;
        }
      },
      writableBuffer: {
        __proto__: null,
        get() {
          return this._writableState && this._writableState.getBuffer();
        }
      },
      writableEnded: {
        __proto__: null,
        get() {
          return this._writableState ? this._writableState.ending : false;
        }
      },
      writableNeedDrain: {
        __proto__: null,
        get() {
          const wState = this._writableState;
          if (!wState)
            return false;
          return !wState.destroyed && !wState.ending && wState.needDrain;
        }
      },
      writableHighWaterMark: {
        __proto__: null,
        get() {
          return this._writableState && this._writableState.highWaterMark;
        }
      },
      writableCorked: {
        __proto__: null,
        get() {
          return this._writableState ? this._writableState.corked : 0;
        }
      },
      writableLength: {
        __proto__: null,
        get() {
          return this._writableState && this._writableState.length;
        }
      },
      errored: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._writableState ? this._writableState.errored : null;
        }
      },
      writableAborted: {
        __proto__: null,
        enumerable: false,
        get: function() {
          return !!(this._writableState.writable !== false && (this._writableState.destroyed || this._writableState.errored) && !this._writableState.finished);
        }
      }
    });
    var destroy = destroyImpl.destroy;
    Writable.prototype.destroy = function(err, cb) {
      const state = this._writableState;
      if (!state.destroyed && (state.bufferedIndex < state.buffered.length || state[kOnFinished].length)) {
        process2.nextTick(errorBuffer, state);
      }
      destroy.call(this, err, cb);
      return this;
    };
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Writable.prototype[EE.captureRejectionSymbol] = function(err) {
      this.destroy(err);
    };
    var webStreamsAdapters;
    function lazyWebStreams() {
      if (webStreamsAdapters === void 0)
        webStreamsAdapters = {};
      return webStreamsAdapters;
    }
    Writable.fromWeb = function(writableStream, options) {
      return lazyWebStreams().newStreamWritableFromWritableStream(writableStream, options);
    };
    Writable.toWeb = function(streamWritable) {
      return lazyWebStreams().newWritableStreamFromStreamWritable(streamWritable);
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/duplexify.js
var require_duplexify = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/duplexify.js"(exports, module) {
    var process2 = require_browser();
    var bufferModule = require_buffer();
    var {
      isReadable,
      isWritable,
      isIterable,
      isNodeStream,
      isReadableNodeStream,
      isWritableNodeStream,
      isDuplexNodeStream,
      isReadableStream: isReadableStream2,
      isWritableStream
    } = require_utils2();
    var eos = require_end_of_stream();
    var {
      AbortError,
      codes: { ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_INVALID_RETURN_VALUE }
    } = require_errors();
    var { destroyer } = require_destroy();
    var Duplex = require_duplex();
    var Readable6 = require_readable();
    var Writable = require_writable();
    var { createDeferredPromise } = require_util2();
    var from = require_from();
    var Blob2 = globalThis.Blob || bufferModule.Blob;
    var isBlob = typeof Blob2 !== "undefined" ? function isBlob2(b) {
      return b instanceof Blob2;
    } : function isBlob2(b) {
      return false;
    };
    var AbortController = globalThis.AbortController || require_browser2().AbortController;
    var { FunctionPrototypeCall } = require_primordials();
    var Duplexify = class extends Duplex {
      constructor(options) {
        super(options);
        if ((options === null || options === void 0 ? void 0 : options.readable) === false) {
          this._readableState.readable = false;
          this._readableState.ended = true;
          this._readableState.endEmitted = true;
        }
        if ((options === null || options === void 0 ? void 0 : options.writable) === false) {
          this._writableState.writable = false;
          this._writableState.ending = true;
          this._writableState.ended = true;
          this._writableState.finished = true;
        }
      }
    };
    module.exports = function duplexify(body, name) {
      if (isDuplexNodeStream(body)) {
        return body;
      }
      if (isReadableNodeStream(body)) {
        return _duplexify({
          readable: body
        });
      }
      if (isWritableNodeStream(body)) {
        return _duplexify({
          writable: body
        });
      }
      if (isNodeStream(body)) {
        return _duplexify({
          writable: false,
          readable: false
        });
      }
      if (isReadableStream2(body)) {
        return _duplexify({
          readable: Readable6.fromWeb(body)
        });
      }
      if (isWritableStream(body)) {
        return _duplexify({
          writable: Writable.fromWeb(body)
        });
      }
      if (typeof body === "function") {
        const { value, write, final, destroy } = fromAsyncGen(body);
        if (isIterable(value)) {
          return from(Duplexify, value, {
            // TODO (ronag): highWaterMark?
            objectMode: true,
            write,
            final,
            destroy
          });
        }
        const then2 = value === null || value === void 0 ? void 0 : value.then;
        if (typeof then2 === "function") {
          let d;
          const promise = FunctionPrototypeCall(
            then2,
            value,
            (val) => {
              if (val != null) {
                throw new ERR_INVALID_RETURN_VALUE("nully", "body", val);
              }
            },
            (err) => {
              destroyer(d, err);
            }
          );
          return d = new Duplexify({
            // TODO (ronag): highWaterMark?
            objectMode: true,
            readable: false,
            write,
            final(cb) {
              final(async () => {
                try {
                  await promise;
                  process2.nextTick(cb, null);
                } catch (err) {
                  process2.nextTick(cb, err);
                }
              });
            },
            destroy
          });
        }
        throw new ERR_INVALID_RETURN_VALUE("Iterable, AsyncIterable or AsyncFunction", name, value);
      }
      if (isBlob(body)) {
        return duplexify(body.arrayBuffer());
      }
      if (isIterable(body)) {
        return from(Duplexify, body, {
          // TODO (ronag): highWaterMark?
          objectMode: true,
          writable: false
        });
      }
      if (isReadableStream2(body === null || body === void 0 ? void 0 : body.readable) && isWritableStream(body === null || body === void 0 ? void 0 : body.writable)) {
        return Duplexify.fromWeb(body);
      }
      if (typeof (body === null || body === void 0 ? void 0 : body.writable) === "object" || typeof (body === null || body === void 0 ? void 0 : body.readable) === "object") {
        const readable2 = body !== null && body !== void 0 && body.readable ? isReadableNodeStream(body === null || body === void 0 ? void 0 : body.readable) ? body === null || body === void 0 ? void 0 : body.readable : duplexify(body.readable) : void 0;
        const writable = body !== null && body !== void 0 && body.writable ? isWritableNodeStream(body === null || body === void 0 ? void 0 : body.writable) ? body === null || body === void 0 ? void 0 : body.writable : duplexify(body.writable) : void 0;
        return _duplexify({
          readable: readable2,
          writable
        });
      }
      const then = body === null || body === void 0 ? void 0 : body.then;
      if (typeof then === "function") {
        let d;
        FunctionPrototypeCall(
          then,
          body,
          (val) => {
            if (val != null) {
              d.push(val);
            }
            d.push(null);
          },
          (err) => {
            destroyer(d, err);
          }
        );
        return d = new Duplexify({
          objectMode: true,
          writable: false,
          read() {
          }
        });
      }
      throw new ERR_INVALID_ARG_TYPE2(
        name,
        [
          "Blob",
          "ReadableStream",
          "WritableStream",
          "Stream",
          "Iterable",
          "AsyncIterable",
          "Function",
          "{ readable, writable } pair",
          "Promise"
        ],
        body
      );
    };
    function fromAsyncGen(fn) {
      let { promise, resolve } = createDeferredPromise();
      const ac = new AbortController();
      const signal = ac.signal;
      const value = fn(
        async function* () {
          while (true) {
            const _promise = promise;
            promise = null;
            const { chunk, done, cb } = await _promise;
            process2.nextTick(cb);
            if (done)
              return;
            if (signal.aborted)
              throw new AbortError(void 0, {
                cause: signal.reason
              });
            ({ promise, resolve } = createDeferredPromise());
            yield chunk;
          }
        }(),
        {
          signal
        }
      );
      return {
        value,
        write(chunk, encoding, cb) {
          const _resolve = resolve;
          resolve = null;
          _resolve({
            chunk,
            done: false,
            cb
          });
        },
        final(cb) {
          const _resolve = resolve;
          resolve = null;
          _resolve({
            done: true,
            cb
          });
        },
        destroy(err, cb) {
          ac.abort();
          cb(err);
        }
      };
    }
    function _duplexify(pair) {
      const r = pair.readable && typeof pair.readable.read !== "function" ? Readable6.wrap(pair.readable) : pair.readable;
      const w = pair.writable;
      let readable2 = !!isReadable(r);
      let writable = !!isWritable(w);
      let ondrain;
      let onfinish;
      let onreadable;
      let onclose;
      let d;
      function onfinished(err) {
        const cb = onclose;
        onclose = null;
        if (cb) {
          cb(err);
        } else if (err) {
          d.destroy(err);
        }
      }
      d = new Duplexify({
        // TODO (ronag): highWaterMark?
        readableObjectMode: !!(r !== null && r !== void 0 && r.readableObjectMode),
        writableObjectMode: !!(w !== null && w !== void 0 && w.writableObjectMode),
        readable: readable2,
        writable
      });
      if (writable) {
        eos(w, (err) => {
          writable = false;
          if (err) {
            destroyer(r, err);
          }
          onfinished(err);
        });
        d._write = function(chunk, encoding, callback) {
          if (w.write(chunk, encoding)) {
            callback();
          } else {
            ondrain = callback;
          }
        };
        d._final = function(callback) {
          w.end();
          onfinish = callback;
        };
        w.on("drain", function() {
          if (ondrain) {
            const cb = ondrain;
            ondrain = null;
            cb();
          }
        });
        w.on("finish", function() {
          if (onfinish) {
            const cb = onfinish;
            onfinish = null;
            cb();
          }
        });
      }
      if (readable2) {
        eos(r, (err) => {
          readable2 = false;
          if (err) {
            destroyer(r, err);
          }
          onfinished(err);
        });
        r.on("readable", function() {
          if (onreadable) {
            const cb = onreadable;
            onreadable = null;
            cb();
          }
        });
        r.on("end", function() {
          d.push(null);
        });
        d._read = function() {
          while (true) {
            const buf = r.read();
            if (buf === null) {
              onreadable = d._read;
              return;
            }
            if (!d.push(buf)) {
              return;
            }
          }
        };
      }
      d._destroy = function(err, callback) {
        if (!err && onclose !== null) {
          err = new AbortError();
        }
        onreadable = null;
        ondrain = null;
        onfinish = null;
        if (onclose === null) {
          callback(err);
        } else {
          onclose = callback;
          destroyer(w, err);
          destroyer(r, err);
        }
      };
      return d;
    }
  }
});

// node_modules/readable-stream/lib/internal/streams/duplex.js
var require_duplex = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/duplex.js"(exports, module) {
    "use strict";
    var {
      ObjectDefineProperties,
      ObjectGetOwnPropertyDescriptor,
      ObjectKeys,
      ObjectSetPrototypeOf
    } = require_primordials();
    module.exports = Duplex;
    var Readable6 = require_readable();
    var Writable = require_writable();
    ObjectSetPrototypeOf(Duplex.prototype, Readable6.prototype);
    ObjectSetPrototypeOf(Duplex, Readable6);
    {
      const keys = ObjectKeys(Writable.prototype);
      for (let i2 = 0; i2 < keys.length; i2++) {
        const method = keys[i2];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable6.call(this, options);
      Writable.call(this, options);
      if (options) {
        this.allowHalfOpen = options.allowHalfOpen !== false;
        if (options.readable === false) {
          this._readableState.readable = false;
          this._readableState.ended = true;
          this._readableState.endEmitted = true;
        }
        if (options.writable === false) {
          this._writableState.writable = false;
          this._writableState.ending = true;
          this._writableState.ended = true;
          this._writableState.finished = true;
        }
      } else {
        this.allowHalfOpen = true;
      }
    }
    ObjectDefineProperties(Duplex.prototype, {
      writable: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, "writable")
      },
      writableHighWaterMark: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, "writableHighWaterMark")
      },
      writableObjectMode: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, "writableObjectMode")
      },
      writableBuffer: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, "writableBuffer")
      },
      writableLength: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, "writableLength")
      },
      writableFinished: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, "writableFinished")
      },
      writableCorked: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, "writableCorked")
      },
      writableEnded: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, "writableEnded")
      },
      writableNeedDrain: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, "writableNeedDrain")
      },
      destroyed: {
        __proto__: null,
        get() {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set(value) {
          if (this._readableState && this._writableState) {
            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
          }
        }
      }
    });
    var webStreamsAdapters;
    function lazyWebStreams() {
      if (webStreamsAdapters === void 0)
        webStreamsAdapters = {};
      return webStreamsAdapters;
    }
    Duplex.fromWeb = function(pair, options) {
      return lazyWebStreams().newStreamDuplexFromReadableWritablePair(pair, options);
    };
    Duplex.toWeb = function(duplex) {
      return lazyWebStreams().newReadableWritablePairFromDuplex(duplex);
    };
    var duplexify;
    Duplex.from = function(body) {
      if (!duplexify) {
        duplexify = require_duplexify();
      }
      return duplexify(body, "body");
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/transform.js
var require_transform = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/transform.js"(exports, module) {
    "use strict";
    var { ObjectSetPrototypeOf, Symbol: Symbol2 } = require_primordials();
    module.exports = Transform3;
    var { ERR_METHOD_NOT_IMPLEMENTED } = require_errors().codes;
    var Duplex = require_duplex();
    var { getHighWaterMark } = require_state();
    ObjectSetPrototypeOf(Transform3.prototype, Duplex.prototype);
    ObjectSetPrototypeOf(Transform3, Duplex);
    var kCallback = Symbol2("kCallback");
    function Transform3(options) {
      if (!(this instanceof Transform3))
        return new Transform3(options);
      const readableHighWaterMark = options ? getHighWaterMark(this, options, "readableHighWaterMark", true) : null;
      if (readableHighWaterMark === 0) {
        options = {
          ...options,
          highWaterMark: null,
          readableHighWaterMark,
          // TODO (ronag): 0 is not optimal since we have
          // a "bug" where we check needDrain before calling _write and not after.
          // Refs: https://github.com/nodejs/node/pull/32887
          // Refs: https://github.com/nodejs/node/pull/35941
          writableHighWaterMark: options.writableHighWaterMark || 0
        };
      }
      Duplex.call(this, options);
      this._readableState.sync = false;
      this[kCallback] = null;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function final(cb) {
      if (typeof this._flush === "function" && !this.destroyed) {
        this._flush((er, data) => {
          if (er) {
            if (cb) {
              cb(er);
            } else {
              this.destroy(er);
            }
            return;
          }
          if (data != null) {
            this.push(data);
          }
          this.push(null);
          if (cb) {
            cb();
          }
        });
      } else {
        this.push(null);
        if (cb) {
          cb();
        }
      }
    }
    function prefinish() {
      if (this._final !== final) {
        final.call(this);
      }
    }
    Transform3.prototype._final = final;
    Transform3.prototype._transform = function(chunk, encoding, callback) {
      throw new ERR_METHOD_NOT_IMPLEMENTED("_transform()");
    };
    Transform3.prototype._write = function(chunk, encoding, callback) {
      const rState = this._readableState;
      const wState = this._writableState;
      const length = rState.length;
      this._transform(chunk, encoding, (err, val) => {
        if (err) {
          callback(err);
          return;
        }
        if (val != null) {
          this.push(val);
        }
        if (wState.ended || // Backwards compat.
        length === rState.length || // Backwards compat.
        rState.length < rState.highWaterMark) {
          callback();
        } else {
          this[kCallback] = callback;
        }
      });
    };
    Transform3.prototype._read = function() {
      if (this[kCallback]) {
        const callback = this[kCallback];
        this[kCallback] = null;
        callback();
      }
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/passthrough.js
var require_passthrough = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/passthrough.js"(exports, module) {
    "use strict";
    var { ObjectSetPrototypeOf } = require_primordials();
    module.exports = PassThrough;
    var Transform3 = require_transform();
    ObjectSetPrototypeOf(PassThrough.prototype, Transform3.prototype);
    ObjectSetPrototypeOf(PassThrough, Transform3);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform3.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module) {
    var process2 = require_browser();
    var { ArrayIsArray, Promise: Promise2, SymbolAsyncIterator, SymbolDispose } = require_primordials();
    var eos = require_end_of_stream();
    var { once: once2 } = require_util2();
    var destroyImpl = require_destroy();
    var Duplex = require_duplex();
    var {
      aggregateTwoErrors,
      codes: {
        ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2,
        ERR_INVALID_RETURN_VALUE,
        ERR_MISSING_ARGS,
        ERR_STREAM_DESTROYED,
        ERR_STREAM_PREMATURE_CLOSE
      },
      AbortError
    } = require_errors();
    var { validateFunction, validateAbortSignal } = require_validators();
    var {
      isIterable,
      isReadable,
      isReadableNodeStream,
      isNodeStream,
      isTransformStream,
      isWebStream,
      isReadableStream: isReadableStream2,
      isReadableFinished
    } = require_utils2();
    var AbortController = globalThis.AbortController || require_browser2().AbortController;
    var PassThrough;
    var Readable6;
    var addAbortListener;
    function destroyer(stream, reading, writing) {
      let finished = false;
      stream.on("close", () => {
        finished = true;
      });
      const cleanup = eos(
        stream,
        {
          readable: reading,
          writable: writing
        },
        (err) => {
          finished = !err;
        }
      );
      return {
        destroy: (err) => {
          if (finished)
            return;
          finished = true;
          destroyImpl.destroyer(stream, err || new ERR_STREAM_DESTROYED("pipe"));
        },
        cleanup
      };
    }
    function popCallback(streams) {
      validateFunction(streams[streams.length - 1], "streams[stream.length - 1]");
      return streams.pop();
    }
    function makeAsyncIterable(val) {
      if (isIterable(val)) {
        return val;
      } else if (isReadableNodeStream(val)) {
        return fromReadable(val);
      }
      throw new ERR_INVALID_ARG_TYPE2("val", ["Readable", "Iterable", "AsyncIterable"], val);
    }
    async function* fromReadable(val) {
      if (!Readable6) {
        Readable6 = require_readable();
      }
      yield* Readable6.prototype[SymbolAsyncIterator].call(val);
    }
    async function pumpToNode(iterable, writable, finish, { end }) {
      let error2;
      let onresolve = null;
      const resume = (err) => {
        if (err) {
          error2 = err;
        }
        if (onresolve) {
          const callback = onresolve;
          onresolve = null;
          callback();
        }
      };
      const wait = () => new Promise2((resolve, reject) => {
        if (error2) {
          reject(error2);
        } else {
          onresolve = () => {
            if (error2) {
              reject(error2);
            } else {
              resolve();
            }
          };
        }
      });
      writable.on("drain", resume);
      const cleanup = eos(
        writable,
        {
          readable: false
        },
        resume
      );
      try {
        if (writable.writableNeedDrain) {
          await wait();
        }
        for await (const chunk of iterable) {
          if (!writable.write(chunk)) {
            await wait();
          }
        }
        if (end) {
          writable.end();
          await wait();
        }
        finish();
      } catch (err) {
        finish(error2 !== err ? aggregateTwoErrors(error2, err) : err);
      } finally {
        cleanup();
        writable.off("drain", resume);
      }
    }
    async function pumpToWeb(readable2, writable, finish, { end }) {
      if (isTransformStream(writable)) {
        writable = writable.writable;
      }
      const writer = writable.getWriter();
      try {
        for await (const chunk of readable2) {
          await writer.ready;
          writer.write(chunk).catch(() => {
          });
        }
        await writer.ready;
        if (end) {
          await writer.close();
        }
        finish();
      } catch (err) {
        try {
          await writer.abort(err);
          finish(err);
        } catch (err2) {
          finish(err2);
        }
      }
    }
    function pipeline(...streams) {
      return pipelineImpl(streams, once2(popCallback(streams)));
    }
    function pipelineImpl(streams, callback, opts) {
      if (streams.length === 1 && ArrayIsArray(streams[0])) {
        streams = streams[0];
      }
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      const ac = new AbortController();
      const signal = ac.signal;
      const outerSignal = opts === null || opts === void 0 ? void 0 : opts.signal;
      const lastStreamCleanup = [];
      validateAbortSignal(outerSignal, "options.signal");
      function abort() {
        finishImpl(new AbortError());
      }
      addAbortListener = addAbortListener || require_util2().addAbortListener;
      let disposable;
      if (outerSignal) {
        disposable = addAbortListener(outerSignal, abort);
      }
      let error2;
      let value;
      const destroys = [];
      let finishCount = 0;
      function finish(err) {
        finishImpl(err, --finishCount === 0);
      }
      function finishImpl(err, final) {
        var _disposable;
        if (err && (!error2 || error2.code === "ERR_STREAM_PREMATURE_CLOSE")) {
          error2 = err;
        }
        if (!error2 && !final) {
          return;
        }
        while (destroys.length) {
          destroys.shift()(error2);
        }
        ;
        (_disposable = disposable) === null || _disposable === void 0 ? void 0 : _disposable[SymbolDispose]();
        ac.abort();
        if (final) {
          if (!error2) {
            lastStreamCleanup.forEach((fn) => fn());
          }
          process2.nextTick(callback, error2, value);
        }
      }
      let ret;
      for (let i2 = 0; i2 < streams.length; i2++) {
        const stream = streams[i2];
        const reading = i2 < streams.length - 1;
        const writing = i2 > 0;
        const end = reading || (opts === null || opts === void 0 ? void 0 : opts.end) !== false;
        const isLastStream = i2 === streams.length - 1;
        if (isNodeStream(stream)) {
          let onError2 = function(err) {
            if (err && err.name !== "AbortError" && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
              finish(err);
            }
          };
          var onError = onError2;
          if (end) {
            const { destroy, cleanup } = destroyer(stream, reading, writing);
            destroys.push(destroy);
            if (isReadable(stream) && isLastStream) {
              lastStreamCleanup.push(cleanup);
            }
          }
          stream.on("error", onError2);
          if (isReadable(stream) && isLastStream) {
            lastStreamCleanup.push(() => {
              stream.removeListener("error", onError2);
            });
          }
        }
        if (i2 === 0) {
          if (typeof stream === "function") {
            ret = stream({
              signal
            });
            if (!isIterable(ret)) {
              throw new ERR_INVALID_RETURN_VALUE("Iterable, AsyncIterable or Stream", "source", ret);
            }
          } else if (isIterable(stream) || isReadableNodeStream(stream) || isTransformStream(stream)) {
            ret = stream;
          } else {
            ret = Duplex.from(stream);
          }
        } else if (typeof stream === "function") {
          if (isTransformStream(ret)) {
            var _ret;
            ret = makeAsyncIterable((_ret = ret) === null || _ret === void 0 ? void 0 : _ret.readable);
          } else {
            ret = makeAsyncIterable(ret);
          }
          ret = stream(ret, {
            signal
          });
          if (reading) {
            if (!isIterable(ret, true)) {
              throw new ERR_INVALID_RETURN_VALUE("AsyncIterable", `transform[${i2 - 1}]`, ret);
            }
          } else {
            var _ret2;
            if (!PassThrough) {
              PassThrough = require_passthrough();
            }
            const pt = new PassThrough({
              objectMode: true
            });
            const then = (_ret2 = ret) === null || _ret2 === void 0 ? void 0 : _ret2.then;
            if (typeof then === "function") {
              finishCount++;
              then.call(
                ret,
                (val) => {
                  value = val;
                  if (val != null) {
                    pt.write(val);
                  }
                  if (end) {
                    pt.end();
                  }
                  process2.nextTick(finish);
                },
                (err) => {
                  pt.destroy(err);
                  process2.nextTick(finish, err);
                }
              );
            } else if (isIterable(ret, true)) {
              finishCount++;
              pumpToNode(ret, pt, finish, {
                end
              });
            } else if (isReadableStream2(ret) || isTransformStream(ret)) {
              const toRead = ret.readable || ret;
              finishCount++;
              pumpToNode(toRead, pt, finish, {
                end
              });
            } else {
              throw new ERR_INVALID_RETURN_VALUE("AsyncIterable or Promise", "destination", ret);
            }
            ret = pt;
            const { destroy, cleanup } = destroyer(ret, false, true);
            destroys.push(destroy);
            if (isLastStream) {
              lastStreamCleanup.push(cleanup);
            }
          }
        } else if (isNodeStream(stream)) {
          if (isReadableNodeStream(ret)) {
            finishCount += 2;
            const cleanup = pipe(ret, stream, finish, {
              end
            });
            if (isReadable(stream) && isLastStream) {
              lastStreamCleanup.push(cleanup);
            }
          } else if (isTransformStream(ret) || isReadableStream2(ret)) {
            const toRead = ret.readable || ret;
            finishCount++;
            pumpToNode(toRead, stream, finish, {
              end
            });
          } else if (isIterable(ret)) {
            finishCount++;
            pumpToNode(ret, stream, finish, {
              end
            });
          } else {
            throw new ERR_INVALID_ARG_TYPE2(
              "val",
              ["Readable", "Iterable", "AsyncIterable", "ReadableStream", "TransformStream"],
              ret
            );
          }
          ret = stream;
        } else if (isWebStream(stream)) {
          if (isReadableNodeStream(ret)) {
            finishCount++;
            pumpToWeb(makeAsyncIterable(ret), stream, finish, {
              end
            });
          } else if (isReadableStream2(ret) || isIterable(ret)) {
            finishCount++;
            pumpToWeb(ret, stream, finish, {
              end
            });
          } else if (isTransformStream(ret)) {
            finishCount++;
            pumpToWeb(ret.readable, stream, finish, {
              end
            });
          } else {
            throw new ERR_INVALID_ARG_TYPE2(
              "val",
              ["Readable", "Iterable", "AsyncIterable", "ReadableStream", "TransformStream"],
              ret
            );
          }
          ret = stream;
        } else {
          ret = Duplex.from(stream);
        }
      }
      if (signal !== null && signal !== void 0 && signal.aborted || outerSignal !== null && outerSignal !== void 0 && outerSignal.aborted) {
        process2.nextTick(abort);
      }
      return ret;
    }
    function pipe(src, dst, finish, { end }) {
      let ended = false;
      dst.on("close", () => {
        if (!ended) {
          finish(new ERR_STREAM_PREMATURE_CLOSE());
        }
      });
      src.pipe(dst, {
        end: false
      });
      if (end) {
        let endFn2 = function() {
          ended = true;
          dst.end();
        };
        var endFn = endFn2;
        if (isReadableFinished(src)) {
          process2.nextTick(endFn2);
        } else {
          src.once("end", endFn2);
        }
      } else {
        finish();
      }
      eos(
        src,
        {
          readable: true,
          writable: false
        },
        (err) => {
          const rState = src._readableState;
          if (err && err.code === "ERR_STREAM_PREMATURE_CLOSE" && rState && rState.ended && !rState.errored && !rState.errorEmitted) {
            src.once("end", finish).once("error", finish);
          } else {
            finish(err);
          }
        }
      );
      return eos(
        dst,
        {
          readable: false,
          writable: true
        },
        finish
      );
    }
    module.exports = {
      pipelineImpl,
      pipeline
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/compose.js
var require_compose = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/compose.js"(exports, module) {
    "use strict";
    var { pipeline } = require_pipeline();
    var Duplex = require_duplex();
    var { destroyer } = require_destroy();
    var {
      isNodeStream,
      isReadable,
      isWritable,
      isWebStream,
      isTransformStream,
      isWritableStream,
      isReadableStream: isReadableStream2
    } = require_utils2();
    var {
      AbortError,
      codes: { ERR_INVALID_ARG_VALUE, ERR_MISSING_ARGS }
    } = require_errors();
    var eos = require_end_of_stream();
    module.exports = function compose(...streams) {
      if (streams.length === 0) {
        throw new ERR_MISSING_ARGS("streams");
      }
      if (streams.length === 1) {
        return Duplex.from(streams[0]);
      }
      const orgStreams = [...streams];
      if (typeof streams[0] === "function") {
        streams[0] = Duplex.from(streams[0]);
      }
      if (typeof streams[streams.length - 1] === "function") {
        const idx = streams.length - 1;
        streams[idx] = Duplex.from(streams[idx]);
      }
      for (let n = 0; n < streams.length; ++n) {
        if (!isNodeStream(streams[n]) && !isWebStream(streams[n])) {
          continue;
        }
        if (n < streams.length - 1 && !(isReadable(streams[n]) || isReadableStream2(streams[n]) || isTransformStream(streams[n]))) {
          throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`, orgStreams[n], "must be readable");
        }
        if (n > 0 && !(isWritable(streams[n]) || isWritableStream(streams[n]) || isTransformStream(streams[n]))) {
          throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`, orgStreams[n], "must be writable");
        }
      }
      let ondrain;
      let onfinish;
      let onreadable;
      let onclose;
      let d;
      function onfinished(err) {
        const cb = onclose;
        onclose = null;
        if (cb) {
          cb(err);
        } else if (err) {
          d.destroy(err);
        } else if (!readable2 && !writable) {
          d.destroy();
        }
      }
      const head = streams[0];
      const tail = pipeline(streams, onfinished);
      const writable = !!(isWritable(head) || isWritableStream(head) || isTransformStream(head));
      const readable2 = !!(isReadable(tail) || isReadableStream2(tail) || isTransformStream(tail));
      d = new Duplex({
        // TODO (ronag): highWaterMark?
        writableObjectMode: !!(head !== null && head !== void 0 && head.writableObjectMode),
        readableObjectMode: !!(tail !== null && tail !== void 0 && tail.readableObjectMode),
        writable,
        readable: readable2
      });
      if (writable) {
        if (isNodeStream(head)) {
          d._write = function(chunk, encoding, callback) {
            if (head.write(chunk, encoding)) {
              callback();
            } else {
              ondrain = callback;
            }
          };
          d._final = function(callback) {
            head.end();
            onfinish = callback;
          };
          head.on("drain", function() {
            if (ondrain) {
              const cb = ondrain;
              ondrain = null;
              cb();
            }
          });
        } else if (isWebStream(head)) {
          const writable2 = isTransformStream(head) ? head.writable : head;
          const writer = writable2.getWriter();
          d._write = async function(chunk, encoding, callback) {
            try {
              await writer.ready;
              writer.write(chunk).catch(() => {
              });
              callback();
            } catch (err) {
              callback(err);
            }
          };
          d._final = async function(callback) {
            try {
              await writer.ready;
              writer.close().catch(() => {
              });
              onfinish = callback;
            } catch (err) {
              callback(err);
            }
          };
        }
        const toRead = isTransformStream(tail) ? tail.readable : tail;
        eos(toRead, () => {
          if (onfinish) {
            const cb = onfinish;
            onfinish = null;
            cb();
          }
        });
      }
      if (readable2) {
        if (isNodeStream(tail)) {
          tail.on("readable", function() {
            if (onreadable) {
              const cb = onreadable;
              onreadable = null;
              cb();
            }
          });
          tail.on("end", function() {
            d.push(null);
          });
          d._read = function() {
            while (true) {
              const buf = tail.read();
              if (buf === null) {
                onreadable = d._read;
                return;
              }
              if (!d.push(buf)) {
                return;
              }
            }
          };
        } else if (isWebStream(tail)) {
          const readable3 = isTransformStream(tail) ? tail.readable : tail;
          const reader = readable3.getReader();
          d._read = async function() {
            while (true) {
              try {
                const { value, done } = await reader.read();
                if (!d.push(value)) {
                  return;
                }
                if (done) {
                  d.push(null);
                  return;
                }
              } catch {
                return;
              }
            }
          };
        }
      }
      d._destroy = function(err, callback) {
        if (!err && onclose !== null) {
          err = new AbortError();
        }
        onreadable = null;
        ondrain = null;
        onfinish = null;
        if (onclose === null) {
          callback(err);
        } else {
          onclose = callback;
          if (isNodeStream(tail)) {
            destroyer(tail, err);
          }
        }
      };
      return d;
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/operators.js
var require_operators = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/operators.js"(exports, module) {
    "use strict";
    var AbortController = globalThis.AbortController || require_browser2().AbortController;
    var {
      codes: { ERR_INVALID_ARG_VALUE, ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_MISSING_ARGS, ERR_OUT_OF_RANGE },
      AbortError
    } = require_errors();
    var { validateAbortSignal, validateInteger, validateObject } = require_validators();
    var kWeakHandler = require_primordials().Symbol("kWeak");
    var kResistStopPropagation = require_primordials().Symbol("kResistStopPropagation");
    var { finished } = require_end_of_stream();
    var staticCompose = require_compose();
    var { addAbortSignalNoValidate } = require_add_abort_signal();
    var { isWritable, isNodeStream } = require_utils2();
    var { deprecate } = require_util2();
    var {
      ArrayPrototypePush,
      Boolean: Boolean2,
      MathFloor,
      Number: Number2,
      NumberIsNaN,
      Promise: Promise2,
      PromiseReject,
      PromiseResolve,
      PromisePrototypeThen,
      Symbol: Symbol2
    } = require_primordials();
    var kEmpty = Symbol2("kEmpty");
    var kEof = Symbol2("kEof");
    function compose(stream, options) {
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      if (isNodeStream(stream) && !isWritable(stream)) {
        throw new ERR_INVALID_ARG_VALUE("stream", stream, "must be writable");
      }
      const composedStream = staticCompose(this, stream);
      if (options !== null && options !== void 0 && options.signal) {
        addAbortSignalNoValidate(options.signal, composedStream);
      }
      return composedStream;
    }
    function map(fn, options) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE2("fn", ["Function", "AsyncFunction"], fn);
      }
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      let concurrency = 1;
      if ((options === null || options === void 0 ? void 0 : options.concurrency) != null) {
        concurrency = MathFloor(options.concurrency);
      }
      let highWaterMark = concurrency - 1;
      if ((options === null || options === void 0 ? void 0 : options.highWaterMark) != null) {
        highWaterMark = MathFloor(options.highWaterMark);
      }
      validateInteger(concurrency, "options.concurrency", 1);
      validateInteger(highWaterMark, "options.highWaterMark", 0);
      highWaterMark += concurrency;
      return async function* map2() {
        const signal = require_util2().AbortSignalAny(
          [options === null || options === void 0 ? void 0 : options.signal].filter(Boolean2)
        );
        const stream = this;
        const queue = [];
        const signalOpt = {
          signal
        };
        let next;
        let resume;
        let done = false;
        let cnt = 0;
        function onCatch() {
          done = true;
          afterItemProcessed();
        }
        function afterItemProcessed() {
          cnt -= 1;
          maybeResume();
        }
        function maybeResume() {
          if (resume && !done && cnt < concurrency && queue.length < highWaterMark) {
            resume();
            resume = null;
          }
        }
        async function pump() {
          try {
            for await (let val of stream) {
              if (done) {
                return;
              }
              if (signal.aborted) {
                throw new AbortError();
              }
              try {
                val = fn(val, signalOpt);
                if (val === kEmpty) {
                  continue;
                }
                val = PromiseResolve(val);
              } catch (err) {
                val = PromiseReject(err);
              }
              cnt += 1;
              PromisePrototypeThen(val, afterItemProcessed, onCatch);
              queue.push(val);
              if (next) {
                next();
                next = null;
              }
              if (!done && (queue.length >= highWaterMark || cnt >= concurrency)) {
                await new Promise2((resolve) => {
                  resume = resolve;
                });
              }
            }
            queue.push(kEof);
          } catch (err) {
            const val = PromiseReject(err);
            PromisePrototypeThen(val, afterItemProcessed, onCatch);
            queue.push(val);
          } finally {
            done = true;
            if (next) {
              next();
              next = null;
            }
          }
        }
        pump();
        try {
          while (true) {
            while (queue.length > 0) {
              const val = await queue[0];
              if (val === kEof) {
                return;
              }
              if (signal.aborted) {
                throw new AbortError();
              }
              if (val !== kEmpty) {
                yield val;
              }
              queue.shift();
              maybeResume();
            }
            await new Promise2((resolve) => {
              next = resolve;
            });
          }
        } finally {
          done = true;
          if (resume) {
            resume();
            resume = null;
          }
        }
      }.call(this);
    }
    function asIndexedPairs(options = void 0) {
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      return async function* asIndexedPairs2() {
        let index = 0;
        for await (const val of this) {
          var _options$signal;
          if (options !== null && options !== void 0 && (_options$signal = options.signal) !== null && _options$signal !== void 0 && _options$signal.aborted) {
            throw new AbortError({
              cause: options.signal.reason
            });
          }
          yield [index++, val];
        }
      }.call(this);
    }
    async function some(fn, options = void 0) {
      for await (const unused of filter.call(this, fn, options)) {
        return true;
      }
      return false;
    }
    async function every(fn, options = void 0) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE2("fn", ["Function", "AsyncFunction"], fn);
      }
      return !await some.call(
        this,
        async (...args) => {
          return !await fn(...args);
        },
        options
      );
    }
    async function find(fn, options) {
      for await (const result of filter.call(this, fn, options)) {
        return result;
      }
      return void 0;
    }
    async function forEach(fn, options) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE2("fn", ["Function", "AsyncFunction"], fn);
      }
      async function forEachFn(value, options2) {
        await fn(value, options2);
        return kEmpty;
      }
      for await (const unused of map.call(this, forEachFn, options))
        ;
    }
    function filter(fn, options) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE2("fn", ["Function", "AsyncFunction"], fn);
      }
      async function filterFn(value, options2) {
        if (await fn(value, options2)) {
          return value;
        }
        return kEmpty;
      }
      return map.call(this, filterFn, options);
    }
    var ReduceAwareErrMissingArgs = class extends ERR_MISSING_ARGS {
      constructor() {
        super("reduce");
        this.message = "Reduce of an empty stream requires an initial value";
      }
    };
    async function reduce(reducer, initialValue, options) {
      var _options$signal2;
      if (typeof reducer !== "function") {
        throw new ERR_INVALID_ARG_TYPE2("reducer", ["Function", "AsyncFunction"], reducer);
      }
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      let hasInitialValue = arguments.length > 1;
      if (options !== null && options !== void 0 && (_options$signal2 = options.signal) !== null && _options$signal2 !== void 0 && _options$signal2.aborted) {
        const err = new AbortError(void 0, {
          cause: options.signal.reason
        });
        this.once("error", () => {
        });
        await finished(this.destroy(err));
        throw err;
      }
      const ac = new AbortController();
      const signal = ac.signal;
      if (options !== null && options !== void 0 && options.signal) {
        const opts = {
          once: true,
          [kWeakHandler]: this,
          [kResistStopPropagation]: true
        };
        options.signal.addEventListener("abort", () => ac.abort(), opts);
      }
      let gotAnyItemFromStream = false;
      try {
        for await (const value of this) {
          var _options$signal3;
          gotAnyItemFromStream = true;
          if (options !== null && options !== void 0 && (_options$signal3 = options.signal) !== null && _options$signal3 !== void 0 && _options$signal3.aborted) {
            throw new AbortError();
          }
          if (!hasInitialValue) {
            initialValue = value;
            hasInitialValue = true;
          } else {
            initialValue = await reducer(initialValue, value, {
              signal
            });
          }
        }
        if (!gotAnyItemFromStream && !hasInitialValue) {
          throw new ReduceAwareErrMissingArgs();
        }
      } finally {
        ac.abort();
      }
      return initialValue;
    }
    async function toArray(options) {
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      const result = [];
      for await (const val of this) {
        var _options$signal4;
        if (options !== null && options !== void 0 && (_options$signal4 = options.signal) !== null && _options$signal4 !== void 0 && _options$signal4.aborted) {
          throw new AbortError(void 0, {
            cause: options.signal.reason
          });
        }
        ArrayPrototypePush(result, val);
      }
      return result;
    }
    function flatMap(fn, options) {
      const values = map.call(this, fn, options);
      return async function* flatMap2() {
        for await (const val of values) {
          yield* val;
        }
      }.call(this);
    }
    function toIntegerOrInfinity(number) {
      number = Number2(number);
      if (NumberIsNaN(number)) {
        return 0;
      }
      if (number < 0) {
        throw new ERR_OUT_OF_RANGE("number", ">= 0", number);
      }
      return number;
    }
    function drop(number, options = void 0) {
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      number = toIntegerOrInfinity(number);
      return async function* drop2() {
        var _options$signal5;
        if (options !== null && options !== void 0 && (_options$signal5 = options.signal) !== null && _options$signal5 !== void 0 && _options$signal5.aborted) {
          throw new AbortError();
        }
        for await (const val of this) {
          var _options$signal6;
          if (options !== null && options !== void 0 && (_options$signal6 = options.signal) !== null && _options$signal6 !== void 0 && _options$signal6.aborted) {
            throw new AbortError();
          }
          if (number-- <= 0) {
            yield val;
          }
        }
      }.call(this);
    }
    function take(number, options = void 0) {
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      number = toIntegerOrInfinity(number);
      return async function* take2() {
        var _options$signal7;
        if (options !== null && options !== void 0 && (_options$signal7 = options.signal) !== null && _options$signal7 !== void 0 && _options$signal7.aborted) {
          throw new AbortError();
        }
        for await (const val of this) {
          var _options$signal8;
          if (options !== null && options !== void 0 && (_options$signal8 = options.signal) !== null && _options$signal8 !== void 0 && _options$signal8.aborted) {
            throw new AbortError();
          }
          if (number-- > 0) {
            yield val;
          }
          if (number <= 0) {
            return;
          }
        }
      }.call(this);
    }
    module.exports.streamReturningOperators = {
      asIndexedPairs: deprecate(asIndexedPairs, "readable.asIndexedPairs will be removed in a future version."),
      drop,
      filter,
      flatMap,
      map,
      take,
      compose
    };
    module.exports.promiseReturningOperators = {
      every,
      forEach,
      reduce,
      toArray,
      some,
      find
    };
  }
});

// node_modules/readable-stream/lib/stream/promises.js
var require_promises = __commonJS({
  "node_modules/readable-stream/lib/stream/promises.js"(exports, module) {
    "use strict";
    var { ArrayPrototypePop, Promise: Promise2 } = require_primordials();
    var { isIterable, isNodeStream, isWebStream } = require_utils2();
    var { pipelineImpl: pl } = require_pipeline();
    var { finished } = require_end_of_stream();
    require_stream();
    function pipeline(...streams) {
      return new Promise2((resolve, reject) => {
        let signal;
        let end;
        const lastArg = streams[streams.length - 1];
        if (lastArg && typeof lastArg === "object" && !isNodeStream(lastArg) && !isIterable(lastArg) && !isWebStream(lastArg)) {
          const options = ArrayPrototypePop(streams);
          signal = options.signal;
          end = options.end;
        }
        pl(
          streams,
          (err, value) => {
            if (err) {
              reject(err);
            } else {
              resolve(value);
            }
          },
          {
            signal,
            end
          }
        );
      });
    }
    module.exports = {
      finished,
      pipeline
    };
  }
});

// node_modules/readable-stream/lib/stream.js
var require_stream = __commonJS({
  "node_modules/readable-stream/lib/stream.js"(exports, module) {
    var { Buffer: Buffer2 } = require_buffer();
    var { ObjectDefineProperty, ObjectKeys, ReflectApply } = require_primordials();
    var {
      promisify: { custom: customPromisify }
    } = require_util2();
    var { streamReturningOperators, promiseReturningOperators } = require_operators();
    var {
      codes: { ERR_ILLEGAL_CONSTRUCTOR }
    } = require_errors();
    var compose = require_compose();
    var { setDefaultHighWaterMark, getDefaultHighWaterMark } = require_state();
    var { pipeline } = require_pipeline();
    var { destroyer } = require_destroy();
    var eos = require_end_of_stream();
    var promises = require_promises();
    var utils = require_utils2();
    var Stream = module.exports = require_legacy().Stream;
    Stream.isDestroyed = utils.isDestroyed;
    Stream.isDisturbed = utils.isDisturbed;
    Stream.isErrored = utils.isErrored;
    Stream.isReadable = utils.isReadable;
    Stream.isWritable = utils.isWritable;
    Stream.Readable = require_readable();
    for (const key of ObjectKeys(streamReturningOperators)) {
      let fn2 = function(...args) {
        if (new.target) {
          throw ERR_ILLEGAL_CONSTRUCTOR();
        }
        return Stream.Readable.from(ReflectApply(op, this, args));
      };
      fn = fn2;
      const op = streamReturningOperators[key];
      ObjectDefineProperty(fn2, "name", {
        __proto__: null,
        value: op.name
      });
      ObjectDefineProperty(fn2, "length", {
        __proto__: null,
        value: op.length
      });
      ObjectDefineProperty(Stream.Readable.prototype, key, {
        __proto__: null,
        value: fn2,
        enumerable: false,
        configurable: true,
        writable: true
      });
    }
    var fn;
    for (const key of ObjectKeys(promiseReturningOperators)) {
      let fn2 = function(...args) {
        if (new.target) {
          throw ERR_ILLEGAL_CONSTRUCTOR();
        }
        return ReflectApply(op, this, args);
      };
      fn = fn2;
      const op = promiseReturningOperators[key];
      ObjectDefineProperty(fn2, "name", {
        __proto__: null,
        value: op.name
      });
      ObjectDefineProperty(fn2, "length", {
        __proto__: null,
        value: op.length
      });
      ObjectDefineProperty(Stream.Readable.prototype, key, {
        __proto__: null,
        value: fn2,
        enumerable: false,
        configurable: true,
        writable: true
      });
    }
    var fn;
    Stream.Writable = require_writable();
    Stream.Duplex = require_duplex();
    Stream.Transform = require_transform();
    Stream.PassThrough = require_passthrough();
    Stream.pipeline = pipeline;
    var { addAbortSignal } = require_add_abort_signal();
    Stream.addAbortSignal = addAbortSignal;
    Stream.finished = eos;
    Stream.destroy = destroyer;
    Stream.compose = compose;
    Stream.setDefaultHighWaterMark = setDefaultHighWaterMark;
    Stream.getDefaultHighWaterMark = getDefaultHighWaterMark;
    ObjectDefineProperty(Stream, "promises", {
      __proto__: null,
      configurable: true,
      enumerable: true,
      get() {
        return promises;
      }
    });
    ObjectDefineProperty(pipeline, customPromisify, {
      __proto__: null,
      enumerable: true,
      get() {
        return promises.pipeline;
      }
    });
    ObjectDefineProperty(eos, customPromisify, {
      __proto__: null,
      enumerable: true,
      get() {
        return promises.finished;
      }
    });
    Stream.Stream = Stream;
    Stream._isUint8Array = function isUint8Array(value) {
      return value instanceof Uint8Array;
    };
    Stream._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
    };
  }
});

// node_modules/readable-stream/lib/ours/browser.js
var require_browser3 = __commonJS({
  "node_modules/readable-stream/lib/ours/browser.js"(exports, module) {
    "use strict";
    var CustomStream = require_stream();
    var promises = require_promises();
    var originalDestroy = CustomStream.Readable.destroy;
    module.exports = CustomStream.Readable;
    module.exports._uint8ArrayToBuffer = CustomStream._uint8ArrayToBuffer;
    module.exports._isUint8Array = CustomStream._isUint8Array;
    module.exports.isDisturbed = CustomStream.isDisturbed;
    module.exports.isErrored = CustomStream.isErrored;
    module.exports.isReadable = CustomStream.isReadable;
    module.exports.Readable = CustomStream.Readable;
    module.exports.Writable = CustomStream.Writable;
    module.exports.Duplex = CustomStream.Duplex;
    module.exports.Transform = CustomStream.Transform;
    module.exports.PassThrough = CustomStream.PassThrough;
    module.exports.addAbortSignal = CustomStream.addAbortSignal;
    module.exports.finished = CustomStream.finished;
    module.exports.destroy = CustomStream.destroy;
    module.exports.destroy = originalDestroy;
    module.exports.pipeline = CustomStream.pipeline;
    module.exports.compose = CustomStream.compose;
    Object.defineProperty(CustomStream, "promises", {
      configurable: true,
      enumerable: true,
      get() {
        return promises;
      }
    });
    module.exports.Stream = CustomStream.Stream;
    module.exports.default = module.exports;
  }
});

// node_modules/@comunica/actor-query-result-serialize-json/lib/ActorQueryResultSerializeJson.js
var require_ActorQueryResultSerializeJson = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-json/lib/ActorQueryResultSerializeJson.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeJson = void 0;
    var bus_query_result_serialize_1 = require_lib23();
    var RdfString = require_rdf_string();
    var readable_stream_1 = require_browser3();
    var ActorQueryResultSerializeJson = class extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/json": 1.0
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/json": "https://comunica.linkeddatafragments.org/#results_JSON"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async testHandleChecked(action, context) {
        if (!["bindings", "quads", "boolean"].includes(action.type)) {
          throw new Error("This actor can only handle bindings or quad streams.");
        }
        return true;
      }
      async runHandle(action, mediaType, context) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        let empty = true;
        if (action.type === "bindings") {
          const resultStream = action.bindingsStream;
          data.push("[");
          resultStream.on("error", (error2) => data.emit("error", error2));
          resultStream.on("data", (element) => {
            data.push(empty ? "\n" : ",\n");
            data.push(JSON.stringify(Object.fromEntries([...element].map(([key, value]) => [key.value, RdfString.termToString(value)]))));
            empty = false;
          });
          resultStream.on("end", () => {
            data.push(empty ? "]\n" : "\n]\n");
            data.push(null);
          });
        } else if (action.type === "quads") {
          const resultStream = action.quadStream;
          data.push("[");
          resultStream.on("error", (error2) => data.emit("error", error2));
          resultStream.on("data", (element) => {
            data.push(empty ? "\n" : ",\n");
            data.push(JSON.stringify(RdfString.quadToStringQuad(element)));
            empty = false;
          });
          resultStream.on("end", () => {
            data.push(empty ? "]\n" : "\n]\n");
            data.push(null);
          });
        } else {
          try {
            data.push(`${JSON.stringify(await action.execute())}
`);
            data.push(null);
          } catch (error2) {
            setTimeout(() => data.emit("error", error2));
          }
        }
        return { data };
      }
    };
    exports.ActorQueryResultSerializeJson = ActorQueryResultSerializeJson;
  }
});

// node_modules/@comunica/actor-query-result-serialize-json/lib/index.js
var require_lib24 = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-json/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeJson(), exports);
  }
});

// node_modules/@comunica/actor-query-result-serialize-simple/lib/ActorQueryResultSerializeSimple.js
var require_ActorQueryResultSerializeSimple = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-simple/lib/ActorQueryResultSerializeSimple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeSimple = void 0;
    var bus_query_result_serialize_1 = require_lib23();
    var rdf_string_1 = require_rdf_string();
    var readable_stream_1 = require_browser3();
    var ActorQueryResultSerializeSimple = class _ActorQueryResultSerializeSimple extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{ "simple": 0.9 }} mediaTypePriorities
       *   \ @defaultNested {{ "simple": "https://comunica.linkeddatafragments.org/#results_simple" }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async testHandleChecked(action, context) {
        if (!["bindings", "quads", "boolean", "void"].includes(action.type)) {
          throw new Error("This actor can only handle bindings streams, quad streams, booleans, or updates.");
        }
        return true;
      }
      static termToString(term) {
        return term.termType === "Quad" ? (0, rdf_string_1.termToString)(term) : term.value;
      }
      async runHandle(action, mediaType, context) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        let resultStream;
        if (action.type === "bindings") {
          resultStream = action.bindingsStream;
          resultStream.on("error", (error2) => data.emit("error", error2));
          resultStream.on("data", (bindings) => data.push(`${[...bindings].map(([key, value]) => `?${key.value}: ${_ActorQueryResultSerializeSimple.termToString(value)}`).join("\n")}

`));
          resultStream.on("end", () => data.push(null));
        } else if (action.type === "quads") {
          resultStream = action.quadStream;
          resultStream.on("error", (error2) => data.emit("error", error2));
          resultStream.on("data", (quad) => data.push(`subject: ${_ActorQueryResultSerializeSimple.termToString(quad.subject)}
predicate: ${_ActorQueryResultSerializeSimple.termToString(quad.predicate)}
object: ${_ActorQueryResultSerializeSimple.termToString(quad.object)}
graph: ${_ActorQueryResultSerializeSimple.termToString(quad.graph)}

`));
          resultStream.on("end", () => data.push(null));
        } else if (action.type === "boolean") {
          try {
            data.push(`${JSON.stringify(await action.execute())}
`);
            data.push(null);
          } catch (error2) {
            setTimeout(() => data.emit("error", error2));
          }
        } else {
          action.execute().then(() => {
            data.push("ok\n");
            data.push(null);
          }).catch((error2) => setTimeout(() => data.emit("error", error2)));
        }
        return { data };
      }
    };
    exports.ActorQueryResultSerializeSimple = ActorQueryResultSerializeSimple;
  }
});

// node_modules/@comunica/actor-query-result-serialize-simple/lib/index.js
var require_lib25 = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-simple/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeSimple(), exports);
  }
});

// node_modules/@comunica/actor-query-result-serialize-sparql-csv/lib/ActorQueryResultSerializeSparqlCsv.js
var require_ActorQueryResultSerializeSparqlCsv = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-sparql-csv/lib/ActorQueryResultSerializeSparqlCsv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeSparqlCsv = void 0;
    var bus_query_result_serialize_1 = require_lib23();
    var readable_stream_1 = require_browser3();
    var ActorQueryResultSerializeSparqlCsv = class _ActorQueryResultSerializeSparqlCsv extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "text/csv": 0.75
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "text/csv": "http://www.w3.org/ns/formats/SPARQL_Results_CSV"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      /**
       * Converts an RDF term to its CSV representation.
       * @param {RDF.Term} value An RDF term.
       * @return {string} A string representation of the given value.
       */
      static bindingToCsvBindings(value) {
        if (!value) {
          return "";
        }
        let stringValue = value.value;
        if (value.termType === "Literal") {
          stringValue = `${stringValue}`;
        } else if (value.termType === "BlankNode") {
          stringValue = `_:${stringValue}`;
        } else if (value.termType === "Quad") {
          let object = _ActorQueryResultSerializeSparqlCsv.bindingToCsvBindings(value.object);
          if (value.object.termType === "Literal") {
            object = `"${object.replace(/"/ug, '""')}"`;
          }
          stringValue = `<< ${_ActorQueryResultSerializeSparqlCsv.bindingToCsvBindings(value.subject)} ${_ActorQueryResultSerializeSparqlCsv.bindingToCsvBindings(value.predicate)} ${object} >>`;
        } else {
          stringValue = `<${stringValue}>`;
        }
        if (/[",\n\r]/u.test(stringValue)) {
          stringValue = `"${stringValue.replace(/"/ug, '""')}"`;
        }
        return stringValue;
      }
      async testHandleChecked(action, context) {
        if (action.type !== "bindings") {
          throw new Error("This actor can only handle bindings streams.");
        }
        return true;
      }
      async runHandle(action, mediaType, context) {
        const bindingsAction = action;
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        const metadata = await bindingsAction.metadata();
        data.push(`${metadata.variables.map((variable) => variable.value).join(",")}\r
`);
        bindingsAction.bindingsStream.on("error", (error2) => {
          data.emit("error", error2);
        });
        bindingsAction.bindingsStream.on("data", (bindings) => {
          data.push(`${metadata.variables.map((key) => _ActorQueryResultSerializeSparqlCsv.bindingToCsvBindings(bindings.get(key))).join(",")}\r
`);
        });
        bindingsAction.bindingsStream.on("end", () => {
          data.push(null);
        });
        return { data };
      }
    };
    exports.ActorQueryResultSerializeSparqlCsv = ActorQueryResultSerializeSparqlCsv;
  }
});

// node_modules/@comunica/actor-query-result-serialize-sparql-csv/lib/index.js
var require_lib26 = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-sparql-csv/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeSparqlCsv(), exports);
  }
});

// node_modules/rdf-string-ttl/lib/TermUtil.js
var require_TermUtil3 = __commonJS({
  "node_modules/rdf-string-ttl/lib/TermUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringQuadToQuad = exports.quadToStringQuad = exports.stringToTerm = exports.getLiteralLanguage = exports.getLiteralType = exports.getLiteralValue = exports.termToString = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var FACTORY = new rdf_data_factory_1.DataFactory();
    function termToString(term) {
      if (!term) {
        return void 0;
      }
      switch (term.termType) {
        case "NamedNode":
          return `<${escapeIRI(term.value)}>`;
        case "BlankNode":
          return `_:${term.value}`;
        case "Literal": {
          const literalValue = term;
          return `"${escapeStringRDF(literalValue.value)}"${literalValue.datatype && literalValue.datatype.value !== "http://www.w3.org/2001/XMLSchema#string" && literalValue.datatype.value !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" ? `^^<${literalValue.datatype.value}>` : ""}${literalValue.language ? `@${literalValue.language}` : ""}`;
        }
        case "Quad":
          return `<<${termToString(term.subject)} ${termToString(term.predicate)} ${termToString(term.object)}${term.graph.termType === "DefaultGraph" ? "" : ` ${termToString(term.graph)}`}>>`;
        case "Variable":
          return `?${term.value}`;
        case "DefaultGraph":
          return term.value;
      }
    }
    exports.termToString = termToString;
    function getLiteralValue(literalValue) {
      const match = /^"([^]*)"((\^\^.*)|(@.*))?$/u.exec(literalValue);
      if (!match) {
        throw new Error(`${literalValue} is not a literal`);
      }
      return match[1].replace(/\\"/ug, '"');
    }
    exports.getLiteralValue = getLiteralValue;
    function getLiteralType(literalValue) {
      const match = /^"[^]*"(?:\^\^<([^"]+)>|(@)[^@"]+)?$/u.exec(literalValue);
      if (!match) {
        throw new Error(`${literalValue} is not a literal`);
      }
      return match[1] || (match[2] ? "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" : "http://www.w3.org/2001/XMLSchema#string");
    }
    exports.getLiteralType = getLiteralType;
    function getLiteralLanguage(literalValue) {
      const match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/u.exec(literalValue);
      if (!match) {
        throw new Error(`${literalValue} is not a literal`);
      }
      return match[1] ? match[1].toLowerCase() : "";
    }
    exports.getLiteralLanguage = getLiteralLanguage;
    function stringToTerm(value, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      if (!value || value.length === 0) {
        return dataFactory.defaultGraph();
      }
      switch (value[0]) {
        case "_":
          return dataFactory.blankNode(value.slice(2));
        case "?":
          if (!dataFactory.variable) {
            throw new Error(`Missing 'variable()' method on the given DataFactory`);
          }
          return dataFactory.variable(value.slice(1));
        case '"': {
          const language = getLiteralLanguage(value);
          const type = dataFactory.namedNode(getLiteralType(value));
          return dataFactory.literal(getLiteralValue(value), language || type);
        }
        case "<":
        default:
          if (value.startsWith("<<") && value.endsWith(">>")) {
            const terms = value.slice(2, -2);
            const stringTerms = [];
            let ignoreTags = 0;
            let lastIndex = 0;
            for (let i2 = 0; i2 < terms.length; i2++) {
              const char = terms[i2];
              if (char === "<") {
                ignoreTags++;
              }
              if (char === ">") {
                if (ignoreTags === 0) {
                  throw new Error(`Found closing tag without opening tag in ${value}`);
                } else {
                  ignoreTags--;
                }
              }
              if (char === " " && ignoreTags === 0) {
                stringTerms.push(terms.slice(lastIndex, i2));
                lastIndex = i2 + 1;
              }
            }
            if (ignoreTags !== 0) {
              throw new Error(`Found opening tag without closing tag in ${value}`);
            }
            stringTerms.push(terms.slice(lastIndex, terms.length));
            if (stringTerms.length !== 3 && stringTerms.length !== 4) {
              throw new Error(`Nested quad syntax error ${value}`);
            }
            return dataFactory.quad(stringToTerm(stringTerms[0]), stringToTerm(stringTerms[1]), stringToTerm(stringTerms[2]), stringTerms[3] ? stringToTerm(stringTerms[3]) : void 0);
          }
          if (!value.startsWith("<") || !value.endsWith(">")) {
            throw new Error(`Detected invalid iri for named node (must be wrapped in <>): ${value}`);
          }
          return dataFactory.namedNode(value.slice(1, -1));
      }
    }
    exports.stringToTerm = stringToTerm;
    function quadToStringQuad(quad) {
      return {
        subject: termToString(quad.subject),
        predicate: termToString(quad.predicate),
        object: termToString(quad.object),
        graph: termToString(quad.graph)
      };
    }
    exports.quadToStringQuad = quadToStringQuad;
    function stringQuadToQuad(stringQuad, dataFactory) {
      dataFactory = dataFactory || FACTORY;
      return dataFactory.quad(stringToTerm(stringQuad.subject, dataFactory), stringToTerm(stringQuad.predicate, dataFactory), stringToTerm(stringQuad.object, dataFactory), stringToTerm(stringQuad.graph, dataFactory));
    }
    exports.stringQuadToQuad = stringQuadToQuad;
    function escapeIRI(iriValue) {
      return iriValue.replace(escapePattern, replaceEscapedCharacter);
    }
    function escapeStringRDF(stringValue) {
      if (escapePattern.test(stringValue)) {
        stringValue = stringValue.replace(escapePattern, replaceEscapedCharacter);
      }
      return stringValue;
    }
    var escapePattern = /["\\\t\n\r\b\f\u0000-\u0019]|[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var escapes = /* @__PURE__ */ new Map([
      ["\\", "\\\\"],
      ['"', '\\"'],
      ["	", "\\t"],
      ["\n", "\\n"],
      ["\r", "\\r"],
      ["\b", "\\b"],
      ["\f", "\\f"]
    ]);
    function replaceEscapedCharacter(character) {
      const result = escapes.get(character);
      if (!result) {
        if (character.length === 1) {
          const code2 = character.charCodeAt(0).toString(16);
          return `${"\\u0000".slice(0, -code2.length)}${code2}`;
        }
        const code = ((character.charCodeAt(0) - 55296) * 1024 + character.charCodeAt(1) + 9216).toString(16);
        return `${"\\U00000000".slice(0, -code.length)}${code}`;
      }
      return result;
    }
  }
});

// node_modules/rdf-string-ttl/index.js
var require_rdf_string_ttl = __commonJS({
  "node_modules/rdf-string-ttl/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.termToString = exports.stringToTerm = exports.stringQuadToQuad = exports.quadToStringQuad = exports.getLiteralValue = exports.getLiteralType = exports.getLiteralLanguage = void 0;
    var TermUtil_1 = require_TermUtil3();
    Object.defineProperty(exports, "getLiteralLanguage", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralLanguage;
    } });
    Object.defineProperty(exports, "getLiteralType", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralType;
    } });
    Object.defineProperty(exports, "getLiteralValue", { enumerable: true, get: function() {
      return TermUtil_1.getLiteralValue;
    } });
    Object.defineProperty(exports, "quadToStringQuad", { enumerable: true, get: function() {
      return TermUtil_1.quadToStringQuad;
    } });
    Object.defineProperty(exports, "stringQuadToQuad", { enumerable: true, get: function() {
      return TermUtil_1.stringQuadToQuad;
    } });
    Object.defineProperty(exports, "stringToTerm", { enumerable: true, get: function() {
      return TermUtil_1.stringToTerm;
    } });
    Object.defineProperty(exports, "termToString", { enumerable: true, get: function() {
      return TermUtil_1.termToString;
    } });
  }
});

// node_modules/@comunica/actor-query-result-serialize-sparql-tsv/lib/ActorQueryResultSerializeSparqlTsv.js
var require_ActorQueryResultSerializeSparqlTsv = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-sparql-tsv/lib/ActorQueryResultSerializeSparqlTsv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeSparqlTsv = void 0;
    var bus_query_result_serialize_1 = require_lib23();
    var rdf_string_ttl_1 = require_rdf_string_ttl();
    var readable_stream_1 = require_browser3();
    var ActorQueryResultSerializeSparqlTsv = class _ActorQueryResultSerializeSparqlTsv extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "text/tab-separated-values": 0.75
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "text/tab-separated-values": "http://www.w3.org/ns/formats/SPARQL_Results_TSV"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      /**
       * Converts an RDF term to its TSV representation.
       * @param {RDF.Term} value An RDF term.
       * @return {string} A string representation of the given value.
       */
      static bindingToTsvBindings(value) {
        if (!value) {
          return "";
        }
        return (0, rdf_string_ttl_1.termToString)(value).replace(/\t/gu, "\\t").replace(/\n/gu, "\\n").replace(/\r/gu, "\\r");
      }
      async testHandleChecked(action, context) {
        if (action.type !== "bindings") {
          throw new Error("This actor can only handle bindings streams.");
        }
        return true;
      }
      async runHandle(action, mediaType, context) {
        const bindingsAction = action;
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        const metadata = await bindingsAction.metadata();
        data.push(`${metadata.variables.map((variable) => variable.value).join("	")}
`);
        bindingsAction.bindingsStream.on("error", (error2) => {
          data.emit("error", error2);
        });
        bindingsAction.bindingsStream.on("data", (bindings) => {
          data.push(`${metadata.variables.map((key) => _ActorQueryResultSerializeSparqlTsv.bindingToTsvBindings(bindings.get(key))).join("	")}
`);
        });
        bindingsAction.bindingsStream.on("end", () => {
          data.push(null);
        });
        return { data };
      }
    };
    exports.ActorQueryResultSerializeSparqlTsv = ActorQueryResultSerializeSparqlTsv;
  }
});

// node_modules/@comunica/actor-query-result-serialize-sparql-tsv/lib/index.js
var require_lib27 = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-sparql-tsv/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeSparqlTsv(), exports);
  }
});

// node_modules/@comunica/actor-query-result-serialize-sparql-xml/lib/XmlSerializer.js
var require_XmlSerializer = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-sparql-xml/lib/XmlSerializer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XmlSerializer = void 0;
    var XmlSerializer = class {
      constructor(push) {
        this.stack = [];
        this.push = push;
        this.push(`<?xml version="1.0" encoding="UTF-8"?>
`);
      }
      /**
         *
         * @param name should be a valid XML tag name
         * @param attributes keys should be valid attribute names
         */
      open(name, attributes) {
        this.push(`${this.identation() + this.formatTag(name, attributes, "open")}
`);
        this.stack.push(name);
      }
      close() {
        const name = this.stack.pop();
        if (name === void 0) {
          throw new Error("There is no tag left to close");
        }
        this.push(`${this.identation() + this.formatTag(name, {}, "close")}
`);
      }
      add(node) {
        this.push(this.serializeNode(node));
      }
      serializeNode(node) {
        if (node.children === void 0) {
          return `${this.identation() + this.formatTag(node.name, node.attributes, "self-closing")}
`;
        }
        if (typeof node.children === "string") {
          return `${this.identation() + this.formatTag(node.name, node.attributes, "open") + this.escape(node.children) + this.formatTag(node.name, {}, "close")}
`;
        }
        const parts = [];
        parts.push(`${this.identation() + this.formatTag(node.name, node.attributes, "open")}
`);
        this.stack.push(node.name);
        for (const child of node.children) {
          parts.push(this.serializeNode(child));
        }
        this.stack.pop();
        parts.push(`${this.identation() + this.formatTag(node.name, {}, "close")}
`);
        return parts.join("");
      }
      identation() {
        return this.stack.map((_) => "  ").join("");
      }
      formatTag(name, attributes, state) {
        return `<${state === "close" ? "/" : ""}${name}${Object.entries(attributes || {}).map((attr) => ` ${attr[0]}="${this.escape(attr[1])}"`)}${state === "self-closing" ? "/" : ""}>`;
      }
      escape(text) {
        return text.replace(/["&'<>]/gu, (char) => {
          switch (char) {
            case "<":
              return "&lt;";
            case ">":
              return "&gt;";
            case "&":
              return "&amp;";
            case "'":
              return "&apos;";
            case '"':
              return "&quot;";
          }
        });
      }
    };
    exports.XmlSerializer = XmlSerializer;
  }
});

// node_modules/@comunica/actor-query-result-serialize-sparql-xml/lib/ActorQueryResultSerializeSparqlXml.js
var require_ActorQueryResultSerializeSparqlXml = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-sparql-xml/lib/ActorQueryResultSerializeSparqlXml.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeSparqlXml = void 0;
    var bus_query_result_serialize_1 = require_lib23();
    var readable_stream_1 = require_browser3();
    var XmlSerializer_1 = require_XmlSerializer();
    var ActorQueryResultSerializeSparqlXml = class _ActorQueryResultSerializeSparqlXml extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/sparql-results+xml": 0.8
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/sparql-results+xml": "http://www.w3.org/ns/formats/SPARQL_Results_XML"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      /**
       * Converts an RDF term to its object-based XML representation.
       * @param {RDF.Term} value An RDF term.
       * @param {string} key A variable name, '?' must be included as a prefix.
       * @return {IXmlNode} An object-based XML tag.
       */
      static bindingToXmlBindings(value, key) {
        return { name: "binding", attributes: { name: key.value }, children: [this.valueToXmlValue(value)] };
      }
      static valueToXmlValue(value) {
        let attributes;
        switch (value.termType) {
          case "Literal":
            if (value.language) {
              attributes = { "xml:lang": value.language };
            } else if (value.datatype && value.datatype.value !== "http://www.w3.org/2001/XMLSchema#string") {
              attributes = { datatype: value.datatype.value };
            } else {
              attributes = {};
            }
            return { name: "literal", attributes, children: value.value };
          case "BlankNode":
            return { name: "bnode", children: value.value };
          case "Quad":
            return {
              name: "triple",
              children: [
                { name: "subject", children: [this.valueToXmlValue(value.subject)] },
                { name: "predicate", children: [this.valueToXmlValue(value.predicate)] },
                { name: "object", children: [this.valueToXmlValue(value.object)] }
              ]
            };
          default:
            return { name: "uri", children: value.value };
        }
      }
      async testHandleChecked(action, context) {
        if (!["bindings", "boolean"].includes(action.type)) {
          throw new Error("This actor can only handle bindings streams or booleans.");
        }
        return true;
      }
      async runHandle(action, mediaType, context) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        const serializer = new XmlSerializer_1.XmlSerializer((chunk) => data.push(chunk));
        serializer.open("sparql", { xmlns: "http://www.w3.org/2005/sparql-results#" });
        const metadata = await action.metadata();
        serializer.add({
          name: "head",
          children: metadata.variables.map((variable) => ({ name: "variable", attributes: { name: variable.value } }))
        });
        if (action.type === "bindings") {
          serializer.open("results");
          const resultStream = action.bindingsStream;
          resultStream.on("error", (error2) => {
            data.emit("error", error2);
          });
          resultStream.on("data", (bindings) => {
            serializer.add({
              name: "result",
              children: [...bindings].map(([key, value]) => _ActorQueryResultSerializeSparqlXml.bindingToXmlBindings(value, key))
            });
          });
          resultStream.on("end", () => {
            serializer.close();
            serializer.close();
            setTimeout(() => data.push(null));
          });
        } else {
          try {
            const result = await action.execute();
            serializer.add({ name: "boolean", children: result.toString() });
            serializer.close();
            setTimeout(() => data.push(null));
          } catch (error2) {
            setTimeout(() => data.emit("error", error2));
          }
        }
        return { data };
      }
    };
    exports.ActorQueryResultSerializeSparqlXml = ActorQueryResultSerializeSparqlXml;
  }
});

// node_modules/@comunica/actor-query-result-serialize-sparql-xml/lib/index.js
var require_lib28 = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-sparql-xml/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeSparqlXml(), exports);
  }
});

// node_modules/@comunica/actor-query-result-serialize-table/lib/ActorQueryResultSerializeTable.js
var require_ActorQueryResultSerializeTable = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-table/lib/ActorQueryResultSerializeTable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeTable = void 0;
    var bus_query_result_serialize_1 = require_lib23();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var rdf_string_1 = require_rdf_string();
    var rdf_terms_1 = require_rdf_terms();
    var readable_stream_1 = require_browser3();
    var DF = new rdf_data_factory_1.DataFactory();
    var QUAD_TERM_NAMES_VARS = rdf_terms_1.QUAD_TERM_NAMES.map((name) => DF.variable(name));
    var ActorQueryResultSerializeTable = class _ActorQueryResultSerializeTable extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{ "table": 0.6 }} mediaTypePriorities
       *   \ @defaultNested {{ "table": "https://comunica.linkeddatafragments.org/#results_table" }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
        this.padding = _ActorQueryResultSerializeTable.repeat(" ", this.columnWidth);
      }
      static repeat(str, count) {
        return str.repeat(count);
      }
      async testHandleChecked(action, context) {
        if (!["bindings", "quads"].includes(action.type)) {
          throw new Error("This actor can only handle bindings or quad streams.");
        }
        return true;
      }
      termToString(term) {
        return term.termType === "Quad" ? (0, rdf_string_1.termToString)(term) : term.value;
      }
      pad(str) {
        if (str.length <= this.columnWidth) {
          return str + this.padding.slice(str.length);
        }
        return `${str.slice(0, this.columnWidth - 1)}\u2026`;
      }
      pushHeader(data, labels) {
        const header = labels.map((label) => this.pad(label.value)).join(" ");
        data.push(`${header}
${_ActorQueryResultSerializeTable.repeat("-", header.length)}
`);
      }
      pushRow(data, labels, bindings) {
        data.push(`${labels.map((label) => bindings.has(label) ? this.termToString(bindings.get(label)) : "").map((label) => this.pad(label)).join(" ")}
`);
      }
      async runHandle(action, mediaType, context) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        let resultStream;
        if (action.type === "bindings") {
          resultStream = action.bindingsStream;
          const labels = (await action.metadata()).variables;
          this.pushHeader(data, labels);
          resultStream.on("error", (error2) => data.emit("error", error2));
          resultStream.on("data", (bindings) => this.pushRow(data, labels, bindings));
        } else {
          resultStream = action.quadStream;
          this.pushHeader(data, QUAD_TERM_NAMES_VARS);
          resultStream.on("error", (error2) => data.emit("error", error2));
          resultStream.on("data", (quad) => data.push(`${(0, rdf_terms_1.getTerms)(quad).map((term) => this.pad(this.termToString(term))).join(" ")}
`));
        }
        resultStream.on("end", () => data.push(null));
        return { data };
      }
    };
    exports.ActorQueryResultSerializeTable = ActorQueryResultSerializeTable;
  }
});

// node_modules/@comunica/actor-query-result-serialize-table/lib/index.js
var require_lib29 = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-table/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeTable(), exports);
  }
});

// node_modules/rdf-literal/lib/Translator.js
var require_Translator = __commonJS({
  "node_modules/rdf-literal/lib/Translator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Translator = void 0;
    var Translator = class {
      constructor() {
        this.supportedRdfDatatypes = [];
        this.fromRdfHandlers = {};
        this.toRdfHandlers = {};
      }
      static incorrectRdfDataType(literal) {
        throw new Error(`Invalid RDF ${literal.datatype.value} value: '${literal.value}'`);
      }
      registerHandler(handler, rdfDatatypes, javaScriptDataTypes) {
        for (const rdfDatatype of rdfDatatypes) {
          this.supportedRdfDatatypes.push(rdfDatatype);
          this.fromRdfHandlers[rdfDatatype.value] = handler;
        }
        for (const javaScriptDataType of javaScriptDataTypes) {
          let existingToRdfHandlers = this.toRdfHandlers[javaScriptDataType];
          if (!existingToRdfHandlers) {
            this.toRdfHandlers[javaScriptDataType] = existingToRdfHandlers = [];
          }
          existingToRdfHandlers.push(handler);
        }
      }
      fromRdf(literal, validate) {
        const handler = this.fromRdfHandlers[literal.datatype.value];
        if (handler) {
          return handler.fromRdf(literal, validate);
        } else {
          return literal.value;
        }
      }
      toRdf(value, options) {
        const handlers = this.toRdfHandlers[typeof value];
        if (handlers) {
          for (const handler of handlers) {
            const ret = handler.toRdf(value, options);
            if (ret) {
              return ret;
            }
          }
        }
        throw new Error(`Invalid JavaScript value: '${value}'`);
      }
      /**
       * @return {NamedNode[]} An array of all supported RDF datatypes.
       */
      getSupportedRdfDatatypes() {
        return this.supportedRdfDatatypes;
      }
      /**
       * @return {string[]} An array of all supported JavaScript types.
       */
      getSupportedJavaScriptPrimitives() {
        return Object.keys(this.toRdfHandlers);
      }
    };
    exports.Translator = Translator;
  }
});

// node_modules/rdf-literal/lib/handler/TypeHandlerBoolean.js
var require_TypeHandlerBoolean = __commonJS({
  "node_modules/rdf-literal/lib/handler/TypeHandlerBoolean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeHandlerBoolean = void 0;
    var Translator_1 = require_Translator();
    var TypeHandlerBoolean = class _TypeHandlerBoolean {
      fromRdf(literal, validate) {
        switch (literal.value) {
          case "true":
            return true;
          case "false":
            return false;
          case "1":
            return true;
          case "0":
            return false;
        }
        if (validate) {
          Translator_1.Translator.incorrectRdfDataType(literal);
        }
        return false;
      }
      toRdf(value, { datatype, dataFactory }) {
        return dataFactory.literal(value ? "true" : "false", datatype || dataFactory.namedNode(_TypeHandlerBoolean.TYPE));
      }
    };
    exports.TypeHandlerBoolean = TypeHandlerBoolean;
    TypeHandlerBoolean.TYPE = "http://www.w3.org/2001/XMLSchema#boolean";
  }
});

// node_modules/rdf-literal/lib/handler/TypeHandlerDate.js
var require_TypeHandlerDate = __commonJS({
  "node_modules/rdf-literal/lib/handler/TypeHandlerDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeHandlerDate = void 0;
    var Translator_1 = require_Translator();
    var TypeHandlerDate = class _TypeHandlerDate {
      fromRdf(literal, validate) {
        if (validate && !literal.value.match(_TypeHandlerDate.VALIDATORS[literal.datatype.value.substr(33, literal.datatype.value.length)])) {
          Translator_1.Translator.incorrectRdfDataType(literal);
        }
        switch (literal.datatype.value) {
          case "http://www.w3.org/2001/XMLSchema#gDay":
            return new Date(0, 0, parseInt(literal.value, 10));
          case "http://www.w3.org/2001/XMLSchema#gMonthDay":
            const partsMonthDay = literal.value.split("-");
            return new Date(0, parseInt(partsMonthDay[0], 10) - 1, parseInt(partsMonthDay[1], 10));
          case "http://www.w3.org/2001/XMLSchema#gYear":
            return /* @__PURE__ */ new Date(literal.value + "-01-01");
          case "http://www.w3.org/2001/XMLSchema#gYearMonth":
            return /* @__PURE__ */ new Date(literal.value + "-01");
          default:
            return new Date(literal.value);
        }
      }
      toRdf(value, { datatype, dataFactory }) {
        datatype = datatype || dataFactory.namedNode(_TypeHandlerDate.TYPES[0]);
        if (!(value instanceof Date)) {
          return null;
        }
        const date = value;
        let valueString;
        switch (datatype.value) {
          case "http://www.w3.org/2001/XMLSchema#gDay":
            valueString = String(date.getUTCDate());
            break;
          case "http://www.w3.org/2001/XMLSchema#gMonthDay":
            valueString = date.getUTCMonth() + 1 + "-" + date.getUTCDate();
            break;
          case "http://www.w3.org/2001/XMLSchema#gYear":
            valueString = String(date.getUTCFullYear());
            break;
          case "http://www.w3.org/2001/XMLSchema#gYearMonth":
            valueString = date.getUTCFullYear() + "-" + (date.getUTCMonth() + 1);
            break;
          case "http://www.w3.org/2001/XMLSchema#date":
            valueString = date.toISOString().replace(/T.*$/, "");
            break;
          default:
            valueString = date.toISOString();
        }
        return dataFactory.literal(valueString, datatype);
      }
    };
    exports.TypeHandlerDate = TypeHandlerDate;
    TypeHandlerDate.TYPES = [
      "http://www.w3.org/2001/XMLSchema#dateTime",
      "http://www.w3.org/2001/XMLSchema#date",
      "http://www.w3.org/2001/XMLSchema#gDay",
      "http://www.w3.org/2001/XMLSchema#gMonthDay",
      "http://www.w3.org/2001/XMLSchema#gYear",
      "http://www.w3.org/2001/XMLSchema#gYearMonth"
    ];
    TypeHandlerDate.VALIDATORS = {
      date: /^[0-9]+-[0-9][0-9]-[0-9][0-9]Z?$/,
      dateTime: /^[0-9]+-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9](\.[0-9][0-9][0-9])?((Z?)|([\+-][0-9][0-9]:[0-9][0-9]))$/,
      gDay: /^[0-9]+$/,
      gMonthDay: /^[0-9]+-[0-9][0-9]$/,
      gYear: /^[0-9]+$/,
      gYearMonth: /^[0-9]+-[0-9][0-9]$/
    };
  }
});

// node_modules/rdf-literal/lib/handler/TypeHandlerNumberDouble.js
var require_TypeHandlerNumberDouble = __commonJS({
  "node_modules/rdf-literal/lib/handler/TypeHandlerNumberDouble.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeHandlerNumberDouble = void 0;
    var Translator_1 = require_Translator();
    var TypeHandlerNumberDouble = class _TypeHandlerNumberDouble {
      fromRdf(literal, validate) {
        const parsed = parseFloat(literal.value);
        if (validate) {
          if (isNaN(parsed)) {
            Translator_1.Translator.incorrectRdfDataType(literal);
          }
        }
        return parsed;
      }
      toRdf(value, { datatype, dataFactory }) {
        datatype = datatype || dataFactory.namedNode(_TypeHandlerNumberDouble.TYPES[0]);
        if (isNaN(value)) {
          return dataFactory.literal("NaN", datatype);
        }
        if (!isFinite(value)) {
          return dataFactory.literal(value > 0 ? "INF" : "-INF", datatype);
        }
        if (value % 1 === 0) {
          return null;
        }
        return dataFactory.literal(value.toExponential(15).replace(/(\d)0*e\+?/, "$1E"), datatype);
      }
    };
    exports.TypeHandlerNumberDouble = TypeHandlerNumberDouble;
    TypeHandlerNumberDouble.TYPES = [
      "http://www.w3.org/2001/XMLSchema#double",
      "http://www.w3.org/2001/XMLSchema#decimal",
      "http://www.w3.org/2001/XMLSchema#float"
    ];
  }
});

// node_modules/rdf-literal/lib/handler/TypeHandlerNumberInteger.js
var require_TypeHandlerNumberInteger = __commonJS({
  "node_modules/rdf-literal/lib/handler/TypeHandlerNumberInteger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeHandlerNumberInteger = void 0;
    var Translator_1 = require_Translator();
    var TypeHandlerNumberInteger = class _TypeHandlerNumberInteger {
      fromRdf(literal, validate) {
        const parsed = parseInt(literal.value, 10);
        if (validate) {
          if (isNaN(parsed) || literal.value.indexOf(".") >= 0) {
            Translator_1.Translator.incorrectRdfDataType(literal);
          }
        }
        return parsed;
      }
      toRdf(value, { datatype, dataFactory }) {
        return dataFactory.literal(String(value), datatype || (value <= _TypeHandlerNumberInteger.MAX_INT && value >= _TypeHandlerNumberInteger.MIN_INT ? dataFactory.namedNode(_TypeHandlerNumberInteger.TYPES[0]) : dataFactory.namedNode(_TypeHandlerNumberInteger.TYPES[1])));
      }
    };
    exports.TypeHandlerNumberInteger = TypeHandlerNumberInteger;
    TypeHandlerNumberInteger.TYPES = [
      "http://www.w3.org/2001/XMLSchema#integer",
      "http://www.w3.org/2001/XMLSchema#long",
      "http://www.w3.org/2001/XMLSchema#int",
      "http://www.w3.org/2001/XMLSchema#byte",
      "http://www.w3.org/2001/XMLSchema#short",
      "http://www.w3.org/2001/XMLSchema#negativeInteger",
      "http://www.w3.org/2001/XMLSchema#nonNegativeInteger",
      "http://www.w3.org/2001/XMLSchema#nonPositiveInteger",
      "http://www.w3.org/2001/XMLSchema#positiveInteger",
      "http://www.w3.org/2001/XMLSchema#unsignedByte",
      "http://www.w3.org/2001/XMLSchema#unsignedInt",
      "http://www.w3.org/2001/XMLSchema#unsignedLong",
      "http://www.w3.org/2001/XMLSchema#unsignedShort"
    ];
    TypeHandlerNumberInteger.MAX_INT = 2147483647;
    TypeHandlerNumberInteger.MIN_INT = -2147483648;
  }
});

// node_modules/rdf-literal/lib/handler/TypeHandlerString.js
var require_TypeHandlerString = __commonJS({
  "node_modules/rdf-literal/lib/handler/TypeHandlerString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeHandlerString = void 0;
    var TypeHandlerString = class {
      fromRdf(literal) {
        return literal.value;
      }
      toRdf(value, { datatype, dataFactory }) {
        return dataFactory.literal(value, datatype);
      }
    };
    exports.TypeHandlerString = TypeHandlerString;
    TypeHandlerString.TYPES = [
      "http://www.w3.org/2001/XMLSchema#string",
      "http://www.w3.org/2001/XMLSchema#normalizedString",
      "http://www.w3.org/2001/XMLSchema#anyURI",
      "http://www.w3.org/2001/XMLSchema#base64Binary",
      "http://www.w3.org/2001/XMLSchema#language",
      "http://www.w3.org/2001/XMLSchema#Name",
      "http://www.w3.org/2001/XMLSchema#NCName",
      "http://www.w3.org/2001/XMLSchema#NMTOKEN",
      "http://www.w3.org/2001/XMLSchema#token",
      "http://www.w3.org/2001/XMLSchema#hexBinary",
      "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString",
      "http://www.w3.org/2001/XMLSchema#time",
      "http://www.w3.org/2001/XMLSchema#duration"
    ];
  }
});

// node_modules/rdf-literal/lib/handler/index.js
var require_handler2 = __commonJS({
  "node_modules/rdf-literal/lib/handler/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_TypeHandlerBoolean(), exports);
    __exportStar(require_TypeHandlerDate(), exports);
    __exportStar(require_TypeHandlerNumberDouble(), exports);
    __exportStar(require_TypeHandlerNumberInteger(), exports);
    __exportStar(require_TypeHandlerString(), exports);
  }
});

// node_modules/rdf-literal/lib/ITypeHandler.js
var require_ITypeHandler = __commonJS({
  "node_modules/rdf-literal/lib/ITypeHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/rdf-literal/index.js
var require_rdf_literal = __commonJS({
  "node_modules/rdf-literal/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSupportedJavaScriptPrimitives = exports.getSupportedRdfDatatypes = exports.getTermRaw = exports.toRdf = exports.fromRdf = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var handler_1 = require_handler2();
    var Translator_1 = require_Translator();
    __exportStar(require_handler2(), exports);
    __exportStar(require_ITypeHandler(), exports);
    __exportStar(require_Translator(), exports);
    var DF = new rdf_data_factory_1.DataFactory();
    var translator = new Translator_1.Translator();
    translator.registerHandler(new handler_1.TypeHandlerString(), handler_1.TypeHandlerString.TYPES.map((t) => DF.namedNode(t)), ["string"]);
    translator.registerHandler(new handler_1.TypeHandlerBoolean(), [handler_1.TypeHandlerBoolean.TYPE].map((t) => DF.namedNode(t)), ["boolean"]);
    translator.registerHandler(new handler_1.TypeHandlerNumberDouble(), handler_1.TypeHandlerNumberDouble.TYPES.map((t) => DF.namedNode(t)), ["number"]);
    translator.registerHandler(new handler_1.TypeHandlerNumberInteger(), handler_1.TypeHandlerNumberInteger.TYPES.map((t) => DF.namedNode(t)), ["number"]);
    translator.registerHandler(new handler_1.TypeHandlerDate(), handler_1.TypeHandlerDate.TYPES.map((t) => DF.namedNode(t)), ["object"]);
    function fromRdf(literal, validate) {
      return translator.fromRdf(literal, validate);
    }
    exports.fromRdf = fromRdf;
    function toRdf(value, options) {
      if (options && "namedNode" in options) {
        options = { dataFactory: options };
      }
      options = options || {};
      if (options && !options.dataFactory) {
        options.dataFactory = DF;
      }
      return translator.toRdf(value, options);
    }
    exports.toRdf = toRdf;
    function getTermRaw(term, validate) {
      if (term.termType === "Literal") {
        return fromRdf(term, validate);
      }
      return term.value;
    }
    exports.getTermRaw = getTermRaw;
    function getSupportedRdfDatatypes() {
      return translator.getSupportedRdfDatatypes();
    }
    exports.getSupportedRdfDatatypes = getSupportedRdfDatatypes;
    function getSupportedJavaScriptPrimitives() {
      return translator.getSupportedJavaScriptPrimitives();
    }
    exports.getSupportedJavaScriptPrimitives = getSupportedJavaScriptPrimitives;
  }
});

// node_modules/@bergos/jsonparse/jsonparse.js
var require_jsonparse = __commonJS({
  "node_modules/@bergos/jsonparse/jsonparse.js"(exports, module) {
    var { Buffer: Buffer2 } = require_buffer();
    var C = {};
    var LEFT_BRACE = C.LEFT_BRACE = 1;
    var RIGHT_BRACE = C.RIGHT_BRACE = 2;
    var LEFT_BRACKET = C.LEFT_BRACKET = 3;
    var RIGHT_BRACKET = C.RIGHT_BRACKET = 4;
    var COLON = C.COLON = 5;
    var COMMA = C.COMMA = 6;
    var TRUE = C.TRUE = 7;
    var FALSE = C.FALSE = 8;
    var NULL = C.NULL = 9;
    var STRING = C.STRING = 10;
    var NUMBER = C.NUMBER = 11;
    var START = C.START = 17;
    var STOP = C.STOP = 18;
    var TRUE1 = C.TRUE1 = 33;
    var TRUE2 = C.TRUE2 = 34;
    var TRUE3 = C.TRUE3 = 35;
    var FALSE1 = C.FALSE1 = 49;
    var FALSE2 = C.FALSE2 = 50;
    var FALSE3 = C.FALSE3 = 51;
    var FALSE4 = C.FALSE4 = 52;
    var NULL1 = C.NULL1 = 65;
    var NULL2 = C.NULL2 = 66;
    var NULL3 = C.NULL3 = 67;
    var NUMBER1 = C.NUMBER1 = 81;
    var NUMBER3 = C.NUMBER3 = 83;
    var STRING1 = C.STRING1 = 97;
    var STRING2 = C.STRING2 = 98;
    var STRING3 = C.STRING3 = 99;
    var STRING4 = C.STRING4 = 100;
    var STRING5 = C.STRING5 = 101;
    var STRING6 = C.STRING6 = 102;
    var VALUE = C.VALUE = 113;
    var KEY = C.KEY = 114;
    var OBJECT = C.OBJECT = 129;
    var ARRAY = C.ARRAY = 130;
    var BACK_SLASH = "\\".charCodeAt(0);
    var FORWARD_SLASH = "/".charCodeAt(0);
    var BACKSPACE = "\b".charCodeAt(0);
    var FORM_FEED = "\f".charCodeAt(0);
    var NEWLINE = "\n".charCodeAt(0);
    var CARRIAGE_RETURN = "\r".charCodeAt(0);
    var TAB = "	".charCodeAt(0);
    var STRING_BUFFER_SIZE = 64 * 1024;
    function alloc(size) {
      return Buffer2.alloc ? Buffer2.alloc(size) : new Buffer2(size);
    }
    function Parser4() {
      this.tState = START;
      this.value = void 0;
      this.string = void 0;
      this.stringBuffer = alloc(STRING_BUFFER_SIZE);
      this.stringBufferOffset = 0;
      this.unicode = void 0;
      this.highSurrogate = void 0;
      this.key = void 0;
      this.mode = void 0;
      this.stack = [];
      this.state = VALUE;
      this.bytes_remaining = 0;
      this.bytes_in_sequence = 0;
      this.temp_buffs = { "2": alloc(2), "3": alloc(3), "4": alloc(4) };
      this.offset = -1;
    }
    Parser4.toknam = function(code) {
      var keys = Object.keys(C);
      for (var i2 = 0, l = keys.length; i2 < l; i2++) {
        var key = keys[i2];
        if (C[key] === code) {
          return key;
        }
      }
      return code && "0x" + code.toString(16);
    };
    var proto = Parser4.prototype;
    proto.onError = function(err) {
      throw err;
    };
    proto.charError = function(buffer2, i2) {
      this.tState = STOP;
      this.onError(new Error("Unexpected " + JSON.stringify(String.fromCharCode(buffer2[i2])) + " at position " + i2 + " in state " + Parser4.toknam(this.tState)));
    };
    proto.appendStringChar = function(char) {
      if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {
        this.string += this.stringBuffer.toString("utf8");
        this.stringBufferOffset = 0;
      }
      this.stringBuffer[this.stringBufferOffset++] = char;
    };
    proto.appendStringBuf = function(buf, start, end) {
      var size = buf.length;
      if (typeof start === "number") {
        if (typeof end === "number") {
          if (end < 0) {
            size = buf.length - start + end;
          } else {
            size = end - start;
          }
        } else {
          size = buf.length - start;
        }
      }
      if (size < 0) {
        size = 0;
      }
      if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {
        this.string += this.stringBuffer.toString("utf8", 0, this.stringBufferOffset);
        this.stringBufferOffset = 0;
      }
      buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);
      this.stringBufferOffset += size;
    };
    proto.write = function(buffer2) {
      if (typeof buffer2 === "string")
        buffer2 = new Buffer2(buffer2);
      var n;
      for (var i2 = 0, l = buffer2.length; i2 < l; i2++) {
        if (this.tState === START) {
          n = buffer2[i2];
          this.offset++;
          if (n === 123) {
            this.onToken(LEFT_BRACE, "{");
          } else if (n === 125) {
            this.onToken(RIGHT_BRACE, "}");
          } else if (n === 91) {
            this.onToken(LEFT_BRACKET, "[");
          } else if (n === 93) {
            this.onToken(RIGHT_BRACKET, "]");
          } else if (n === 58) {
            this.onToken(COLON, ":");
          } else if (n === 44) {
            this.onToken(COMMA, ",");
          } else if (n === 116) {
            this.tState = TRUE1;
          } else if (n === 102) {
            this.tState = FALSE1;
          } else if (n === 110) {
            this.tState = NULL1;
          } else if (n === 34) {
            this.string = "";
            this.stringBufferOffset = 0;
            this.tState = STRING1;
          } else if (n === 45) {
            this.string = "-";
            this.tState = NUMBER1;
          } else {
            if (n >= 48 && n < 64) {
              this.string = String.fromCharCode(n);
              this.tState = NUMBER3;
            } else if (n === 32 || n === 9 || n === 10 || n === 13) {
            } else {
              return this.charError(buffer2, i2);
            }
          }
        } else if (this.tState === STRING1) {
          n = buffer2[i2];
          if (this.bytes_remaining > 0) {
            for (var j = 0; j < this.bytes_remaining; j++) {
              this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer2[j];
            }
            this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);
            this.bytes_in_sequence = this.bytes_remaining = 0;
            i2 = i2 + j - 1;
          } else if (this.bytes_remaining === 0 && n >= 128) {
            if (n <= 193 || n > 244) {
              return this.onError(new Error("Invalid UTF-8 character at position " + i2 + " in state " + Parser4.toknam(this.tState)));
            }
            if (n >= 194 && n <= 223)
              this.bytes_in_sequence = 2;
            if (n >= 224 && n <= 239)
              this.bytes_in_sequence = 3;
            if (n >= 240 && n <= 244)
              this.bytes_in_sequence = 4;
            if (this.bytes_in_sequence + i2 > buffer2.length) {
              for (var k = 0; k <= buffer2.length - 1 - i2; k++) {
                this.temp_buffs[this.bytes_in_sequence][k] = buffer2[i2 + k];
              }
              this.bytes_remaining = i2 + this.bytes_in_sequence - buffer2.length;
              i2 = buffer2.length - 1;
            } else {
              this.appendStringBuf(buffer2, i2, i2 + this.bytes_in_sequence);
              i2 = i2 + this.bytes_in_sequence - 1;
            }
          } else if (n === 34) {
            this.tState = START;
            this.string += this.stringBuffer.toString("utf8", 0, this.stringBufferOffset);
            this.stringBufferOffset = 0;
            this.onToken(STRING, this.string);
            this.offset += Buffer2.byteLength(this.string, "utf8") + 1;
            this.string = void 0;
          } else if (n === 92) {
            this.tState = STRING2;
          } else if (n >= 32) {
            this.appendStringChar(n);
          } else {
            return this.charError(buffer2, i2);
          }
        } else if (this.tState === STRING2) {
          n = buffer2[i2];
          if (n === 34) {
            this.appendStringChar(n);
            this.tState = STRING1;
          } else if (n === 92) {
            this.appendStringChar(BACK_SLASH);
            this.tState = STRING1;
          } else if (n === 47) {
            this.appendStringChar(FORWARD_SLASH);
            this.tState = STRING1;
          } else if (n === 98) {
            this.appendStringChar(BACKSPACE);
            this.tState = STRING1;
          } else if (n === 102) {
            this.appendStringChar(FORM_FEED);
            this.tState = STRING1;
          } else if (n === 110) {
            this.appendStringChar(NEWLINE);
            this.tState = STRING1;
          } else if (n === 114) {
            this.appendStringChar(CARRIAGE_RETURN);
            this.tState = STRING1;
          } else if (n === 116) {
            this.appendStringChar(TAB);
            this.tState = STRING1;
          } else if (n === 117) {
            this.unicode = "";
            this.tState = STRING3;
          } else {
            return this.charError(buffer2, i2);
          }
        } else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6) {
          n = buffer2[i2];
          if (n >= 48 && n < 64 || n > 64 && n <= 70 || n > 96 && n <= 102) {
            this.unicode += String.fromCharCode(n);
            if (this.tState++ === STRING6) {
              var intVal = parseInt(this.unicode, 16);
              this.unicode = void 0;
              if (this.highSurrogate !== void 0 && intVal >= 56320 && intVal < 57343 + 1) {
                this.appendStringBuf(new Buffer2(String.fromCharCode(this.highSurrogate, intVal)));
                this.highSurrogate = void 0;
              } else if (this.highSurrogate === void 0 && intVal >= 55296 && intVal < 56319 + 1) {
                this.highSurrogate = intVal;
              } else {
                if (this.highSurrogate !== void 0) {
                  this.appendStringBuf(new Buffer2(String.fromCharCode(this.highSurrogate)));
                  this.highSurrogate = void 0;
                }
                this.appendStringBuf(new Buffer2(String.fromCharCode(intVal)));
              }
              this.tState = STRING1;
            }
          } else {
            return this.charError(buffer2, i2);
          }
        } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {
          n = buffer2[i2];
          switch (n) {
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 46:
            case 101:
            case 69:
            case 43:
            case 45:
              this.string += String.fromCharCode(n);
              this.tState = NUMBER3;
              break;
            default:
              this.tState = START;
              var error2 = this.numberReviver(this.string);
              if (error2) {
                return error2;
              }
              this.offset += this.string.length - 1;
              this.string = void 0;
              i2--;
              break;
          }
        } else if (this.tState === TRUE1) {
          if (buffer2[i2] === 114) {
            this.tState = TRUE2;
          } else {
            return this.charError(buffer2, i2);
          }
        } else if (this.tState === TRUE2) {
          if (buffer2[i2] === 117) {
            this.tState = TRUE3;
          } else {
            return this.charError(buffer2, i2);
          }
        } else if (this.tState === TRUE3) {
          if (buffer2[i2] === 101) {
            this.tState = START;
            this.onToken(TRUE, true);
            this.offset += 3;
          } else {
            return this.charError(buffer2, i2);
          }
        } else if (this.tState === FALSE1) {
          if (buffer2[i2] === 97) {
            this.tState = FALSE2;
          } else {
            return this.charError(buffer2, i2);
          }
        } else if (this.tState === FALSE2) {
          if (buffer2[i2] === 108) {
            this.tState = FALSE3;
          } else {
            return this.charError(buffer2, i2);
          }
        } else if (this.tState === FALSE3) {
          if (buffer2[i2] === 115) {
            this.tState = FALSE4;
          } else {
            return this.charError(buffer2, i2);
          }
        } else if (this.tState === FALSE4) {
          if (buffer2[i2] === 101) {
            this.tState = START;
            this.onToken(FALSE, false);
            this.offset += 4;
          } else {
            return this.charError(buffer2, i2);
          }
        } else if (this.tState === NULL1) {
          if (buffer2[i2] === 117) {
            this.tState = NULL2;
          } else {
            return this.charError(buffer2, i2);
          }
        } else if (this.tState === NULL2) {
          if (buffer2[i2] === 108) {
            this.tState = NULL3;
          } else {
            return this.charError(buffer2, i2);
          }
        } else if (this.tState === NULL3) {
          if (buffer2[i2] === 108) {
            this.tState = START;
            this.onToken(NULL, null);
            this.offset += 3;
          } else {
            return this.charError(buffer2, i2);
          }
        }
      }
    };
    proto.onToken = function(token, value) {
    };
    proto.parseError = function(token, value) {
      this.tState = STOP;
      this.onError(new Error("Unexpected " + Parser4.toknam(token) + (value ? "(" + JSON.stringify(value) + ")" : "") + " in state " + Parser4.toknam(this.state)));
    };
    proto.push = function() {
      this.stack.push({ value: this.value, key: this.key, mode: this.mode });
    };
    proto.pop = function() {
      var value = this.value;
      var parent = this.stack.pop();
      this.value = parent.value;
      this.key = parent.key;
      this.mode = parent.mode;
      this.emit(value);
      if (!this.mode) {
        this.state = VALUE;
      }
    };
    proto.emit = function(value) {
      if (this.mode) {
        this.state = COMMA;
      }
      this.onValue(value);
    };
    proto.onValue = function(value) {
    };
    proto.onToken = function(token, value) {
      if (this.state === VALUE) {
        if (token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL) {
          if (this.value) {
            this.value[this.key] = value;
          }
          this.emit(value);
        } else if (token === LEFT_BRACE) {
          this.push();
          if (this.value) {
            this.value = this.value[this.key] = {};
          } else {
            this.value = {};
          }
          this.key = void 0;
          this.state = KEY;
          this.mode = OBJECT;
        } else if (token === LEFT_BRACKET) {
          this.push();
          if (this.value) {
            this.value = this.value[this.key] = [];
          } else {
            this.value = [];
          }
          this.key = 0;
          this.mode = ARRAY;
          this.state = VALUE;
        } else if (token === RIGHT_BRACE) {
          if (this.mode === OBJECT) {
            this.pop();
          } else {
            return this.parseError(token, value);
          }
        } else if (token === RIGHT_BRACKET) {
          if (this.mode === ARRAY) {
            this.pop();
          } else {
            return this.parseError(token, value);
          }
        } else {
          return this.parseError(token, value);
        }
      } else if (this.state === KEY) {
        if (token === STRING) {
          this.key = value;
          this.state = COLON;
        } else if (token === RIGHT_BRACE) {
          this.pop();
        } else {
          return this.parseError(token, value);
        }
      } else if (this.state === COLON) {
        if (token === COLON) {
          this.state = VALUE;
        } else {
          return this.parseError(token, value);
        }
      } else if (this.state === COMMA) {
        if (token === COMMA) {
          if (this.mode === ARRAY) {
            this.key++;
            this.state = VALUE;
          } else if (this.mode === OBJECT) {
            this.state = KEY;
          }
        } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {
          this.pop();
        } else {
          return this.parseError(token, value);
        }
      } else {
        return this.parseError(token, value);
      }
    };
    proto.numberReviver = function(text) {
      var result = Number(text);
      if (isNaN(result)) {
        return this.charError(buffer, i);
      }
      if (text.match(/[0-9]+/) == text && result.toString() != text) {
        this.onToken(STRING, text);
      } else {
        this.onToken(NUMBER, result);
      }
    };
    Parser4.C = C;
    module.exports = Parser4;
  }
});

// node_modules/sparqljson-parse/lib/SparqlJsonParser.js
var require_SparqlJsonParser = __commonJS({
  "node_modules/sparqljson-parse/lib/SparqlJsonParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SparqlJsonParser = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var readable_stream_1 = require_browser3();
    var JsonParser = require_jsonparse();
    var SparqlJsonParser = class {
      constructor(settings) {
        var _a;
        settings = settings || {};
        this.dataFactory = settings.dataFactory || new rdf_data_factory_1.DataFactory();
        this.prefixVariableQuestionMark = !!settings.prefixVariableQuestionMark;
        this.suppressMissingStreamResultsError = (_a = settings.suppressMissingStreamResultsError) !== null && _a !== void 0 ? _a : true;
      }
      /**
       * Convert a SPARQL JSON bindings response to an array of bindings objects.
       * @param sparqlResponse A SPARQL JSON response.
       * @return {IBindings[]} An array of bindings.
       */
      parseJsonResults(sparqlResponse) {
        return sparqlResponse.results.bindings.map((rawBindings) => this.parseJsonBindings(rawBindings));
      }
      /**
       * Convert a SPARQL JSON bindings response stream to a stream of bindings objects.
       *
       * The bindings stream will emit a 'variables' event that will contain
       * the array of variables (as RDF.Variable[]), as defined in the response head.
       *
       * @param {NodeJS.ReadableStream} sparqlResponseStream A SPARQL JSON response stream.
       * @return {NodeJS.ReadableStream} A stream of bindings.
       */
      parseJsonResultsStream(sparqlResponseStream) {
        const errorListener = (error2) => resultStream.emit("error", error2);
        sparqlResponseStream.on("error", errorListener);
        const jsonParser = new JsonParser();
        jsonParser.onError = errorListener;
        let variablesFound = false;
        let resultsFound = false;
        jsonParser.onValue = (value) => {
          if (jsonParser.key === "vars" && jsonParser.stack.length === 2 && jsonParser.stack[1].key === "head") {
            resultStream.emit("variables", value.map((v) => this.dataFactory.variable(v)));
            variablesFound = true;
          } else if (jsonParser.key === "results" && jsonParser.stack.length === 1) {
            resultsFound = true;
          } else if (typeof jsonParser.key === "number" && jsonParser.stack.length === 3 && jsonParser.stack[1].key === "results" && jsonParser.stack[2].key === "bindings") {
            try {
              resultStream.push(this.parseJsonBindings(value));
            } catch (error2) {
              resultStream.emit("error", error2);
            }
          } else if (jsonParser.key === "metadata" && jsonParser.stack.length === 1) {
            resultStream.emit("metadata", value);
          }
        };
        const resultStream = sparqlResponseStream.on("end", (_) => {
          if (!resultsFound && !this.suppressMissingStreamResultsError) {
            resultStream.emit("error", new Error("No valid SPARQL query results were found."));
          } else if (!variablesFound) {
            resultStream.emit("variables", []);
          }
        }).pipe(new readable_stream_1.Transform({
          objectMode: true,
          transform(chunk, encoding, callback) {
            jsonParser.write(chunk);
            callback();
          }
        }));
        return resultStream;
      }
      /**
       * Convert a SPARQL JSON result binding to a bindings object.
       * @param rawBindings A SPARQL JSON result binding.
       * @return {IBindings} A bindings object.
       */
      parseJsonBindings(rawBindings) {
        const bindings = {};
        for (const key in rawBindings) {
          const rawValue = rawBindings[key];
          bindings[this.prefixVariableQuestionMark ? "?" + key : key] = this.parseJsonValue(rawValue);
        }
        return bindings;
      }
      /**
       * Convert a SPARQL JSON result value to an RDF term.
       * @param rawValue A SPARQL JSON result value
       * @return {RDF.Term} An RDF term.
       */
      parseJsonValue(rawValue) {
        let value;
        switch (rawValue.type) {
          case "bnode":
            value = this.dataFactory.blankNode(rawValue.value);
            break;
          case "literal":
            if (rawValue["xml:lang"]) {
              value = this.dataFactory.literal(rawValue.value, rawValue["xml:lang"]);
            } else if (rawValue.datatype) {
              value = this.dataFactory.literal(rawValue.value, this.dataFactory.namedNode(rawValue.datatype));
            } else {
              value = this.dataFactory.literal(rawValue.value);
            }
            break;
          case "typed-literal":
            value = this.dataFactory.literal(rawValue.value, this.dataFactory.namedNode(rawValue.datatype));
            break;
          case "triple":
            const tripleValue = rawValue.value;
            if (!tripleValue || !tripleValue.subject || !tripleValue.predicate || !tripleValue.object) {
              throw new Error("Invalid quoted triple: " + JSON.stringify(rawValue));
            }
            value = this.dataFactory.quad(this.parseJsonValue(tripleValue.subject), this.parseJsonValue(tripleValue.predicate), this.parseJsonValue(tripleValue.object));
            break;
          default:
            value = this.dataFactory.namedNode(rawValue.value);
            break;
        }
        return value;
      }
      /**
       * Convert a SPARQL JSON boolean response to a boolean.
       * This will throw an error if the given reponse was not a valid boolean response.
       * @param sparqlResponse A SPARQL JSON response.
       * @return {IBindings[]} An array of bindings.
       */
      parseJsonBoolean(sparqlResponse) {
        if ("boolean" in sparqlResponse) {
          return sparqlResponse.boolean;
        }
        throw new Error("No valid ASK response was found.");
      }
      /**
       * Convert a SPARQL JSON boolean response stream to a promise resolving to a boolean.
       * This will reject if the given reponse was not a valid boolean response.
       * @param {NodeJS.ReadableStream} sparqlResponseStream A SPARQL JSON response stream.
       * @return {Promise<boolean>} The response boolean.
       */
      parseJsonBooleanStream(sparqlResponseStream) {
        return new Promise((resolve, reject) => {
          const parser = new JsonParser();
          parser.onError = reject;
          parser.onValue = (value) => {
            if (parser.key === "boolean" && typeof value === "boolean" && parser.stack.length === 1) {
              resolve(value);
            }
          };
          sparqlResponseStream.on("error", reject).on("data", (d) => parser.write(d)).on("end", () => reject(new Error("No valid ASK response was found.")));
        });
      }
    };
    exports.SparqlJsonParser = SparqlJsonParser;
  }
});

// node_modules/sparqljson-parse/index.js
var require_sparqljson_parse = __commonJS({
  "node_modules/sparqljson-parse/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_SparqlJsonParser(), exports);
  }
});

// node_modules/sparqljson-to-tree/lib/Converter.js
var require_Converter2 = __commonJS({
  "node_modules/sparqljson-to-tree/lib/Converter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Converter = void 0;
    var rdf_literal_1 = require_rdf_literal();
    var sparqljson_parse_1 = require_sparqljson_parse();
    var Converter = class _Converter {
      constructor(settings) {
        settings = settings || { delimiter: "_" };
        settings.prefixVariableQuestionMark = false;
        this.delimiter = settings.delimiter || "_";
        this.parser = new sparqljson_parse_1.SparqlJsonParser(settings);
        this.materializeRdfJsTerms = settings.materializeRdfJsTerms;
      }
      /**
       * Adds a value to a tree.
       * @param tree A tree datastructure.
       * @param {string[]} path The path of keys in the tree.
       * @param {Term} value A value to add.
       * @param {string} lastKeyPath The accumulated key path (separated by the given delimiter)
       *                             through recursive calls, can be empty.
       * @param {ISchema} schema A schema.
       * @param {string} delimiter The string to join key paths by.
       */
      static addValueToTree(tree, path, value, lastKeyPath, schema, delimiter) {
        const key = path[0];
        const keyPath = lastKeyPath ? lastKeyPath + delimiter + key : key;
        const singularize = schema.singularizeVariables[keyPath];
        if (path.length === 1) {
          if (singularize) {
            if (!tree[key]) {
              tree[key] = value;
            }
          } else {
            if (!tree[key]) {
              tree[key] = [];
            }
            tree[key].push(value);
          }
        } else {
          let nextNode;
          if (singularize) {
            if (!tree[key]) {
              tree[key] = {};
            }
            nextNode = tree[key];
          } else {
            if (!tree[key]) {
              tree[key] = [{}];
            }
            nextNode = tree[key][0];
          }
          _Converter.addValueToTree(nextNode, path.slice(1), value, keyPath, schema, delimiter);
        }
      }
      /**
       * Recursively merge the two given trees.
       * @param tree1 A first tree (has key priority on literals).
       * @param tree2 A second tree. All arrays will/should only have a single element.
       * @return {any} The merged tree.
       */
      static mergeTrees(tree1, tree2) {
        if (typeof tree1 !== typeof tree2) {
          throw new Error(`Two incompatible tree nodes were found: ${typeof tree1} and ${typeof tree2}`);
        }
        if (Array.isArray(tree1) !== Array.isArray(tree2)) {
          throw new Error(`Two incompatible tree nodes were found: Array?${Array.isArray(tree1)} and Array?${Array.isArray(tree2)}`);
        }
        if (typeof tree1 === "object" && typeof tree2 === "object") {
          if (tree1.termType && tree2.termType) {
            if (tree1.equals(tree2)) {
              return { valid: true, result: tree1 };
            } else {
              return { valid: false, result: tree1 };
            }
          }
          if (Array.isArray(tree1) && Array.isArray(tree2)) {
            if (tree1.length > 0) {
              const merged = [];
              let valid = false;
              for (const tree1Element of tree1) {
                const mergedElement = _Converter.mergeTrees(tree1Element, tree2[0]);
                if (mergedElement.valid) {
                  valid = true;
                  merged.push(mergedElement.result);
                } else {
                  merged.push(tree1Element);
                }
              }
              if (valid) {
                return { valid: true, result: merged };
              }
            }
            return { valid: true, result: tree1.concat(tree2) };
          } else {
            const merged = {};
            for (const key2 in tree2) {
              merged[key2] = tree2[key2];
            }
            for (const key1 in tree1) {
              if (merged[key1]) {
                const mergedElement = _Converter.mergeTrees(tree1[key1], merged[key1]);
                if (mergedElement.valid) {
                  merged[key1] = mergedElement.result;
                } else {
                  return { valid: false, result: tree1 };
                }
              } else {
                merged[key1] = tree1[key1];
              }
            }
            return { valid: true, result: merged };
          }
        } else {
          throw new Error(`Unmergable tree types: ${typeof tree1} and ${typeof tree2}`);
        }
      }
      /**
       * Materialize all RDF terms in the given tree to raw values.
       * This does not mutate the original tree.
       * @param tree A tree.
       * @return {any} A materialized tree.
       */
      static materializeTree(tree) {
        if (tree.termType) {
          return (0, rdf_literal_1.getTermRaw)(tree);
        } else if (Array.isArray(tree)) {
          return tree.map(_Converter.materializeTree);
        } else {
          const materialized = {};
          for (const key in tree) {
            materialized[key] = _Converter.materializeTree(tree[key]);
          }
          return materialized;
        }
      }
      /**
       * Convert a complete SPARQL JSON response to a GraphQL results tree.
       * @param sparqlResponse A SPARQL JSON response.
       * @param {ISchema} schema A schema.
       * @return {any} A GraphQL results tree.
       */
      sparqlJsonResultsToTree(sparqlResponse, schema) {
        return this.bindingsToTree(this.parser.parseJsonResults(sparqlResponse), schema || { singularizeVariables: {} });
      }
      /**
       * Convert an array of bindings to a GraphQL results tree.
       * @param {IBindings[]} bindingsArray An array of bindings.
       * @param {ISchema} schema A schema.
       * @return {any} A GraphQL results tree.
       */
      bindingsToTree(bindingsArray, schema) {
        const singularRoot = schema && schema.singularizeVariables[""];
        let tree = singularRoot ? {} : [];
        for (const bindings of bindingsArray) {
          const subTree = singularRoot ? {} : [{}];
          for (const key in bindings) {
            const path = key.split(this.delimiter);
            const value = bindings[key];
            _Converter.addValueToTree(singularRoot ? subTree : subTree[0], path, value, "", schema, this.delimiter);
          }
          tree = _Converter.mergeTrees(tree, subTree).result;
        }
        if (this.materializeRdfJsTerms) {
          tree = _Converter.materializeTree(tree);
        }
        return tree;
      }
    };
    exports.Converter = Converter;
  }
});

// node_modules/sparqljson-to-tree/index.js
var require_sparqljson_to_tree = __commonJS({
  "node_modules/sparqljson-to-tree/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Converter2(), exports);
  }
});

// node_modules/@comunica/actor-query-result-serialize-tree/lib/ActorQueryResultSerializeTree.js
var require_ActorQueryResultSerializeTree = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-tree/lib/ActorQueryResultSerializeTree.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeTree = void 0;
    var bus_query_result_serialize_1 = require_lib23();
    var context_entries_1 = require_lib4();
    var core_1 = require_lib2();
    var readable_stream_1 = require_browser3();
    var sparqljson_to_tree_1 = require_sparqljson_to_tree();
    var ActorQueryResultSerializeTree = class _ActorQueryResultSerializeTree extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{ "tree": 0.5 }} mediaTypePriorities
       *   \ @defaultNested {{ "tree": "https://comunica.linkeddatafragments.org/#results_tree" }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      /**
       *
       * @param {BindingsStream} bindingsStream
       * @param context
       * @param {IConverterSettings} converterSettings
       * @return {Promise<string>}
       */
      static bindingsStreamToGraphQl(bindingsStream, context, converterSettings) {
        const actionContext = core_1.ActionContext.ensureActionContext(context);
        return new Promise((resolve, reject) => {
          const bindingsArray = [];
          const converter = new sparqljson_to_tree_1.Converter(converterSettings);
          const schema = {
            singularizeVariables: actionContext.get(context_entries_1.KeysInitQuery.graphqlSingularizeVariables) || {}
          };
          bindingsStream.on("error", reject);
          bindingsStream.on("data", (bindings) => {
            bindingsArray.push(Object.fromEntries([...bindings].map(([key, value]) => [key.value, value])));
          });
          bindingsStream.on("end", () => {
            resolve(converter.bindingsToTree(bindingsArray, schema));
          });
        });
      }
      async testHandleChecked(action) {
        if (action.type !== "bindings") {
          throw new Error("This actor can only handle bindings streams.");
        }
        return true;
      }
      async runHandle(action, mediaType) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        const resultStream = action.bindingsStream;
        resultStream.on("error", (error2) => data.emit("error", error2));
        _ActorQueryResultSerializeTree.bindingsStreamToGraphQl(resultStream, action.context, { materializeRdfJsTerms: true }).then((result) => {
          data.push(JSON.stringify(result, null, "  "));
          data.push(null);
        }).catch((error2) => data.emit("error", error2));
        return { data };
      }
    };
    exports.ActorQueryResultSerializeTree = ActorQueryResultSerializeTree;
  }
});

// node_modules/@comunica/actor-query-result-serialize-tree/lib/index.js
var require_lib30 = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-tree/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bindingsStreamToGraphQl = void 0;
    var ActorQueryResultSerializeTree_1 = require_ActorQueryResultSerializeTree();
    var { bindingsStreamToGraphQl } = ActorQueryResultSerializeTree_1.ActorQueryResultSerializeTree;
    exports.bindingsStreamToGraphQl = bindingsStreamToGraphQl;
    __exportStar(require_ActorQueryResultSerializeTree(), exports);
  }
});

// node_modules/@comunica/mediator-combine-union/lib/MediatorCombineUnion.js
var require_MediatorCombineUnion = __commonJS({
  "node_modules/@comunica/mediator-combine-union/lib/MediatorCombineUnion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorCombineUnion = void 0;
    var core_1 = require_lib2();
    var MediatorCombineUnion = class extends core_1.Mediator {
      constructor(args) {
        super(args);
        this.combiner = this.createCombiner();
      }
      async mediate(action) {
        let testResults;
        try {
          testResults = this.publish(action);
        } catch {
          testResults = [];
        }
        await Promise.all(testResults.map(({ reply }) => reply));
        const results = await Promise.all(testResults.map((result) => result.actor.runObservable(action)));
        return this.combiner(results);
      }
      mediateWith() {
        throw new Error("Method not supported.");
      }
      createCombiner() {
        return (results) => {
          const data = {};
          data[this.field] = {};
          [{}].concat(results.map((result) => result[this.field])).forEach((value, index, arr) => {
            data[this.field] = { ...value, ...data[this.field] };
          });
          return data;
        };
      }
    };
    exports.MediatorCombineUnion = MediatorCombineUnion;
  }
});

// node_modules/@comunica/mediator-combine-union/lib/index.js
var require_lib31 = __commonJS({
  "node_modules/@comunica/mediator-combine-union/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MediatorCombineUnion(), exports);
  }
});

// node_modules/@comunica/bus-rdf-join-entries-sort/lib/ActorRdfJoinEntriesSort.js
var require_ActorRdfJoinEntriesSort = __commonJS({
  "node_modules/@comunica/bus-rdf-join-entries-sort/lib/ActorRdfJoinEntriesSort.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinEntriesSort = void 0;
    var core_1 = require_lib2();
    var ActorRdfJoinEntriesSort = class extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfJoinEntriesSort = ActorRdfJoinEntriesSort;
  }
});

// node_modules/@comunica/bus-rdf-join-entries-sort/lib/index.js
var require_lib32 = __commonJS({
  "node_modules/@comunica/bus-rdf-join-entries-sort/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinEntriesSort(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-entries-sort-cardinality/lib/ActorRdfJoinEntriesSortCardinality.js
var require_ActorRdfJoinEntriesSortCardinality = __commonJS({
  "node_modules/@comunica/actor-rdf-join-entries-sort-cardinality/lib/ActorRdfJoinEntriesSortCardinality.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinEntriesSortCardinality = void 0;
    var bus_rdf_join_entries_sort_1 = require_lib32();
    var ActorRdfJoinEntriesSortCardinality = class extends bus_rdf_join_entries_sort_1.ActorRdfJoinEntriesSort {
      constructor(args) {
        super(args);
      }
      async test(action) {
        return true;
      }
      async run(action) {
        const entries = [...action.entries].sort((entryLeft, entryRight) => entryLeft.metadata.cardinality.value - entryRight.metadata.cardinality.value);
        return { entries };
      }
    };
    exports.ActorRdfJoinEntriesSortCardinality = ActorRdfJoinEntriesSortCardinality;
  }
});

// node_modules/@comunica/actor-rdf-join-entries-sort-cardinality/lib/index.js
var require_lib33 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-entries-sort-cardinality/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinEntriesSortCardinality(), exports);
  }
});

// node_modules/@comunica/bus-rdf-join-selectivity/lib/ActorRdfJoinSelectivity.js
var require_ActorRdfJoinSelectivity = __commonJS({
  "node_modules/@comunica/bus-rdf-join-selectivity/lib/ActorRdfJoinSelectivity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinSelectivity = void 0;
    var core_1 = require_lib2();
    var ActorRdfJoinSelectivity = class extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfJoinSelectivity = ActorRdfJoinSelectivity;
  }
});

// node_modules/@comunica/bus-rdf-join-selectivity/lib/index.js
var require_lib34 = __commonJS({
  "node_modules/@comunica/bus-rdf-join-selectivity/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinSelectivity(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-selectivity-variable-counting/lib/ActorRdfJoinSelectivityVariableCounting.js
var require_ActorRdfJoinSelectivityVariableCounting = __commonJS({
  "node_modules/@comunica/actor-rdf-join-selectivity-variable-counting/lib/ActorRdfJoinSelectivityVariableCounting.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JoinTypes = exports.ActorRdfJoinSelectivityVariableCounting = void 0;
    var bus_rdf_join_selectivity_1 = require_lib34();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorRdfJoinSelectivityVariableCounting = class _ActorRdfJoinSelectivityVariableCounting extends bus_rdf_join_selectivity_1.ActorRdfJoinSelectivity {
      constructor(args) {
        super(args);
      }
      async test(action) {
        return { accuracy: 0.5 };
      }
      static getPatternCost(pattern) {
        let cost = 1;
        if (pattern.subject.termType === "Variable") {
          cost += 4;
        }
        if (pattern.predicate.termType === "Variable" || pattern.type === sparqlalgebrajs_1.Algebra.types.PATH) {
          cost += 1;
        }
        if (pattern.object.termType === "Variable") {
          cost += 2;
        }
        if (pattern.graph.termType === "Variable") {
          cost += 1;
        }
        return cost / 9;
      }
      static getJoinTypes(operation1, operation2) {
        const joinTypes = [];
        if (operation1.subject.termType === "Variable") {
          if (operation1.subject.equals(operation2.subject)) {
            joinTypes.push(JoinTypes.unboundSS);
          }
          if (operation2.type === "pattern" && operation1.subject.equals(operation2.predicate)) {
            joinTypes.push(JoinTypes.unboundSP);
          }
          if (operation1.subject.equals(operation2.object)) {
            joinTypes.push(JoinTypes.unboundSO);
          }
          if (operation1.subject.equals(operation2.graph)) {
            joinTypes.push(JoinTypes.unboundSG);
          }
        } else {
          if (operation1.subject.equals(operation2.subject)) {
            joinTypes.push(JoinTypes.boundSS);
          }
          if (operation2.type === "pattern" && operation1.subject.equals(operation2.predicate)) {
            joinTypes.push(JoinTypes.boundSP);
          }
          if (operation1.subject.equals(operation2.object)) {
            joinTypes.push(JoinTypes.boundSO);
          }
          if (operation1.subject.equals(operation2.graph)) {
            joinTypes.push(JoinTypes.boundSG);
          }
        }
        if (operation1.type === "pattern") {
          if (operation1.predicate.termType === "Variable") {
            if (operation1.predicate.equals(operation2.subject)) {
              joinTypes.push(JoinTypes.unboundPS);
            }
            if (operation2.type === "pattern" && operation1.predicate.equals(operation2.predicate)) {
              joinTypes.push(JoinTypes.unboundPP);
            }
            if (operation1.predicate.equals(operation2.object)) {
              joinTypes.push(JoinTypes.unboundPO);
            }
            if (operation1.predicate.equals(operation2.graph)) {
              joinTypes.push(JoinTypes.unboundPG);
            }
          } else {
            if (operation1.predicate.equals(operation2.subject)) {
              joinTypes.push(JoinTypes.boundPS);
            }
            if (operation2.type === "pattern" && operation1.predicate.equals(operation2.predicate)) {
              joinTypes.push(JoinTypes.boundPP);
            }
            if (operation1.predicate.equals(operation2.object)) {
              joinTypes.push(JoinTypes.boundPO);
            }
            if (operation1.predicate.equals(operation2.graph)) {
              joinTypes.push(JoinTypes.boundPG);
            }
          }
        }
        if (operation1.object.termType === "Variable") {
          if (operation1.object.equals(operation2.subject)) {
            joinTypes.push(JoinTypes.unboundOS);
          }
          if (operation2.type === "pattern" && operation1.object.equals(operation2.predicate)) {
            joinTypes.push(JoinTypes.unboundOP);
          }
          if (operation1.object.equals(operation2.object)) {
            joinTypes.push(JoinTypes.unboundOO);
          }
          if (operation1.object.equals(operation2.graph)) {
            joinTypes.push(JoinTypes.unboundOG);
          }
        } else {
          if (operation1.object.equals(operation2.subject)) {
            joinTypes.push(JoinTypes.boundOS);
          }
          if (operation2.type === "pattern" && operation1.object.equals(operation2.predicate)) {
            joinTypes.push(JoinTypes.boundOP);
          }
          if (operation1.object.equals(operation2.object)) {
            joinTypes.push(JoinTypes.boundOO);
          }
          if (operation1.object.equals(operation2.graph)) {
            joinTypes.push(JoinTypes.boundOG);
          }
        }
        if (operation1.graph.termType === "Variable") {
          if (operation1.graph.equals(operation2.subject)) {
            joinTypes.push(JoinTypes.unboundGS);
          }
          if (operation2.type === "pattern" && operation1.graph.equals(operation2.predicate)) {
            joinTypes.push(JoinTypes.unboundGP);
          }
          if (operation1.graph.equals(operation2.object)) {
            joinTypes.push(JoinTypes.unboundGO);
          }
          if (operation1.graph.equals(operation2.graph)) {
            joinTypes.push(JoinTypes.unboundGG);
          }
        } else {
          if (operation1.graph.equals(operation2.subject)) {
            joinTypes.push(JoinTypes.boundGS);
          }
          if (operation2.type === "pattern" && operation1.graph.equals(operation2.predicate)) {
            joinTypes.push(JoinTypes.boundGP);
          }
          if (operation1.graph.equals(operation2.object)) {
            joinTypes.push(JoinTypes.boundGO);
          }
          if (operation1.graph.equals(operation2.graph)) {
            joinTypes.push(JoinTypes.boundGG);
          }
        }
        return joinTypes;
      }
      static getOperationsPairwiseJoinCost(operation1, operation2) {
        let cost = _ActorRdfJoinSelectivityVariableCounting.MAX_PAIRWISE_COST;
        for (const joinType of _ActorRdfJoinSelectivityVariableCounting.getJoinTypes(operation1, operation2)) {
          switch (joinType) {
            case JoinTypes.boundSS:
              cost -= 2 * 2;
              break;
            case JoinTypes.boundSP:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundSO:
              cost -= 1 * 2;
              break;
            case JoinTypes.boundSG:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundPS:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundPP:
              return 1;
            case JoinTypes.boundPO:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundPG:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundOS:
              cost -= 1 * 2;
              break;
            case JoinTypes.boundOP:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundOO:
              cost -= 1 * 2;
              break;
            case JoinTypes.boundOG:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundGS:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundGP:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundGO:
              cost -= 3 * 2;
              break;
            case JoinTypes.boundGG:
              cost -= 3 * 2;
              break;
            case JoinTypes.unboundSS:
              cost -= 2;
              break;
            case JoinTypes.unboundSP:
              cost -= 3;
              break;
            case JoinTypes.unboundSO:
              cost -= 1;
              break;
            case JoinTypes.unboundSG:
              cost -= 3;
              break;
            case JoinTypes.unboundPS:
              cost -= 3;
              break;
            case JoinTypes.unboundPP:
              cost -= 3;
              break;
            case JoinTypes.unboundPO:
              cost -= 3;
              break;
            case JoinTypes.unboundPG:
              cost -= 3;
              break;
            case JoinTypes.unboundOS:
              cost -= 1;
              break;
            case JoinTypes.unboundOP:
              cost -= 3;
              break;
            case JoinTypes.unboundOO:
              cost -= 1;
              break;
            case JoinTypes.unboundOG:
              cost -= 3;
              break;
            case JoinTypes.unboundGS:
              cost -= 3;
              break;
            case JoinTypes.unboundGP:
              cost -= 3;
              break;
            case JoinTypes.unboundGO:
              cost -= 3;
              break;
            case JoinTypes.unboundGG:
              cost -= 3;
              break;
          }
        }
        return cost / _ActorRdfJoinSelectivityVariableCounting.MAX_PAIRWISE_COST;
      }
      static getOperationsJoinCost(operations) {
        const patterns = [];
        for (const operation of operations) {
          sparqlalgebrajs_1.Util.recurseOperation(operation, {
            [sparqlalgebrajs_1.Algebra.types.PATTERN](pattern) {
              patterns.push(pattern);
              return false;
            },
            [sparqlalgebrajs_1.Algebra.types.PATH](path) {
              patterns.push(path);
              return false;
            }
          });
        }
        let totalCost = 0;
        let costEntries = 0;
        for (const pattern1 of patterns) {
          for (const pattern2 of patterns) {
            if (pattern1 !== pattern2) {
              totalCost += _ActorRdfJoinSelectivityVariableCounting.getOperationsPairwiseJoinCost(pattern1, pattern2);
              costEntries++;
            }
          }
        }
        if (costEntries === 0) {
          return 1;
        }
        return totalCost / costEntries * patterns.reduce((factor, pattern) => factor * _ActorRdfJoinSelectivityVariableCounting.getPatternCost(pattern), 1);
      }
      async run(action) {
        if (action.entries.length <= 1) {
          return { selectivity: 1 };
        }
        return {
          selectivity: _ActorRdfJoinSelectivityVariableCounting.getOperationsJoinCost(action.entries.map((entry) => entry.operation))
        };
      }
    };
    exports.ActorRdfJoinSelectivityVariableCounting = ActorRdfJoinSelectivityVariableCounting;
    ActorRdfJoinSelectivityVariableCounting.MAX_PAIRWISE_COST = 41 * 2;
    var JoinTypes;
    (function(JoinTypes2) {
      JoinTypes2[JoinTypes2["boundSS"] = 0] = "boundSS";
      JoinTypes2[JoinTypes2["boundSP"] = 1] = "boundSP";
      JoinTypes2[JoinTypes2["boundSO"] = 2] = "boundSO";
      JoinTypes2[JoinTypes2["boundSG"] = 3] = "boundSG";
      JoinTypes2[JoinTypes2["boundPS"] = 4] = "boundPS";
      JoinTypes2[JoinTypes2["boundPP"] = 5] = "boundPP";
      JoinTypes2[JoinTypes2["boundPO"] = 6] = "boundPO";
      JoinTypes2[JoinTypes2["boundPG"] = 7] = "boundPG";
      JoinTypes2[JoinTypes2["boundOS"] = 8] = "boundOS";
      JoinTypes2[JoinTypes2["boundOP"] = 9] = "boundOP";
      JoinTypes2[JoinTypes2["boundOO"] = 10] = "boundOO";
      JoinTypes2[JoinTypes2["boundOG"] = 11] = "boundOG";
      JoinTypes2[JoinTypes2["boundGS"] = 12] = "boundGS";
      JoinTypes2[JoinTypes2["boundGP"] = 13] = "boundGP";
      JoinTypes2[JoinTypes2["boundGO"] = 14] = "boundGO";
      JoinTypes2[JoinTypes2["boundGG"] = 15] = "boundGG";
      JoinTypes2[JoinTypes2["unboundSS"] = 16] = "unboundSS";
      JoinTypes2[JoinTypes2["unboundSP"] = 17] = "unboundSP";
      JoinTypes2[JoinTypes2["unboundSO"] = 18] = "unboundSO";
      JoinTypes2[JoinTypes2["unboundSG"] = 19] = "unboundSG";
      JoinTypes2[JoinTypes2["unboundPS"] = 20] = "unboundPS";
      JoinTypes2[JoinTypes2["unboundPP"] = 21] = "unboundPP";
      JoinTypes2[JoinTypes2["unboundPO"] = 22] = "unboundPO";
      JoinTypes2[JoinTypes2["unboundPG"] = 23] = "unboundPG";
      JoinTypes2[JoinTypes2["unboundOS"] = 24] = "unboundOS";
      JoinTypes2[JoinTypes2["unboundOP"] = 25] = "unboundOP";
      JoinTypes2[JoinTypes2["unboundOO"] = 26] = "unboundOO";
      JoinTypes2[JoinTypes2["unboundOG"] = 27] = "unboundOG";
      JoinTypes2[JoinTypes2["unboundGS"] = 28] = "unboundGS";
      JoinTypes2[JoinTypes2["unboundGP"] = 29] = "unboundGP";
      JoinTypes2[JoinTypes2["unboundGO"] = 30] = "unboundGO";
      JoinTypes2[JoinTypes2["unboundGG"] = 31] = "unboundGG";
    })(JoinTypes || (exports.JoinTypes = JoinTypes = {}));
  }
});

// node_modules/@comunica/actor-rdf-join-selectivity-variable-counting/lib/index.js
var require_lib35 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-selectivity-variable-counting/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinSelectivityVariableCounting(), exports);
  }
});

// node_modules/@comunica/mediator-number/lib/MediatorNumber.js
var require_MediatorNumber = __commonJS({
  "node_modules/@comunica/mediator-number/lib/MediatorNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorNumber = void 0;
    var core_1 = require_lib2();
    var MediatorNumber = class extends core_1.Mediator {
      constructor(args) {
        super(args);
        this.indexPicker = this.createIndexPicker();
      }
      /**
       * @return {(tests: T[]) => number} A function that returns the index of the test result
       *                                  that has been chosen by this mediator.
       */
      createIndexPicker() {
        switch (this.type) {
          case "min":
            return (tests) => tests.reduce((prev, curr, i2) => {
              const val = this.getOrDefault(curr[this.field], Number.POSITIVE_INFINITY);
              return val !== null && (Number.isNaN(prev[0]) || prev[0] > val) ? [val, i2] : prev;
            }, [Number.NaN, -1])[1];
          case "max":
            return (tests) => tests.reduce((prev, curr, i2) => {
              const val = this.getOrDefault(curr[this.field], Number.NEGATIVE_INFINITY);
              return val !== null && (Number.isNaN(prev[0]) || prev[0] < val) ? [val, i2] : prev;
            }, [Number.NaN, -1])[1];
          default:
            throw new Error(`No valid "type" value was given, must be either 'min' or 'max', but got: ${this.type}`);
        }
      }
      getOrDefault(value, defaultValue) {
        return value === void 0 ? defaultValue : value;
      }
      async mediateWith(action, testResults) {
        let promises = testResults.map(({ reply }) => reply);
        const errors = [];
        if (this.ignoreErrors) {
          const dummy = {};
          dummy[this.field] = null;
          promises = promises.map((promise) => promise.catch((error2) => {
            errors.push(error2);
            return dummy;
          }));
        }
        const results = await Promise.all(promises);
        const index = this.indexPicker(results);
        if (index < 0) {
          throw new Error(`All actors rejected their test in ${this.name}
${errors.map((error2) => error2.message).join("\n")}`);
        }
        return testResults[index].actor;
      }
    };
    exports.MediatorNumber = MediatorNumber;
  }
});

// node_modules/@comunica/mediator-number/lib/index.js
var require_lib36 = __commonJS({
  "node_modules/@comunica/mediator-number/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MediatorNumber(), exports);
  }
});

// node_modules/@comunica/bus-rdf-metadata-accumulate/lib/ActorRdfMetadataAccumulate.js
var require_ActorRdfMetadataAccumulate = __commonJS({
  "node_modules/@comunica/bus-rdf-metadata-accumulate/lib/ActorRdfMetadataAccumulate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataAccumulate = void 0;
    var core_1 = require_lib2();
    var ActorRdfMetadataAccumulate = class extends core_1.Actor {
      /**
      * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
      */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfMetadataAccumulate = ActorRdfMetadataAccumulate;
  }
});

// node_modules/@comunica/bus-rdf-metadata-accumulate/lib/index.js
var require_lib37 = __commonJS({
  "node_modules/@comunica/bus-rdf-metadata-accumulate/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataAccumulate(), exports);
  }
});

// node_modules/@comunica/actor-rdf-metadata-accumulate-cancontainundefs/lib/ActorRdfMetadataAccumulateCanContainUndefs.js
var require_ActorRdfMetadataAccumulateCanContainUndefs = __commonJS({
  "node_modules/@comunica/actor-rdf-metadata-accumulate-cancontainundefs/lib/ActorRdfMetadataAccumulateCanContainUndefs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataAccumulateCanContainUndefs = void 0;
    var bus_rdf_metadata_accumulate_1 = require_lib37();
    var ActorRdfMetadataAccumulateCanContainUndefs = class extends bus_rdf_metadata_accumulate_1.ActorRdfMetadataAccumulate {
      constructor(args) {
        super(args);
      }
      async test(action) {
        return true;
      }
      async run(action) {
        if (action.mode === "initialize") {
          return { metadata: { canContainUndefs: false } };
        }
        let canContainUndefs = action.accumulatedMetadata.canContainUndefs;
        if (action.appendingMetadata.canContainUndefs) {
          canContainUndefs = true;
        }
        return { metadata: { canContainUndefs } };
      }
    };
    exports.ActorRdfMetadataAccumulateCanContainUndefs = ActorRdfMetadataAccumulateCanContainUndefs;
  }
});

// node_modules/@comunica/actor-rdf-metadata-accumulate-cancontainundefs/lib/index.js
var require_lib38 = __commonJS({
  "node_modules/@comunica/actor-rdf-metadata-accumulate-cancontainundefs/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataAccumulateCanContainUndefs(), exports);
  }
});

// node_modules/@comunica/actor-rdf-metadata-accumulate-cardinality/lib/ActorRdfMetadataAccumulateCardinality.js
var require_ActorRdfMetadataAccumulateCardinality = __commonJS({
  "node_modules/@comunica/actor-rdf-metadata-accumulate-cardinality/lib/ActorRdfMetadataAccumulateCardinality.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataAccumulateCardinality = void 0;
    var bus_rdf_metadata_accumulate_1 = require_lib37();
    var ActorRdfMetadataAccumulateCardinality = class extends bus_rdf_metadata_accumulate_1.ActorRdfMetadataAccumulate {
      constructor(args) {
        super(args);
      }
      async test(action) {
        return true;
      }
      async run(action) {
        if (action.mode === "initialize") {
          return { metadata: { cardinality: { type: "exact", value: 0 } } };
        }
        const cardinality = { ...action.accumulatedMetadata.cardinality };
        if (cardinality.dataset) {
          if (action.appendingMetadata.cardinality.dataset) {
            if (cardinality.dataset !== action.appendingMetadata.cardinality.dataset && action.appendingMetadata.subsetOf === cardinality.dataset) {
              return { metadata: { cardinality: action.appendingMetadata.cardinality } };
            }
            if (cardinality.dataset !== action.appendingMetadata.cardinality.dataset) {
              delete cardinality.dataset;
            } else {
              return { metadata: { cardinality } };
            }
          } else {
            return { metadata: { cardinality } };
          }
        }
        if (!action.appendingMetadata.cardinality || !Number.isFinite(action.appendingMetadata.cardinality.value)) {
          cardinality.type = "estimate";
          cardinality.value = Number.POSITIVE_INFINITY;
        } else {
          if (action.appendingMetadata.cardinality.type === "estimate") {
            cardinality.type = "estimate";
          }
          cardinality.value += action.appendingMetadata.cardinality.value;
        }
        return { metadata: { cardinality } };
      }
    };
    exports.ActorRdfMetadataAccumulateCardinality = ActorRdfMetadataAccumulateCardinality;
  }
});

// node_modules/@comunica/actor-rdf-metadata-accumulate-cardinality/lib/index.js
var require_lib39 = __commonJS({
  "node_modules/@comunica/actor-rdf-metadata-accumulate-cardinality/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataAccumulateCardinality(), exports);
  }
});

// node_modules/@comunica/actor-rdf-metadata-accumulate-pagesize/lib/ActorRdfMetadataAccumulatePageSize.js
var require_ActorRdfMetadataAccumulatePageSize = __commonJS({
  "node_modules/@comunica/actor-rdf-metadata-accumulate-pagesize/lib/ActorRdfMetadataAccumulatePageSize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataAccumulatePageSize = void 0;
    var bus_rdf_metadata_accumulate_1 = require_lib37();
    var ActorRdfMetadataAccumulatePageSize = class extends bus_rdf_metadata_accumulate_1.ActorRdfMetadataAccumulate {
      constructor(args) {
        super(args);
      }
      async test(action) {
        return true;
      }
      async run(action) {
        if (action.mode === "initialize") {
          return { metadata: {} };
        }
        return {
          metadata: {
            ..."pageSize" in action.accumulatedMetadata || "pageSize" in action.appendingMetadata ? {
              pageSize: (action.accumulatedMetadata.pageSize || 0) + (action.appendingMetadata.pageSize || 0)
            } : {}
          }
        };
      }
    };
    exports.ActorRdfMetadataAccumulatePageSize = ActorRdfMetadataAccumulatePageSize;
  }
});

// node_modules/@comunica/actor-rdf-metadata-accumulate-pagesize/lib/index.js
var require_lib40 = __commonJS({
  "node_modules/@comunica/actor-rdf-metadata-accumulate-pagesize/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataAccumulatePageSize(), exports);
  }
});

// node_modules/@comunica/actor-rdf-metadata-accumulate-requesttime/lib/ActorRdfMetadataAccumulateRequestTime.js
var require_ActorRdfMetadataAccumulateRequestTime = __commonJS({
  "node_modules/@comunica/actor-rdf-metadata-accumulate-requesttime/lib/ActorRdfMetadataAccumulateRequestTime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfMetadataAccumulateRequestTime = void 0;
    var bus_rdf_metadata_accumulate_1 = require_lib37();
    var ActorRdfMetadataAccumulateRequestTime = class extends bus_rdf_metadata_accumulate_1.ActorRdfMetadataAccumulate {
      constructor(args) {
        super(args);
      }
      async test(action) {
        return true;
      }
      async run(action) {
        if (action.mode === "initialize") {
          return { metadata: {} };
        }
        return {
          metadata: {
            ..."requestTime" in action.accumulatedMetadata || "requestTime" in action.appendingMetadata ? {
              requestTime: (action.accumulatedMetadata.requestTime || 0) + (action.appendingMetadata.requestTime || 0)
            } : {}
          }
        };
      }
    };
    exports.ActorRdfMetadataAccumulateRequestTime = ActorRdfMetadataAccumulateRequestTime;
  }
});

// node_modules/@comunica/actor-rdf-metadata-accumulate-requesttime/lib/index.js
var require_lib41 = __commonJS({
  "node_modules/@comunica/actor-rdf-metadata-accumulate-requesttime/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfMetadataAccumulateRequestTime(), exports);
  }
});

// node_modules/@comunica/bus-rdf-serialize/lib/ActorRdfSerialize.js
var require_ActorRdfSerialize = __commonJS({
  "node_modules/@comunica/bus-rdf-serialize/lib/ActorRdfSerialize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfSerialize = void 0;
    var actor_abstract_mediatyped_1 = require_lib22();
    var ActorRdfSerialize = class extends actor_abstract_mediatyped_1.ActorAbstractMediaTyped {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfSerialize = ActorRdfSerialize;
  }
});

// node_modules/@comunica/bus-rdf-serialize/lib/ActorRdfSerializeFixedMediaTypes.js
var require_ActorRdfSerializeFixedMediaTypes = __commonJS({
  "node_modules/@comunica/bus-rdf-serialize/lib/ActorRdfSerializeFixedMediaTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfSerializeFixedMediaTypes = void 0;
    var actor_abstract_mediatyped_1 = require_lib22();
    var ActorRdfSerializeFixedMediaTypes = class extends actor_abstract_mediatyped_1.ActorAbstractMediaTypedFixed {
      /* eslint-disable max-len */
      /**
       * TODO: rm this (and eslint-disable) once we remove the abstract media typed actor
       * @param args - @defaultNested {<cbrs:components/ActorRdfSerialize.jsonld#ActorRdfSerialize_default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
      /* eslint-enable max-len */
      async testHandleChecked(action) {
        return true;
      }
    };
    exports.ActorRdfSerializeFixedMediaTypes = ActorRdfSerializeFixedMediaTypes;
  }
});

// node_modules/@comunica/bus-rdf-serialize/lib/index.js
var require_lib42 = __commonJS({
  "node_modules/@comunica/bus-rdf-serialize/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfSerialize(), exports);
    __exportStar(require_ActorRdfSerializeFixedMediaTypes(), exports);
  }
});

// node_modules/n3/lib/IRIs.js
var require_IRIs = __commonJS({
  "node_modules/n3/lib/IRIs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    var XSD = "http://www.w3.org/2001/XMLSchema#";
    var SWAP = "http://www.w3.org/2000/10/swap/";
    var _default = exports.default = {
      xsd: {
        decimal: `${XSD}decimal`,
        boolean: `${XSD}boolean`,
        double: `${XSD}double`,
        integer: `${XSD}integer`,
        string: `${XSD}string`
      },
      rdf: {
        type: `${RDF}type`,
        nil: `${RDF}nil`,
        first: `${RDF}first`,
        rest: `${RDF}rest`,
        langString: `${RDF}langString`
      },
      owl: {
        sameAs: "http://www.w3.org/2002/07/owl#sameAs"
      },
      r: {
        forSome: `${SWAP}reify#forSome`,
        forAll: `${SWAP}reify#forAll`
      },
      log: {
        implies: `${SWAP}log#implies`
      }
    };
  }
});

// node_modules/queue-microtask/index.js
var require_queue_microtask = __commonJS({
  "node_modules/queue-microtask/index.js"(exports, module) {
    var promise;
    module.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
      throw err;
    }, 0));
  }
});

// node_modules/n3/lib/N3Lexer.js
var require_N3Lexer = __commonJS({
  "node_modules/n3/lib/N3Lexer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _IRIs = _interopRequireDefault(require_IRIs());
    var _queueMicrotask = _interopRequireDefault(require_queue_microtask());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var {
      xsd
    } = _IRIs.default;
    var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\([^])/g;
    var escapeReplacements = {
      "\\": "\\",
      "'": "'",
      '"': '"',
      "n": "\n",
      "r": "\r",
      "t": "	",
      "f": "\f",
      "b": "\b",
      "_": "_",
      "~": "~",
      ".": ".",
      "-": "-",
      "!": "!",
      "$": "$",
      "&": "&",
      "(": "(",
      ")": ")",
      "*": "*",
      "+": "+",
      ",": ",",
      ";": ";",
      "=": "=",
      "/": "/",
      "?": "?",
      "#": "#",
      "@": "@",
      "%": "%"
    };
    var illegalIriChars = /[\x00-\x20<>\\"\{\}\|\^\`]/;
    var lineModeRegExps = {
      _iri: true,
      _unescapedIri: true,
      _simpleQuotedString: true,
      _langcode: true,
      _blank: true,
      _newline: true,
      _comment: true,
      _whitespace: true,
      _endOfFile: true
    };
    var invalidRegExp = /$0^/;
    var N3Lexer = class {
      constructor(options) {
        this._iri = /^<((?:[^ <>{}\\]|\\[uU])+)>[ \t]*/;
        this._unescapedIri = /^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>[ \t]*/;
        this._simpleQuotedString = /^"([^"\\\r\n]*)"(?=[^"])/;
        this._simpleApostropheString = /^'([^'\\\r\n]*)'(?=[^'])/;
        this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i;
        this._prefix = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/;
        this._prefixed = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?:[ \t]+|(?=\.?[,;!\^\s#()\[\]\{\}"'<>]))/;
        this._variable = /^\?(?:(?:[A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=[.,;!\^\s#()\[\]\{\}"'<>])/;
        this._blank = /^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?:[ \t]+|(?=\.?[,;:\s#()\[\]\{\}"'<>]))/;
        this._number = /^[\-+]?(?:(\d+\.\d*|\.?\d+)[eE][\-+]?|\d*(\.)?)\d+(?=\.?[,;:\s#()\[\]\{\}"'<>])/;
        this._boolean = /^(?:true|false)(?=[.,;\s#()\[\]\{\}"'<>])/;
        this._keyword = /^@[a-z]+(?=[\s#<:])/i;
        this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\s#<])/i;
        this._shortPredicates = /^a(?=[\s#()\[\]\{\}"'<>])/;
        this._newline = /^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/;
        this._comment = /#([^\n\r]*)/;
        this._whitespace = /^[ \t]+/;
        this._endOfFile = /^(?:#[^\n\r]*)?$/;
        options = options || {};
        if (this._lineMode = !!options.lineMode) {
          this._n3Mode = false;
          for (const key in this) {
            if (!(key in lineModeRegExps) && this[key] instanceof RegExp)
              this[key] = invalidRegExp;
          }
        } else {
          this._n3Mode = options.n3 !== false;
        }
        this._comments = !!options.comments;
        this._literalClosingPos = 0;
      }
      // ## Private methods
      // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback
      _tokenizeToEnd(callback, inputFinished) {
        let input = this._input;
        let currentLineLength = input.length;
        while (true) {
          let whiteSpaceMatch, comment;
          while (whiteSpaceMatch = this._newline.exec(input)) {
            if (this._comments && (comment = this._comment.exec(whiteSpaceMatch[0])))
              emitToken("comment", comment[1], "", this._line, whiteSpaceMatch[0].length);
            input = input.substr(whiteSpaceMatch[0].length, input.length);
            currentLineLength = input.length;
            this._line++;
          }
          if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))
            input = input.substr(whiteSpaceMatch[0].length, input.length);
          if (this._endOfFile.test(input)) {
            if (inputFinished) {
              if (this._comments && (comment = this._comment.exec(input)))
                emitToken("comment", comment[1], "", this._line, input.length);
              input = null;
              emitToken("eof", "", "", this._line, 0);
            }
            return this._input = input;
          }
          const line = this._line, firstChar = input[0];
          let type = "", value = "", prefix = "", match = null, matchLength = 0, inconclusive = false;
          switch (firstChar) {
            case "^":
              if (input.length < 3)
                break;
              else if (input[1] === "^") {
                this._previousMarker = "^^";
                input = input.substr(2);
                if (input[0] !== "<") {
                  inconclusive = true;
                  break;
                }
              } else {
                if (this._n3Mode) {
                  matchLength = 1;
                  type = "^";
                }
                break;
              }
            case "<":
              if (match = this._unescapedIri.exec(input))
                type = "IRI", value = match[1];
              else if (match = this._iri.exec(input)) {
                value = this._unescape(match[1]);
                if (value === null || illegalIriChars.test(value))
                  return reportSyntaxError(this);
                type = "IRI";
              } else if (input.length > 1 && input[1] === "<")
                type = "<<", matchLength = 2;
              else if (this._n3Mode && input.length > 1 && input[1] === "=")
                type = "inverse", matchLength = 2, value = ">";
              break;
            case ">":
              if (input.length > 1 && input[1] === ">")
                type = ">>", matchLength = 2;
              break;
            case "_":
              if ((match = this._blank.exec(input)) || inputFinished && (match = this._blank.exec(`${input} `)))
                type = "blank", prefix = "_", value = match[1];
              break;
            case '"':
              if (match = this._simpleQuotedString.exec(input))
                value = match[1];
              else {
                ({
                  value,
                  matchLength
                } = this._parseLiteral(input));
                if (value === null)
                  return reportSyntaxError(this);
              }
              if (match !== null || matchLength !== 0) {
                type = "literal";
                this._literalClosingPos = 0;
              }
              break;
            case "'":
              if (!this._lineMode) {
                if (match = this._simpleApostropheString.exec(input))
                  value = match[1];
                else {
                  ({
                    value,
                    matchLength
                  } = this._parseLiteral(input));
                  if (value === null)
                    return reportSyntaxError(this);
                }
                if (match !== null || matchLength !== 0) {
                  type = "literal";
                  this._literalClosingPos = 0;
                }
              }
              break;
            case "?":
              if (this._n3Mode && (match = this._variable.exec(input)))
                type = "var", value = match[0];
              break;
            case "@":
              if (this._previousMarker === "literal" && (match = this._langcode.exec(input)))
                type = "langcode", value = match[1];
              else if (match = this._keyword.exec(input))
                type = match[0];
              break;
            case ".":
              if (input.length === 1 ? inputFinished : input[1] < "0" || input[1] > "9") {
                type = ".";
                matchLength = 1;
                break;
              }
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
            case "+":
            case "-":
              if (match = this._number.exec(input) || inputFinished && (match = this._number.exec(`${input} `))) {
                type = "literal", value = match[0];
                prefix = typeof match[1] === "string" ? xsd.double : typeof match[2] === "string" ? xsd.decimal : xsd.integer;
              }
              break;
            case "B":
            case "b":
            case "p":
            case "P":
            case "G":
            case "g":
              if (match = this._sparqlKeyword.exec(input))
                type = match[0].toUpperCase();
              else
                inconclusive = true;
              break;
            case "f":
            case "t":
              if (match = this._boolean.exec(input))
                type = "literal", value = match[0], prefix = xsd.boolean;
              else
                inconclusive = true;
              break;
            case "a":
              if (match = this._shortPredicates.exec(input))
                type = "abbreviation", value = "a";
              else
                inconclusive = true;
              break;
            case "=":
              if (this._n3Mode && input.length > 1) {
                type = "abbreviation";
                if (input[1] !== ">")
                  matchLength = 1, value = "=";
                else
                  matchLength = 2, value = ">";
              }
              break;
            case "!":
              if (!this._n3Mode)
                break;
            case ",":
            case ";":
            case "[":
            case "]":
            case "(":
            case ")":
            case "}":
              if (!this._lineMode) {
                matchLength = 1;
                type = firstChar;
              }
              break;
            case "{":
              if (!this._lineMode && input.length >= 2) {
                if (input[1] === "|")
                  type = "{|", matchLength = 2;
                else
                  type = firstChar, matchLength = 1;
              }
              break;
            case "|":
              if (input.length >= 2 && input[1] === "}")
                type = "|}", matchLength = 2;
              break;
            default:
              inconclusive = true;
          }
          if (inconclusive) {
            if ((this._previousMarker === "@prefix" || this._previousMarker === "PREFIX") && (match = this._prefix.exec(input)))
              type = "prefix", value = match[1] || "";
            else if ((match = this._prefixed.exec(input)) || inputFinished && (match = this._prefixed.exec(`${input} `)))
              type = "prefixed", prefix = match[1] || "", value = this._unescape(match[2]);
          }
          if (this._previousMarker === "^^") {
            switch (type) {
              case "prefixed":
                type = "type";
                break;
              case "IRI":
                type = "typeIRI";
                break;
              default:
                type = "";
            }
          }
          if (!type) {
            if (inputFinished || !/^'''|^"""/.test(input) && /\n|\r/.test(input))
              return reportSyntaxError(this);
            else
              return this._input = input;
          }
          const length = matchLength || match[0].length;
          const token = emitToken(type, value, prefix, line, length);
          this.previousToken = token;
          this._previousMarker = type;
          input = input.substr(length, input.length);
        }
        function emitToken(type, value, prefix, line, length) {
          const start = input ? currentLineLength - input.length : currentLineLength;
          const end = start + length;
          const token = {
            type,
            value,
            prefix,
            line,
            start,
            end
          };
          callback(null, token);
          return token;
        }
        function reportSyntaxError(self2) {
          callback(self2._syntaxError(/^\S*/.exec(input)[0]));
        }
      }
      // ### `_unescape` replaces N3 escape codes by their corresponding characters
      _unescape(item) {
        let invalid = false;
        const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {
          if (typeof unicode4 === "string")
            return String.fromCharCode(Number.parseInt(unicode4, 16));
          if (typeof unicode8 === "string") {
            let charCode = Number.parseInt(unicode8, 16);
            return charCode <= 65535 ? String.fromCharCode(Number.parseInt(unicode8, 16)) : String.fromCharCode(55296 + ((charCode -= 65536) >> 10), 56320 + (charCode & 1023));
          }
          if (escapedChar in escapeReplacements)
            return escapeReplacements[escapedChar];
          invalid = true;
          return "";
        });
        return invalid ? null : replaced;
      }
      // ### `_parseLiteral` parses a literal into an unescaped value
      _parseLiteral(input) {
        if (input.length >= 3) {
          const opening = input.match(/^(?:"""|"|'''|'|)/)[0];
          const openingLength = opening.length;
          let closingPos = Math.max(this._literalClosingPos, openingLength);
          while ((closingPos = input.indexOf(opening, closingPos)) > 0) {
            let backslashCount = 0;
            while (input[closingPos - backslashCount - 1] === "\\")
              backslashCount++;
            if (backslashCount % 2 === 0) {
              const raw = input.substring(openingLength, closingPos);
              const lines = raw.split(/\r\n|\r|\n/).length - 1;
              const matchLength = closingPos + openingLength;
              if (openingLength === 1 && lines !== 0 || openingLength === 3 && this._lineMode)
                break;
              this._line += lines;
              return {
                value: this._unescape(raw),
                matchLength
              };
            }
            closingPos++;
          }
          this._literalClosingPos = input.length - openingLength + 1;
        }
        return {
          value: "",
          matchLength: 0
        };
      }
      // ### `_syntaxError` creates a syntax error for the given issue
      _syntaxError(issue) {
        this._input = null;
        const err = new Error(`Unexpected "${issue}" on line ${this._line}.`);
        err.context = {
          token: void 0,
          line: this._line,
          previousToken: this.previousToken
        };
        return err;
      }
      // ### Strips off any starting UTF BOM mark.
      _readStartingBom(input) {
        return input.startsWith("\uFEFF") ? input.substr(1) : input;
      }
      // ## Public methods
      // ### `tokenize` starts the transformation of an N3 document into an array of tokens.
      // The input can be a string or a stream.
      tokenize(input, callback) {
        this._line = 1;
        if (typeof input === "string") {
          this._input = this._readStartingBom(input);
          if (typeof callback === "function")
            (0, _queueMicrotask.default)(() => this._tokenizeToEnd(callback, true));
          else {
            const tokens = [];
            let error2;
            this._tokenizeToEnd((e, t) => e ? error2 = e : tokens.push(t), true);
            if (error2)
              throw error2;
            return tokens;
          }
        } else {
          this._pendingBuffer = null;
          if (typeof input.setEncoding === "function")
            input.setEncoding("utf8");
          input.on("data", (data) => {
            if (this._input !== null && data.length !== 0) {
              if (this._pendingBuffer) {
                data = Buffer.concat([this._pendingBuffer, data]);
                this._pendingBuffer = null;
              }
              if (data[data.length - 1] & 128) {
                this._pendingBuffer = data;
              } else {
                if (typeof this._input === "undefined")
                  this._input = this._readStartingBom(typeof data === "string" ? data : data.toString());
                else
                  this._input += data;
                this._tokenizeToEnd(callback, false);
              }
            }
          });
          input.on("end", () => {
            if (typeof this._input === "string")
              this._tokenizeToEnd(callback, true);
          });
          input.on("error", callback);
        }
      }
    };
    exports.default = N3Lexer;
  }
});

// node_modules/n3/lib/N3Util.js
var require_N3Util = __commonJS({
  "node_modules/n3/lib/N3Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.inDefaultGraph = inDefaultGraph;
    exports.isBlankNode = isBlankNode;
    exports.isDefaultGraph = isDefaultGraph;
    exports.isLiteral = isLiteral;
    exports.isNamedNode = isNamedNode;
    exports.isVariable = isVariable;
    exports.prefix = prefix;
    exports.prefixes = prefixes;
    var _N3DataFactory = _interopRequireDefault(require_N3DataFactory());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isNamedNode(term) {
      return !!term && term.termType === "NamedNode";
    }
    function isBlankNode(term) {
      return !!term && term.termType === "BlankNode";
    }
    function isLiteral(term) {
      return !!term && term.termType === "Literal";
    }
    function isVariable(term) {
      return !!term && term.termType === "Variable";
    }
    function isDefaultGraph(term) {
      return !!term && term.termType === "DefaultGraph";
    }
    function inDefaultGraph(quad) {
      return isDefaultGraph(quad.graph);
    }
    function prefix(iri, factory3) {
      return prefixes({
        "": iri.value || iri
      }, factory3)("");
    }
    function prefixes(defaultPrefixes, factory3) {
      const prefixes2 = /* @__PURE__ */ Object.create(null);
      for (const prefix2 in defaultPrefixes)
        processPrefix(prefix2, defaultPrefixes[prefix2]);
      factory3 = factory3 || _N3DataFactory.default;
      function processPrefix(prefix2, iri) {
        if (typeof iri === "string") {
          const cache = /* @__PURE__ */ Object.create(null);
          prefixes2[prefix2] = (local) => {
            return cache[local] || (cache[local] = factory3.namedNode(iri + local));
          };
        } else if (!(prefix2 in prefixes2)) {
          throw new Error(`Unknown prefix: ${prefix2}`);
        }
        return prefixes2[prefix2];
      }
      return processPrefix;
    }
  }
});

// node_modules/n3/lib/N3DataFactory.js
var require_N3DataFactory = __commonJS({
  "node_modules/n3/lib/N3DataFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.Variable = exports.Triple = exports.Term = exports.Quad = exports.NamedNode = exports.Literal = exports.DefaultGraph = exports.BlankNode = void 0;
    exports.escapeQuotes = escapeQuotes2;
    exports.termFromId = termFromId;
    exports.termToId = termToId2;
    exports.unescapeQuotes = unescapeQuotes;
    var _IRIs = _interopRequireDefault(require_IRIs());
    var _N3Util = require_N3Util();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var {
      rdf,
      xsd
    } = _IRIs.default;
    var DEFAULTGRAPH;
    var _blankNodeCounter = 0;
    var escapedLiteral2 = /^"(.*".*)(?="[^"]*$)/;
    var DataFactory3 = {
      namedNode,
      blankNode,
      variable,
      literal,
      defaultGraph,
      quad,
      triple: quad
    };
    var _default = exports.default = DataFactory3;
    var Term = class _Term {
      constructor(id) {
        this.id = id;
      }
      // ### The value of this term
      get value() {
        return this.id;
      }
      // ### Returns whether this object represents the same term as the other
      equals(other) {
        if (other instanceof _Term)
          return this.id === other.id;
        return !!other && this.termType === other.termType && this.value === other.value;
      }
      // ### Implement hashCode for Immutable.js, since we implement `equals`
      // https://immutable-js.com/docs/v4.0.0/ValueObject/#hashCode()
      hashCode() {
        return 0;
      }
      // ### Returns a plain object representation of this term
      toJSON() {
        return {
          termType: this.termType,
          value: this.value
        };
      }
    };
    exports.Term = Term;
    var NamedNode2 = class extends Term {
      // ### The term type of this term
      get termType() {
        return "NamedNode";
      }
    };
    exports.NamedNode = NamedNode2;
    var Literal2 = class _Literal extends Term {
      // ### The term type of this term
      get termType() {
        return "Literal";
      }
      // ### The text value of this literal
      get value() {
        return this.id.substring(1, this.id.lastIndexOf('"'));
      }
      // ### The language of this literal
      get language() {
        const id = this.id;
        let atPos = id.lastIndexOf('"') + 1;
        return atPos < id.length && id[atPos++] === "@" ? id.substr(atPos).toLowerCase() : "";
      }
      // ### The datatype IRI of this literal
      get datatype() {
        return new NamedNode2(this.datatypeString);
      }
      // ### The datatype string of this literal
      get datatypeString() {
        const id = this.id, dtPos = id.lastIndexOf('"') + 1;
        const char = dtPos < id.length ? id[dtPos] : "";
        return char === "^" ? id.substr(dtPos + 2) : (
          // If "@" follows, return rdf:langString; xsd:string otherwise
          char !== "@" ? xsd.string : rdf.langString
        );
      }
      // ### Returns whether this object represents the same term as the other
      equals(other) {
        if (other instanceof _Literal)
          return this.id === other.id;
        return !!other && !!other.datatype && this.termType === other.termType && this.value === other.value && this.language === other.language && this.datatype.value === other.datatype.value;
      }
      toJSON() {
        return {
          termType: this.termType,
          value: this.value,
          language: this.language,
          datatype: {
            termType: "NamedNode",
            value: this.datatypeString
          }
        };
      }
    };
    exports.Literal = Literal2;
    var BlankNode2 = class extends Term {
      constructor(name) {
        super(`_:${name}`);
      }
      // ### The term type of this term
      get termType() {
        return "BlankNode";
      }
      // ### The name of this blank node
      get value() {
        return this.id.substr(2);
      }
    };
    exports.BlankNode = BlankNode2;
    var Variable2 = class extends Term {
      constructor(name) {
        super(`?${name}`);
      }
      // ### The term type of this term
      get termType() {
        return "Variable";
      }
      // ### The name of this variable
      get value() {
        return this.id.substr(1);
      }
    };
    exports.Variable = Variable2;
    var DefaultGraph2 = class extends Term {
      constructor() {
        super("");
        return DEFAULTGRAPH || this;
      }
      // ### The term type of this term
      get termType() {
        return "DefaultGraph";
      }
      // ### Returns whether this object represents the same term as the other
      equals(other) {
        return this === other || !!other && this.termType === other.termType;
      }
    };
    exports.DefaultGraph = DefaultGraph2;
    DEFAULTGRAPH = new DefaultGraph2();
    function termFromId(id, factory3, nested) {
      factory3 = factory3 || DataFactory3;
      if (!id)
        return factory3.defaultGraph();
      switch (id[0]) {
        case "?":
          return factory3.variable(id.substr(1));
        case "_":
          return factory3.blankNode(id.substr(2));
        case '"':
          if (factory3 === DataFactory3)
            return new Literal2(id);
          if (id[id.length - 1] === '"')
            return factory3.literal(id.substr(1, id.length - 2));
          const endPos = id.lastIndexOf('"', id.length - 1);
          return factory3.literal(id.substr(1, endPos - 1), id[endPos + 1] === "@" ? id.substr(endPos + 2) : factory3.namedNode(id.substr(endPos + 3)));
        case "[":
          id = JSON.parse(id);
          break;
        default:
          if (!nested || !Array.isArray(id)) {
            return factory3.namedNode(id);
          }
      }
      return factory3.quad(termFromId(id[0], factory3, true), termFromId(id[1], factory3, true), termFromId(id[2], factory3, true), id[3] && termFromId(id[3], factory3, true));
    }
    function termToId2(term, nested) {
      if (typeof term === "string")
        return term;
      if (term instanceof Term && term.termType !== "Quad")
        return term.id;
      if (!term)
        return DEFAULTGRAPH.id;
      switch (term.termType) {
        case "NamedNode":
          return term.value;
        case "BlankNode":
          return `_:${term.value}`;
        case "Variable":
          return `?${term.value}`;
        case "DefaultGraph":
          return "";
        case "Literal":
          return `"${term.value}"${term.language ? `@${term.language}` : term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : ""}`;
        case "Quad":
          const res = [termToId2(term.subject, true), termToId2(term.predicate, true), termToId2(term.object, true)];
          if (!(0, _N3Util.isDefaultGraph)(term.graph)) {
            res.push(termToId2(term.graph, true));
          }
          return nested ? res : JSON.stringify(res);
        default:
          throw new Error(`Unexpected termType: ${term.termType}`);
      }
    }
    var Quad2 = class extends Term {
      constructor(subject, predicate, object, graph) {
        super("");
        this._subject = subject;
        this._predicate = predicate;
        this._object = object;
        this._graph = graph || DEFAULTGRAPH;
      }
      // ### The term type of this term
      get termType() {
        return "Quad";
      }
      get subject() {
        return this._subject;
      }
      get predicate() {
        return this._predicate;
      }
      get object() {
        return this._object;
      }
      get graph() {
        return this._graph;
      }
      // ### Returns a plain object representation of this quad
      toJSON() {
        return {
          termType: this.termType,
          subject: this._subject.toJSON(),
          predicate: this._predicate.toJSON(),
          object: this._object.toJSON(),
          graph: this._graph.toJSON()
        };
      }
      // ### Returns whether this object represents the same quad as the other
      equals(other) {
        return !!other && this._subject.equals(other.subject) && this._predicate.equals(other.predicate) && this._object.equals(other.object) && this._graph.equals(other.graph);
      }
    };
    exports.Triple = exports.Quad = Quad2;
    function escapeQuotes2(id) {
      return id.replace(escapedLiteral2, (_, quoted) => `"${quoted.replace(/"/g, '""')}`);
    }
    function unescapeQuotes(id) {
      return id.replace(escapedLiteral2, (_, quoted) => `"${quoted.replace(/""/g, '"')}`);
    }
    function namedNode(iri) {
      return new NamedNode2(iri);
    }
    function blankNode(name) {
      return new BlankNode2(name || `n3-${_blankNodeCounter++}`);
    }
    function literal(value, languageOrDataType) {
      if (typeof languageOrDataType === "string")
        return new Literal2(`"${value}"@${languageOrDataType.toLowerCase()}`);
      let datatype = languageOrDataType ? languageOrDataType.value : "";
      if (datatype === "") {
        if (typeof value === "boolean")
          datatype = xsd.boolean;
        else if (typeof value === "number") {
          if (Number.isFinite(value))
            datatype = Number.isInteger(value) ? xsd.integer : xsd.double;
          else {
            datatype = xsd.double;
            if (!Number.isNaN(value))
              value = value > 0 ? "INF" : "-INF";
          }
        }
      }
      return datatype === "" || datatype === xsd.string ? new Literal2(`"${value}"`) : new Literal2(`"${value}"^^${datatype}`);
    }
    function variable(name) {
      return new Variable2(name);
    }
    function defaultGraph() {
      return DEFAULTGRAPH;
    }
    function quad(subject, predicate, object, graph) {
      return new Quad2(subject, predicate, object, graph);
    }
  }
});

// node_modules/n3/lib/N3Parser.js
var require_N3Parser = __commonJS({
  "node_modules/n3/lib/N3Parser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _N3Lexer = _interopRequireDefault(require_N3Lexer());
    var _N3DataFactory = _interopRequireDefault(require_N3DataFactory());
    var _IRIs = _interopRequireDefault(require_IRIs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var blankNodePrefix = 0;
    var N3Parser = class {
      constructor(options) {
        this._contextStack = [];
        this._graph = null;
        options = options || {};
        this._setBase(options.baseIRI);
        options.factory && initDataFactory(this, options.factory);
        const format = typeof options.format === "string" ? options.format.match(/\w*$/)[0].toLowerCase() : "", isTurtle = /turtle/.test(format), isTriG = /trig/.test(format), isNTriples = /triple/.test(format), isNQuads = /quad/.test(format), isN3 = this._n3Mode = /n3/.test(format), isLineMode = isNTriples || isNQuads;
        if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))
          this._readPredicateOrNamedGraph = this._readPredicate;
        this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);
        this._supportsRDFStar = format === "" || /star|\*$/.test(format);
        if (isLineMode)
          this._resolveRelativeIRI = (iri) => {
            return null;
          };
        this._blankNodePrefix = typeof options.blankNodePrefix !== "string" ? "" : options.blankNodePrefix.replace(/^(?!_:)/, "_:");
        this._lexer = options.lexer || new _N3Lexer.default({
          lineMode: isLineMode,
          n3: isN3
        });
        this._explicitQuantifiers = !!options.explicitQuantifiers;
      }
      // ## Static class methods
      // ### `_resetBlankNodePrefix` restarts blank node prefix identification
      static _resetBlankNodePrefix() {
        blankNodePrefix = 0;
      }
      // ## Private methods
      // ### `_setBase` sets the base IRI to resolve relative IRIs
      _setBase(baseIRI) {
        if (!baseIRI) {
          this._base = "";
          this._basePath = "";
        } else {
          const fragmentPos = baseIRI.indexOf("#");
          if (fragmentPos >= 0)
            baseIRI = baseIRI.substr(0, fragmentPos);
          this._base = baseIRI;
          this._basePath = baseIRI.indexOf("/") < 0 ? baseIRI : baseIRI.replace(/[^\/?]*(?:\?.*)?$/, "");
          baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i);
          this._baseRoot = baseIRI[0];
          this._baseScheme = baseIRI[1];
        }
      }
      // ### `_saveContext` stores the current parsing context
      // when entering a new scope (list, blank node, formula)
      _saveContext(type, graph, subject, predicate, object) {
        const n3Mode = this._n3Mode;
        this._contextStack.push({
          type,
          subject,
          predicate,
          object,
          graph,
          inverse: n3Mode ? this._inversePredicate : false,
          blankPrefix: n3Mode ? this._prefixes._ : "",
          quantified: n3Mode ? this._quantified : null
        });
        if (n3Mode) {
          this._inversePredicate = false;
          this._prefixes._ = this._graph ? `${this._graph.value}.` : ".";
          this._quantified = Object.create(this._quantified);
        }
      }
      // ### `_restoreContext` restores the parent context
      // when leaving a scope (list, blank node, formula)
      _restoreContext(type, token) {
        const context = this._contextStack.pop();
        if (!context || context.type !== type)
          return this._error(`Unexpected ${token.type}`, token);
        this._subject = context.subject;
        this._predicate = context.predicate;
        this._object = context.object;
        this._graph = context.graph;
        if (this._n3Mode) {
          this._inversePredicate = context.inverse;
          this._prefixes._ = context.blankPrefix;
          this._quantified = context.quantified;
        }
      }
      // ### `_readInTopContext` reads a token when in the top context
      _readInTopContext(token) {
        switch (token.type) {
          case "eof":
            if (this._graph !== null)
              return this._error("Unclosed graph", token);
            delete this._prefixes._;
            return this._callback(null, null, this._prefixes);
          case "PREFIX":
            this._sparqlStyle = true;
          case "@prefix":
            return this._readPrefix;
          case "BASE":
            this._sparqlStyle = true;
          case "@base":
            return this._readBaseIRI;
          case "{":
            if (this._supportsNamedGraphs) {
              this._graph = "";
              this._subject = null;
              return this._readSubject;
            }
          case "GRAPH":
            if (this._supportsNamedGraphs)
              return this._readNamedGraphLabel;
          default:
            return this._readSubject(token);
        }
      }
      // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable
      _readEntity(token, quantifier) {
        let value;
        switch (token.type) {
          case "IRI":
          case "typeIRI":
            const iri = this._resolveIRI(token.value);
            if (iri === null)
              return this._error("Invalid IRI", token);
            value = this._namedNode(iri);
            break;
          case "type":
          case "prefixed":
            const prefix = this._prefixes[token.prefix];
            if (prefix === void 0)
              return this._error(`Undefined prefix "${token.prefix}:"`, token);
            value = this._namedNode(prefix + token.value);
            break;
          case "blank":
            value = this._blankNode(this._prefixes[token.prefix] + token.value);
            break;
          case "var":
            value = this._variable(token.value.substr(1));
            break;
          default:
            return this._error(`Expected entity but got ${token.type}`, token);
        }
        if (!quantifier && this._n3Mode && value.id in this._quantified)
          value = this._quantified[value.id];
        return value;
      }
      // ### `_readSubject` reads a quad's subject
      _readSubject(token) {
        this._predicate = null;
        switch (token.type) {
          case "[":
            this._saveContext("blank", this._graph, this._subject = this._blankNode(), null, null);
            return this._readBlankNodeHead;
          case "(":
            this._saveContext("list", this._graph, this.RDF_NIL, null, null);
            this._subject = null;
            return this._readListItem;
          case "{":
            if (!this._n3Mode)
              return this._error("Unexpected graph", token);
            this._saveContext("formula", this._graph, this._graph = this._blankNode(), null, null);
            return this._readSubject;
          case "}":
            return this._readPunctuation(token);
          case "@forSome":
            if (!this._n3Mode)
              return this._error('Unexpected "@forSome"', token);
            this._subject = null;
            this._predicate = this.N3_FORSOME;
            this._quantifier = this._blankNode;
            return this._readQuantifierList;
          case "@forAll":
            if (!this._n3Mode)
              return this._error('Unexpected "@forAll"', token);
            this._subject = null;
            this._predicate = this.N3_FORALL;
            this._quantifier = this._variable;
            return this._readQuantifierList;
          case "literal":
            if (!this._n3Mode)
              return this._error("Unexpected literal", token);
            if (token.prefix.length === 0) {
              this._literalValue = token.value;
              return this._completeSubjectLiteral;
            } else
              this._subject = this._literal(token.value, this._namedNode(token.prefix));
            break;
          case "<<":
            if (!this._supportsRDFStar)
              return this._error("Unexpected RDF* syntax", token);
            this._saveContext("<<", this._graph, null, null, null);
            this._graph = null;
            return this._readSubject;
          default:
            if ((this._subject = this._readEntity(token)) === void 0)
              return;
            if (this._n3Mode)
              return this._getPathReader(this._readPredicateOrNamedGraph);
        }
        return this._readPredicateOrNamedGraph;
      }
      // ### `_readPredicate` reads a quad's predicate
      _readPredicate(token) {
        const type = token.type;
        switch (type) {
          case "inverse":
            this._inversePredicate = true;
          case "abbreviation":
            this._predicate = this.ABBREVIATIONS[token.value];
            break;
          case ".":
          case "]":
          case "}":
            if (this._predicate === null)
              return this._error(`Unexpected ${type}`, token);
            this._subject = null;
            return type === "]" ? this._readBlankNodeTail(token) : this._readPunctuation(token);
          case ";":
            return this._predicate !== null ? this._readPredicate : this._error("Expected predicate but got ;", token);
          case "[":
            if (this._n3Mode) {
              this._saveContext("blank", this._graph, this._subject, this._subject = this._blankNode(), null);
              return this._readBlankNodeHead;
            }
          case "blank":
            if (!this._n3Mode)
              return this._error("Disallowed blank node as predicate", token);
          default:
            if ((this._predicate = this._readEntity(token)) === void 0)
              return;
        }
        return this._readObject;
      }
      // ### `_readObject` reads a quad's object
      _readObject(token) {
        switch (token.type) {
          case "literal":
            if (token.prefix.length === 0) {
              this._literalValue = token.value;
              return this._readDataTypeOrLang;
            } else
              this._object = this._literal(token.value, this._namedNode(token.prefix));
            break;
          case "[":
            this._saveContext("blank", this._graph, this._subject, this._predicate, this._subject = this._blankNode());
            return this._readBlankNodeHead;
          case "(":
            this._saveContext("list", this._graph, this._subject, this._predicate, this.RDF_NIL);
            this._subject = null;
            return this._readListItem;
          case "{":
            if (!this._n3Mode)
              return this._error("Unexpected graph", token);
            this._saveContext("formula", this._graph, this._subject, this._predicate, this._graph = this._blankNode());
            return this._readSubject;
          case "<<":
            if (!this._supportsRDFStar)
              return this._error("Unexpected RDF* syntax", token);
            this._saveContext("<<", this._graph, this._subject, this._predicate, null);
            this._graph = null;
            return this._readSubject;
          default:
            if ((this._object = this._readEntity(token)) === void 0)
              return;
            if (this._n3Mode)
              return this._getPathReader(this._getContextEndReader());
        }
        return this._getContextEndReader();
      }
      // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph
      _readPredicateOrNamedGraph(token) {
        return token.type === "{" ? this._readGraph(token) : this._readPredicate(token);
      }
      // ### `_readGraph` reads a graph
      _readGraph(token) {
        if (token.type !== "{")
          return this._error(`Expected graph but got ${token.type}`, token);
        this._graph = this._subject, this._subject = null;
        return this._readSubject;
      }
      // ### `_readBlankNodeHead` reads the head of a blank node
      _readBlankNodeHead(token) {
        if (token.type === "]") {
          this._subject = null;
          return this._readBlankNodeTail(token);
        } else {
          this._predicate = null;
          return this._readPredicate(token);
        }
      }
      // ### `_readBlankNodeTail` reads the end of a blank node
      _readBlankNodeTail(token) {
        if (token.type !== "]")
          return this._readBlankNodePunctuation(token);
        if (this._subject !== null)
          this._emit(this._subject, this._predicate, this._object, this._graph);
        const empty = this._predicate === null;
        this._restoreContext("blank", token);
        if (this._object !== null)
          return this._getContextEndReader();
        else if (this._predicate !== null)
          return this._readObject;
        else
          return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;
      }
      // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node
      _readPredicateAfterBlank(token) {
        switch (token.type) {
          case ".":
          case "}":
            this._subject = null;
            return this._readPunctuation(token);
          default:
            return this._readPredicate(token);
        }
      }
      // ### `_readListItem` reads items from a list
      _readListItem(token) {
        let item = null, list = null, next = this._readListItem;
        const previousList = this._subject, stack = this._contextStack, parent = stack[stack.length - 1];
        switch (token.type) {
          case "[":
            this._saveContext("blank", this._graph, list = this._blankNode(), this.RDF_FIRST, this._subject = item = this._blankNode());
            next = this._readBlankNodeHead;
            break;
          case "(":
            this._saveContext("list", this._graph, list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);
            this._subject = null;
            break;
          case ")":
            this._restoreContext("list", token);
            if (stack.length !== 0 && stack[stack.length - 1].type === "list")
              this._emit(this._subject, this._predicate, this._object, this._graph);
            if (this._predicate === null) {
              next = this._readPredicate;
              if (this._subject === this.RDF_NIL)
                return next;
            } else {
              next = this._getContextEndReader();
              if (this._object === this.RDF_NIL)
                return next;
            }
            list = this.RDF_NIL;
            break;
          case "literal":
            if (token.prefix.length === 0) {
              this._literalValue = token.value;
              next = this._readListItemDataTypeOrLang;
            } else {
              item = this._literal(token.value, this._namedNode(token.prefix));
              next = this._getContextEndReader();
            }
            break;
          case "{":
            if (!this._n3Mode)
              return this._error("Unexpected graph", token);
            this._saveContext("formula", this._graph, this._subject, this._predicate, this._graph = this._blankNode());
            return this._readSubject;
          default:
            if ((item = this._readEntity(token)) === void 0)
              return;
        }
        if (list === null)
          this._subject = list = this._blankNode();
        if (previousList === null) {
          if (parent.predicate === null)
            parent.subject = list;
          else
            parent.object = list;
        } else {
          this._emit(previousList, this.RDF_REST, list, this._graph);
        }
        if (item !== null) {
          if (this._n3Mode && (token.type === "IRI" || token.type === "prefixed")) {
            this._saveContext("item", this._graph, list, this.RDF_FIRST, item);
            this._subject = item, this._predicate = null;
            return this._getPathReader(this._readListItem);
          }
          this._emit(list, this.RDF_FIRST, item, this._graph);
        }
        return next;
      }
      // ### `_readDataTypeOrLang` reads an _optional_ datatype or language
      _readDataTypeOrLang(token) {
        return this._completeObjectLiteral(token, false);
      }
      // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list
      _readListItemDataTypeOrLang(token) {
        return this._completeObjectLiteral(token, true);
      }
      // ### `_completeLiteral` completes a literal with an optional datatype or language
      _completeLiteral(token) {
        let literal = this._literal(this._literalValue);
        switch (token.type) {
          case "type":
          case "typeIRI":
            const datatype = this._readEntity(token);
            if (datatype === void 0)
              return;
            literal = this._literal(this._literalValue, datatype);
            token = null;
            break;
          case "langcode":
            literal = this._literal(this._literalValue, token.value);
            token = null;
            break;
        }
        return {
          token,
          literal
        };
      }
      // Completes a literal in subject position
      _completeSubjectLiteral(token) {
        this._subject = this._completeLiteral(token).literal;
        return this._readPredicateOrNamedGraph;
      }
      // Completes a literal in object position
      _completeObjectLiteral(token, listItem) {
        const completed = this._completeLiteral(token);
        if (!completed)
          return;
        this._object = completed.literal;
        if (listItem)
          this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);
        if (completed.token === null)
          return this._getContextEndReader();
        else {
          this._readCallback = this._getContextEndReader();
          return this._readCallback(completed.token);
        }
      }
      // ### `_readFormulaTail` reads the end of a formula
      _readFormulaTail(token) {
        if (token.type !== "}")
          return this._readPunctuation(token);
        if (this._subject !== null)
          this._emit(this._subject, this._predicate, this._object, this._graph);
        this._restoreContext("formula", token);
        return this._object === null ? this._readPredicate : this._getContextEndReader();
      }
      // ### `_readPunctuation` reads punctuation between quads or quad parts
      _readPunctuation(token) {
        let next, graph = this._graph;
        const subject = this._subject, inversePredicate = this._inversePredicate;
        switch (token.type) {
          case "}":
            if (this._graph === null)
              return this._error("Unexpected graph closing", token);
            if (this._n3Mode)
              return this._readFormulaTail(token);
            this._graph = null;
          case ".":
            this._subject = null;
            next = this._contextStack.length ? this._readSubject : this._readInTopContext;
            if (inversePredicate)
              this._inversePredicate = false;
            break;
          case ";":
            next = this._readPredicate;
            break;
          case ",":
            next = this._readObject;
            break;
          case "{|":
            if (!this._supportsRDFStar)
              return this._error("Unexpected RDF* syntax", token);
            const predicate = this._predicate, object = this._object;
            this._subject = this._quad(subject, predicate, object, this.DEFAULTGRAPH);
            next = this._readPredicate;
            break;
          case "|}":
            if (this._subject.termType !== "Quad")
              return this._error("Unexpected asserted triple closing", token);
            this._subject = null;
            next = this._readPunctuation;
            break;
          default:
            if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== void 0) {
              next = this._readQuadPunctuation;
              break;
            }
            return this._error(`Expected punctuation to follow "${this._object.id}"`, token);
        }
        if (subject !== null) {
          const predicate = this._predicate, object = this._object;
          if (!inversePredicate)
            this._emit(subject, predicate, object, graph);
          else
            this._emit(object, predicate, subject, graph);
        }
        return next;
      }
      // ### `_readBlankNodePunctuation` reads punctuation in a blank node
      _readBlankNodePunctuation(token) {
        let next;
        switch (token.type) {
          case ";":
            next = this._readPredicate;
            break;
          case ",":
            next = this._readObject;
            break;
          default:
            return this._error(`Expected punctuation to follow "${this._object.id}"`, token);
        }
        this._emit(this._subject, this._predicate, this._object, this._graph);
        return next;
      }
      // ### `_readQuadPunctuation` reads punctuation after a quad
      _readQuadPunctuation(token) {
        if (token.type !== ".")
          return this._error("Expected dot to follow quad", token);
        return this._readInTopContext;
      }
      // ### `_readPrefix` reads the prefix of a prefix declaration
      _readPrefix(token) {
        if (token.type !== "prefix")
          return this._error("Expected prefix to follow @prefix", token);
        this._prefix = token.value;
        return this._readPrefixIRI;
      }
      // ### `_readPrefixIRI` reads the IRI of a prefix declaration
      _readPrefixIRI(token) {
        if (token.type !== "IRI")
          return this._error(`Expected IRI to follow prefix "${this._prefix}:"`, token);
        const prefixNode = this._readEntity(token);
        this._prefixes[this._prefix] = prefixNode.value;
        this._prefixCallback(this._prefix, prefixNode);
        return this._readDeclarationPunctuation;
      }
      // ### `_readBaseIRI` reads the IRI of a base declaration
      _readBaseIRI(token) {
        const iri = token.type === "IRI" && this._resolveIRI(token.value);
        if (!iri)
          return this._error("Expected valid IRI to follow base declaration", token);
        this._setBase(iri);
        return this._readDeclarationPunctuation;
      }
      // ### `_readNamedGraphLabel` reads the label of a named graph
      _readNamedGraphLabel(token) {
        switch (token.type) {
          case "IRI":
          case "blank":
          case "prefixed":
            return this._readSubject(token), this._readGraph;
          case "[":
            return this._readNamedGraphBlankLabel;
          default:
            return this._error("Invalid graph label", token);
        }
      }
      // ### `_readNamedGraphLabel` reads a blank node label of a named graph
      _readNamedGraphBlankLabel(token) {
        if (token.type !== "]")
          return this._error("Invalid graph label", token);
        this._subject = this._blankNode();
        return this._readGraph;
      }
      // ### `_readDeclarationPunctuation` reads the punctuation of a declaration
      _readDeclarationPunctuation(token) {
        if (this._sparqlStyle) {
          this._sparqlStyle = false;
          return this._readInTopContext(token);
        }
        if (token.type !== ".")
          return this._error("Expected declaration to end with a dot", token);
        return this._readInTopContext;
      }
      // Reads a list of quantified symbols from a @forSome or @forAll statement
      _readQuantifierList(token) {
        let entity;
        switch (token.type) {
          case "IRI":
          case "prefixed":
            if ((entity = this._readEntity(token, true)) !== void 0)
              break;
          default:
            return this._error(`Unexpected ${token.type}`, token);
        }
        if (!this._explicitQuantifiers)
          this._quantified[entity.id] = this._quantifier(this._blankNode().value);
        else {
          if (this._subject === null)
            this._emit(this._graph || this.DEFAULTGRAPH, this._predicate, this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);
          else
            this._emit(this._subject, this.RDF_REST, this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);
          this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);
        }
        return this._readQuantifierPunctuation;
      }
      // Reads punctuation from a @forSome or @forAll statement
      _readQuantifierPunctuation(token) {
        if (token.type === ",")
          return this._readQuantifierList;
        else {
          if (this._explicitQuantifiers) {
            this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);
            this._subject = null;
          }
          this._readCallback = this._getContextEndReader();
          return this._readCallback(token);
        }
      }
      // ### `_getPathReader` reads a potential path and then resumes with the given function
      _getPathReader(afterPath) {
        this._afterPath = afterPath;
        return this._readPath;
      }
      // ### `_readPath` reads a potential path
      _readPath(token) {
        switch (token.type) {
          case "!":
            return this._readForwardPath;
          case "^":
            return this._readBackwardPath;
          default:
            const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];
            if (parent && parent.type === "item") {
              const item = this._subject;
              this._restoreContext("item", token);
              this._emit(this._subject, this.RDF_FIRST, item, this._graph);
            }
            return this._afterPath(token);
        }
      }
      // ### `_readForwardPath` reads a '!' path
      _readForwardPath(token) {
        let subject, predicate;
        const object = this._blankNode();
        if ((predicate = this._readEntity(token)) === void 0)
          return;
        if (this._predicate === null)
          subject = this._subject, this._subject = object;
        else
          subject = this._object, this._object = object;
        this._emit(subject, predicate, object, this._graph);
        return this._readPath;
      }
      // ### `_readBackwardPath` reads a '^' path
      _readBackwardPath(token) {
        const subject = this._blankNode();
        let predicate, object;
        if ((predicate = this._readEntity(token)) === void 0)
          return;
        if (this._predicate === null)
          object = this._subject, this._subject = subject;
        else
          object = this._object, this._object = subject;
        this._emit(subject, predicate, object, this._graph);
        return this._readPath;
      }
      // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple
      _readRDFStarTailOrGraph(token) {
        if (token.type !== ">>") {
          if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== void 0)
            return this._readRDFStarTail;
          return this._error(`Expected >> to follow "${this._object.id}"`, token);
        }
        return this._readRDFStarTail(token);
      }
      // ### `_readRDFStarTail` reads the end of a nested RDF* triple
      _readRDFStarTail(token) {
        if (token.type !== ">>")
          return this._error(`Expected >> but got ${token.type}`, token);
        const quad = this._quad(this._subject, this._predicate, this._object, this._graph || this.DEFAULTGRAPH);
        this._restoreContext("<<", token);
        if (this._subject === null) {
          this._subject = quad;
          return this._readPredicate;
        } else {
          this._object = quad;
          return this._getContextEndReader();
        }
      }
      // ### `_getContextEndReader` gets the next reader function at the end of a context
      _getContextEndReader() {
        const contextStack = this._contextStack;
        if (!contextStack.length)
          return this._readPunctuation;
        switch (contextStack[contextStack.length - 1].type) {
          case "blank":
            return this._readBlankNodeTail;
          case "list":
            return this._readListItem;
          case "formula":
            return this._readFormulaTail;
          case "<<":
            return this._readRDFStarTailOrGraph;
        }
      }
      // ### `_emit` sends a quad through the callback
      _emit(subject, predicate, object, graph) {
        this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));
      }
      // ### `_error` emits an error message through the callback
      _error(message, token) {
        const err = new Error(`${message} on line ${token.line}.`);
        err.context = {
          token,
          line: token.line,
          previousToken: this._lexer.previousToken
        };
        this._callback(err);
        this._callback = noop;
      }
      // ### `_resolveIRI` resolves an IRI against the base path
      _resolveIRI(iri) {
        return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);
      }
      // ### `_resolveRelativeIRI` resolves an IRI against the base path,
      // assuming that a base path has been set and that the IRI is indeed relative
      _resolveRelativeIRI(iri) {
        if (!iri.length)
          return this._base;
        switch (iri[0]) {
          case "#":
            return this._base + iri;
          case "?":
            return this._base.replace(/(?:\?.*)?$/, iri);
          case "/":
            return (iri[1] === "/" ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);
          default:
            return /^[^/:]*:/.test(iri) ? null : this._removeDotSegments(this._basePath + iri);
        }
      }
      // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986
      _removeDotSegments(iri) {
        if (!/(^|\/)\.\.?($|[/#?])/.test(iri))
          return iri;
        const length = iri.length;
        let result = "", i2 = -1, pathStart = -1, segmentStart = 0, next = "/";
        while (i2 < length) {
          switch (next) {
            case ":":
              if (pathStart < 0) {
                if (iri[++i2] === "/" && iri[++i2] === "/")
                  while ((pathStart = i2 + 1) < length && iri[pathStart] !== "/")
                    i2 = pathStart;
              }
              break;
            case "?":
            case "#":
              i2 = length;
              break;
            case "/":
              if (iri[i2 + 1] === ".") {
                next = iri[++i2 + 1];
                switch (next) {
                  case "/":
                    result += iri.substring(segmentStart, i2 - 1);
                    segmentStart = i2 + 1;
                    break;
                  case void 0:
                  case "?":
                  case "#":
                    return result + iri.substring(segmentStart, i2) + iri.substr(i2 + 1);
                  case ".":
                    next = iri[++i2 + 1];
                    if (next === void 0 || next === "/" || next === "?" || next === "#") {
                      result += iri.substring(segmentStart, i2 - 2);
                      if ((segmentStart = result.lastIndexOf("/")) >= pathStart)
                        result = result.substr(0, segmentStart);
                      if (next !== "/")
                        return `${result}/${iri.substr(i2 + 1)}`;
                      segmentStart = i2 + 1;
                    }
                }
              }
          }
          next = iri[++i2];
        }
        return result + iri.substring(segmentStart);
      }
      // ## Public methods
      // ### `parse` parses the N3 input and emits each parsed quad through the callback
      parse(input, quadCallback, prefixCallback) {
        this._readCallback = this._readInTopContext;
        this._sparqlStyle = false;
        this._prefixes = /* @__PURE__ */ Object.create(null);
        this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2) : `b${blankNodePrefix++}_`;
        this._prefixCallback = prefixCallback || noop;
        this._inversePredicate = false;
        this._quantified = /* @__PURE__ */ Object.create(null);
        if (!quadCallback) {
          const quads = [];
          let error2;
          this._callback = (e, t) => {
            e ? error2 = e : t && quads.push(t);
          };
          this._lexer.tokenize(input).every((token) => {
            return this._readCallback = this._readCallback(token);
          });
          if (error2)
            throw error2;
          return quads;
        }
        this._callback = quadCallback;
        this._lexer.tokenize(input, (error2, token) => {
          if (error2 !== null)
            this._callback(error2), this._callback = noop;
          else if (this._readCallback)
            this._readCallback = this._readCallback(token);
        });
      }
    };
    exports.default = N3Parser;
    function noop() {
    }
    function initDataFactory(parser, factory3) {
      const namedNode = factory3.namedNode;
      parser._namedNode = namedNode;
      parser._blankNode = factory3.blankNode;
      parser._literal = factory3.literal;
      parser._variable = factory3.variable;
      parser._quad = factory3.quad;
      parser.DEFAULTGRAPH = factory3.defaultGraph();
      parser.RDF_FIRST = namedNode(_IRIs.default.rdf.first);
      parser.RDF_REST = namedNode(_IRIs.default.rdf.rest);
      parser.RDF_NIL = namedNode(_IRIs.default.rdf.nil);
      parser.N3_FORALL = namedNode(_IRIs.default.r.forAll);
      parser.N3_FORSOME = namedNode(_IRIs.default.r.forSome);
      parser.ABBREVIATIONS = {
        "a": namedNode(_IRIs.default.rdf.type),
        "=": namedNode(_IRIs.default.owl.sameAs),
        ">": namedNode(_IRIs.default.log.implies)
      };
      parser.QUANTIFIERS_GRAPH = namedNode("urn:n3:quantifiers");
    }
    initDataFactory(N3Parser.prototype, _N3DataFactory.default);
  }
});

// node_modules/n3/lib/N3Writer.js
var require_N3Writer = __commonJS({
  "node_modules/n3/lib/N3Writer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _IRIs = _interopRequireDefault(require_IRIs());
    var _N3DataFactory = _interopRequireWildcard(require_N3DataFactory());
    var _N3Util = require_N3Util();
    function _getRequireWildcardCache(e) {
      if ("function" != typeof WeakMap)
        return null;
      var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(e2) {
        return e2 ? t : r;
      })(e);
    }
    function _interopRequireWildcard(e, r) {
      if (!r && e && e.__esModule)
        return e;
      if (null === e || "object" != typeof e && "function" != typeof e)
        return { default: e };
      var t = _getRequireWildcardCache(r);
      if (t && t.has(e))
        return t.get(e);
      var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u in e)
        if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
          var i2 = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n, u, i2) : n[u] = e[u];
        }
      return n.default = e, t && t.set(e, n), n;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var DEFAULTGRAPH = _N3DataFactory.default.defaultGraph();
    var {
      rdf,
      xsd
    } = _IRIs.default;
    var escape = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/;
    var escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g;
    var escapedCharacters = {
      "\\": "\\\\",
      '"': '\\"',
      "	": "\\t",
      "\n": "\\n",
      "\r": "\\r",
      "\b": "\\b",
      "\f": "\\f"
    };
    var SerializedTerm = class extends _N3DataFactory.Term {
      // Pretty-printed nodes are not equal to any other node
      // (e.g., [] does not equal [])
      equals(other) {
        return other === this;
      }
    };
    var N3Writer = class {
      constructor(outputStream, options) {
        this._prefixRegex = /$0^/;
        if (outputStream && typeof outputStream.write !== "function")
          options = outputStream, outputStream = null;
        options = options || {};
        this._lists = options.lists;
        if (!outputStream) {
          let output = "";
          this._outputStream = {
            write(chunk, encoding, done) {
              output += chunk;
              done && done();
            },
            end: (done) => {
              done && done(null, output);
            }
          };
          this._endStream = true;
        } else {
          this._outputStream = outputStream;
          this._endStream = options.end === void 0 ? true : !!options.end;
        }
        this._subject = null;
        if (!/triple|quad/i.test(options.format)) {
          this._lineMode = false;
          this._graph = DEFAULTGRAPH;
          this._prefixIRIs = /* @__PURE__ */ Object.create(null);
          options.prefixes && this.addPrefixes(options.prefixes);
          if (options.baseIRI) {
            this._baseMatcher = new RegExp(`^${escapeRegex(options.baseIRI)}${options.baseIRI.endsWith("/") ? "" : "[#?]"}`);
            this._baseLength = options.baseIRI.length;
          }
        } else {
          this._lineMode = true;
          this._writeQuad = this._writeQuadLine;
        }
      }
      // ## Private methods
      // ### Whether the current graph is the default graph
      get _inDefaultGraph() {
        return DEFAULTGRAPH.equals(this._graph);
      }
      // ### `_write` writes the argument to the output stream
      _write(string, callback) {
        this._outputStream.write(string, "utf8", callback);
      }
      // ### `_writeQuad` writes the quad to the output stream
      _writeQuad(subject, predicate, object, graph, done) {
        try {
          if (!graph.equals(this._graph)) {
            this._write((this._subject === null ? "" : this._inDefaultGraph ? ".\n" : "\n}\n") + (DEFAULTGRAPH.equals(graph) ? "" : `${this._encodeIriOrBlank(graph)} {
`));
            this._graph = graph;
            this._subject = null;
          }
          if (subject.equals(this._subject)) {
            if (predicate.equals(this._predicate))
              this._write(`, ${this._encodeObject(object)}`, done);
            else
              this._write(`;
    ${this._encodePredicate(this._predicate = predicate)} ${this._encodeObject(object)}`, done);
          } else
            this._write(`${(this._subject === null ? "" : ".\n") + this._encodeSubject(this._subject = subject)} ${this._encodePredicate(this._predicate = predicate)} ${this._encodeObject(object)}`, done);
        } catch (error2) {
          done && done(error2);
        }
      }
      // ### `_writeQuadLine` writes the quad to the output stream as a single line
      _writeQuadLine(subject, predicate, object, graph, done) {
        delete this._prefixMatch;
        this._write(this.quadToString(subject, predicate, object, graph), done);
      }
      // ### `quadToString` serializes a quad as a string
      quadToString(subject, predicate, object, graph) {
        return `${this._encodeSubject(subject)} ${this._encodeIriOrBlank(predicate)} ${this._encodeObject(object)}${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .
` : " .\n"}`;
      }
      // ### `quadsToString` serializes an array of quads as a string
      quadsToString(quads) {
        return quads.map((t) => {
          return this.quadToString(t.subject, t.predicate, t.object, t.graph);
        }).join("");
      }
      // ### `_encodeSubject` represents a subject
      _encodeSubject(entity) {
        return entity.termType === "Quad" ? this._encodeQuad(entity) : this._encodeIriOrBlank(entity);
      }
      // ### `_encodeIriOrBlank` represents an IRI or blank node
      _encodeIriOrBlank(entity) {
        if (entity.termType !== "NamedNode") {
          if (this._lists && entity.value in this._lists)
            entity = this.list(this._lists[entity.value]);
          return "id" in entity ? entity.id : `_:${entity.value}`;
        }
        let iri = entity.value;
        if (this._baseMatcher && this._baseMatcher.test(iri))
          iri = iri.substr(this._baseLength);
        if (escape.test(iri))
          iri = iri.replace(escapeAll, characterReplacer);
        const prefixMatch = this._prefixRegex.exec(iri);
        return !prefixMatch ? `<${iri}>` : !prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2];
      }
      // ### `_encodeLiteral` represents a literal
      _encodeLiteral(literal) {
        let value = literal.value;
        if (escape.test(value))
          value = value.replace(escapeAll, characterReplacer);
        if (literal.language)
          return `"${value}"@${literal.language}`;
        if (this._lineMode) {
          if (literal.datatype.value === xsd.string)
            return `"${value}"`;
        } else {
          switch (literal.datatype.value) {
            case xsd.string:
              return `"${value}"`;
            case xsd.boolean:
              if (value === "true" || value === "false")
                return value;
              break;
            case xsd.integer:
              if (/^[+-]?\d+$/.test(value))
                return value;
              break;
            case xsd.decimal:
              if (/^[+-]?\d*\.\d+$/.test(value))
                return value;
              break;
            case xsd.double:
              if (/^[+-]?(?:\d+\.\d*|\.?\d+)[eE][+-]?\d+$/.test(value))
                return value;
              break;
          }
        }
        return `"${value}"^^${this._encodeIriOrBlank(literal.datatype)}`;
      }
      // ### `_encodePredicate` represents a predicate
      _encodePredicate(predicate) {
        return predicate.value === rdf.type ? "a" : this._encodeIriOrBlank(predicate);
      }
      // ### `_encodeObject` represents an object
      _encodeObject(object) {
        switch (object.termType) {
          case "Quad":
            return this._encodeQuad(object);
          case "Literal":
            return this._encodeLiteral(object);
          default:
            return this._encodeIriOrBlank(object);
        }
      }
      // ### `_encodeQuad` encodes an RDF* quad
      _encodeQuad({
        subject,
        predicate,
        object,
        graph
      }) {
        return `<<${this._encodeSubject(subject)} ${this._encodePredicate(predicate)} ${this._encodeObject(object)}${(0, _N3Util.isDefaultGraph)(graph) ? "" : ` ${this._encodeIriOrBlank(graph)}`}>>`;
      }
      // ### `_blockedWrite` replaces `_write` after the writer has been closed
      _blockedWrite() {
        throw new Error("Cannot write because the writer has been closed.");
      }
      // ### `addQuad` adds the quad to the output stream
      addQuad(subject, predicate, object, graph, done) {
        if (object === void 0)
          this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);
        else if (typeof graph === "function")
          this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);
        else
          this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);
      }
      // ### `addQuads` adds the quads to the output stream
      addQuads(quads) {
        for (let i2 = 0; i2 < quads.length; i2++)
          this.addQuad(quads[i2]);
      }
      // ### `addPrefix` adds the prefix to the output stream
      addPrefix(prefix, iri, done) {
        const prefixes = {};
        prefixes[prefix] = iri;
        this.addPrefixes(prefixes, done);
      }
      // ### `addPrefixes` adds the prefixes to the output stream
      addPrefixes(prefixes, done) {
        if (!this._prefixIRIs)
          return done && done();
        let hasPrefixes = false;
        for (let prefix in prefixes) {
          let iri = prefixes[prefix];
          if (typeof iri !== "string")
            iri = iri.value;
          hasPrefixes = true;
          if (this._subject !== null) {
            this._write(this._inDefaultGraph ? ".\n" : "\n}\n");
            this._subject = null, this._graph = "";
          }
          this._prefixIRIs[iri] = prefix += ":";
          this._write(`@prefix ${prefix} <${iri}>.
`);
        }
        if (hasPrefixes) {
          let IRIlist = "", prefixList = "";
          for (const prefixIRI in this._prefixIRIs) {
            IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;
            prefixList += (prefixList ? "|" : "") + this._prefixIRIs[prefixIRI];
          }
          IRIlist = escapeRegex(IRIlist, /[\]\/\(\)\*\+\?\.\\\$]/g, "\\$&");
          this._prefixRegex = new RegExp(`^(?:${prefixList})[^/]*$|^(${IRIlist})([_a-zA-Z][\\-_a-zA-Z0-9]*)$`);
        }
        this._write(hasPrefixes ? "\n" : "", done);
      }
      // ### `blank` creates a blank node with the given content
      blank(predicate, object) {
        let children = predicate, child, length;
        if (predicate === void 0)
          children = [];
        else if (predicate.termType)
          children = [{
            predicate,
            object
          }];
        else if (!("length" in predicate))
          children = [predicate];
        switch (length = children.length) {
          case 0:
            return new SerializedTerm("[]");
          case 1:
            child = children[0];
            if (!(child.object instanceof SerializedTerm))
              return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${this._encodeObject(child.object)} ]`);
          default:
            let contents = "[";
            for (let i2 = 0; i2 < length; i2++) {
              child = children[i2];
              if (child.predicate.equals(predicate))
                contents += `, ${this._encodeObject(child.object)}`;
              else {
                contents += `${(i2 ? ";\n  " : "\n  ") + this._encodePredicate(child.predicate)} ${this._encodeObject(child.object)}`;
                predicate = child.predicate;
              }
            }
            return new SerializedTerm(`${contents}
]`);
        }
      }
      // ### `list` creates a list node with the given content
      list(elements) {
        const length = elements && elements.length || 0, contents = new Array(length);
        for (let i2 = 0; i2 < length; i2++)
          contents[i2] = this._encodeObject(elements[i2]);
        return new SerializedTerm(`(${contents.join(" ")})`);
      }
      // ### `end` signals the end of the output stream
      end(done) {
        if (this._subject !== null) {
          this._write(this._inDefaultGraph ? ".\n" : "\n}\n");
          this._subject = null;
        }
        this._write = this._blockedWrite;
        let singleDone = done && ((error2, result) => {
          singleDone = null, done(error2, result);
        });
        if (this._endStream) {
          try {
            return this._outputStream.end(singleDone);
          } catch (error2) {
          }
        }
        singleDone && singleDone();
      }
    };
    exports.default = N3Writer;
    function characterReplacer(character) {
      let result = escapedCharacters[character];
      if (result === void 0) {
        if (character.length === 1) {
          result = character.charCodeAt(0).toString(16);
          result = "\\u0000".substr(0, 6 - result.length) + result;
        } else {
          result = ((character.charCodeAt(0) - 55296) * 1024 + character.charCodeAt(1) + 9216).toString(16);
          result = "\\U00000000".substr(0, 10 - result.length) + result;
        }
      }
      return result;
    }
    function escapeRegex(regex) {
      return regex.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, "\\$&");
    }
  }
});

// node_modules/n3/lib/N3Store.js
var require_N3Store = __commonJS({
  "node_modules/n3/lib/N3Store.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _N3DataFactory = _interopRequireWildcard(require_N3DataFactory());
    var _readableStream = require_browser3();
    var _IRIs = _interopRequireDefault(require_IRIs());
    var _N3Util = require_N3Util();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _getRequireWildcardCache(e) {
      if ("function" != typeof WeakMap)
        return null;
      var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(e2) {
        return e2 ? t : r;
      })(e);
    }
    function _interopRequireWildcard(e, r) {
      if (!r && e && e.__esModule)
        return e;
      if (null === e || "object" != typeof e && "function" != typeof e)
        return { default: e };
      var t = _getRequireWildcardCache(r);
      if (t && t.has(e))
        return t.get(e);
      var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u in e)
        if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
          var i2 = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n, u, i2) : n[u] = e[u];
        }
      return n.default = e, t && t.set(e, n), n;
    }
    var N3Store = class {
      constructor(quads, options) {
        this._size = 0;
        this._graphs = /* @__PURE__ */ Object.create(null);
        this._id = 0;
        this._ids = /* @__PURE__ */ Object.create(null);
        this._entities = /* @__PURE__ */ Object.create(null);
        this._blankNodeIndex = 0;
        if (!options && quads && !quads[0])
          options = quads, quads = null;
        options = options || {};
        this._factory = options.factory || _N3DataFactory.default;
        if (quads)
          this.addQuads(quads);
      }
      _termFromId(id, factory3) {
        if (id[0] === ".") {
          const entities = this._entities;
          const terms = id.split(".");
          const q = this._factory.quad(this._termFromId(entities[terms[1]]), this._termFromId(entities[terms[2]]), this._termFromId(entities[terms[3]]), terms[4] && this._termFromId(entities[terms[4]]));
          return q;
        }
        return (0, _N3DataFactory.termFromId)(id, factory3);
      }
      _termToNumericId(term) {
        if (term.termType === "Quad") {
          const s = this._termToNumericId(term.subject), p = this._termToNumericId(term.predicate), o = this._termToNumericId(term.object);
          let g;
          return s && p && o && ((0, _N3Util.isDefaultGraph)(term.graph) || (g = this._termToNumericId(term.graph))) && this._ids[g ? `.${s}.${p}.${o}.${g}` : `.${s}.${p}.${o}`];
        }
        return this._ids[(0, _N3DataFactory.termToId)(term)];
      }
      _termToNewNumericId(term) {
        const str = term && term.termType === "Quad" ? `.${this._termToNewNumericId(term.subject)}.${this._termToNewNumericId(term.predicate)}.${this._termToNewNumericId(term.object)}${(0, _N3Util.isDefaultGraph)(term.graph) ? "" : `.${this._termToNewNumericId(term.graph)}`}` : (0, _N3DataFactory.termToId)(term);
        return this._ids[str] || (this._ids[this._entities[++this._id] = str] = this._id);
      }
      // ## Public properties
      // ### `size` returns the number of quads in the store
      get size() {
        let size = this._size;
        if (size !== null)
          return size;
        size = 0;
        const graphs = this._graphs;
        let subjects, subject;
        for (const graphKey in graphs)
          for (const subjectKey in subjects = graphs[graphKey].subjects)
            for (const predicateKey in subject = subjects[subjectKey])
              size += Object.keys(subject[predicateKey]).length;
        return this._size = size;
      }
      // ## Private methods
      // ### `_addToIndex` adds a quad to a three-layered index.
      // Returns if the index has changed, if the entry did not already exist.
      _addToIndex(index0, key0, key1, key2) {
        const index1 = index0[key0] || (index0[key0] = {});
        const index2 = index1[key1] || (index1[key1] = {});
        const existed = key2 in index2;
        if (!existed)
          index2[key2] = null;
        return !existed;
      }
      // ### `_removeFromIndex` removes a quad from a three-layered index
      _removeFromIndex(index0, key0, key1, key2) {
        const index1 = index0[key0], index2 = index1[key1];
        delete index2[key2];
        for (const key in index2)
          return;
        delete index1[key1];
        for (const key in index1)
          return;
        delete index0[key0];
      }
      // ### `_findInIndex` finds a set of quads in a three-layered index.
      // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
      // Any of these keys can be undefined, which is interpreted as a wildcard.
      // `name0`, `name1`, and `name2` are the names of the keys at each level,
      // used when reconstructing the resulting quad
      // (for instance: _subject_, _predicate_, and _object_).
      // Finally, `graphId` will be the graph of the created quads.
      *_findInIndex(index0, key0, key1, key2, name0, name1, name2, graphId) {
        let tmp, index1, index2;
        const entityKeys = this._entities;
        const graph = this._termFromId(graphId, this._factory);
        const parts = {
          subject: null,
          predicate: null,
          object: null
        };
        if (key0)
          (tmp = index0, index0 = {})[key0] = tmp[key0];
        for (const value0 in index0) {
          if (index1 = index0[value0]) {
            parts[name0] = this._termFromId(entityKeys[value0], this._factory);
            if (key1)
              (tmp = index1, index1 = {})[key1] = tmp[key1];
            for (const value1 in index1) {
              if (index2 = index1[value1]) {
                parts[name1] = this._termFromId(entityKeys[value1], this._factory);
                const values = key2 ? key2 in index2 ? [key2] : [] : Object.keys(index2);
                for (let l = 0; l < values.length; l++) {
                  parts[name2] = this._termFromId(entityKeys[values[l]], this._factory);
                  yield this._factory.quad(parts.subject, parts.predicate, parts.object, graph);
                }
              }
            }
          }
        }
      }
      // ### `_loop` executes the callback on all keys of index 0
      _loop(index0, callback) {
        for (const key0 in index0)
          callback(key0);
      }
      // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0
      _loopByKey0(index0, key0, callback) {
        let index1, key1;
        if (index1 = index0[key0]) {
          for (key1 in index1)
            callback(key1);
        }
      }
      // ### `_loopByKey1` executes the callback on given keys of all entries in index 0
      _loopByKey1(index0, key1, callback) {
        let key0, index1;
        for (key0 in index0) {
          index1 = index0[key0];
          if (index1[key1])
            callback(key0);
        }
      }
      // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2
      _loopBy2Keys(index0, key0, key1, callback) {
        let index1, index2, key2;
        if ((index1 = index0[key0]) && (index2 = index1[key1])) {
          for (key2 in index2)
            callback(key2);
        }
      }
      // ### `_countInIndex` counts matching quads in a three-layered index.
      // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
      // Any of these keys can be undefined, which is interpreted as a wildcard.
      _countInIndex(index0, key0, key1, key2) {
        let count = 0, tmp, index1, index2;
        if (key0)
          (tmp = index0, index0 = {})[key0] = tmp[key0];
        for (const value0 in index0) {
          if (index1 = index0[value0]) {
            if (key1)
              (tmp = index1, index1 = {})[key1] = tmp[key1];
            for (const value1 in index1) {
              if (index2 = index1[value1]) {
                if (key2)
                  key2 in index2 && count++;
                else
                  count += Object.keys(index2).length;
              }
            }
          }
        }
        return count;
      }
      // ### `_getGraphs` returns an array with the given graph,
      // or all graphs if the argument is null or undefined.
      _getGraphs(graph) {
        if (!isString2(graph))
          return this._graphs;
        const graphs = {};
        graphs[graph] = this._graphs[graph];
        return graphs;
      }
      // ### `_uniqueEntities` returns a function that accepts an entity ID
      // and passes the corresponding entity to callback if it hasn't occurred before.
      _uniqueEntities(callback) {
        const uniqueIds = /* @__PURE__ */ Object.create(null);
        return (id) => {
          if (!(id in uniqueIds)) {
            uniqueIds[id] = true;
            callback(this._termFromId(this._entities[id], this._factory));
          }
        };
      }
      // ## Public methods
      // ### `add` adds the specified quad to the dataset.
      // Returns the dataset instance it was called on.
      // Existing quads, as defined in Quad.equals, will be ignored.
      add(quad) {
        this.addQuad(quad);
        return this;
      }
      // ### `addQuad` adds a new quad to the store.
      // Returns if the quad index has changed, if the quad did not already exist.
      addQuad(subject, predicate, object, graph) {
        if (!predicate)
          graph = subject.graph, object = subject.object, predicate = subject.predicate, subject = subject.subject;
        graph = (0, _N3DataFactory.termToId)(graph);
        let graphItem = this._graphs[graph];
        if (!graphItem) {
          graphItem = this._graphs[graph] = {
            subjects: {},
            predicates: {},
            objects: {}
          };
          Object.freeze(graphItem);
        }
        subject = this._termToNewNumericId(subject);
        predicate = this._termToNewNumericId(predicate);
        object = this._termToNewNumericId(object);
        const changed = this._addToIndex(graphItem.subjects, subject, predicate, object);
        this._addToIndex(graphItem.predicates, predicate, object, subject);
        this._addToIndex(graphItem.objects, object, subject, predicate);
        this._size = null;
        return changed;
      }
      // ### `addQuads` adds multiple quads to the store
      addQuads(quads) {
        for (let i2 = 0; i2 < quads.length; i2++)
          this.addQuad(quads[i2]);
      }
      // ### `delete` removes the specified quad from the dataset.
      // Returns the dataset instance it was called on.
      delete(quad) {
        this.removeQuad(quad);
        return this;
      }
      // ### `has` determines whether a dataset includes a certain quad or quad pattern.
      has(subjectOrQuad, predicate, object, graph) {
        if (subjectOrQuad && subjectOrQuad.subject)
          ({
            subject: subjectOrQuad,
            predicate,
            object,
            graph
          } = subjectOrQuad);
        return !this.readQuads(subjectOrQuad, predicate, object, graph).next().done;
      }
      // ### `import` adds a stream of quads to the store
      import(stream) {
        stream.on("data", (quad) => {
          this.addQuad(quad);
        });
        return stream;
      }
      // ### `removeQuad` removes a quad from the store if it exists
      removeQuad(subject, predicate, object, graph) {
        if (!predicate)
          graph = subject.graph, object = subject.object, predicate = subject.predicate, subject = subject.subject;
        graph = (0, _N3DataFactory.termToId)(graph);
        const graphs = this._graphs;
        let graphItem, subjects, predicates;
        if (!(subject = subject && this._termToNumericId(subject)) || !(predicate = predicate && this._termToNumericId(predicate)) || !(object = object && this._termToNumericId(object)) || !(graphItem = graphs[graph]) || !(subjects = graphItem.subjects[subject]) || !(predicates = subjects[predicate]) || !(object in predicates))
          return false;
        this._removeFromIndex(graphItem.subjects, subject, predicate, object);
        this._removeFromIndex(graphItem.predicates, predicate, object, subject);
        this._removeFromIndex(graphItem.objects, object, subject, predicate);
        if (this._size !== null)
          this._size--;
        for (subject in graphItem.subjects)
          return true;
        delete graphs[graph];
        return true;
      }
      // ### `removeQuads` removes multiple quads from the store
      removeQuads(quads) {
        for (let i2 = 0; i2 < quads.length; i2++)
          this.removeQuad(quads[i2]);
      }
      // ### `remove` removes a stream of quads from the store
      remove(stream) {
        stream.on("data", (quad) => {
          this.removeQuad(quad);
        });
        return stream;
      }
      // ### `removeMatches` removes all matching quads from the store
      // Setting any field to `undefined` or `null` indicates a wildcard.
      removeMatches(subject, predicate, object, graph) {
        const stream = new _readableStream.Readable({
          objectMode: true
        });
        stream._read = () => {
          for (const quad of this.readQuads(subject, predicate, object, graph))
            stream.push(quad);
          stream.push(null);
        };
        return this.remove(stream);
      }
      // ### `deleteGraph` removes all triples with the given graph from the store
      deleteGraph(graph) {
        return this.removeMatches(null, null, null, graph);
      }
      // ### `getQuads` returns an array of quads matching a pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      getQuads(subject, predicate, object, graph) {
        return [...this.readQuads(subject, predicate, object, graph)];
      }
      // ### `readQuads` returns an generator of quads matching a pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      *readQuads(subject, predicate, object, graph) {
        graph = graph && (0, _N3DataFactory.termToId)(graph);
        const graphs = this._getGraphs(graph);
        let content, subjectId, predicateId, objectId;
        if (subject && !(subjectId = this._termToNumericId(subject)) || predicate && !(predicateId = this._termToNumericId(predicate)) || object && !(objectId = this._termToNumericId(object)))
          return;
        for (const graphId in graphs) {
          if (content = graphs[graphId]) {
            if (subjectId) {
              if (objectId)
                yield* this._findInIndex(content.objects, objectId, subjectId, predicateId, "object", "subject", "predicate", graphId);
              else
                yield* this._findInIndex(content.subjects, subjectId, predicateId, null, "subject", "predicate", "object", graphId);
            } else if (predicateId)
              yield* this._findInIndex(content.predicates, predicateId, objectId, null, "predicate", "object", "subject", graphId);
            else if (objectId)
              yield* this._findInIndex(content.objects, objectId, null, null, "object", "subject", "predicate", graphId);
            else
              yield* this._findInIndex(content.subjects, null, null, null, "subject", "predicate", "object", graphId);
          }
        }
      }
      // ### `match` returns a new dataset that is comprised of all quads in the current instance matching the given arguments.
      // The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.
      // Note: This method always returns a new DatasetCore, even if that dataset contains no quads.
      // Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      // For backwards compatibility, the object return also implements the Readable stream interface.
      match(subject, predicate, object, graph) {
        return new DatasetCoreAndReadableStream(this, subject, predicate, object, graph);
      }
      // ### `countQuads` returns the number of quads matching a pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      countQuads(subject, predicate, object, graph) {
        graph = graph && (0, _N3DataFactory.termToId)(graph);
        const graphs = this._getGraphs(graph);
        let count = 0, content, subjectId, predicateId, objectId;
        if (subject && !(subjectId = this._termToNumericId(subject)) || predicate && !(predicateId = this._termToNumericId(predicate)) || object && !(objectId = this._termToNumericId(object)))
          return 0;
        for (const graphId in graphs) {
          if (content = graphs[graphId]) {
            if (subject) {
              if (object)
                count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
              else
                count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);
            } else if (predicate) {
              count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);
            } else {
              count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
            }
          }
        }
        return count;
      }
      // ### `forEach` executes the callback on all quads.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      forEach(callback, subject, predicate, object, graph) {
        this.some((quad) => {
          callback(quad);
          return false;
        }, subject, predicate, object, graph);
      }
      // ### `every` executes the callback on all quads,
      // and returns `true` if it returns truthy for all them.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      every(callback, subject, predicate, object, graph) {
        let some = false;
        const every = !this.some((quad) => {
          some = true;
          return !callback(quad);
        }, subject, predicate, object, graph);
        return some && every;
      }
      // ### `some` executes the callback on all quads,
      // and returns `true` if it returns truthy for any of them.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      some(callback, subject, predicate, object, graph) {
        for (const quad of this.readQuads(subject, predicate, object, graph))
          if (callback(quad))
            return true;
        return false;
      }
      // ### `getSubjects` returns all subjects that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      getSubjects(predicate, object, graph) {
        const results = [];
        this.forSubjects((s) => {
          results.push(s);
        }, predicate, object, graph);
        return results;
      }
      // ### `forSubjects` executes the callback on all subjects that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      forSubjects(callback, predicate, object, graph) {
        graph = graph && (0, _N3DataFactory.termToId)(graph);
        const graphs = this._getGraphs(graph);
        let content, predicateId, objectId;
        callback = this._uniqueEntities(callback);
        if (predicate && !(predicateId = this._termToNumericId(predicate)) || object && !(objectId = this._termToNumericId(object)))
          return;
        for (graph in graphs) {
          if (content = graphs[graph]) {
            if (predicateId) {
              if (objectId)
                this._loopBy2Keys(content.predicates, predicateId, objectId, callback);
              else
                this._loopByKey1(content.subjects, predicateId, callback);
            } else if (objectId)
              this._loopByKey0(content.objects, objectId, callback);
            else
              this._loop(content.subjects, callback);
          }
        }
      }
      // ### `getPredicates` returns all predicates that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      getPredicates(subject, object, graph) {
        const results = [];
        this.forPredicates((p) => {
          results.push(p);
        }, subject, object, graph);
        return results;
      }
      // ### `forPredicates` executes the callback on all predicates that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      forPredicates(callback, subject, object, graph) {
        graph = graph && (0, _N3DataFactory.termToId)(graph);
        const graphs = this._getGraphs(graph);
        let content, subjectId, objectId;
        callback = this._uniqueEntities(callback);
        if (subject && !(subjectId = this._termToNumericId(subject)) || object && !(objectId = this._termToNumericId(object)))
          return;
        for (graph in graphs) {
          if (content = graphs[graph]) {
            if (subjectId) {
              if (objectId)
                this._loopBy2Keys(content.objects, objectId, subjectId, callback);
              else
                this._loopByKey0(content.subjects, subjectId, callback);
            } else if (objectId)
              this._loopByKey1(content.predicates, objectId, callback);
            else
              this._loop(content.predicates, callback);
          }
        }
      }
      // ### `getObjects` returns all objects that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      getObjects(subject, predicate, graph) {
        const results = [];
        this.forObjects((o) => {
          results.push(o);
        }, subject, predicate, graph);
        return results;
      }
      // ### `forObjects` executes the callback on all objects that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      forObjects(callback, subject, predicate, graph) {
        graph = graph && (0, _N3DataFactory.termToId)(graph);
        const graphs = this._getGraphs(graph);
        let content, subjectId, predicateId;
        callback = this._uniqueEntities(callback);
        if (subject && !(subjectId = this._termToNumericId(subject)) || predicate && !(predicateId = this._termToNumericId(predicate)))
          return;
        for (graph in graphs) {
          if (content = graphs[graph]) {
            if (subjectId) {
              if (predicateId)
                this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);
              else
                this._loopByKey1(content.objects, subjectId, callback);
            } else if (predicateId)
              this._loopByKey0(content.predicates, predicateId, callback);
            else
              this._loop(content.objects, callback);
          }
        }
      }
      // ### `getGraphs` returns all graphs that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      getGraphs(subject, predicate, object) {
        const results = [];
        this.forGraphs((g) => {
          results.push(g);
        }, subject, predicate, object);
        return results;
      }
      // ### `forGraphs` executes the callback on all graphs that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      forGraphs(callback, subject, predicate, object) {
        for (const graph in this._graphs) {
          this.some((quad) => {
            callback(quad.graph);
            return true;
          }, subject, predicate, object, graph);
        }
      }
      // ### `createBlankNode` creates a new blank node, returning its name
      createBlankNode(suggestedName) {
        let name, index;
        if (suggestedName) {
          name = suggestedName = `_:${suggestedName}`, index = 1;
          while (this._ids[name])
            name = suggestedName + index++;
        } else {
          do {
            name = `_:b${this._blankNodeIndex++}`;
          } while (this._ids[name]);
        }
        this._ids[name] = ++this._id;
        this._entities[this._id] = name;
        return this._factory.blankNode(name.substr(2));
      }
      // ### `extractLists` finds and removes all list triples
      // and returns the items per list.
      extractLists({
        remove = false,
        ignoreErrors = false
      } = {}) {
        const lists = {};
        const onError = ignoreErrors ? () => true : (node, message) => {
          throw new Error(`${node.value} ${message}`);
        };
        const tails = this.getQuads(null, _IRIs.default.rdf.rest, _IRIs.default.rdf.nil, null);
        const toRemove = remove ? [...tails] : [];
        tails.forEach((tailQuad) => {
          const items = [];
          let malformed = false;
          let head;
          let headPos;
          const graph = tailQuad.graph;
          let current = tailQuad.subject;
          while (current && !malformed) {
            const objectQuads = this.getQuads(null, null, current, null);
            const subjectQuads = this.getQuads(current, null, null, null);
            let quad, first = null, rest = null, parent = null;
            for (let i2 = 0; i2 < subjectQuads.length && !malformed; i2++) {
              quad = subjectQuads[i2];
              if (!quad.graph.equals(graph))
                malformed = onError(current, "not confined to single graph");
              else if (head)
                malformed = onError(current, "has non-list arcs out");
              else if (quad.predicate.value === _IRIs.default.rdf.first) {
                if (first)
                  malformed = onError(current, "has multiple rdf:first arcs");
                else
                  toRemove.push(first = quad);
              } else if (quad.predicate.value === _IRIs.default.rdf.rest) {
                if (rest)
                  malformed = onError(current, "has multiple rdf:rest arcs");
                else
                  toRemove.push(rest = quad);
              } else if (objectQuads.length)
                malformed = onError(current, "can't be subject and object");
              else {
                head = quad;
                headPos = "subject";
              }
            }
            for (let i2 = 0; i2 < objectQuads.length && !malformed; ++i2) {
              quad = objectQuads[i2];
              if (head)
                malformed = onError(current, "can't have coreferences");
              else if (quad.predicate.value === _IRIs.default.rdf.rest) {
                if (parent)
                  malformed = onError(current, "has incoming rdf:rest arcs");
                else
                  parent = quad;
              } else {
                head = quad;
                headPos = "object";
              }
            }
            if (!first)
              malformed = onError(current, "has no list head");
            else
              items.unshift(first.object);
            current = parent && parent.subject;
          }
          if (malformed)
            remove = false;
          else if (head)
            lists[head[headPos].value] = items;
        });
        if (remove)
          this.removeQuads(toRemove);
        return lists;
      }
      // ### Store is an iterable.
      // Can be used where iterables are expected: for...of loops, array spread operator,
      // `yield*`, and destructuring assignment (order is not guaranteed).
      *[Symbol.iterator]() {
        yield* this.readQuads();
      }
    };
    exports.default = N3Store;
    function isString2(s) {
      return typeof s === "string" || s instanceof String;
    }
    var DatasetCoreAndReadableStream = class _DatasetCoreAndReadableStream extends _readableStream.Readable {
      constructor(n3Store, subject, predicate, object, graph) {
        super({
          objectMode: true
        });
        Object.assign(this, {
          n3Store,
          subject,
          predicate,
          object,
          graph
        });
      }
      get filtered() {
        if (!this._filtered) {
          const {
            n3Store,
            graph,
            object,
            predicate,
            subject
          } = this;
          const newStore = this._filtered = new N3Store({
            factory: n3Store._factory
          });
          for (const quad of n3Store.readQuads(subject, predicate, object, graph))
            newStore.addQuad(quad);
        }
        return this._filtered;
      }
      get size() {
        return this.filtered.size;
      }
      _read() {
        for (const quad of this)
          this.push(quad);
        this.push(null);
      }
      add(quad) {
        return this.filtered.add(quad);
      }
      delete(quad) {
        return this.filtered.delete(quad);
      }
      has(quad) {
        return this.filtered.has(quad);
      }
      match(subject, predicate, object, graph) {
        return new _DatasetCoreAndReadableStream(this.filtered, subject, predicate, object, graph);
      }
      *[Symbol.iterator]() {
        yield* this._filtered || this.n3Store.readQuads(this.subject, this.predicate, this.object, this.graph);
      }
    };
  }
});

// node_modules/n3/lib/N3StreamParser.js
var require_N3StreamParser = __commonJS({
  "node_modules/n3/lib/N3StreamParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _N3Parser = _interopRequireDefault(require_N3Parser());
    var _readableStream = require_browser3();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var N3StreamParser = class extends _readableStream.Transform {
      constructor(options) {
        super({
          decodeStrings: true
        });
        this._readableState.objectMode = true;
        const parser = new _N3Parser.default(options);
        let onData, onEnd;
        parser.parse(
          {
            on: (event, callback) => {
              switch (event) {
                case "data":
                  onData = callback;
                  break;
                case "end":
                  onEnd = callback;
                  break;
              }
            }
          },
          // Handle quads by pushing them down the pipeline
          (error2, quad) => {
            error2 && this.emit("error", error2) || quad && this.push(quad);
          },
          // Emit prefixes through the `prefix` event
          (prefix, uri) => {
            this.emit("prefix", prefix, uri);
          }
        );
        this._transform = (chunk, encoding, done) => {
          onData(chunk);
          done();
        };
        this._flush = (done) => {
          onEnd();
          done();
        };
      }
      // ### Parses a stream of strings
      import(stream) {
        stream.on("data", (chunk) => {
          this.write(chunk);
        });
        stream.on("end", () => {
          this.end();
        });
        stream.on("error", (error2) => {
          this.emit("error", error2);
        });
        return this;
      }
    };
    exports.default = N3StreamParser;
  }
});

// node_modules/n3/lib/N3StreamWriter.js
var require_N3StreamWriter = __commonJS({
  "node_modules/n3/lib/N3StreamWriter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _readableStream = require_browser3();
    var _N3Writer = _interopRequireDefault(require_N3Writer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var N3StreamWriter = class extends _readableStream.Transform {
      constructor(options) {
        super({
          encoding: "utf8",
          writableObjectMode: true
        });
        const writer = this._writer = new _N3Writer.default({
          write: (quad, encoding, callback) => {
            this.push(quad);
            callback && callback();
          },
          end: (callback) => {
            this.push(null);
            callback && callback();
          }
        }, options);
        this._transform = (quad, encoding, done) => {
          writer.addQuad(quad, done);
        };
        this._flush = (done) => {
          writer.end(done);
        };
      }
      // ### Serializes a stream of quads
      import(stream) {
        stream.on("data", (quad) => {
          this.write(quad);
        });
        stream.on("end", () => {
          this.end();
        });
        stream.on("error", (error2) => {
          this.emit("error", error2);
        });
        stream.on("prefix", (prefix, iri) => {
          this._writer.addPrefix(prefix, iri);
        });
        return this;
      }
    };
    exports.default = N3StreamWriter;
  }
});

// node_modules/n3/lib/index.js
var require_lib43 = __commonJS({
  "node_modules/n3/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "BlankNode", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.BlankNode;
      }
    });
    Object.defineProperty(exports, "DataFactory", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.default;
      }
    });
    Object.defineProperty(exports, "DefaultGraph", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.DefaultGraph;
      }
    });
    Object.defineProperty(exports, "Lexer", {
      enumerable: true,
      get: function() {
        return _N3Lexer.default;
      }
    });
    Object.defineProperty(exports, "Literal", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.Literal;
      }
    });
    Object.defineProperty(exports, "NamedNode", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.NamedNode;
      }
    });
    Object.defineProperty(exports, "Parser", {
      enumerable: true,
      get: function() {
        return _N3Parser.default;
      }
    });
    Object.defineProperty(exports, "Quad", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.Quad;
      }
    });
    Object.defineProperty(exports, "Store", {
      enumerable: true,
      get: function() {
        return _N3Store.default;
      }
    });
    Object.defineProperty(exports, "StreamParser", {
      enumerable: true,
      get: function() {
        return _N3StreamParser.default;
      }
    });
    Object.defineProperty(exports, "StreamWriter", {
      enumerable: true,
      get: function() {
        return _N3StreamWriter.default;
      }
    });
    Object.defineProperty(exports, "Term", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.Term;
      }
    });
    Object.defineProperty(exports, "Triple", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.Triple;
      }
    });
    exports.Util = void 0;
    Object.defineProperty(exports, "Variable", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.Variable;
      }
    });
    Object.defineProperty(exports, "Writer", {
      enumerable: true,
      get: function() {
        return _N3Writer.default;
      }
    });
    exports.default = void 0;
    Object.defineProperty(exports, "termFromId", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.termFromId;
      }
    });
    Object.defineProperty(exports, "termToId", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.termToId;
      }
    });
    var _N3Lexer = _interopRequireDefault(require_N3Lexer());
    var _N3Parser = _interopRequireDefault(require_N3Parser());
    var _N3Writer = _interopRequireDefault(require_N3Writer());
    var _N3Store = _interopRequireDefault(require_N3Store());
    var _N3StreamParser = _interopRequireDefault(require_N3StreamParser());
    var _N3StreamWriter = _interopRequireDefault(require_N3StreamWriter());
    var Util = _interopRequireWildcard(require_N3Util());
    exports.Util = Util;
    var _N3DataFactory = _interopRequireWildcard(require_N3DataFactory());
    function _getRequireWildcardCache(e) {
      if ("function" != typeof WeakMap)
        return null;
      var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(e2) {
        return e2 ? t : r;
      })(e);
    }
    function _interopRequireWildcard(e, r) {
      if (!r && e && e.__esModule)
        return e;
      if (null === e || "object" != typeof e && "function" != typeof e)
        return { default: e };
      var t = _getRequireWildcardCache(r);
      if (t && t.has(e))
        return t.get(e);
      var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u in e)
        if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
          var i2 = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i2 && (i2.get || i2.set) ? Object.defineProperty(n, u, i2) : n[u] = e[u];
        }
      return n.default = e, t && t.set(e, n), n;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = exports.default = {
      Lexer: _N3Lexer.default,
      Parser: _N3Parser.default,
      Writer: _N3Writer.default,
      Store: _N3Store.default,
      StreamParser: _N3StreamParser.default,
      StreamWriter: _N3StreamWriter.default,
      Util,
      DataFactory: _N3DataFactory.default,
      Term: _N3DataFactory.Term,
      NamedNode: _N3DataFactory.NamedNode,
      Literal: _N3DataFactory.Literal,
      BlankNode: _N3DataFactory.BlankNode,
      Variable: _N3DataFactory.Variable,
      DefaultGraph: _N3DataFactory.DefaultGraph,
      Quad: _N3DataFactory.Quad,
      Triple: _N3DataFactory.Triple,
      termFromId: _N3DataFactory.termFromId,
      termToId: _N3DataFactory.termToId
    };
  }
});

// node_modules/@comunica/actor-rdf-serialize-n3/lib/ActorRdfSerializeN3.js
var require_ActorRdfSerializeN3 = __commonJS({
  "node_modules/@comunica/actor-rdf-serialize-n3/lib/ActorRdfSerializeN3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfSerializeN3 = void 0;
    var bus_rdf_serialize_1 = require_lib42();
    var n3_1 = require_lib43();
    var ActorRdfSerializeN3 = class extends bus_rdf_serialize_1.ActorRdfSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/n-quads": 1.0,
       *       "application/trig": 0.95,
       *       "application/n-triples": 0.8,
       *       "text/turtle": 0.6,
       *       "text/n3": 0.35
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/n-quads": "http://www.w3.org/ns/formats/N-Quads",
       *       "application/trig": "http://www.w3.org/ns/formats/TriG",
       *       "application/n-triples": "http://www.w3.org/ns/formats/N-Triples",
       *       "text/turtle": "http://www.w3.org/ns/formats/Turtle",
       *       "text/n3": "http://www.w3.org/ns/formats/N3"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async runHandle(action, mediaType, context) {
        const writer = new n3_1.StreamWriter({ format: mediaType });
        let data;
        if ("pipe" in action.quadStream) {
          action.quadStream.on("error", (error2) => writer.emit("error", error2));
          data = action.quadStream.pipe(writer);
        } else {
          data = writer.import(action.quadStream);
        }
        return {
          data,
          triples: mediaType === "text/turtle" || mediaType === "application/n-triples" || mediaType === "text/n3"
        };
      }
    };
    exports.ActorRdfSerializeN3 = ActorRdfSerializeN3;
  }
});

// node_modules/@comunica/actor-rdf-serialize-n3/lib/index.js
var require_lib44 = __commonJS({
  "node_modules/@comunica/actor-rdf-serialize-n3/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfSerializeN3(), exports);
  }
});

// node_modules/jsonld-streaming-serializer/lib/SeparatorType.js
var require_SeparatorType = __commonJS({
  "node_modules/jsonld-streaming-serializer/lib/SeparatorType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SeparatorType = void 0;
    var SeparatorType = class {
      constructor(label) {
        this.label = label;
      }
    };
    exports.SeparatorType = SeparatorType;
    SeparatorType.COMMA = new SeparatorType(",");
    SeparatorType.OBJECT_START = new SeparatorType("{");
    SeparatorType.OBJECT_END = new SeparatorType("}");
    SeparatorType.OBJECT_END_COMMA = new SeparatorType("},");
    SeparatorType.ARRAY_START = new SeparatorType("[");
    SeparatorType.ARRAY_END = new SeparatorType("]");
    SeparatorType.ARRAY_END_COMMA = new SeparatorType("],");
    SeparatorType.GRAPH_FIELD_NONCOMPACT = new SeparatorType('"@graph": [');
    SeparatorType.GRAPH_FIELD_COMPACT = new SeparatorType('"@graph":[');
    SeparatorType.CONTEXT_FIELD = new SeparatorType('"@context":');
  }
});

// node_modules/jsonld-streaming-serializer/lib/Util.js
var require_Util3 = __commonJS({
  "node_modules/jsonld-streaming-serializer/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var Util = class _Util {
      /**
       * Convert an RDF term to a JSON value.
       * @param {Term} term An RDF term.
       * @param {JsonLdContextNormalized} context The context.
       * @param {ITermToValueOptions} options Conversion options.
       * @return {any} A JSON value.
       */
      static termToValue(term, context, options = {
        compactIds: false,
        useNativeTypes: false
      }) {
        switch (term.termType) {
          case "NamedNode":
            const compacted = context.compactIri(term.value, options.vocab);
            return options.compactIds ? compacted : { "@id": compacted };
          case "DefaultGraph":
            return options.compactIds ? term.value : { "@id": term.value };
          case "BlankNode":
            const id = `_:${term.value}`;
            return options.compactIds ? id : { "@id": id };
          case "Literal":
            if (term.datatype.value === _Util.RDF_JSON) {
              let parsedJson;
              try {
                parsedJson = JSON.parse(term.value);
              } catch (e) {
                throw new jsonld_context_parser_1.ErrorCoded("Invalid JSON literal: " + e.message, jsonld_context_parser_1.ERROR_CODES.INVALID_JSON_LITERAL);
              }
              return {
                "@value": parsedJson,
                "@type": "@json"
              };
            }
            if (options.rdfDirection === "i18n-datatype" && term.datatype.value.startsWith(_Util.I18N)) {
              const [language, direction] = term.datatype.value.substr(_Util.I18N.length, term.datatype.value.length).split("_");
              return Object.assign(Object.assign({ "@value": term.value }, language ? { "@language": language } : {}), direction ? { "@direction": direction } : {});
            }
            const stringType = term.datatype.value === _Util.XSD_STRING;
            const rawValue = {
              "@value": !stringType && options.useNativeTypes ? _Util.stringToNativeType(term.value, term.datatype.value) : term.value
            };
            if (term.language) {
              return Object.assign(Object.assign({}, rawValue), { "@language": term.language });
            } else if (!stringType && typeof rawValue["@value"] === "string") {
              return Object.assign(Object.assign({}, rawValue), { "@type": term.datatype.value });
            } else {
              return rawValue;
            }
        }
      }
      /**
       * Convert a string term to a native type.
       * If no conversion is possible, the original string will be returned.
       * @param {string} value An RDF term's string value.
       * @param {string} type
       * @return {any}
       */
      static stringToNativeType(value, type) {
        if (type.startsWith(_Util.XSD)) {
          const xsdType = type.substr(_Util.XSD.length);
          switch (xsdType) {
            case "boolean":
              if (value === "true") {
                return true;
              } else if (value === "false") {
                return false;
              }
              throw new Error(`Invalid xsd:boolean value '${value}'`);
            case "integer":
            case "number":
            case "int":
            case "byte":
            case "long":
              const parsedInt = parseInt(value, 10);
              if (isNaN(parsedInt)) {
                throw new Error(`Invalid xsd:integer value '${value}'`);
              }
              return parsedInt;
            case "float":
            case "double":
              const parsedFloat = parseFloat(value);
              if (isNaN(parsedFloat)) {
                throw new Error(`Invalid xsd:float value '${value}'`);
              }
              return parsedFloat;
          }
        }
        return value;
      }
    };
    exports.Util = Util;
    Util.XSD = "http://www.w3.org/2001/XMLSchema#";
    Util.XSD_STRING = Util.XSD + "string";
    Util.RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    Util.RDF_TYPE = Util.RDF + "type";
    Util.RDF_JSON = Util.RDF + "JSON";
    Util.I18N = "https://www.w3.org/ns/i18n#";
  }
});

// node_modules/jsonld-streaming-serializer/lib/JsonLdSerializer.js
var require_JsonLdSerializer = __commonJS({
  "node_modules/jsonld-streaming-serializer/lib/JsonLdSerializer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonLdSerializer = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var SeparatorType_1 = require_SeparatorType();
    var Util_1 = require_Util3();
    var readable_stream_1 = require_browser3();
    var JsonLdSerializer = class _JsonLdSerializer extends readable_stream_1.Transform {
      constructor(options = {}) {
        super({ objectMode: true });
        this.indentation = 0;
        this.options = options;
        if (this.options.baseIRI && !this.options.context) {
          this.options.context = { "@base": this.options.baseIRI };
        }
        if (this.options.context) {
          this.originalContext = this.options.context;
          this.context = new jsonld_context_parser_1.ContextParser().parse(this.options.context, { baseIRI: this.options.baseIRI });
        } else {
          this.context = Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized({}));
        }
      }
      /**
       * Parses the given text stream into a quad stream.
       * @param {NodeJS.EventEmitter} stream A text stream.
       * @return {NodeJS.EventEmitter} A quad stream.
       */
      import(stream) {
        const output = new readable_stream_1.PassThrough({ objectMode: true });
        stream.on("error", (error2) => parsed.emit("error", error2));
        stream.on("data", (data) => output.push(data));
        stream.on("end", () => output.push(null));
        const parsed = output.pipe(new _JsonLdSerializer(this.options));
        return parsed;
      }
      /**
       * Transforms a quad into the text stream.
       * @param {Quad} quad An RDF quad.
       * @param {string} encoding An (ignored) encoding.
       * @param {module:stream.internal.TransformCallback} callback Callback that is invoked when the transformation is done
       * @private
       */
      _transform(quad, encoding, callback) {
        this.context.then((context) => {
          this.transformQuad(quad, context);
          callback();
        }).catch(callback);
      }
      /**
       * Construct a list in an RDF.Term object that can be used
       * inside a quad's object to write into the serializer
       * as a list using the @list keyword.
       * @param {RDF.Quad_Object[]} values A list of values, can be empty.
       * @return {RDF.Quad_Object} A term that should be used in the object position of the quad that is written to the serializer.
       */
      async list(values) {
        const context = await this.context;
        return {
          "@list": values.map((value) => Util_1.Util.termToValue(value, context, this.options))
        };
      }
      /**
       * Called when the incoming stream is closed.
       * @param {module:stream.internal.TransformCallback} callback Callback that is invoked when the flushing is done.
       * @private
       */
      _flush(callback) {
        if (!this.opened) {
          this.pushDocumentStart();
        }
        if (this.lastPredicate) {
          this.endPredicate();
        }
        if (this.lastSubject) {
          this.endSubject();
        }
        if (this.lastGraph && this.lastGraph.termType !== "DefaultGraph") {
          this.endGraph();
        }
        this.endDocument();
        return callback(null, null);
      }
      /**
       * Transforms a quad into the text stream.
       * @param {Quad} quad An RDF quad.
       * @param {JsonLdContextNormalized} context A context for compacting.
       */
      transformQuad(quad, context) {
        if (!this.opened) {
          this.pushDocumentStart();
        }
        const lastGraphMatchesSubject = this.lastGraph && this.lastGraph.termType !== "DefaultGraph" && this.lastGraph.equals(quad.subject);
        if (!lastGraphMatchesSubject && (!this.lastGraph || !quad.graph.equals(this.lastGraph))) {
          let lastSubjectMatchesGraph = quad.graph.termType !== "DefaultGraph" && this.lastSubject && this.lastSubject.equals(quad.graph);
          if (this.lastGraph) {
            if (this.lastGraph.termType !== "DefaultGraph") {
              this.endPredicate();
              this.endSubject();
              this.endGraph(true);
              lastSubjectMatchesGraph = false;
            } else {
              if (!lastSubjectMatchesGraph) {
                this.endPredicate();
                this.endSubject(true);
              } else {
                this.endPredicate(true);
                this.lastSubject = null;
              }
            }
          }
          if (quad.graph.termType !== "DefaultGraph") {
            if (!lastSubjectMatchesGraph) {
              this.pushId(quad.graph, true, context);
            }
            this.pushSeparator(this.options.space ? SeparatorType_1.SeparatorType.GRAPH_FIELD_NONCOMPACT : SeparatorType_1.SeparatorType.GRAPH_FIELD_COMPACT);
            this.indentation++;
          }
          this.lastGraph = quad.graph;
        }
        if (!this.lastSubject || !quad.subject.equals(this.lastSubject)) {
          if (lastGraphMatchesSubject) {
            this.endPredicate();
            this.endSubject();
            this.indentation--;
            this.pushSeparator(SeparatorType_1.SeparatorType.ARRAY_END_COMMA);
            this.lastGraph = quad.graph;
          } else {
            if (this.lastSubject) {
              this.endPredicate();
              this.endSubject(true);
            }
            this.pushId(quad.subject, true, context);
          }
          this.lastSubject = quad.subject;
        }
        if (!this.lastPredicate || !quad.predicate.equals(this.lastPredicate)) {
          if (this.lastPredicate) {
            this.endPredicate(true);
          }
          this.pushPredicate(quad.predicate, context);
        }
        this.pushObject(quad.object, context);
      }
      pushDocumentStart() {
        this.opened = true;
        if (this.originalContext && !this.options.excludeContext) {
          this.pushSeparator(SeparatorType_1.SeparatorType.OBJECT_START);
          this.indentation++;
          this.pushSeparator(SeparatorType_1.SeparatorType.CONTEXT_FIELD);
          this.pushIndented(JSON.stringify(this.originalContext, null, this.options.space) + ",");
          this.pushSeparator(this.options.space ? SeparatorType_1.SeparatorType.GRAPH_FIELD_NONCOMPACT : SeparatorType_1.SeparatorType.GRAPH_FIELD_COMPACT);
          this.indentation++;
        } else {
          this.pushSeparator(SeparatorType_1.SeparatorType.ARRAY_START);
          this.indentation++;
        }
      }
      /**
       * Push the given term as an @id field.
       * @param {Term} term An RDF term.
       * @param startOnNewLine If `{` should start on a new line
       * @param {JsonLdContextNormalized} context The context.
       */
      pushId(term, startOnNewLine, context) {
        if (term.termType === "Quad") {
          this.pushNestedQuad(term, true, context);
        } else {
          const subjectValue = term.termType === "BlankNode" ? "_:" + term.value : context.compactIri(term.value, false);
          if (startOnNewLine) {
            this.pushSeparator(SeparatorType_1.SeparatorType.OBJECT_START);
          } else {
            this.push(SeparatorType_1.SeparatorType.OBJECT_START.label);
            if (this.options.space) {
              this.push("\n");
            }
          }
          this.indentation++;
          this.pushIndented(this.options.space ? `"@id": "${subjectValue}",` : `"@id":"${subjectValue}",`);
        }
      }
      /**
       * Push the given predicate field.
       * @param {Term} predicate An RDF term.
       * @param {JsonLdContextNormalized} context The context.
       */
      pushPredicate(predicate, context) {
        let property = predicate.value;
        if (!this.options.useRdfType && property === Util_1.Util.RDF_TYPE) {
          property = "@type";
          this.objectOptions = Object.assign(Object.assign({}, this.options), { compactIds: true, vocab: true });
        }
        const compactedProperty = context.compactIri(property, true);
        this.pushIndented(this.options.space ? `"${compactedProperty}": [` : `"${compactedProperty}":[`);
        this.indentation++;
        this.lastPredicate = predicate;
      }
      /**
       * Push the given object value.
       * @param {Term} object An RDF term.
       * @param {JsonLdContextNormalized} context The context.
       */
      pushObject(object, context) {
        if (!this.hadObjectForPredicate) {
          this.hadObjectForPredicate = true;
        } else {
          this.pushSeparator(SeparatorType_1.SeparatorType.COMMA);
        }
        if (object.termType === "Quad") {
          const lastLastSubject = this.lastSubject;
          const lastLastPredicate = this.lastPredicate;
          this.hadObjectForPredicate = false;
          this.pushNestedQuad(object, false, context);
          this.endSubject(false);
          this.hadObjectForPredicate = true;
          this.lastPredicate = lastLastPredicate;
          this.lastSubject = lastLastSubject;
          return;
        }
        let value;
        try {
          if (object["@list"]) {
            value = object;
          } else {
            value = Util_1.Util.termToValue(object, context, this.objectOptions || this.options);
          }
        } catch (e) {
          return this.emit("error", e);
        }
        this.pushIndented(JSON.stringify(value, null, this.options.space));
      }
      pushNestedQuad(nestedQuad, commaAfterSubject, context) {
        this.pushSeparator(SeparatorType_1.SeparatorType.OBJECT_START);
        this.indentation++;
        this.pushIndented(this.options.space ? `"@id": ` : `"@id":`, false);
        if (nestedQuad.graph.termType !== "DefaultGraph") {
          this.emit("error", new Error(`Found a nested quad with the non-default graph: ${nestedQuad.graph.value}`));
        }
        this.pushId(nestedQuad.subject, false, context);
        this.pushPredicate(nestedQuad.predicate, context);
        this.pushObject(nestedQuad.object, context);
        this.endPredicate(false);
        this.endSubject(commaAfterSubject);
      }
      endDocument() {
        this.opened = false;
        if (this.originalContext && !this.options.excludeContext) {
          this.indentation--;
          this.pushSeparator(SeparatorType_1.SeparatorType.ARRAY_END);
          this.indentation--;
          this.pushSeparator(SeparatorType_1.SeparatorType.OBJECT_END);
        } else {
          this.indentation--;
          this.pushSeparator(SeparatorType_1.SeparatorType.ARRAY_END);
        }
      }
      /**
       * Push the end of a predicate and reset the buffers.
       * @param {boolean} comma If a comma should be appended.
       */
      endPredicate(comma) {
        this.indentation--;
        this.pushSeparator(comma ? SeparatorType_1.SeparatorType.ARRAY_END_COMMA : SeparatorType_1.SeparatorType.ARRAY_END);
        this.hadObjectForPredicate = false;
        this.objectOptions = null;
        this.lastPredicate = null;
      }
      /**
       * Push the end of a subject and reset the buffers.
       * @param {boolean} comma If a comma should be appended.
       */
      endSubject(comma) {
        this.indentation--;
        this.pushSeparator(comma ? SeparatorType_1.SeparatorType.OBJECT_END_COMMA : SeparatorType_1.SeparatorType.OBJECT_END);
        this.lastSubject = null;
      }
      /**
       * Push the end of a graph and reset the buffers.
       * @param {boolean} comma If a comma should be appended.
       */
      endGraph(comma) {
        this.indentation--;
        this.pushSeparator(SeparatorType_1.SeparatorType.ARRAY_END);
        this.indentation--;
        this.pushSeparator(comma ? SeparatorType_1.SeparatorType.OBJECT_END_COMMA : SeparatorType_1.SeparatorType.OBJECT_END);
        this.lastGraph = null;
      }
      /**
       * Puh the given separator.
       * @param {SeparatorType} type A type of separator.
       */
      pushSeparator(type) {
        this.pushIndented(type.label);
      }
      /**
       * An indentation-aware variant of {@link #push}.
       * All strings that are pushed here will be prefixed by {@link #indentation} amount of spaces.
       * @param {string} data A string.
       * @param pushNewLine If a newline should be pushed afterwards.
       */
      pushIndented(data, pushNewLine = true) {
        const prefix = this.getIndentPrefix();
        const lines = data.split("\n").map((line) => prefix + line).join("\n");
        this.push(lines);
        if (this.options.space && pushNewLine) {
          this.push("\n");
        }
      }
      /**
       * @return {string} Get the current indentation prefix based on {@link #indentation}.
       */
      getIndentPrefix() {
        return this.options.space ? this.options.space.repeat(this.indentation) : "";
      }
    };
    exports.JsonLdSerializer = JsonLdSerializer;
  }
});

// node_modules/jsonld-streaming-serializer/index.js
var require_jsonld_streaming_serializer = __commonJS({
  "node_modules/jsonld-streaming-serializer/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_JsonLdSerializer(), exports);
    __exportStar(require_Util3(), exports);
  }
});

// node_modules/@comunica/actor-rdf-serialize-jsonld/lib/ActorRdfSerializeJsonLd.js
var require_ActorRdfSerializeJsonLd = __commonJS({
  "node_modules/@comunica/actor-rdf-serialize-jsonld/lib/ActorRdfSerializeJsonLd.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfSerializeJsonLd = void 0;
    var bus_rdf_serialize_1 = require_lib42();
    var jsonld_streaming_serializer_1 = require_jsonld_streaming_serializer();
    var ActorRdfSerializeJsonLd = class extends bus_rdf_serialize_1.ActorRdfSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/ld+json": 1.0
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/ld+json": "http://www.w3.org/ns/formats/JSON-LD"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async runHandle(action, mediaType, context) {
        const writer = new jsonld_streaming_serializer_1.JsonLdSerializer({ space: " ".repeat(this.jsonStringifyIndentSpaces) });
        let data;
        if ("pipe" in action.quadStream) {
          action.quadStream.on("error", (error2) => writer.emit("error", error2));
          data = action.quadStream.pipe(writer);
        } else {
          data = writer.import(action.quadStream);
        }
        return { data };
      }
    };
    exports.ActorRdfSerializeJsonLd = ActorRdfSerializeJsonLd;
  }
});

// node_modules/@comunica/actor-rdf-serialize-jsonld/lib/index.js
var require_lib45 = __commonJS({
  "node_modules/@comunica/actor-rdf-serialize-jsonld/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfSerializeJsonLd(), exports);
  }
});

// node_modules/arrayify-stream/index.js
var require_arrayify_stream = __commonJS({
  "node_modules/arrayify-stream/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function promisifyEventEmitter(event, result) {
      return new Promise((resolve, reject) => {
        event.on("end", () => resolve(result));
        event.on("error", reject);
      });
    }
    function arrayifyStream(stream) {
      const array = [];
      return promisifyEventEmitter(stream.on("data", (data) => array.push(data)), array);
    }
    exports.default = arrayifyStream;
  }
});

// node_modules/@jeswr/prefixcc/dist/fragment.js
var require_fragment = __commonJS({
  "node_modules/@jeswr/prefixcc/dist/fragment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fragment = void 0;
    function getFragment(inputStr) {
      let str = inputStr;
      if (str.endsWith("/") || str.endsWith("#")) {
        str = str.slice(0, str.length - 1);
      }
      const args = [];
      if (str.lastIndexOf("/") > 0) {
        args.push(str.lastIndexOf("/"));
      }
      if (str.lastIndexOf("#") > 0) {
        args.push(str.lastIndexOf("#"));
      }
      const i2 = Math.max(...args);
      return str.slice(i2 + 1);
    }
    function camelize(str) {
      var _a;
      const res = (_a = str.split(/[^a-z0-9]+/ig).filter((s) => s !== "").map((s) => s[0].toUpperCase() + s.slice(1)).join("").match(/[a-z][a-z0-9]+/ig)) === null || _a === void 0 ? void 0 : _a[0];
      return typeof res === "undefined" ? void 0 : res[0].toLowerCase() + res.slice(1);
    }
    function fragment(str) {
      let value = getFragment(str);
      value = value ? camelize(value) : void 0;
      return value || "v";
    }
    exports.fragment = fragment;
  }
});

// node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var global2 = typeof self !== "undefined" ? self : exports;
    var __self__ = function() {
      function F() {
        this.fetch = false;
        this.DOMException = global2.DOMException;
      }
      F.prototype = global2;
      return new F();
    }();
    (function(self2) {
      var irrelevant = function(exports2) {
        var support = {
          searchParams: "URLSearchParams" in self2,
          iterable: "Symbol" in self2 && "iterator" in Symbol,
          blob: "FileReader" in self2 && "Blob" in self2 && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in self2,
          arrayBuffer: "ArrayBuffer" in self2
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
            throw new TypeError("Invalid character in header field name");
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers3(headers) {
          this.map = {};
          if (headers instanceof Headers3) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers3.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers3.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers3.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers3.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers3.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers3.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers3.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers3.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers3.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers3.prototype[Symbol.iterator] = Headers3.prototype.entries;
        }
        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i2 = 0; i2 < view.length; i2++) {
            chars[i2] = String.fromCharCode(view[i2]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this._bodyInit = body;
            if (!body) {
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers3(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers3(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal;
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers3();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              headers.append(key, value);
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response2(bodyInit, options) {
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = "statusText" in options ? options.statusText : "OK";
          this.headers = new Headers3(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers3(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response = new Response2(null, { status: 0, statusText: "" });
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports2.DOMException = self2.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error2 = Error(message);
            this.stack = error2.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request2(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              resolve(new Response2(body, options));
            };
            xhr.onerror = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.ontimeout = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.onabort = function() {
              reject(new exports2.DOMException("Aborted", "AbortError"));
            };
            xhr.open(request.method, request.url, true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr && support.blob) {
              xhr.responseType = "blob";
            }
            request.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value);
            });
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!self2.fetch) {
          self2.fetch = fetch2;
          self2.Headers = Headers3;
          self2.Request = Request2;
          self2.Response = Response2;
        }
        exports2.Headers = Headers3;
        exports2.Request = Request2;
        exports2.Response = Response2;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__self__);
    __self__.fetch.ponyfill = true;
    delete __self__.fetch.polyfill;
    var ctx = __self__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// node_modules/@jeswr/prefixcc/dist/lookup/fetchContext.js
var require_fetchContext = __commonJS({
  "node_modules/@jeswr/prefixcc/dist/lookup/fetchContext.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fetchContext = exports.fetchJson = void 0;
    var cross_fetch_1 = require_browser_ponyfill();
    function fetchJson(url, options) {
      var _a;
      return __awaiter(this, void 0, void 0, function* () {
        const fetchFn = (_a = options === null || options === void 0 ? void 0 : options.fetch) !== null && _a !== void 0 ? _a : cross_fetch_1.fetch;
        return (yield fetchFn(url)).json();
      });
    }
    exports.fetchJson = fetchJson;
    function fetchContext(url, options) {
      return __awaiter(this, void 0, void 0, function* () {
        return (yield fetchJson(url, options))["@context"];
      });
    }
    exports.fetchContext = fetchContext;
  }
});

// node_modules/@jeswr/prefixcc/dist/lookup/lookupNamespace.js
var require_lookupNamespace = __commonJS({
  "node_modules/@jeswr/prefixcc/dist/lookup/lookupNamespace.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lookupUri = void 0;
    var fetchContext_1 = require_fetchContext();
    function lookupUri(prefix, options) {
      return __awaiter(this, void 0, void 0, function* () {
        const uri = (yield (0, fetchContext_1.fetchContext)(`https://prefix.cc/${prefix}.file.jsonld`, options))[prefix];
        if (typeof uri !== "string") {
          throw new Error(`Expected uri to be a string, received: ${uri} of type ${typeof uri}`);
        }
        return uri;
      });
    }
    exports.lookupUri = lookupUri;
  }
});

// node_modules/@jeswr/prefixcc/dist/lookup/lookupPrefix.js
var require_lookupPrefix = __commonJS({
  "node_modules/@jeswr/prefixcc/dist/lookup/lookupPrefix.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lookupPrefix = void 0;
    var fetchContext_1 = require_fetchContext();
    function lookupPrefix(uri, options) {
      return __awaiter(this, void 0, void 0, function* () {
        const url = new URL("https://prefix.cc/reverse");
        url.searchParams.append("uri", uri);
        url.searchParams.append("format", "jsonld");
        const prefixes = Object.keys(yield (0, fetchContext_1.fetchContext)(url, options));
        if (prefixes.length === 0) {
          throw new Error("No prefixes returned");
        }
        return prefixes[0];
      });
    }
    exports.lookupPrefix = lookupPrefix;
  }
});

// node_modules/@jeswr/prefixcc/dist/lookup/lookupAllPrefixes.js
var require_lookupAllPrefixes = __commonJS({
  "node_modules/@jeswr/prefixcc/dist/lookup/lookupAllPrefixes.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lookupAllPrefixes = void 0;
    var fetchContext_1 = require_fetchContext();
    function lookupAllPrefixes(options) {
      return __awaiter(this, void 0, void 0, function* () {
        return (0, fetchContext_1.fetchContext)("https://prefix.cc/context", options);
      });
    }
    exports.lookupAllPrefixes = lookupAllPrefixes;
  }
});

// node_modules/@jeswr/prefixcc/dist/lookup/index.js
var require_lookup = __commonJS({
  "node_modules/@jeswr/prefixcc/dist/lookup/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_lookupNamespace(), exports);
    __exportStar(require_lookupPrefix(), exports);
    __exportStar(require_lookupAllPrefixes(), exports);
  }
});

// node_modules/@jeswr/prefixcc/dist/index.js
var require_dist = __commonJS({
  "node_modules/@jeswr/prefixcc/dist/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lookupAllPrefixes = exports.prefixToUri = exports.uriToPrefix = void 0;
    var fragment_1 = require_fragment();
    var lookup_1 = require_lookup();
    function uriToPrefix(uri, options) {
      return __awaiter(this, void 0, void 0, function* () {
        let result;
        try {
          result = yield (0, lookup_1.lookupPrefix)(uri, options);
        } catch (_a) {
          if (options === null || options === void 0 ? void 0 : options.mintOnUnknown) {
            result = (0, fragment_1.fragment)(uri).slice(0, 4);
          }
        }
        if (typeof result !== "undefined" && typeof (options === null || options === void 0 ? void 0 : options.existingPrefixes) === "object" && result in options.existingPrefixes) {
          let i2 = 0;
          while (`${result}${i2}` in options.existingPrefixes) {
            i2 += 1;
          }
          result = `${result}${i2}`;
        }
        return result;
      });
    }
    exports.uriToPrefix = uriToPrefix;
    function prefixToUri(prefix, options) {
      return __awaiter(this, void 0, void 0, function* () {
        try {
          return yield (0, lookup_1.lookupUri)(prefix, options);
        } catch (_a) {
          return void 0;
        }
      });
    }
    exports.prefixToUri = prefixToUri;
    var lookup_2 = require_lookup();
    Object.defineProperty(exports, "lookupAllPrefixes", { enumerable: true, get: function() {
      return lookup_2.lookupAllPrefixes;
    } });
  }
});

// node_modules/shaclc-write/dist/utils.js
var require_utils3 = __commonJS({
  "node_modules/shaclc-write/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getShaclName = void 0;
    function getShaclName(term) {
      if (term.termType !== "NamedNode" || !term.value.startsWith(
        "http://www.w3.org/ns/shacl#"
        /* sh._ */
      )) {
        throw new Error(`Term ${term.value} is not part of the SHACL namespace`);
      }
      return term.value.slice(27);
    }
    exports.getShaclName = getShaclName;
  }
});

// node_modules/shaclc-write/dist/property-param .js
var require_property_param = __commonJS({
  "node_modules/shaclc-write/dist/property-param .js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      deactivated: true,
      severity: true,
      message: true,
      class: true,
      datatype: true,
      nodeKind: true,
      minExclusive: true,
      minInclusive: true,
      maxExclusive: true,
      maxInclusive: true,
      minLength: true,
      maxLength: true,
      pattern: true,
      flags: true,
      languageIn: true,
      uniqueLang: true,
      equals: true,
      disjoint: true,
      lessThan: true,
      lessThanOrEquals: true,
      qualifiedValueShape: true,
      qualifiedMinCount: true,
      qualifiedMaxCount: true,
      qualifiedValueShapesDisjoint: true,
      closed: true,
      ignoredProperties: true,
      hasValue: true,
      in: true,
      // This is here so that we can exract it from alts
      node: true
    };
  }
});

// node_modules/shaclc-write/dist/base-prefixes.js
var require_base_prefixes = __commonJS({
  "node_modules/shaclc-write/dist/base-prefixes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      owl: "http://www.w3.org/2002/07/owl#",
      rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
      rdfs: "http://www.w3.org/2000/01/rdf-schema#",
      sh: "http://www.w3.org/ns/shacl#",
      xsd: "http://www.w3.org/2001/XMLSchema#"
    };
  }
});

// node_modules/shaclc-write/dist/node-param.js
var require_node_param = __commonJS({
  "node_modules/shaclc-write/dist/node-param.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      targetNode: true,
      targetObjectsOf: true,
      targetSubjectsOf: true,
      deactivated: true,
      severity: true,
      message: true,
      class: true,
      datatype: true,
      nodeKind: true,
      minExclusive: true,
      minInclusive: true,
      maxExclusive: true,
      maxInclusive: true,
      minLength: true,
      maxLength: true,
      pattern: true,
      flags: true,
      languageIn: true,
      equals: true,
      disjoint: true,
      closed: true,
      ignoredProperties: true,
      hasValue: true,
      in: true
    };
  }
});

// node_modules/shaclc-write/dist/ShaclcGenerator.js
var require_ShaclcGenerator = __commonJS({
  "node_modules/shaclc-write/dist/ShaclcGenerator.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var n3_1 = require_lib43();
    var prefixcc_1 = require_dist();
    var rdf_string_ttl_1 = require_rdf_string_ttl();
    var utils_1 = require_utils3();
    var property_param_1 = __importDefault(require_property_param());
    var base_prefixes_1 = __importDefault(require_base_prefixes());
    var node_param_1 = __importDefault(require_node_param());
    function getNamespace(str) {
      var _a;
      return (_a = /^[^]*[#/]/.exec(str)) === null || _a === void 0 ? void 0 : _a[0];
    }
    var knownNamespaces = {
      "http://www.w3.org/1999/02/22-rdf-syntax-ns#": "rdf",
      "http://www.w3.org/2000/01/rdf-schema#": "rdfs",
      "http://www.w3.org/ns/shacl#": "sh",
      "http://www.w3.org/2001/XMLSchema#": "xsd"
    };
    var knownPrefixes = {
      rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
      rdfs: "http://www.w3.org/2000/01/rdf-schema#",
      sh: "http://www.w3.org/ns/shacl#",
      xsd: "http://www.w3.org/2001/XMLSchema#"
    };
    var SHACLCWriter = class {
      constructor(store, writer, prefixes = {}, base = void 0, errorOnExtraQuads = true, mintUnspecifiedPrefixes = false, fetch2, extendedSyntax = false) {
        this.store = store;
        this.base = base;
        this.errorOnExtraQuads = errorOnExtraQuads;
        this.mintUnspecifiedPrefixes = mintUnspecifiedPrefixes;
        this.fetch = fetch2;
        this.extendedSyntax = extendedSyntax;
        this.prefixes = {};
        this.prefixRev = {};
        for (const key of Object.keys(prefixes)) {
          const iri = prefixes[key];
          const value = typeof iri === "string" ? iri : iri.value;
          if (!(value in knownNamespaces) && !(key in knownPrefixes)) {
            this.prefixRev[value] = key;
            this.prefixes[key] = value;
          }
        }
        this.writer = writer;
      }
      /**
       * Used to initiate the flow of data through the writer.
       */
      // TODO: Make initialisation async
      write() {
        return __awaiter(this, void 0, void 0, function* () {
          const onotology = this.store.getQuads(null, "http://www.w3.org/1999/02/22-rdf-syntax-ns#type", "http://www.w3.org/2002/07/owl#Ontology", null);
          if (onotology.length === 1 && onotology[0].subject.termType === "NamedNode") {
            const base = onotology[0].subject;
            this.store.removeQuads(onotology);
            if (!base.equals(new n3_1.NamedNode("urn:x-base:default")))
              this.writer.add(`BASE ${(0, rdf_string_ttl_1.termToString)(base)}`);
            yield this.writeImports(base);
          } else {
            throw new Error("Base expected");
          }
          if (this.mintUnspecifiedPrefixes) {
            const namespaces = /* @__PURE__ */ new Set();
            for (const term of [
              ...this.store.getSubjects(null, null, null),
              ...this.store.getPredicates(null, null, null),
              ...this.store.getObjects(null, null, null)
            ]) {
              if (term.termType === "NamedNode") {
                const namespace = getNamespace(term.value);
                if (namespace && !(namespace in this.prefixRev) && !(namespace in knownNamespaces)) {
                  namespaces.add(namespace);
                }
              }
            }
            const existingPrefixes = Object.assign(Object.assign({}, this.prefixes), knownPrefixes);
            yield Promise.all([...namespaces].map((ns) => (0, prefixcc_1.uriToPrefix)(ns, {
              fetch: this.fetch,
              mintOnUnknown: true,
              existingPrefixes
            }).then((pref) => {
              this.prefixes[pref] = ns;
              existingPrefixes[pref] = ns;
              this.prefixRev[ns] = pref;
            })));
          }
          const allNamespaces = new Set([
            ...this.store.getSubjects(null, null, null),
            ...this.store.getPredicates(null, null, null),
            ...this.store.getObjects(null, null, null)
          ].filter((term) => term.termType === "NamedNode").map((term) => getNamespace(term.value)).filter((str) => typeof str === "string"));
          for (const key in this.prefixRev) {
            if (!allNamespaces.has(key)) {
              delete this.prefixes[this.prefixRev[key]];
              delete this.prefixRev[key];
            }
          }
          yield this.writePrefixes();
          this.prefixes = Object.assign(Object.assign({}, this.prefixes), knownPrefixes);
          this.prefixRev = Object.assign(Object.assign({}, this.prefixRev), knownNamespaces);
          this.writer.newLine();
          yield this.writeShapes();
          if (this.extendedSyntax) {
            const subjects = this.store.getSubjects(null, null, null);
            if (subjects.length > 0) {
              this.writer.newLine(1);
            }
            for (const subject of subjects) {
              this.writer.add(yield this.termToString(subject, true, true));
              this.writer.add(" ");
              this.writer.indent();
              yield this.writeTurtlePredicates(subject);
              this.writer.deindent();
            }
            if (subjects.length > 0) {
              this.writer.add(" .");
              this.writer.newLine();
            }
          }
          if (this.errorOnExtraQuads && this.store.size > 0) {
            throw new Error("Dataset contains quads that cannot be written in SHACLC");
          }
          this.writer.end();
        });
      }
      writeImports(base) {
        return __awaiter(this, void 0, void 0, function* () {
          const imports = this.store.getObjectsOnce(base, new n3_1.NamedNode(
            "http://www.w3.org/2002/07/owl#imports"
            /* owl.imports */
          ), null);
          if (imports.length > 0) {
            for (const imp of imports) {
              this.writer.add(`IMPORTS <${imp.value}>`, true);
            }
          }
        });
      }
      writePrefixes() {
        return __awaiter(this, void 0, void 0, function* () {
          const keys = Object.keys(this.prefixes).filter((key) => !(key in base_prefixes_1.default)).sort();
          if (keys.length > 0) {
            for (const key of keys) {
              this.writer.add(`PREFIX ${key}: <${this.prefixes[key]}>`, true);
            }
          }
        });
      }
      termToString(term, disableShaclName = false, allowBlankNodes = false) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            if (disableShaclName) {
              throw new Error("Shacl name disabled");
            }
            return (0, utils_1.getShaclName)(term);
          } catch (e) {
          }
          if (term.termType === "NamedNode") {
            const namespace = getNamespace(term.value);
            if (namespace && namespace in this.prefixRev) {
              if (namespace in this.prefixRev) {
                return `${this.prefixRev[namespace]}:${term.value.slice(namespace.length)}`;
              }
            }
            return (0, rdf_string_ttl_1.termToString)(term);
          }
          if (term.termType === "Literal") {
            if (term.datatypeString === "http://www.w3.org/2001/XMLSchema#integer" || term.datatypeString === "http://www.w3.org/2001/XMLSchema#boolean") {
              return term.value;
            }
            return (0, rdf_string_ttl_1.termToString)(term);
          }
          if (term.termType === "BlankNode" && allowBlankNodes) {
            (0, rdf_string_ttl_1.termToString)(term);
          }
          throw new Error(`Invalid term type for extra statement ${term.value} (${term.termType})`);
        });
      }
      writeShapes() {
        return __awaiter(this, void 0, void 0, function* () {
          for (const subject of this.store.getSubjectsOnce(new n3_1.NamedNode(
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
            /* rdf.type */
          ), new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#NodeShape"
            /* sh.NodeShape */
          ), null)) {
            if (this.store.getQuadsOnce(subject, new n3_1.NamedNode(
              "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
              /* rdf.type */
            ), new n3_1.NamedNode(
              "http://www.w3.org/2000/01/rdf-schema#Class"
              /* rdfs.Class */
            ), null).length > 0) {
              this.writer.add("shapeClass ");
            } else {
              this.writer.add("shape ");
            }
            this.writer.add(yield this.termToString(subject));
            this.writer.add(" ");
            const targetClasses = this.store.getObjectsOnce(subject, new n3_1.NamedNode(
              "http://www.w3.org/ns/shacl#targetClass"
              /* sh.targetClass */
            ), null);
            if (targetClasses.length > 0) {
              this.writer.add("-> ");
              for (const targetClass of targetClasses) {
                if (targetClass.termType === "NamedNode") {
                  this.writer.add(yield this.termToString(targetClass));
                } else {
                  this.writer.add("!");
                  this.writer.add(yield this.termToString(this.singleObject(targetClass, new n3_1.NamedNode(
                    "http://www.w3.org/ns/shacl#not"
                    /* sh.not */
                  ), true)));
                }
                this.writer.add(" ");
              }
            }
            const unusedPredicates = this.store.getPredicates(subject, null, null).filter((property) => [
              new n3_1.NamedNode(
                "http://www.w3.org/ns/shacl#targetClass"
                /* sh.targetClass */
              ),
              new n3_1.NamedNode(
                "http://www.w3.org/ns/shacl#property"
                /* sh.property */
              ),
              // TODO: See if "and" should be here as well
              new n3_1.NamedNode(
                "http://www.w3.org/ns/shacl#or"
                /* sh.or */
              ),
              ...Object.keys(node_param_1.default).map((key) => new n3_1.NamedNode("http://www.w3.org/ns/shacl#" + key))
            ].every((elem) => !property.equals(elem)));
            if (unusedPredicates.length > 0) {
              this.writer.add(";");
              this.writer.indent();
              this.writer.newLine(1);
            }
            if (this.extendedSyntax) {
              yield this.writeGivenTurtlePredicates(subject, unusedPredicates);
            }
            if (unusedPredicates.length > 0) {
              this.writer.add(" ");
              this.writer.deindent();
            }
            yield this.writeShapeBody(subject, false);
          }
        });
      }
      getSingleProperty(quad, allowedPredicates) {
        let examining = [quad];
        try {
          let name = (0, utils_1.getShaclName)(quad.predicate);
          let type = "pred";
          if (name === "not") {
            const quads = this.store.getQuadsOnce(quad.object, null, null, null);
            examining = examining.concat(quads);
            if (quads.length !== 1) {
              throw new Error("Can only handle having one predicate of 'not'");
            }
            [quad] = quads;
            name = (0, utils_1.getShaclName)(quad.predicate);
            type = "not";
          }
          if (!(name in allowedPredicates)) {
            throw new Error(`${name} is not allowed`);
          }
          return { name, type, object: quad.object };
        } catch (e) {
          this.store.addQuads(examining);
        }
        return void 0;
      }
      singleLayerPropertiesList(term, allowedPredicates) {
        const result = [];
        for (const quad of this.store.getQuadsOnce(term, null, null, null)) {
          const property = this.getSingleProperty(quad, allowedPredicates);
          if (property) {
            result.push(property);
          }
        }
        return result;
      }
      expectOneProperty(term, allowedPredicates) {
        const quads = this.store.getQuadsOnce(term, null, null, null);
        if (quads.length === 1) {
          const data = this.getSingleProperty(quads[0], allowedPredicates);
          if (data) {
            return data;
          }
        }
        this.store.addQuads(quads);
        return void 0;
      }
      orProperties(term, allowedPredicates) {
        const orProperties = [];
        for (const quad of this.store.getQuadsOnce(term, new n3_1.NamedNode(
          "http://www.w3.org/ns/shacl#or"
          /* sh.or */
        ), null, null)) {
          const statement = [];
          for (const item of this.getList(quad.object)) {
            const property = this.expectOneProperty(item, allowedPredicates);
            if (!property) {
              this.store.addQuad(quad);
              throw new Error("Each entry of the 'or' statement must declare exactly one property");
            }
            statement.push(property);
          }
          orProperties.push(statement);
        }
        return orProperties;
      }
      /**
       * Extract an rdf:list
       */
      getList(term) {
        let termTemp = term;
        const list = [];
        while (!termTemp.equals(new n3_1.NamedNode(
          "http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"
          /* rdf.nil */
        ))) {
          list.push(this.singleObject(termTemp, new n3_1.NamedNode(
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#first"
            /* rdf.first */
          ), true));
          termTemp = this.singleObject(termTemp, new n3_1.NamedNode(
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#rest"
            /* rdf.rest */
          ), true);
        }
        return list;
      }
      writeIriLiteralOrArray(object) {
        return __awaiter(this, void 0, void 0, function* () {
          if (object.termType === "BlankNode") {
            this.writer.add("[");
            let first = true;
            for (const term of this.getList(object)) {
              if (first) {
                first = false;
              } else {
                this.writer.add(" ");
              }
              this.writer.add(yield this.termToString(term));
            }
            this.writer.add("]");
          } else {
            this.writer.add(yield this.termToString(object));
          }
        });
      }
      singleObject(subject, predicate, strict) {
        var _a;
        return (_a = this.singleQuad(subject, predicate, strict)) === null || _a === void 0 ? void 0 : _a.object;
      }
      singleQuad(subject, predicate, strict = false) {
        const objects = this.store.getQuadsOnce(subject, predicate, null, null);
        if (strict && objects.length !== 1) {
          this.store.addQuads(objects);
          throw new Error(`The subject and predicate ${subject === null || subject === void 0 ? void 0 : subject.value} ${predicate === null || predicate === void 0 ? void 0 : predicate.value} must have exactly one object. Instead has ${objects.length}`);
        }
        if (objects.length > 1) {
          this.store.addQuads(objects);
          throw new Error(`The subject and predicate ${subject === null || subject === void 0 ? void 0 : subject.value} ${predicate === null || predicate === void 0 ? void 0 : predicate.value} can have at most one object. Instead has ${objects.length}`);
        }
        return objects.length === 1 ? objects[0] : void 0;
      }
      writeAssigment({ name, type, object }) {
        return __awaiter(this, void 0, void 0, function* () {
          if (type === "not") {
            this.writer.add("!");
          }
          this.writer.add(name);
          this.writer.add("=");
          yield this.writeIriLiteralOrArray(object);
        });
      }
      writeAtom({ name, type, object }) {
        return __awaiter(this, void 0, void 0, function* () {
          if (type === "not") {
            this.writer.add("!");
          }
          switch (name) {
            case "node": {
              if (object.termType === "NamedNode") {
                this.writer.add(`@${yield this.termToString(object)}`);
              } else if (object.termType === "BlankNode") {
                yield this.writeShapeBody(object);
              } else {
                throw new Error("Invalid nested shape, must be blank node or IRI");
              }
              return;
            }
            case "nodeKind": {
              this.writer.add((0, utils_1.getShaclName)(object));
              return;
            }
            case "class": {
              this.writer.add(yield this.termToString(object));
              return;
            }
            case "datatype": {
              this.writer.add(yield this.termToString(object));
              return;
            }
            default:
              this.writer.add(name);
              this.writer.add("=");
              yield this.writeIriLiteralOrArray(object);
          }
        });
      }
      writeAssigments(assignments, divider = " ", first = true, shortcuts) {
        return __awaiter(this, void 0, void 0, function* () {
          for (const assignment of assignments) {
            if (first) {
              first = false;
            } else {
              this.writer.add(divider);
            }
            if (shortcuts) {
              yield this.writeAtom(assignment);
            } else {
              yield this.writeAssigment(assignment);
            }
          }
        });
      }
      writeParams(term, first = true, allowedParam, shortcuts = false, surroundings = false) {
        return __awaiter(this, void 0, void 0, function* () {
          const or = this.orProperties(term, allowedParam);
          const params = this.singleLayerPropertiesList(term, allowedParam);
          if (surroundings && (or.length > 0 || params.length > 0)) {
            this.writer.newLine(1);
          }
          for (const statement of or) {
            if (first) {
              first = false;
            } else {
              this.writer.add(" ");
            }
            yield this.writeAssigments(statement, "|", true, shortcuts);
          }
          yield this.writeAssigments(params, " ", first, shortcuts);
          if (surroundings && (or.length > 0 || params.length > 0)) {
            this.writer.add(" .");
          }
        });
      }
      writeShapeBody(term, nested = true) {
        return __awaiter(this, void 0, void 0, function* () {
          this.writer.add("{").indent();
          const properties = this.store.getObjectsOnce(term, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#property"
            /* sh.property */
          ), null);
          yield this.writeParams(term, true, node_param_1.default, false, true);
          for (const property of properties) {
            this.writer.newLine(1);
            yield this.writeProperty(property);
          }
          this.writer.deindent().newLine(1);
          if (nested) {
            this.writer.add("} .");
          } else {
            this.writer.add("}").newLine(1);
          }
        });
      }
      writeProperty(property) {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.writePath(this.singleObject(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#path"
            /* sh.path */
          ), true));
          const min = this.singleObject(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#minCount"
            /* sh.minCount */
          ));
          const max = this.singleObject(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#maxCount"
            /* sh.maxCount */
          ));
          const nodeKind = this.singleObject(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#nodeKind"
            /* sh.nodeKind */
          ));
          const propertyClass = this.singleObject(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#class"
            /* sh._class */
          ));
          const datatype = this.singleObject(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#datatype"
            /* sh.datatype */
          ));
          const nodeShapes = this.store.getObjectsOnce(property, new n3_1.NamedNode(
            "http://www.w3.org/ns/shacl#node"
            /* sh.node */
          ), null);
          if (nodeKind) {
            this.writer.add(" ");
            this.writer.add((0, utils_1.getShaclName)(nodeKind));
          }
          if (propertyClass) {
            this.writer.add(" ");
            this.writer.add(yield this.termToString(propertyClass));
          }
          if (datatype) {
            this.writer.add(" ");
            this.writer.add(yield this.termToString(datatype));
          }
          if (min !== void 0 || max !== void 0) {
            this.writer.add(" [");
            if (min) {
              if (min.termType !== "Literal" || min.datatypeString !== "http://www.w3.org/2001/XMLSchema#integer") {
                throw new Error("Invalid min value, must me an integer literal");
              }
              this.writer.add(min.value);
            } else {
              this.writer.add("0");
            }
            this.writer.add("..");
            if (max) {
              if (max.termType !== "Literal" || max.datatypeString !== "http://www.w3.org/2001/XMLSchema#integer") {
                throw new Error("Invalid max value, must me an integer literal");
              }
              this.store.removeMatches(property, new n3_1.NamedNode(
                "http://www.w3.org/ns/shacl#maxCount"
                /* sh.maxCount */
              ), void 0, void 0);
              this.writer.add(max.value);
            } else {
              this.writer.add("*");
            }
            this.writer.add("]");
          }
          yield this.writeParams(property, false, property_param_1.default, true);
          const nestedShapes = [];
          for (const node of nodeShapes) {
            if (node.termType === "NamedNode") {
              this.writer.add(" ");
              this.writer.add(`@${yield this.termToString(node)}`);
            } else if (node.termType === "BlankNode") {
              nestedShapes.push(node);
            } else {
              throw new Error("Invalid nested shape, must be blank node or IRI");
            }
          }
          for (const shape of nestedShapes) {
            this.writer.add(" ");
            yield this.writeShapeBody(shape);
          }
          if (this.extendedSyntax && this.store.getQuads(property, null, null, null).length > 0) {
            this.writer.add(" %");
            this.writer.indent();
            this.writer.newLine(1);
            yield this.writeTurtlePredicates(property);
            this.writer.deindent();
            this.writer.newLine(1);
            this.writer.add("%");
          }
          if (nestedShapes.length === 0) {
            this.writer.add(" .");
          }
        });
      }
      writeTurtlePredicates(term) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.writeGivenTurtlePredicates(term, this.store.getPredicates(term, null, null));
        });
      }
      writeGivenTurtlePredicates(term, predicates) {
        return __awaiter(this, void 0, void 0, function* () {
          let semi = false;
          if (predicates.some((predicate) => predicate.equals(n3_1.DataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#type")))) {
            const types = this.store.getObjectsOnce(term, n3_1.DataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"), null);
            if (types.length > 0) {
              semi = true;
              this.writer.add("a ");
              yield this.writeTurtleObjects(types);
            }
          }
          for (const predicate of predicates) {
            if (!predicate.equals(n3_1.DataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"))) {
              if (semi) {
                this.writer.add(" ;");
                this.writer.newLine(1);
              } else {
                semi = true;
              }
              this.writer.add(yield this.termToString(predicate, true));
              this.writer.add(" ");
              yield this.writeTurtleObjects(this.store.getObjectsOnce(term, predicate, null));
            }
          }
        });
      }
      writeTurtleObjects(objects) {
        return __awaiter(this, void 0, void 0, function* () {
          const blankObjects = [];
          const nonBlankObjects = [];
          for (const object of objects) {
            if (object.termType === "BlankNode" && [...this.store.match(null, null, object), ...this.store.match(null, object, null)].length === 0) {
              blankObjects.push(object);
            } else {
              nonBlankObjects.push(object);
            }
          }
          this.writer.add((yield Promise.all(nonBlankObjects.map((object) => this.termToString(object, true, true)))).join(", "));
          let comma = nonBlankObjects.length > 0;
          if (blankObjects.length > 0) {
            for (const blank of blankObjects) {
              if (comma) {
                this.writer.add(", ");
              } else {
                comma = true;
              }
              if (!(yield this.writeList(blank))) {
                this.writer.add("[");
                this.writer.indent();
                this.writer.newLine(1);
                yield this.writeTurtlePredicates(blank);
                this.writer.deindent();
                this.writer.newLine(1);
                this.writer.add("]");
              }
            }
          }
        });
      }
      writeList(object) {
        return __awaiter(this, void 0, void 0, function* () {
          let node = object;
          const elems = [];
          const quads = [];
          while (!node.equals(n3_1.DataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"))) {
            const first = this.store.getQuadsOnce(node, n3_1.DataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#first"), null, null);
            const rest = this.store.getQuadsOnce(node, n3_1.DataFactory.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#rest"), null, null);
            quads.push(...first, ...rest);
            if (first.length !== 1 || rest.length !== 1 || this.store.getQuads(node, null, null, null).length !== 0) {
              this.store.addQuads(quads);
              return false;
            }
            elems.push(first[0].object);
            node = rest[0].object;
          }
          let space = false;
          this.writer.add("(");
          for (const elem of elems) {
            if (space) {
              this.writer.add(" ");
            } else {
              space = true;
            }
            yield this.writeTurtleObjects([elem]);
          }
          this.writer.add(")");
          return true;
        });
      }
      writePath(term, braces = false) {
        return __awaiter(this, void 0, void 0, function* () {
          if (term.termType === "NamedNode") {
            this.writer.add(yield this.termToString(term));
          } else if (term.termType === "BlankNode") {
            const quads = this.store.getQuadsOnce(term, null, null, null);
            if (quads.length === 1) {
              const { predicate, object } = quads[0];
              switch (predicate.value) {
                case "http://www.w3.org/ns/shacl#inversePath":
                  this.writer.add("^");
                  yield this.writePath(object, true);
                  return;
                case "http://www.w3.org/ns/shacl#alternativePath": {
                  const alternatives = this.getList(object);
                  if (alternatives.length === 0) {
                    throw new Error("Invalid Alternative Path - no options");
                  } else if (alternatives.length === 1) {
                    yield this.writePath(alternatives[0]);
                  } else {
                    if (braces) {
                      this.writer.add("(");
                    }
                    let first = true;
                    for (const alt of alternatives) {
                      if (first) {
                        first = false;
                      } else {
                        this.writer.add("|");
                      }
                      yield this.writePath(alt, true);
                    }
                    if (braces) {
                      this.writer.add(")");
                    }
                  }
                  return;
                }
                case "http://www.w3.org/ns/shacl#zeroOrMorePath":
                  yield this.writePath(object, true);
                  this.writer.add("*");
                  return;
                case "http://www.w3.org/ns/shacl#oneOrMorePath":
                  yield this.writePath(object, true);
                  this.writer.add("+");
                  return;
                case "http://www.w3.org/ns/shacl#zeroOrOnePath":
                  yield this.writePath(object, true);
                  this.writer.add("?");
                  return;
                default:
                  throw new Error(`Invalid path type ${term.value}`);
              }
            } else {
              this.store.addQuads(quads);
              const sequence = this.getList(term);
              if (sequence.length === 0) {
                throw new Error("Invalid Path");
              } else {
                if (braces) {
                  this.writer.add("(");
                }
                let first = true;
                for (const alt of sequence) {
                  if (first) {
                    first = false;
                  } else {
                    this.writer.add("/");
                  }
                  yield this.writePath(alt, true);
                }
                if (braces) {
                  this.writer.add(")");
                }
              }
            }
          } else {
            throw new Error("Path should be named node or blank node");
          }
        });
      }
    };
    exports.default = SHACLCWriter;
  }
});

// node_modules/shaclc-write/dist/writer.js
var require_writer = __commonJS({
  "node_modules/shaclc-write/dist/writer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Writer = class {
      constructor(options) {
        this.indents = 0;
        this.write = options.write;
        this.end = options.end;
      }
      indent() {
        this.indents += 1;
        return this;
      }
      deindent() {
        if (this.indents < 1) {
          throw new Error(`Trying to deindent when indent is only ${this.indents}`);
        }
        this.indents -= 1;
        return this;
      }
      add(s, newLine = false) {
        this.write(newLine ? `
${"	".repeat(this.indents)}${s}` : s, "utf-8");
        return this;
      }
      newLine(no = 2) {
        this.write("\n".repeat(no) + "	".repeat(this.indents), "utf-8");
        return this;
      }
    };
    exports.default = Writer;
  }
});

// node_modules/shaclc-write/dist/volatile-store.js
var require_volatile_store = __commonJS({
  "node_modules/shaclc-write/dist/volatile-store.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var n3_1 = require_lib43();
    var VolitileStore = class extends n3_1.Store {
      getQuadsOnce(s, p, o, g) {
        const quads = this.getQuads(s, p, o, g);
        this.removeQuads(quads);
        return quads;
      }
      getSubjectsOnce(p, o, g) {
        return this.getQuadsOnce(null, p, o, g).map((term) => term.subject);
      }
      getObjectsOnce(s, p, g) {
        return this.getQuadsOnce(s, p, null, g).map((term) => term.object);
      }
    };
    exports.default = VolitileStore;
  }
});

// node_modules/shaclc-write/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/shaclc-write/dist/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.write = void 0;
    var n3_1 = require_lib43();
    var ShaclcGenerator_1 = __importDefault(require_ShaclcGenerator());
    var writer_1 = __importDefault(require_writer());
    var volatile_store_1 = __importDefault(require_volatile_store());
    function write(quads, options) {
      return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
          try {
            let s = "";
            const volatileStore = new volatile_store_1.default(quads);
            const graphs = volatileStore.getGraphs(null, null, null);
            if (graphs.length > 1) {
              throw new Error("More than one graph found - can serialize in the default graph");
            }
            if (graphs.length === 1 && !graphs[0].equals(n3_1.DataFactory.defaultGraph())) {
              throw new Error(`Expected all triples to be in the default graph, instead triples were in ${graphs[0].value}`);
            }
            const w = new writer_1.default({
              write: (chunk) => {
                s += chunk;
              },
              end: () => {
                let extraQuads = volatileStore.getQuads(null, null, null, null);
                if (extraQuads.length === 0) {
                  extraQuads = void 0;
                }
                resolve({
                  text: s,
                  extraQuads
                });
              }
            });
            const writer = new ShaclcGenerator_1.default(volatileStore, w, options === null || options === void 0 ? void 0 : options.prefixes, void 0, (options === null || options === void 0 ? void 0 : options.errorOnUnused) !== false, options === null || options === void 0 ? void 0 : options.mintPrefixes, options === null || options === void 0 ? void 0 : options.fetch, options === null || options === void 0 ? void 0 : options.extendedSyntax);
            yield writer.write();
          } catch (e) {
            reject(e);
          }
        }));
      });
    }
    exports.write = write;
  }
});

// node_modules/@comunica/actor-rdf-serialize-shaclc/lib/ActorRdfSerializeShaclc.js
var require_ActorRdfSerializeShaclc = __commonJS({
  "node_modules/@comunica/actor-rdf-serialize-shaclc/lib/ActorRdfSerializeShaclc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfSerializeShaclc = void 0;
    var bus_rdf_serialize_1 = require_lib42();
    var arrayify_stream_1 = require_arrayify_stream();
    var readable_stream_1 = require_browser3();
    var shaclc_write_1 = require_dist2();
    var ActorRdfSerializeShaclc = class extends bus_rdf_serialize_1.ActorRdfSerializeFixedMediaTypes {
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "text/shaclc": 1.0,
       *       "text/shaclc-ext": 0.5
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "text/shaclc": "http://www.w3.org/ns/formats/Shaclc",
       *       "text/shaclc-ext": "http://www.w3.org/ns/formats/ShaclcExtended"
       *     }} mediaTypeFormats
       */
      constructor(args) {
        super(args);
      }
      async runHandle(action, mediaType, context) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        try {
          const prefixes = {};
          action.quadStream.on("prefix", (prefix, iri) => {
            prefixes[prefix] = iri;
          });
          const { text } = await (0, shaclc_write_1.write)(await (0, arrayify_stream_1.default)(action.quadStream), { errorOnUnused: true, extendedSyntax: mediaType === "text/shaclc-ext", prefixes });
          data.push(text);
          data.push(null);
        } catch (error2) {
          data._read = () => {
            data.emit("error", error2);
          };
        }
        return {
          data,
          triples: true
        };
      }
    };
    exports.ActorRdfSerializeShaclc = ActorRdfSerializeShaclc;
  }
});

// node_modules/@comunica/actor-rdf-serialize-shaclc/lib/index.js
var require_lib46 = __commonJS({
  "node_modules/@comunica/actor-rdf-serialize-shaclc/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfSerializeShaclc(), exports);
  }
});

// node_modules/@comunica/bus-rdf-update-quads/lib/ActorRdfUpdateQuads.js
var require_ActorRdfUpdateQuads = __commonJS({
  "node_modules/@comunica/bus-rdf-update-quads/lib/ActorRdfUpdateQuads.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfUpdateQuads = void 0;
    var core_1 = require_lib2();
    var ActorRdfUpdateQuads = class extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfUpdateQuads = ActorRdfUpdateQuads;
  }
});

// node_modules/@comunica/bus-rdf-resolve-quad-pattern/lib/ActorRdfResolveQuadPattern.js
var require_ActorRdfResolveQuadPattern = __commonJS({
  "node_modules/@comunica/bus-rdf-resolve-quad-pattern/lib/ActorRdfResolveQuadPattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfResolveQuadPattern = void 0;
    var core_1 = require_lib2();
    var ActorRdfResolveQuadPattern = class extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorRdfResolveQuadPattern = ActorRdfResolveQuadPattern;
  }
});

// node_modules/@comunica/bus-rdf-resolve-quad-pattern/lib/ActorRdfResolveQuadPatternSource.js
var require_ActorRdfResolveQuadPatternSource = __commonJS({
  "node_modules/@comunica/bus-rdf-resolve-quad-pattern/lib/ActorRdfResolveQuadPatternSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfResolveQuadPatternSource = void 0;
    var ActorRdfResolveQuadPattern_1 = require_ActorRdfResolveQuadPattern();
    var ActorRdfResolveQuadPatternSource = class extends ActorRdfResolveQuadPattern_1.ActorRdfResolveQuadPattern {
      constructor(args) {
        super(args);
      }
      async test(action) {
        return true;
      }
      async run(action) {
        const source = await this.getSource(action.context, action.pattern);
        return await this.getOutput(source, action.pattern, action.context);
      }
      /**
       * Get the output of the given action on a source.
       * @param {IQuadSource} source A quad source, possibly lazy.
       * @param {Algebra.Operation} pattern The operation to apply.
       * @param {IActionContext} context Optional context data.
       * @return {Promise<IActorRdfResolveQuadPatternOutput>} A promise that resolves to a hash containing
       *                                                      a data RDFJS stream.
       */
      async getOutput(source, pattern, context) {
        const data = source.match(pattern.subject, pattern.predicate, pattern.object, pattern.graph, context);
        return { data };
      }
    };
    exports.ActorRdfResolveQuadPatternSource = ActorRdfResolveQuadPatternSource;
  }
});

// node_modules/@comunica/bus-rdf-resolve-quad-pattern/lib/utils.js
var require_utils4 = __commonJS({
  "node_modules/@comunica/bus-rdf-resolve-quad-pattern/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasContextSingleSourceOfType = exports.hasContextSingleSource = exports.getContextSourceUrl = exports.getContextSourceFirst = exports.getContextSource = exports.getContextSources = exports.getDataSourceContext = exports.getDataSourceValue = exports.getDataSourceType = exports.isDataSourceRawType = void 0;
    var context_entries_1 = require_lib4();
    var core_1 = require_lib2();
    function isDataSourceRawType(dataSource) {
      return typeof dataSource === "string" || "match" in dataSource;
    }
    exports.isDataSourceRawType = isDataSourceRawType;
    function getDataSourceType(dataSource) {
      if (typeof dataSource === "string") {
        return "";
      }
      return "match" in dataSource ? "rdfjsSource" : dataSource.type;
    }
    exports.getDataSourceType = getDataSourceType;
    function getDataSourceValue(dataSource) {
      return isDataSourceRawType(dataSource) ? dataSource : dataSource.value;
    }
    exports.getDataSourceValue = getDataSourceValue;
    function getDataSourceContext(dataSource, context) {
      if (isDataSourceRawType(dataSource) || !dataSource.context) {
        return context;
      }
      return context.merge(core_1.ActionContext.ensureActionContext(dataSource.context));
    }
    exports.getDataSourceContext = getDataSourceContext;
    function getContextSources(context) {
      return context.get(context_entries_1.KeysRdfResolveQuadPattern.sources);
    }
    exports.getContextSources = getContextSources;
    function getContextSource(context) {
      return context.get(context_entries_1.KeysRdfResolveQuadPattern.source);
    }
    exports.getContextSource = getContextSource;
    function getContextSourceFirst(context) {
      if (context.has(context_entries_1.KeysRdfResolveQuadPattern.source)) {
        return context.get(context_entries_1.KeysRdfResolveQuadPattern.source);
      }
      const datasources = context.get(context_entries_1.KeysRdfResolveQuadPattern.sources);
      if (datasources?.length === 1) {
        return datasources[0];
      }
    }
    exports.getContextSourceFirst = getContextSourceFirst;
    function getContextSourceUrl(source) {
      if (source) {
        let fileUrl = getDataSourceValue(source);
        if (typeof fileUrl === "string") {
          const hashPosition = fileUrl.indexOf("#");
          if (hashPosition >= 0) {
            fileUrl = fileUrl.slice(0, hashPosition);
          }
          return fileUrl;
        }
      }
    }
    exports.getContextSourceUrl = getContextSourceUrl;
    function hasContextSingleSource(context) {
      const source = getContextSource(context);
      return Boolean(source && (isDataSourceRawType(source) || source.value));
    }
    exports.hasContextSingleSource = hasContextSingleSource;
    function hasContextSingleSourceOfType(requiredType, context) {
      const source = getContextSource(context);
      return Boolean(source && getDataSourceType(source) === requiredType && getDataSourceValue(source));
    }
    exports.hasContextSingleSourceOfType = hasContextSingleSourceOfType;
  }
});

// node_modules/@comunica/bus-rdf-resolve-quad-pattern/lib/index.js
var require_lib47 = __commonJS({
  "node_modules/@comunica/bus-rdf-resolve-quad-pattern/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfResolveQuadPattern(), exports);
    __exportStar(require_ActorRdfResolveQuadPatternSource(), exports);
    __exportStar(require_utils4(), exports);
  }
});

// node_modules/@comunica/metadata/lib/MetadataValidationState.js
var require_MetadataValidationState = __commonJS({
  "node_modules/@comunica/metadata/lib/MetadataValidationState.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetadataValidationState = void 0;
    var MetadataValidationState = class {
      constructor() {
        this.invalidateListeners = [];
        this.valid = true;
      }
      addInvalidateListener(listener) {
        this.invalidateListeners.push(listener);
      }
      invalidate() {
        if (this.valid) {
          this.valid = false;
          for (const invalidateListener of this.invalidateListeners) {
            invalidateListener();
          }
        }
      }
    };
    exports.MetadataValidationState = MetadataValidationState;
  }
});

// node_modules/@comunica/metadata/lib/index.js
var require_lib48 = __commonJS({
  "node_modules/@comunica/metadata/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MetadataValidationState(), exports);
  }
});

// node_modules/@comunica/actor-rdf-resolve-quad-pattern-federated/lib/FederatedQuadSource.js
var require_FederatedQuadSource = __commonJS({
  "node_modules/@comunica/actor-rdf-resolve-quad-pattern-federated/lib/FederatedQuadSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FederatedQuadSource = void 0;
    var bus_query_operation_1 = require_lib7();
    var bus_rdf_resolve_quad_pattern_1 = require_lib47();
    var context_entries_1 = require_lib4();
    var data_factory_1 = require_lib5();
    var metadata_1 = require_lib48();
    var asynciterator_1 = require_asynciterator();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var rdf_terms_1 = require_rdf_terms();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var DF = new rdf_data_factory_1.DataFactory();
    var FederatedQuadSource = class _FederatedQuadSource {
      constructor(mediatorResolveQuadPattern, mediatorRdfMetadataAccumulate, context, emptyPatterns, skipEmptyPatterns) {
        this.mediatorResolveQuadPattern = mediatorResolveQuadPattern;
        this.mediatorRdfMetadataAccumulate = mediatorRdfMetadataAccumulate;
        this.sources = context.get(context_entries_1.KeysRdfResolveQuadPattern.sources);
        this.contextDefault = context.delete(context_entries_1.KeysRdfResolveQuadPattern.sources);
        this.emptyPatterns = emptyPatterns;
        this.sourceIds = context.get(context_entries_1.KeysRdfResolveQuadPattern.sourceIds) ?? /* @__PURE__ */ new Map();
        this.skipEmptyPatterns = skipEmptyPatterns;
        this.algebraFactory = new sparqlalgebrajs_1.Factory();
        if (this.skipEmptyPatterns) {
          for (const source of this.sources) {
            if (!this.emptyPatterns.has(source)) {
              this.emptyPatterns.set(source, []);
            }
          }
        }
      }
      /**
       * Check if the given RDF term is not bound to an exact value.
       * I.e., if it is not a Variable.
       * @param {RDF.Term} term An RDF term.
       * @return {boolean} If it is not bound.
       */
      static isTermBound(term) {
        return term.termType !== "Variable";
      }
      /**
       * Checks if the given (child) pattern is a more bound version of the given (parent) pattern.
       * This will also return true if the patterns are equal.
       * @param {RDF.BaseQuad} child A child pattern.
       * @param {RDF.BaseQuad} parent A parent pattern.
       * @return {boolean} If child is a sub-pattern of parent
       */
      static isSubPatternOf(child, parent) {
        return (!_FederatedQuadSource.isTermBound(parent.subject) || parent.subject.equals(child.subject)) && (!_FederatedQuadSource.isTermBound(parent.predicate) || parent.predicate.equals(child.predicate)) && (!_FederatedQuadSource.isTermBound(parent.object) || parent.object.equals(child.object)) && (!_FederatedQuadSource.isTermBound(parent.graph) || parent.graph.equals(child.graph));
      }
      /**
       * If the given term is a blank node, return a deterministic named node for it
       * based on the source id and the blank node value.
       * @param term Any RDF term.
       * @param sourceId A source identifier.
       * @return If the given term was a blank node, this will return a skolemized named node, otherwise the original term.
       */
      static skolemizeTerm(term, sourceId) {
        if (term.termType === "BlankNode") {
          return new data_factory_1.BlankNodeScoped(`bc_${sourceId}_${term.value}`, DF.namedNode(`${_FederatedQuadSource.SKOLEM_PREFIX}${sourceId}:${term.value}`));
        }
        return term;
      }
      /**
       * Skolemize all terms in the given quad.
       * @param quad An RDF quad.
       * @param sourceId A source identifier.
       * @return The skolemized quad.
       */
      static skolemizeQuad(quad, sourceId) {
        return (0, rdf_terms_1.mapTermsNested)(quad, (term) => _FederatedQuadSource.skolemizeTerm(term, sourceId));
      }
      /**
       * If a given term was a skolemized named node for the given source id,
       * deskolemize it again to a blank node.
       * If the given term was a skolemized named node for another source, return false.
       * If the given term was not a skolemized named node, return the original term.
       * @param term Any RDF term.
       * @param sourceId A source identifier.
       */
      static deskolemizeTerm(term, sourceId) {
        if (term.termType === "BlankNode" && "skolemized" in term) {
          term = term.skolemized;
        }
        if (term.termType === "NamedNode" && term.value.startsWith(_FederatedQuadSource.SKOLEM_PREFIX)) {
          const colonSeparator = term.value.indexOf(":", _FederatedQuadSource.SKOLEM_PREFIX.length);
          const termSourceId = term.value.slice(_FederatedQuadSource.SKOLEM_PREFIX.length, colonSeparator);
          if (termSourceId === sourceId) {
            const termLabel = term.value.slice(colonSeparator + 1, term.value.length);
            return DF.blankNode(termLabel);
          }
          return null;
        }
        return term;
      }
      /**
       * Deskolemize all terms in the given quad.
       * @param quad An RDF quad.
       * @param sourceId A source identifier.
       * @return The deskolemized quad.
       */
      static deskolemizeQuad(quad, sourceId) {
        return (0, rdf_terms_1.mapTermsNested)(quad, (term) => {
          const newTerm = _FederatedQuadSource.deskolemizeTerm(term, sourceId);
          return !newTerm ? term : newTerm;
        });
      }
      /**
       * If the given source is guaranteed to produce an empty result for the given pattern.
       *
       * This prediction is done based on the 'emptyPatterns' datastructure that is stored within this actor.
       * Every time an empty pattern is passed, this pattern is stored in this datastructure for this source.
       * If this pattern (or a more bound pattern) is queried, we know for certain that it will be empty again.
       * This is under the assumption that sources will remain static during query evaluation.
       *
       * @param {IQuerySource} source
       * @param {RDF.BaseQuad} pattern
       * @return {boolean}
       */
      isSourceEmpty(source, pattern) {
        if (!this.skipEmptyPatterns) {
          return false;
        }
        const emptyPatterns = this.emptyPatterns.get(source);
        if (emptyPatterns) {
          for (const emptyPattern of emptyPatterns) {
            if (_FederatedQuadSource.isSubPatternOf(pattern, emptyPattern)) {
              return true;
            }
          }
        }
        return false;
      }
      /**
       * Get the unique, deterministic id for the given source.
       * @param source A data source.
       * @return The id of the given source.
       */
      getSourceId(source) {
        let sourceId = this.sourceIds.get(source);
        if (sourceId === void 0) {
          sourceId = `${this.sourceIds.size}`;
          this.sourceIds.set(source, sourceId);
        }
        return sourceId;
      }
      match(subject, predicate, object, graph) {
        const tryAccumulatingMetadata = async () => {
          if (accumulatingMetadata.size === this.sources.length) {
            let accumulatedMetadata = (await this.mediatorRdfMetadataAccumulate.mediate({ mode: "initialize", context: this.contextDefault })).metadata;
            for (const appendingMetadata of accumulatingMetadata.values()) {
              accumulatedMetadata = {
                ...appendingMetadata,
                ...(await this.mediatorRdfMetadataAccumulate.mediate({
                  mode: "append",
                  accumulatedMetadata,
                  appendingMetadata,
                  context: this.contextDefault
                })).metadata
              };
            }
            accumulatedMetadata.state = new metadata_1.MetadataValidationState();
            const metadataToInvalidate = it.getProperty("metadata");
            it.setProperty("metadata", accumulatedMetadata);
            metadataToInvalidate?.state.invalidate();
          }
        };
        const accumulatingMetadata = /* @__PURE__ */ new Map();
        const proxyIt = Promise.all(this.sources.map(async (source, sourceIndex) => {
          const sourceId = this.getSourceId(source);
          const patternS = _FederatedQuadSource.deskolemizeTerm(subject, sourceId);
          const patternP = _FederatedQuadSource.deskolemizeTerm(predicate, sourceId);
          const patternO = _FederatedQuadSource.deskolemizeTerm(object, sourceId);
          const patternG = _FederatedQuadSource.deskolemizeTerm(graph, sourceId);
          let pattern;
          let context = (0, bus_rdf_resolve_quad_pattern_1.getDataSourceContext)(source, this.contextDefault);
          context = context.set(context_entries_1.KeysRdfResolveQuadPattern.source, source);
          let output;
          if (!patternS || !patternP || !patternO || !patternG || // eslint-disable-next-line no-cond-assign
          this.isSourceEmpty(source, pattern = this.algebraFactory.createPattern(patternS, patternP, patternO, patternG))) {
            output = { data: new asynciterator_1.ArrayIterator([], { autoStart: false }) };
            output.data.setProperty("metadata", {
              state: new metadata_1.MetadataValidationState(),
              ...(await this.mediatorRdfMetadataAccumulate.mediate({ mode: "initialize", context: this.contextDefault })).metadata
            });
          } else {
            output = await this.mediatorResolveQuadPattern.mediate({ pattern, context });
          }
          const addMetadataPropertyListener = () => {
            output.data.getProperty("metadata", (subMetadata) => {
              accumulatingMetadata.set(`${sourceIndex}`, subMetadata);
              if (this.skipEmptyPatterns && !subMetadata.cardinality?.value && pattern && !this.isSourceEmpty(source, pattern)) {
                this.emptyPatterns.get(source).push(pattern);
              }
              tryAccumulatingMetadata().catch((error2) => it.emit("error", error2));
              subMetadata.state?.addInvalidateListener(() => {
                accumulatingMetadata.delete(`${sourceIndex}`);
                addMetadataPropertyListener();
              });
            });
          };
          addMetadataPropertyListener();
          const data = output.data.map((quad) => _FederatedQuadSource.skolemizeQuad(quad, sourceId));
          data.on("error", (error2) => it.emit("error", error2));
          return data;
        }));
        proxyIt.catch((error2) => it.emit("error", error2));
        const it = new bus_query_operation_1.ClosableTransformIterator(async () => new asynciterator_1.UnionIterator(await proxyIt), {
          autoStart: false,
          onClose() {
            proxyIt.then((proxyItResolved) => {
              for (const subIt of proxyItResolved) {
                subIt.destroy();
              }
            }, () => {
            });
          }
        });
        if (this.sources.length === 0) {
          this.mediatorRdfMetadataAccumulate.mediate({ mode: "initialize", context: this.contextDefault }).then((result) => it.setProperty("metadata", { state: new metadata_1.MetadataValidationState(), ...result.metadata })).catch((error2) => it.emit("error", error2));
        }
        return it;
      }
    };
    exports.FederatedQuadSource = FederatedQuadSource;
    FederatedQuadSource.SKOLEM_PREFIX = "urn:comunica_skolem:source_";
  }
});

// node_modules/@comunica/actor-rdf-resolve-quad-pattern-federated/lib/ActorRdfResolveQuadPatternFederated.js
var require_ActorRdfResolveQuadPatternFederated = __commonJS({
  "node_modules/@comunica/actor-rdf-resolve-quad-pattern-federated/lib/ActorRdfResolveQuadPatternFederated.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfResolveQuadPatternFederated = void 0;
    var bus_rdf_resolve_quad_pattern_1 = require_lib47();
    var FederatedQuadSource_1 = require_FederatedQuadSource();
    var ActorRdfResolveQuadPatternFederated = class extends bus_rdf_resolve_quad_pattern_1.ActorRdfResolveQuadPatternSource {
      constructor(args) {
        super(args);
        this.emptyPatterns = /* @__PURE__ */ new Map();
        if (!args.mediatorRdfMetadataAccumulate) {
          this.mediatorRdfMetadataAccumulate = {
            async mediate(action) {
              if (action.mode === "initialize") {
                return { metadata: { cardinality: { type: "exact", value: 0 }, canContainUndefs: false } };
              }
              const metadata = { ...action.accumulatedMetadata };
              const subMetadata = action.appendingMetadata;
              if (!subMetadata.cardinality || !Number.isFinite(subMetadata.cardinality.value)) {
                metadata.cardinality.type = "estimate";
                metadata.cardinality.value = Number.POSITIVE_INFINITY;
              } else {
                if (subMetadata.cardinality.type === "estimate") {
                  metadata.cardinality.type = "estimate";
                }
                metadata.cardinality.value += subMetadata.cardinality.value;
              }
              if (metadata.requestTime || subMetadata.requestTime) {
                metadata.requestTime = metadata.requestTime || 0;
                subMetadata.requestTime = subMetadata.requestTime || 0;
                metadata.requestTime += subMetadata.requestTime;
              }
              if (metadata.pageSize || subMetadata.pageSize) {
                metadata.pageSize = metadata.pageSize || 0;
                subMetadata.pageSize = subMetadata.pageSize || 0;
                metadata.pageSize += subMetadata.pageSize;
              }
              if (subMetadata.canContainUndefs) {
                metadata.canContainUndefs = true;
              }
              return { metadata };
            }
          };
        }
      }
      async test(action) {
        const sources = (0, bus_rdf_resolve_quad_pattern_1.getContextSources)(action.context);
        if (!sources) {
          throw new Error(`Actor ${this.name} can only resolve quad pattern queries against a sources array.`);
        }
        return true;
      }
      async getSource(context) {
        return new FederatedQuadSource_1.FederatedQuadSource(this.mediatorResolveQuadPattern, this.mediatorRdfMetadataAccumulate, context, this.emptyPatterns, this.skipEmptyPatterns);
      }
    };
    exports.ActorRdfResolveQuadPatternFederated = ActorRdfResolveQuadPatternFederated;
  }
});

// node_modules/@comunica/actor-rdf-resolve-quad-pattern-federated/lib/index.js
var require_lib49 = __commonJS({
  "node_modules/@comunica/actor-rdf-resolve-quad-pattern-federated/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfResolveQuadPatternFederated(), exports);
    __exportStar(require_FederatedQuadSource(), exports);
  }
});

// node_modules/@comunica/bus-rdf-update-quads/lib/ActorRdfUpdateQuadsDestination.js
var require_ActorRdfUpdateQuadsDestination = __commonJS({
  "node_modules/@comunica/bus-rdf-update-quads/lib/ActorRdfUpdateQuadsDestination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfUpdateQuadsDestination = exports.deskolemize = exports.deskolemizeStream = void 0;
    var actor_rdf_resolve_quad_pattern_federated_1 = require_lib49();
    var context_entries_1 = require_lib4();
    var ActorRdfUpdateQuads_1 = require_ActorRdfUpdateQuads();
    function deskolemizeStream(stream, id) {
      return stream?.map((quad) => actor_rdf_resolve_quad_pattern_federated_1.FederatedQuadSource.deskolemizeQuad(quad, id));
    }
    exports.deskolemizeStream = deskolemizeStream;
    function deskolemize(action) {
      const destination = action.context.get(context_entries_1.KeysRdfUpdateQuads.destination);
      const id = action.context.get(context_entries_1.KeysRdfResolveQuadPattern.sourceIds)?.get(destination);
      if (!id) {
        return action;
      }
      return {
        ...action,
        quadStreamInsert: deskolemizeStream(action.quadStreamInsert, id),
        quadStreamDelete: deskolemizeStream(action.quadStreamDelete, id)
      };
    }
    exports.deskolemize = deskolemize;
    var ActorRdfUpdateQuadsDestination = class extends ActorRdfUpdateQuads_1.ActorRdfUpdateQuads {
      async test(action) {
        return true;
      }
      async run(action) {
        const destination = await this.getDestination(action.context);
        return await this.getOutput(destination, deskolemize(action), action.context);
      }
      /**
       * Get the output of the given action on a destination.
       * @param {IQuadDestination} destination A quad destination, possibly lazy.
       * @param {IActionRdfUpdateQuads} action The action.
       * @param {ActionContext} context Optional context data.
       */
      async getOutput(destination, action, context) {
        const execute = () => Promise.all([
          action.quadStreamInsert ? destination.insert(action.quadStreamInsert) : Promise.resolve(),
          action.quadStreamDelete ? destination.delete(action.quadStreamDelete) : Promise.resolve(),
          action.deleteGraphs ? destination.deleteGraphs(action.deleteGraphs.graphs, action.deleteGraphs.requireExistence, action.deleteGraphs.dropGraphs) : Promise.resolve(),
          action.createGraphs ? destination.createGraphs(action.createGraphs.graphs, action.createGraphs.requireNonExistence) : Promise.resolve()
        ]).then(() => {
        });
        return { execute };
      }
    };
    exports.ActorRdfUpdateQuadsDestination = ActorRdfUpdateQuadsDestination;
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/stream-browser.js
var require_stream_browser = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
    module.exports = require_events().EventEmitter;
  }
});

// (disabled):util
var require_util3 = __commonJS({
  "(disabled):util"() {
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list2 = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = null != arguments[i2] ? arguments[i2] : {};
        i2 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var _require = require_buffer();
    var Buffer2 = _require.Buffer;
    var _require2 = require_util3();
    var inspect = _require2.inspect;
    var custom = inspect && inspect.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module.exports = /* @__PURE__ */ function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0)
            return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next)
            ret += s + p.data;
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p = this.head;
          var i2 = 0;
          while (p) {
            copyBuffer(p.data, ret, i2);
            i2 += p.data.length;
            p = p.next;
          }
          return ret;
        }
        // Consumes a specified amount of bytes or characters from the buffered data.
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
        // Consumes a specified amount of characters from the buffered data.
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Consumes a specified amount of bytes from the buffered data.
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Make sure the linked list only shows the minimal necessary information.
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy2 = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
    "use strict";
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/errors-browser.js
var require_errors_browser = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/errors-browser.js"(exports, module) {
    "use strict";
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = /* @__PURE__ */ function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
      }(Base);
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i2) {
          return String(i2);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
      return "The " + name + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name) {
      return "Cannot call " + name + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module.exports.codes = codes;
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/state.js
var require_state2 = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
    "use strict";
    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/util-deprecate/browser.js
var require_browser4 = __commonJS({
  "node_modules/util-deprecate/browser.js"(exports, module) {
    module.exports = deprecate;
    function deprecate(fn, msg) {
      if (config("noDeprecation")) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config("throwDeprecation")) {
            throw new Error(msg);
          } else if (config("traceDeprecation")) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    }
    function config(name) {
      try {
        if (!global.localStorage)
          return false;
      } catch (_) {
        return false;
      }
      var val = global.localStorage[name];
      if (null == val)
        return false;
      return String(val).toLowerCase() === "true";
    }
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
    "use strict";
    module.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_browser4()
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy2();
    var _require = require_state2();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE2 = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits_browser()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE2("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb, er);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer2 = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer2[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer2.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer2, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          process.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
    "use strict";
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj)
        keys2.push(key);
      return keys2;
    };
    module.exports = Duplex;
    var Readable6 = require_stream_readable();
    var Writable = require_stream_writable();
    require_inherits_browser()(Duplex, Readable6);
    {
      keys = objectKeys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable6.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream2 = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
    "use strict";
    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once2(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once2(callback || noop);
      var readable2 = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable2)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable2 = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable2 && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module.exports = eos;
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module) {
    "use strict";
    var _Object$setPrototypeO;
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var finished = require_end_of_stream2();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error2 = this[kError];
        if (error2 !== null) {
          return Promise.reject(error2);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/from-browser.js
var require_from_browser = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports, module) {
    module.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
    "use strict";
    module.exports = Readable6;
    var Duplex;
    Readable6.ReadableState = ReadableState;
    var EE = require_events().EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require_util3();
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list2();
    var destroyImpl = require_destroy2();
    var _require = require_state2();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE2 = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits_browser()(Readable6, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable6(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable6))
        return new Readable6(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable6.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable6.prototype.destroy = destroyImpl.destroy;
    Readable6.prototype._undestroy = destroyImpl.undestroy;
    Readable6.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable6.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable6.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE2("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable6.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable6.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p = this._readableState.buffer.head;
      var content = "";
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable6.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable6.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable6.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable2, unpipeInfo) {
        debug("onunpipe");
        if (readable2 === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable6.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i2 = 0; i2 < len; i2++)
          dests[i2].emit("unpipe", this, {
            hasUnpiped: false
          });
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable6.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable6.prototype.addListener = Readable6.prototype.on;
    Readable6.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable6.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable6.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable6.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null)
        ;
    }
    Readable6.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i2 in stream) {
        if (this[i2] === void 0 && typeof stream[i2] === "function") {
          this[i2] = /* @__PURE__ */ function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i2);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable6.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable6.prototype, "readableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable6.prototype, "readableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable6.prototype, "readableFlowing", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable6._fromList = fromList;
    Object.defineProperty(Readable6.prototype, "readableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable6.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from_browser();
        }
        return from(Readable6, iterable, opts);
      };
    }
    function indexOf(xs, x) {
      for (var i2 = 0, l = xs.length; i2 < l; i2++) {
        if (xs[i2] === x)
          return i2;
      }
      return -1;
    }
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
    "use strict";
    module.exports = Transform3;
    var _require$codes = require_errors_browser().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    require_inherits_browser()(Transform3, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform3(options) {
      if (!(this instanceof Transform3))
        return new Transform3(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform3.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform3.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform3.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform3.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform3.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er)
        return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
    "use strict";
    module.exports = PassThrough;
    var Transform3 = require_stream_transform();
    require_inherits_browser()(PassThrough, Transform3);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform3.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline2 = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module) {
    "use strict";
    var eos;
    function once2(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors_browser().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop(err) {
      if (err)
        throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once2(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream2();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop;
      if (typeof streams[streams.length - 1] !== "function")
        return noop;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error2;
      var destroys = streams.map(function(stream, i2) {
        var reading = i2 < streams.length - 1;
        var writing = i2 > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error2)
            error2 = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error2);
        });
      });
      return streams.reduce(pipe);
    }
    module.exports = pipeline;
  }
});

// node_modules/readable-web-to-node-stream/node_modules/readable-stream/readable-browser.js
var require_readable_browser = __commonJS({
  "node_modules/readable-web-to-node-stream/node_modules/readable-stream/readable-browser.js"(exports, module) {
    exports = module.exports = require_stream_readable();
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require_stream_writable();
    exports.Duplex = require_stream_duplex();
    exports.Transform = require_stream_transform();
    exports.PassThrough = require_stream_passthrough();
    exports.finished = require_end_of_stream2();
    exports.pipeline = require_pipeline2();
  }
});

// node_modules/readable-web-to-node-stream/lib/index.js
var require_lib50 = __commonJS({
  "node_modules/readable-web-to-node-stream/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReadableWebToNodeStream = void 0;
    var readable_stream_1 = require_readable_browser();
    var ReadableWebToNodeStream = class extends readable_stream_1.Readable {
      /**
       *
       * @param stream Readable​Stream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream
       */
      constructor(stream) {
        super();
        this.bytesRead = 0;
        this.released = false;
        this.reader = stream.getReader();
      }
      /**
       * Implementation of readable._read(size).
       * When readable._read() is called, if data is available from the resource,
       * the implementation should begin pushing that data into the read queue
       * https://nodejs.org/api/stream.html#stream_readable_read_size_1
       */
      async _read() {
        if (this.released) {
          this.push(null);
          return;
        }
        this.pendingRead = this.reader.read();
        const data = await this.pendingRead;
        delete this.pendingRead;
        if (data.done || this.released) {
          this.push(null);
        } else {
          this.bytesRead += data.value.length;
          this.push(data.value);
        }
      }
      /**
       * If there is no unresolved read call to Web-API Readable​Stream immediately returns;
       * otherwise will wait until the read is resolved.
       */
      async waitForReadToComplete() {
        if (this.pendingRead) {
          await this.pendingRead;
        }
      }
      /**
       * Close wrapper
       */
      async close() {
        await this.syncAndRelease();
      }
      async syncAndRelease() {
        this.released = true;
        await this.waitForReadToComplete();
        await this.reader.releaseLock();
      }
    };
    exports.ReadableWebToNodeStream = ReadableWebToNodeStream;
  }
});

// node_modules/web-streams-ponyfill/dist/polyfill-ie11.min.js
var require_polyfill_ie11_min = __commonJS({
  "node_modules/web-streams-ponyfill/dist/polyfill-ie11.min.js"(exports, module) {
    (function(f) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f();
      } else if (typeof define === "function" && define.amd) {
        define([], f);
      } else {
        var g;
        if (typeof window !== "undefined") {
          g = window;
        } else if (typeof global !== "undefined") {
          g = global;
        } else if (typeof self !== "undefined") {
          g = self;
        } else {
          g = this;
        }
        g.default = f();
      }
    })(function() {
      var define2, module2, exports2;
      return function e(t, n, r) {
        function s(o2, u) {
          if (!n[o2]) {
            if (!t[o2]) {
              var a = typeof __require == "function" && __require;
              if (!u && a)
                return a(o2, true);
              if (i2)
                return i2(o2, true);
              var f = new Error("Cannot find module '" + o2 + "'");
              throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o2] = { exports: {} };
            t[o2][0].call(l.exports, function(e2) {
              var n2 = t[o2][1][e2];
              return s(n2 ? n2 : e2);
            }, l, l.exports, e, t, n, r);
          }
          return n[o2].exports;
        }
        var i2 = typeof __require == "function" && __require;
        for (var o = 0; o < r.length; o++)
          s(r[o]);
        return s;
      }({ 1: [function(_dereq_, module3, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        var _require = _dereq_("./spec/reference-implementation/lib/readable-stream"), ReadableStream2 = _require.ReadableStream, _require2 = _dereq_("./spec/reference-implementation/lib/writable-stream"), WritableStream = _require2.WritableStream, ByteLengthQueuingStrategy = _dereq_("./spec/reference-implementation/lib/byte-length-queuing-strategy"), CountQueuingStrategy = _dereq_("./spec/reference-implementation/lib/count-queuing-strategy"), _require3 = _dereq_("./spec/reference-implementation/lib/transform-stream"), TransformStream = _require3.TransformStream;
        exports3.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy, exports3.CountQueuingStrategy = CountQueuingStrategy, exports3.ReadableStream = ReadableStream2, exports3.WritableStream = WritableStream, exports3.TransformStream = TransformStream;
        var interfaces = { ReadableStream: ReadableStream2, WritableStream, ByteLengthQueuingStrategy, CountQueuingStrategy, TransformStream };
        exports3.default = interfaces;
      }, { "./spec/reference-implementation/lib/byte-length-queuing-strategy": 8, "./spec/reference-implementation/lib/count-queuing-strategy": 9, "./spec/reference-implementation/lib/readable-stream": 12, "./spec/reference-implementation/lib/transform-stream": 13, "./spec/reference-implementation/lib/writable-stream": 15 }], 2: [function(_dereq_, module3, exports3) {
        (function(global2) {
          "use strict";
          function compare(t, e) {
            if (t === e)
              return 0;
            for (var r = t.length, n = e.length, i2 = 0, a = Math.min(r, n); i2 < a; ++i2)
              if (t[i2] !== e[i2]) {
                r = t[i2], n = e[i2];
                break;
              }
            return r < n ? -1 : n < r ? 1 : 0;
          }
          function isBuffer(t) {
            return global2.Buffer && "function" == typeof global2.Buffer.isBuffer ? global2.Buffer.isBuffer(t) : !(null == t || !t._isBuffer);
          }
          function pToString(t) {
            return Object.prototype.toString.call(t);
          }
          function isView(t) {
            return !isBuffer(t) && ("function" == typeof global2.ArrayBuffer && ("function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(t) : !!t && (t instanceof DataView || !!(t.buffer && t.buffer instanceof ArrayBuffer))));
          }
          function getName(t) {
            if (util.isFunction(t)) {
              if (functionsHaveNames)
                return t.name;
              var e = t.toString().match(regex);
              return e && e[1];
            }
          }
          function truncate(t, e) {
            return "string" == typeof t ? t.length < e ? t : t.slice(0, e) : t;
          }
          function inspect(t) {
            if (functionsHaveNames || !util.isFunction(t))
              return util.inspect(t);
            var e = getName(t);
            return "[Function" + (e ? ": " + e : "") + "]";
          }
          function getMessage(t) {
            return truncate(inspect(t.actual), 128) + " " + t.operator + " " + truncate(inspect(t.expected), 128);
          }
          function fail(t, e, r, n, i2) {
            throw new assert.AssertionError({ message: r, actual: t, expected: e, operator: n, stackStartFunction: i2 });
          }
          function ok(t, e) {
            t || fail(t, true, e, "==", assert.ok);
          }
          function _deepEqual(t, e, r, n) {
            if (t === e)
              return true;
            if (isBuffer(t) && isBuffer(e))
              return 0 === compare(t, e);
            if (util.isDate(t) && util.isDate(e))
              return t.getTime() === e.getTime();
            if (util.isRegExp(t) && util.isRegExp(e))
              return t.source === e.source && t.global === e.global && t.multiline === e.multiline && t.lastIndex === e.lastIndex && t.ignoreCase === e.ignoreCase;
            if (null !== t && "object" == typeof t || null !== e && "object" == typeof e) {
              if (isView(t) && isView(e) && pToString(t) === pToString(e) && !(t instanceof Float32Array || t instanceof Float64Array))
                return 0 === compare(new Uint8Array(t.buffer), new Uint8Array(e.buffer));
              if (isBuffer(t) !== isBuffer(e))
                return false;
              var i2 = (n = n || { actual: [], expected: [] }).actual.indexOf(t);
              return -1 !== i2 && i2 === n.expected.indexOf(e) || (n.actual.push(t), n.expected.push(e), objEquiv(t, e, r, n));
            }
            return r ? t === e : t == e;
          }
          function isArguments(t) {
            return "[object Arguments]" == Object.prototype.toString.call(t);
          }
          function objEquiv(t, e, r, n) {
            if (null === t || void 0 === t || null === e || void 0 === e)
              return false;
            if (util.isPrimitive(t) || util.isPrimitive(e))
              return t === e;
            if (r && Object.getPrototypeOf(t) !== Object.getPrototypeOf(e))
              return false;
            var i2 = isArguments(t), a = isArguments(e);
            if (i2 && !a || !i2 && a)
              return false;
            if (i2)
              return t = pSlice.call(t), e = pSlice.call(e), _deepEqual(t, e, r);
            var o, s, u = objectKeys(t), f = objectKeys(e);
            if (u.length !== f.length)
              return false;
            for (u.sort(), f.sort(), s = u.length - 1; s >= 0; s--)
              if (u[s] !== f[s])
                return false;
            for (s = u.length - 1; s >= 0; s--)
              if (o = u[s], !_deepEqual(t[o], e[o], r, n))
                return false;
            return true;
          }
          function notDeepStrictEqual(t, e, r) {
            _deepEqual(t, e, true) && fail(t, e, r, "notDeepStrictEqual", notDeepStrictEqual);
          }
          function expectedException(t, e) {
            if (!t || !e)
              return false;
            if ("[object RegExp]" == Object.prototype.toString.call(e))
              return e.test(t);
            try {
              if (t instanceof e)
                return true;
            } catch (t2) {
            }
            return !Error.isPrototypeOf(e) && true === e.call({}, t);
          }
          function _tryBlock(t) {
            var e;
            try {
              t();
            } catch (t2) {
              e = t2;
            }
            return e;
          }
          function _throws(t, e, r, n) {
            var i2;
            if ("function" != typeof e)
              throw new TypeError('"block" argument must be a function');
            "string" == typeof r && (n = r, r = null), i2 = _tryBlock(e), n = (r && r.name ? " (" + r.name + ")." : ".") + (n ? " " + n : "."), t && !i2 && fail(i2, r, "Missing expected exception" + n);
            var a = "string" == typeof n, o = !t && util.isError(i2), s = !t && i2 && !r;
            if ((o && a && expectedException(i2, r) || s) && fail(i2, r, "Got unwanted exception" + n), t && i2 && r && !expectedException(i2, r) || !t && i2)
              throw i2;
          }
          var util = _dereq_("util/"), hasOwn = Object.prototype.hasOwnProperty, pSlice = Array.prototype.slice, functionsHaveNames = "foo" === function foo() {
          }.name, assert = module3.exports = ok, regex = /\s*function\s+([^\(\s]*)\s*/;
          assert.AssertionError = function AssertionError(t) {
            this.name = "AssertionError", this.actual = t.actual, this.expected = t.expected, this.operator = t.operator, t.message ? (this.message = t.message, this.generatedMessage = false) : (this.message = getMessage(this), this.generatedMessage = true);
            var e = t.stackStartFunction || fail;
            if (Error.captureStackTrace)
              Error.captureStackTrace(this, e);
            else {
              var r = new Error();
              if (r.stack) {
                var n = r.stack, i2 = getName(e), a = n.indexOf("\n" + i2);
                if (a >= 0) {
                  var o = n.indexOf("\n", a + 1);
                  n = n.substring(o + 1);
                }
                this.stack = n;
              }
            }
          }, util.inherits(assert.AssertionError, Error), assert.fail = fail, assert.ok = ok, assert.equal = function equal(t, e, r) {
            t != e && fail(t, e, r, "==", assert.equal);
          }, assert.notEqual = function notEqual(t, e, r) {
            t == e && fail(t, e, r, "!=", assert.notEqual);
          }, assert.deepEqual = function deepEqual(t, e, r) {
            _deepEqual(t, e, false) || fail(t, e, r, "deepEqual", assert.deepEqual);
          }, assert.deepStrictEqual = function deepStrictEqual(t, e, r) {
            _deepEqual(t, e, true) || fail(t, e, r, "deepStrictEqual", assert.deepStrictEqual);
          }, assert.notDeepEqual = function notDeepEqual(t, e, r) {
            _deepEqual(t, e, false) && fail(t, e, r, "notDeepEqual", assert.notDeepEqual);
          }, assert.notDeepStrictEqual = notDeepStrictEqual, assert.strictEqual = function strictEqual(t, e, r) {
            t !== e && fail(t, e, r, "===", assert.strictEqual);
          }, assert.notStrictEqual = function notStrictEqual(t, e, r) {
            t === e && fail(t, e, r, "!==", assert.notStrictEqual);
          }, assert.throws = function(t, e, r) {
            _throws(true, t, e, r);
          }, assert.doesNotThrow = function(t, e, r) {
            _throws(false, t, e, r);
          }, assert.ifError = function(t) {
            if (t)
              throw t;
          };
          var objectKeys = Object.keys || function(t) {
            var e = [];
            for (var r in t)
              hasOwn.call(t, r) && e.push(r);
            return e;
          };
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "util/": 7 }], 3: [function(_dereq_, module3, exports3) {
      }, {}], 4: [function(_dereq_, module3, exports3) {
        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        function runTimeout(e) {
          if (cachedSetTimeout === setTimeout)
            return setTimeout(e, 0);
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout)
            return cachedSetTimeout = setTimeout, setTimeout(e, 0);
          try {
            return cachedSetTimeout(e, 0);
          } catch (t) {
            try {
              return cachedSetTimeout.call(null, e, 0);
            } catch (t2) {
              return cachedSetTimeout.call(this, e, 0);
            }
          }
        }
        function runClearTimeout(e) {
          if (cachedClearTimeout === clearTimeout)
            return clearTimeout(e);
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout)
            return cachedClearTimeout = clearTimeout, clearTimeout(e);
          try {
            return cachedClearTimeout(e);
          } catch (t) {
            try {
              return cachedClearTimeout.call(null, e);
            } catch (t2) {
              return cachedClearTimeout.call(this, e);
            }
          }
        }
        function cleanUpNextTick() {
          draining && currentQueue && (draining = false, currentQueue.length ? queue = currentQueue.concat(queue) : queueIndex = -1, queue.length && drainQueue());
        }
        function drainQueue() {
          if (!draining) {
            var e = runTimeout(cleanUpNextTick);
            draining = true;
            for (var t = queue.length; t; ) {
              for (currentQueue = queue, queue = []; ++queueIndex < t; )
                currentQueue && currentQueue[queueIndex].run();
              queueIndex = -1, t = queue.length;
            }
            currentQueue = null, draining = false, runClearTimeout(e);
          }
        }
        function Item(e, t) {
          this.fun = e, this.array = t;
        }
        function noop() {
        }
        var cachedSetTimeout, cachedClearTimeout, process2 = module3.exports = {};
        !function() {
          try {
            cachedSetTimeout = "function" == typeof setTimeout ? setTimeout : defaultSetTimout;
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            cachedClearTimeout = "function" == typeof clearTimeout ? clearTimeout : defaultClearTimeout;
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        }();
        var currentQueue, queue = [], draining = false, queueIndex = -1;
        process2.nextTick = function(e) {
          var t = new Array(arguments.length - 1);
          if (arguments.length > 1)
            for (var r = 1; r < arguments.length; r++)
              t[r - 1] = arguments[r];
          queue.push(new Item(e, t)), 1 !== queue.length || draining || runTimeout(drainQueue);
        }, Item.prototype.run = function() {
          this.fun.apply(null, this.array);
        }, process2.title = "browser", process2.browser = true, process2.env = {}, process2.argv = [], process2.version = "", process2.versions = {}, process2.on = noop, process2.addListener = noop, process2.once = noop, process2.off = noop, process2.removeListener = noop, process2.removeAllListeners = noop, process2.emit = noop, process2.prependListener = noop, process2.prependOnceListener = noop, process2.listeners = function(e) {
          return [];
        }, process2.binding = function(e) {
          throw new Error("process.binding is not supported");
        }, process2.cwd = function() {
          return "/";
        }, process2.chdir = function(e) {
          throw new Error("process.chdir is not supported");
        }, process2.umask = function() {
          return 0;
        };
      }, {}], 5: [function(_dereq_, module3, exports3) {
        "function" == typeof Object.create ? module3.exports = function inherits(t, e) {
          t.super_ = e, t.prototype = Object.create(e.prototype, { constructor: { value: t, enumerable: false, writable: true, configurable: true } });
        } : module3.exports = function inherits(t, e) {
          t.super_ = e;
          var o = function() {
          };
          o.prototype = e.prototype, t.prototype = new o(), t.prototype.constructor = t;
        };
      }, {}], 6: [function(_dereq_, module3, exports3) {
        module3.exports = function isBuffer(o) {
          return o && "object" == typeof o && "function" == typeof o.copy && "function" == typeof o.fill && "function" == typeof o.readUInt8;
        };
      }, {}], 7: [function(_dereq_, module3, exports3) {
        (function(process2, global2) {
          function inspect(e, r) {
            var t = { seen: [], stylize: stylizeNoColor };
            return arguments.length >= 3 && (t.depth = arguments[2]), arguments.length >= 4 && (t.colors = arguments[3]), isBoolean(r) ? t.showHidden = r : r && exports3._extend(t, r), isUndefined(t.showHidden) && (t.showHidden = false), isUndefined(t.depth) && (t.depth = 2), isUndefined(t.colors) && (t.colors = false), isUndefined(t.customInspect) && (t.customInspect = true), t.colors && (t.stylize = stylizeWithColor), formatValue(t, e, t.depth);
          }
          function stylizeWithColor(e, r) {
            var t = inspect.styles[r];
            return t ? "\x1B[" + inspect.colors[t][0] + "m" + e + "\x1B[" + inspect.colors[t][1] + "m" : e;
          }
          function stylizeNoColor(e, r) {
            return e;
          }
          function arrayToHash(e) {
            var r = {};
            return e.forEach(function(e2, t) {
              r[e2] = true;
            }), r;
          }
          function formatValue(e, r, t) {
            if (e.customInspect && r && isFunction(r.inspect) && r.inspect !== exports3.inspect && (!r.constructor || r.constructor.prototype !== r)) {
              var n = r.inspect(t, e);
              return isString2(n) || (n = formatValue(e, n, t)), n;
            }
            var i2 = formatPrimitive(e, r);
            if (i2)
              return i2;
            var o = Object.keys(r), s = arrayToHash(o);
            if (e.showHidden && (o = Object.getOwnPropertyNames(r)), isError(r) && (o.indexOf("message") >= 0 || o.indexOf("description") >= 0))
              return formatError(r);
            if (0 === o.length) {
              if (isFunction(r)) {
                var u = r.name ? ": " + r.name : "";
                return e.stylize("[Function" + u + "]", "special");
              }
              if (isRegExp(r))
                return e.stylize(RegExp.prototype.toString.call(r), "regexp");
              if (isDate(r))
                return e.stylize(Date.prototype.toString.call(r), "date");
              if (isError(r))
                return formatError(r);
            }
            var c = "", a = false, l = ["{", "}"];
            if (isArray(r) && (a = true, l = ["[", "]"]), isFunction(r) && (c = " [Function" + (r.name ? ": " + r.name : "") + "]"), isRegExp(r) && (c = " " + RegExp.prototype.toString.call(r)), isDate(r) && (c = " " + Date.prototype.toUTCString.call(r)), isError(r) && (c = " " + formatError(r)), 0 === o.length && (!a || 0 == r.length))
              return l[0] + c + l[1];
            if (t < 0)
              return isRegExp(r) ? e.stylize(RegExp.prototype.toString.call(r), "regexp") : e.stylize("[Object]", "special");
            e.seen.push(r);
            var p;
            return p = a ? formatArray(e, r, t, s, o) : o.map(function(n2) {
              return formatProperty(e, r, t, s, n2, a);
            }), e.seen.pop(), reduceToSingleString(p, c, l);
          }
          function formatPrimitive(e, r) {
            if (isUndefined(r))
              return e.stylize("undefined", "undefined");
            if (isString2(r)) {
              var t = "'" + JSON.stringify(r).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
              return e.stylize(t, "string");
            }
            return isNumber(r) ? e.stylize("" + r, "number") : isBoolean(r) ? e.stylize("" + r, "boolean") : isNull(r) ? e.stylize("null", "null") : void 0;
          }
          function formatError(e) {
            return "[" + Error.prototype.toString.call(e) + "]";
          }
          function formatArray(e, r, t, n, i2) {
            for (var o = [], s = 0, u = r.length; s < u; ++s)
              hasOwnProperty(r, String(s)) ? o.push(formatProperty(e, r, t, n, String(s), true)) : o.push("");
            return i2.forEach(function(i3) {
              i3.match(/^\d+$/) || o.push(formatProperty(e, r, t, n, i3, true));
            }), o;
          }
          function formatProperty(e, r, t, n, i2, o) {
            var s, u, c;
            if ((c = Object.getOwnPropertyDescriptor(r, i2) || { value: r[i2] }).get ? u = c.set ? e.stylize("[Getter/Setter]", "special") : e.stylize("[Getter]", "special") : c.set && (u = e.stylize("[Setter]", "special")), hasOwnProperty(n, i2) || (s = "[" + i2 + "]"), u || (e.seen.indexOf(c.value) < 0 ? (u = isNull(t) ? formatValue(e, c.value, null) : formatValue(e, c.value, t - 1)).indexOf("\n") > -1 && (u = o ? u.split("\n").map(function(e2) {
              return "  " + e2;
            }).join("\n").substr(2) : "\n" + u.split("\n").map(function(e2) {
              return "   " + e2;
            }).join("\n")) : u = e.stylize("[Circular]", "special")), isUndefined(s)) {
              if (o && i2.match(/^\d+$/))
                return u;
              (s = JSON.stringify("" + i2)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (s = s.substr(1, s.length - 2), s = e.stylize(s, "name")) : (s = s.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), s = e.stylize(s, "string"));
            }
            return s + ": " + u;
          }
          function reduceToSingleString(e, r, t) {
            var n = 0;
            return e.reduce(function(e2, r2) {
              return n++, r2.indexOf("\n") >= 0 && n++, e2 + r2.replace(/\u001b\[\d\d?m/g, "").length + 1;
            }, 0) > 60 ? t[0] + ("" === r ? "" : r + "\n ") + " " + e.join(",\n  ") + " " + t[1] : t[0] + r + " " + e.join(", ") + " " + t[1];
          }
          function isArray(e) {
            return Array.isArray(e);
          }
          function isBoolean(e) {
            return "boolean" == typeof e;
          }
          function isNull(e) {
            return null === e;
          }
          function isNullOrUndefined(e) {
            return null == e;
          }
          function isNumber(e) {
            return "number" == typeof e;
          }
          function isString2(e) {
            return "string" == typeof e;
          }
          function isSymbol(e) {
            return "symbol" == typeof e;
          }
          function isUndefined(e) {
            return void 0 === e;
          }
          function isRegExp(e) {
            return isObject(e) && "[object RegExp]" === objectToString(e);
          }
          function isObject(e) {
            return "object" == typeof e && null !== e;
          }
          function isDate(e) {
            return isObject(e) && "[object Date]" === objectToString(e);
          }
          function isError(e) {
            return isObject(e) && ("[object Error]" === objectToString(e) || e instanceof Error);
          }
          function isFunction(e) {
            return "function" == typeof e;
          }
          function isPrimitive(e) {
            return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" == typeof e || void 0 === e;
          }
          function objectToString(e) {
            return Object.prototype.toString.call(e);
          }
          function pad(e) {
            return e < 10 ? "0" + e.toString(10) : e.toString(10);
          }
          function timestamp() {
            var e = /* @__PURE__ */ new Date(), r = [pad(e.getHours()), pad(e.getMinutes()), pad(e.getSeconds())].join(":");
            return [e.getDate(), months[e.getMonth()], r].join(" ");
          }
          function hasOwnProperty(e, r) {
            return Object.prototype.hasOwnProperty.call(e, r);
          }
          var formatRegExp = /%[sdj%]/g;
          exports3.format = function(e) {
            if (!isString2(e)) {
              for (var r = [], t = 0; t < arguments.length; t++)
                r.push(inspect(arguments[t]));
              return r.join(" ");
            }
            for (var t = 1, n = arguments, i2 = n.length, o = String(e).replace(formatRegExp, function(e2) {
              if ("%%" === e2)
                return "%";
              if (t >= i2)
                return e2;
              switch (e2) {
                case "%s":
                  return String(n[t++]);
                case "%d":
                  return Number(n[t++]);
                case "%j":
                  try {
                    return JSON.stringify(n[t++]);
                  } catch (e3) {
                    return "[Circular]";
                  }
                default:
                  return e2;
              }
            }), s = n[t]; t < i2; s = n[++t])
              isNull(s) || !isObject(s) ? o += " " + s : o += " " + inspect(s);
            return o;
          }, exports3.deprecate = function(e, r) {
            if (isUndefined(global2.process))
              return function() {
                return exports3.deprecate(e, r).apply(this, arguments);
              };
            if (true === process2.noDeprecation)
              return e;
            var t = false;
            return function deprecated() {
              if (!t) {
                if (process2.throwDeprecation)
                  throw new Error(r);
                process2.traceDeprecation ? console.trace(r) : console.error(r), t = true;
              }
              return e.apply(this, arguments);
            };
          };
          var debugEnviron, debugs = {};
          exports3.debuglog = function(e) {
            if (isUndefined(debugEnviron) && (debugEnviron = process2.env.NODE_DEBUG || ""), e = e.toUpperCase(), !debugs[e])
              if (new RegExp("\\b" + e + "\\b", "i").test(debugEnviron)) {
                var r = process2.pid;
                debugs[e] = function() {
                  var t = exports3.format.apply(exports3, arguments);
                  console.error("%s %d: %s", e, r, t);
                };
              } else
                debugs[e] = function() {
                };
            return debugs[e];
          }, exports3.inspect = inspect, inspect.colors = { bold: [1, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], white: [37, 39], grey: [90, 39], black: [30, 39], blue: [34, 39], cyan: [36, 39], green: [32, 39], magenta: [35, 39], red: [31, 39], yellow: [33, 39] }, inspect.styles = { special: "cyan", number: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", date: "magenta", regexp: "red" }, exports3.isArray = isArray, exports3.isBoolean = isBoolean, exports3.isNull = isNull, exports3.isNullOrUndefined = isNullOrUndefined, exports3.isNumber = isNumber, exports3.isString = isString2, exports3.isSymbol = isSymbol, exports3.isUndefined = isUndefined, exports3.isRegExp = isRegExp, exports3.isObject = isObject, exports3.isDate = isDate, exports3.isError = isError, exports3.isFunction = isFunction, exports3.isPrimitive = isPrimitive, exports3.isBuffer = _dereq_("./support/isBuffer");
          var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
          exports3.log = function() {
            console.log("%s - %s", timestamp(), exports3.format.apply(exports3, arguments));
          }, exports3.inherits = _dereq_("inherits"), exports3._extend = function(e, r) {
            if (!r || !isObject(r))
              return e;
            for (var t = Object.keys(r), n = t.length; n--; )
              e[t[n]] = r[t[n]];
            return e;
          };
        }).call(this, _dereq_("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "./support/isBuffer": 6, "_process": 4, "inherits": 5 }], 8: [function(_dereq_, module3, exports3) {
        "use strict";
        function _classCallCheck(e, t) {
          if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function");
        }
        var _createClass = /* @__PURE__ */ function() {
          function defineProperties(e, t) {
            for (var r = 0; r < t.length; r++) {
              var n = t[r];
              n.enumerable = n.enumerable || false, n.configurable = true, "value" in n && (n.writable = true), Object.defineProperty(e, n.key, n);
            }
          }
          return function(e, t, r) {
            return t && defineProperties(e.prototype, t), r && defineProperties(e, r), e;
          };
        }(), _require = _dereq_("./helpers.js"), createDataProperty = _require.createDataProperty;
        module3.exports = function() {
          function ByteLengthQueuingStrategy(e) {
            var t = e.highWaterMark;
            _classCallCheck(this, ByteLengthQueuingStrategy), createDataProperty(this, "highWaterMark", t);
          }
          return _createClass(ByteLengthQueuingStrategy, [{ key: "size", value: function size(e) {
            return e.byteLength;
          } }]), ByteLengthQueuingStrategy;
        }();
      }, { "./helpers.js": 10 }], 9: [function(_dereq_, module3, exports3) {
        "use strict";
        function _classCallCheck(e, r) {
          if (!(e instanceof r))
            throw new TypeError("Cannot call a class as a function");
        }
        var _createClass = /* @__PURE__ */ function() {
          function defineProperties(e, r) {
            for (var t = 0; t < r.length; t++) {
              var a = r[t];
              a.enumerable = a.enumerable || false, a.configurable = true, "value" in a && (a.writable = true), Object.defineProperty(e, a.key, a);
            }
          }
          return function(e, r, t) {
            return r && defineProperties(e.prototype, r), t && defineProperties(e, t), e;
          };
        }(), _require = _dereq_("./helpers.js"), createDataProperty = _require.createDataProperty;
        module3.exports = function() {
          function CountQueuingStrategy(e) {
            var r = e.highWaterMark;
            _classCallCheck(this, CountQueuingStrategy), createDataProperty(this, "highWaterMark", r);
          }
          return _createClass(CountQueuingStrategy, [{ key: "size", value: function size() {
            return 1;
          } }]), CountQueuingStrategy;
        }();
      }, { "./helpers.js": 10 }], 10: [function(_dereq_, module3, exports3) {
        "use strict";
        function IsPropertyKey(e) {
          return "string" == typeof e || "symbol" === (void 0 === e ? "undefined" : _typeof(e));
        }
        function Call(e, r, t) {
          if ("function" != typeof e)
            throw new TypeError("Argument is not a function");
          return Function.prototype.apply.call(e, r, t);
        }
        function PromiseCall(e, r, t) {
          try {
            return Promise.resolve(Call(e, r, t));
          } catch (e2) {
            return Promise.reject(e2);
          }
        }
        var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
          return typeof e;
        } : function(e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        }, assert = _dereq_("better-assert"), isFakeDetached = Symbol('is "detached" for our purposes');
        exports3.typeIsObject = function(e) {
          return "object" === (void 0 === e ? "undefined" : _typeof(e)) && null !== e || "function" == typeof e;
        }, exports3.createDataProperty = function(e, r, t) {
          Object.defineProperty(e, r, { value: t, writable: true, enumerable: true, configurable: true });
        }, exports3.createArrayFromList = function(e) {
          return e.slice();
        }, exports3.ArrayBufferCopy = function(e, r, t, n, o) {
          new Uint8Array(e).set(new Uint8Array(t, n, o), r);
        }, exports3.CreateIterResultObject = function(e, r) {
          var t = {};
          return Object.defineProperty(t, "value", { value: e, enumerable: true, writable: true, configurable: true }), Object.defineProperty(t, "done", { value: r, enumerable: true, writable: true, configurable: true }), t;
        }, exports3.IsFiniteNonNegativeNumber = function(e) {
          return false !== exports3.IsNonNegativeNumber(e) && e !== 1 / 0;
        }, exports3.IsNonNegativeNumber = function(e) {
          return "number" == typeof e && (!Number.isNaN(e) && !(e < 0));
        }, exports3.Call = Call, exports3.CreateAlgorithmFromUnderlyingMethod = function(e, r, t, n) {
          var o = e[r];
          if (void 0 !== o) {
            if ("function" != typeof o)
              throw new TypeError(o + " is not a method");
            switch (t) {
              case 0:
                return function() {
                  return PromiseCall(o, e, n);
                };
              case 1:
                return function(r2) {
                  var t2 = [r2].concat(n);
                  return PromiseCall(o, e, t2);
                };
            }
          }
          return function() {
            return Promise.resolve();
          };
        }, exports3.InvokeOrNoop = function(e, r, t) {
          var n = e[r];
          if (void 0 !== n)
            return Call(n, e, t);
        }, exports3.PromiseCall = PromiseCall, exports3.TransferArrayBuffer = function(e) {
          var r = e.slice();
          return Object.defineProperty(e, "byteLength", { get: function get() {
            return 0;
          } }), e[isFakeDetached] = true, r;
        }, exports3.IsDetachedBuffer = function(e) {
          return isFakeDetached in e;
        }, exports3.ValidateAndNormalizeHighWaterMark = function(e) {
          if (e = Number(e), Number.isNaN(e) || e < 0)
            throw new RangeError("highWaterMark property of a queuing strategy must be non-negative and non-NaN");
          return e;
        }, exports3.MakeSizeAlgorithmFromSizeFunction = function(e) {
          if (void 0 === e)
            return function() {
              return 1;
            };
          if ("function" != typeof e)
            throw new TypeError("size property of a queuing strategy must be a function");
          return function(r) {
            return e(r);
          };
        };
      }, { "better-assert": 16 }], 11: [function(_dereq_, module3, exports3) {
        "use strict";
        var assert = _dereq_("better-assert"), _require = _dereq_("./helpers.js"), IsFiniteNonNegativeNumber = _require.IsFiniteNonNegativeNumber;
        exports3.DequeueValue = function(e) {
          var u = e._queue.shift();
          return e._queueTotalSize -= u.size, e._queueTotalSize < 0 && (e._queueTotalSize = 0), u.value;
        }, exports3.EnqueueValueWithSize = function(e, u, t) {
          if (t = Number(t), !IsFiniteNonNegativeNumber(t))
            throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
          e._queue.push({ value: u, size: t }), e._queueTotalSize += t;
        }, exports3.PeekQueueValue = function(e) {
          return e._queue[0].value;
        }, exports3.ResetQueue = function(e) {
          e._queue = [], e._queueTotalSize = 0;
        };
      }, { "./helpers.js": 10, "better-assert": 16 }], 12: [function(_dereq_, module3, exports3) {
        "use strict";
        function _classCallCheck(e, r) {
          if (!(e instanceof r))
            throw new TypeError("Cannot call a class as a function");
        }
        function AcquireReadableStreamBYOBReader(e) {
          return new ReadableStreamBYOBReader(e);
        }
        function AcquireReadableStreamDefaultReader(e) {
          return new ReadableStreamDefaultReader(e);
        }
        function CreateReadableStream(e, r, t) {
          var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1, l = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : function() {
            return 1;
          }, o = Object.create(ReadableStream2.prototype);
          return InitializeReadableStream(o), SetUpReadableStreamDefaultController(o, Object.create(ReadableStreamDefaultController.prototype), e, r, t, a, l), o;
        }
        function CreateReadableByteStream(e, r, t) {
          var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, l = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0, o = Object.create(ReadableStream2.prototype);
          return InitializeReadableStream(o), SetUpReadableByteStreamController(o, Object.create(ReadableByteStreamController.prototype), e, r, t, a, l), o;
        }
        function InitializeReadableStream(e) {
          e._state = "readable", e._reader = void 0, e._storedError = void 0, e._disturbed = false;
        }
        function IsReadableStream(e) {
          return !!typeIsObject(e) && !!Object.prototype.hasOwnProperty.call(e, "_readableStreamController");
        }
        function IsReadableStreamDisturbed(e) {
          return e._disturbed;
        }
        function IsReadableStreamLocked(e) {
          return void 0 !== e._reader;
        }
        function ReadableStreamTee(e, r) {
          function pullAlgorithm() {
            return ReadableStreamDefaultReaderRead(t).then(function(e2) {
              var r2 = e2.value;
              if (true === e2.done && false === a && (false === l && ReadableStreamDefaultControllerClose(d._readableStreamController), false === o && ReadableStreamDefaultControllerClose(s._readableStreamController), a = true), true !== a) {
                var t2 = r2, n2 = r2;
                false === l && ReadableStreamDefaultControllerEnqueue(d._readableStreamController, t2), false === o && ReadableStreamDefaultControllerEnqueue(s._readableStreamController, n2);
              }
            });
          }
          function startAlgorithm() {
          }
          var t = AcquireReadableStreamDefaultReader(e), a = false, l = false, o = false, n = void 0, i2 = void 0, d = void 0, s = void 0, u = void 0, c = new Promise(function(e2) {
            u = e2;
          });
          return d = CreateReadableStream(startAlgorithm, pullAlgorithm, function cancel1Algorithm(r2) {
            if (l = true, n = r2, true === o) {
              var t2 = createArrayFromList([n, i2]), a2 = ReadableStreamCancel(e, t2);
              u(a2);
            }
            return c;
          }), s = CreateReadableStream(startAlgorithm, pullAlgorithm, function cancel2Algorithm(r2) {
            if (o = true, i2 = r2, true === l) {
              var t2 = createArrayFromList([n, i2]), a2 = ReadableStreamCancel(e, t2);
              u(a2);
            }
            return c;
          }), t._closedPromise.catch(function(e2) {
            true !== a && (ReadableStreamDefaultControllerErrorIfNeeded(d._readableStreamController, e2), ReadableStreamDefaultControllerErrorIfNeeded(s._readableStreamController, e2), a = true);
          }), [d, s];
        }
        function ReadableStreamAddReadIntoRequest(e) {
          return new Promise(function(r, t) {
            var a = { _resolve: r, _reject: t };
            e._reader._readIntoRequests.push(a);
          });
        }
        function ReadableStreamAddReadRequest(e) {
          return new Promise(function(r, t) {
            var a = { _resolve: r, _reject: t };
            e._reader._readRequests.push(a);
          });
        }
        function ReadableStreamCancel(e, r) {
          return e._disturbed = true, "closed" === e._state ? Promise.resolve(void 0) : "errored" === e._state ? Promise.reject(e._storedError) : (ReadableStreamClose(e), e._readableStreamController[CancelSteps](r).then(function() {
          }));
        }
        function ReadableStreamClose(e) {
          e._state = "closed";
          var r = e._reader;
          if (void 0 !== r) {
            if (true === IsReadableStreamDefaultReader(r)) {
              var t = true, a = false, l = void 0;
              try {
                for (var o, n = r._readRequests[Symbol.iterator](); !(t = (o = n.next()).done); t = true)
                  (0, o.value._resolve)(CreateIterResultObject(void 0, true));
              } catch (e2) {
                a = true, l = e2;
              } finally {
                try {
                  !t && n.return && n.return();
                } finally {
                  if (a)
                    throw l;
                }
              }
              r._readRequests = [];
            }
            defaultReaderClosedPromiseResolve(r);
          }
        }
        function ReadableStreamError(e, r) {
          e._state = "errored", e._storedError = r;
          var t = e._reader;
          if (void 0 !== t) {
            if (true === IsReadableStreamDefaultReader(t)) {
              var a = true, l = false, o = void 0;
              try {
                for (var n, i2 = t._readRequests[Symbol.iterator](); !(a = (n = i2.next()).done); a = true)
                  n.value._reject(r);
              } catch (e2) {
                l = true, o = e2;
              } finally {
                try {
                  !a && i2.return && i2.return();
                } finally {
                  if (l)
                    throw o;
                }
              }
              t._readRequests = [];
            } else {
              var d = true, s = false, u = void 0;
              try {
                for (var c, b = t._readIntoRequests[Symbol.iterator](); !(d = (c = b.next()).done); d = true)
                  c.value._reject(r);
              } catch (e2) {
                s = true, u = e2;
              } finally {
                try {
                  !d && b.return && b.return();
                } finally {
                  if (s)
                    throw u;
                }
              }
              t._readIntoRequests = [];
            }
            defaultReaderClosedPromiseReject(t, r), t._closedPromise.catch(function() {
            });
          }
        }
        function ReadableStreamFulfillReadIntoRequest(e, r, t) {
          e._reader._readIntoRequests.shift()._resolve(CreateIterResultObject(r, t));
        }
        function ReadableStreamFulfillReadRequest(e, r, t) {
          e._reader._readRequests.shift()._resolve(CreateIterResultObject(r, t));
        }
        function ReadableStreamGetNumReadIntoRequests(e) {
          return e._reader._readIntoRequests.length;
        }
        function ReadableStreamGetNumReadRequests(e) {
          return e._reader._readRequests.length;
        }
        function ReadableStreamHasBYOBReader(e) {
          var r = e._reader;
          return void 0 !== r && false !== IsReadableStreamBYOBReader(r);
        }
        function ReadableStreamHasDefaultReader(e) {
          var r = e._reader;
          return void 0 !== r && false !== IsReadableStreamDefaultReader(r);
        }
        function IsReadableStreamBYOBReader(e) {
          return !!typeIsObject(e) && !!Object.prototype.hasOwnProperty.call(e, "_readIntoRequests");
        }
        function IsReadableStreamDefaultReader(e) {
          return !!typeIsObject(e) && !!Object.prototype.hasOwnProperty.call(e, "_readRequests");
        }
        function ReadableStreamReaderGenericInitialize(e, r) {
          e._ownerReadableStream = r, r._reader = e, "readable" === r._state ? defaultReaderClosedPromiseInitialize(e) : "closed" === r._state ? defaultReaderClosedPromiseInitializeAsResolved(e) : (defaultReaderClosedPromiseInitializeAsRejected(e, r._storedError), e._closedPromise.catch(function() {
          }));
        }
        function ReadableStreamReaderGenericCancel(e, r) {
          return ReadableStreamCancel(e._ownerReadableStream, r);
        }
        function ReadableStreamReaderGenericRelease(e) {
          "readable" === e._ownerReadableStream._state ? defaultReaderClosedPromiseReject(e, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")) : defaultReaderClosedPromiseResetToRejected(e, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")), e._closedPromise.catch(function() {
          }), e._ownerReadableStream._reader = void 0, e._ownerReadableStream = void 0;
        }
        function ReadableStreamBYOBReaderRead(e, r) {
          var t = e._ownerReadableStream;
          return t._disturbed = true, "errored" === t._state ? Promise.reject(t._storedError) : ReadableByteStreamControllerPullInto(t._readableStreamController, r);
        }
        function ReadableStreamDefaultReaderRead(e) {
          var r = e._ownerReadableStream;
          return r._disturbed = true, "closed" === r._state ? Promise.resolve(CreateIterResultObject(void 0, true)) : "errored" === r._state ? Promise.reject(r._storedError) : r._readableStreamController[PullSteps]();
        }
        function IsReadableStreamDefaultController(e) {
          return !!typeIsObject(e) && !!Object.prototype.hasOwnProperty.call(e, "_controlledReadableStream");
        }
        function ReadableStreamDefaultControllerCallPullIfNeeded(e) {
          false !== ReadableStreamDefaultControllerShouldCallPull(e) && (true !== e._pulling ? (e._pulling = true, e._pullAlgorithm().then(function() {
            if (e._pulling = false, true === e._pullAgain)
              return e._pullAgain = false, ReadableStreamDefaultControllerCallPullIfNeeded(e);
          }, function(r) {
            ReadableStreamDefaultControllerErrorIfNeeded(e, r);
          }).catch(rethrowAssertionErrorRejection)) : e._pullAgain = true);
        }
        function ReadableStreamDefaultControllerShouldCallPull(e) {
          var r = e._controlledReadableStream;
          return false !== ReadableStreamDefaultControllerCanCloseOrEnqueue(e) && (false !== e._started && (true === IsReadableStreamLocked(r) && ReadableStreamGetNumReadRequests(r) > 0 || ReadableStreamDefaultControllerGetDesiredSize(e) > 0));
        }
        function ReadableStreamDefaultControllerClose(e) {
          var r = e._controlledReadableStream;
          e._closeRequested = true, 0 === e._queue.length && ReadableStreamClose(r);
        }
        function ReadableStreamDefaultControllerEnqueue(e, r) {
          var t = e._controlledReadableStream;
          if (true === IsReadableStreamLocked(t) && ReadableStreamGetNumReadRequests(t) > 0)
            ReadableStreamFulfillReadRequest(t, r, false);
          else {
            var a = void 0;
            try {
              a = e._strategySizeAlgorithm(r);
            } catch (r2) {
              throw ReadableStreamDefaultControllerErrorIfNeeded(e, r2), r2;
            }
            try {
              EnqueueValueWithSize(e, r, a);
            } catch (r2) {
              throw ReadableStreamDefaultControllerErrorIfNeeded(e, r2), r2;
            }
          }
          ReadableStreamDefaultControllerCallPullIfNeeded(e);
        }
        function ReadableStreamDefaultControllerError(e, r) {
          var t = e._controlledReadableStream;
          ResetQueue(e), ReadableStreamError(t, r);
        }
        function ReadableStreamDefaultControllerErrorIfNeeded(e, r) {
          "readable" === e._controlledReadableStream._state && ReadableStreamDefaultControllerError(e, r);
        }
        function ReadableStreamDefaultControllerGetDesiredSize(e) {
          var r = e._controlledReadableStream._state;
          return "errored" === r ? null : "closed" === r ? 0 : e._strategyHWM - e._queueTotalSize;
        }
        function ReadableStreamDefaultControllerHasBackpressure(e) {
          return true !== ReadableStreamDefaultControllerShouldCallPull(e);
        }
        function ReadableStreamDefaultControllerCanCloseOrEnqueue(e) {
          var r = e._controlledReadableStream._state;
          return false === e._closeRequested && "readable" === r;
        }
        function SetUpReadableStreamDefaultController(e, r, t, a, l, o, n) {
          r._controlledReadableStream = e, r._queue = void 0, r._queueTotalSize = void 0, ResetQueue(r), r._started = false, r._closeRequested = false, r._pullAgain = false, r._pulling = false, r._strategySizeAlgorithm = n, r._strategyHWM = o, r._pullAlgorithm = a, r._cancelAlgorithm = l, e._readableStreamController = r;
          var i2 = t();
          Promise.resolve(i2).then(function() {
            r._started = true, ReadableStreamDefaultControllerCallPullIfNeeded(r);
          }, function(e2) {
            ReadableStreamDefaultControllerErrorIfNeeded(r, e2);
          }).catch(rethrowAssertionErrorRejection);
        }
        function SetUpReadableStreamDefaultControllerFromUnderlyingSource(e, r, t, a) {
          var l = Object.create(ReadableStreamDefaultController.prototype), o = CreateAlgorithmFromUnderlyingMethod(r, "pull", 0, [l]), n = CreateAlgorithmFromUnderlyingMethod(r, "cancel", 1, []);
          SetUpReadableStreamDefaultController(e, l, function startAlgorithm() {
            return InvokeOrNoop(r, "start", [l]);
          }, o, n, t, a);
        }
        function IsReadableByteStreamController(e) {
          return !!typeIsObject(e) && !!Object.prototype.hasOwnProperty.call(e, "_controlledReadableByteStream");
        }
        function IsReadableStreamBYOBRequest(e) {
          return !!typeIsObject(e) && !!Object.prototype.hasOwnProperty.call(e, "_associatedReadableByteStreamController");
        }
        function ReadableByteStreamControllerCallPullIfNeeded(e) {
          false !== ReadableByteStreamControllerShouldCallPull(e) && (true !== e._pulling ? (e._pulling = true, e._pullAlgorithm().then(function() {
            e._pulling = false, true === e._pullAgain && (e._pullAgain = false, ReadableByteStreamControllerCallPullIfNeeded(e));
          }, function(r) {
            "readable" === e._controlledReadableByteStream._state && ReadableByteStreamControllerError(e, r);
          }).catch(rethrowAssertionErrorRejection)) : e._pullAgain = true);
        }
        function ReadableByteStreamControllerClearPendingPullIntos(e) {
          ReadableByteStreamControllerInvalidateBYOBRequest(e), e._pendingPullIntos = [];
        }
        function ReadableByteStreamControllerCommitPullIntoDescriptor(e, r) {
          var t = false;
          "closed" === e._state && (t = true);
          var a = ReadableByteStreamControllerConvertPullIntoDescriptor(r);
          "default" === r.readerType ? ReadableStreamFulfillReadRequest(e, a, t) : ReadableStreamFulfillReadIntoRequest(e, a, t);
        }
        function ReadableByteStreamControllerConvertPullIntoDescriptor(e) {
          var r = e.bytesFilled, t = e.elementSize;
          return new e.ctor(e.buffer, e.byteOffset, r / t);
        }
        function ReadableByteStreamControllerEnqueueChunkToQueue(e, r, t, a) {
          e._queue.push({ buffer: r, byteOffset: t, byteLength: a }), e._queueTotalSize += a;
        }
        function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(e, r) {
          var t = r.elementSize, a = r.bytesFilled - r.bytesFilled % t, l = Math.min(e._queueTotalSize, r.byteLength - r.bytesFilled), o = r.bytesFilled + l, n = o - o % t, i2 = l, d = false;
          n > a && (i2 = n - r.bytesFilled, d = true);
          for (var s = e._queue; i2 > 0; ) {
            var u = s[0], c = Math.min(i2, u.byteLength), b = r.byteOffset + r.bytesFilled;
            ArrayBufferCopy(r.buffer, b, u.buffer, u.byteOffset, c), u.byteLength === c ? s.shift() : (u.byteOffset += c, u.byteLength -= c), e._queueTotalSize -= c, ReadableByteStreamControllerFillHeadPullIntoDescriptor(e, c, r), i2 -= c;
          }
          return d;
        }
        function ReadableByteStreamControllerFillHeadPullIntoDescriptor(e, r, t) {
          ReadableByteStreamControllerInvalidateBYOBRequest(e), t.bytesFilled += r;
        }
        function ReadableByteStreamControllerHandleQueueDrain(e) {
          0 === e._queueTotalSize && true === e._closeRequested ? ReadableStreamClose(e._controlledReadableByteStream) : ReadableByteStreamControllerCallPullIfNeeded(e);
        }
        function ReadableByteStreamControllerInvalidateBYOBRequest(e) {
          void 0 !== e._byobRequest && (e._byobRequest._associatedReadableByteStreamController = void 0, e._byobRequest._view = void 0, e._byobRequest = void 0);
        }
        function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(e) {
          for (; e._pendingPullIntos.length > 0; ) {
            if (0 === e._queueTotalSize)
              return;
            var r = e._pendingPullIntos[0];
            true === ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(e, r) && (ReadableByteStreamControllerShiftPendingPullInto(e), ReadableByteStreamControllerCommitPullIntoDescriptor(e._controlledReadableByteStream, r));
          }
        }
        function ReadableByteStreamControllerPullInto(e, r) {
          var t = e._controlledReadableByteStream, a = 1;
          r.constructor !== DataView && (a = r.constructor.BYTES_PER_ELEMENT);
          var l = r.constructor, o = { buffer: TransferArrayBuffer(r.buffer), byteOffset: r.byteOffset, byteLength: r.byteLength, bytesFilled: 0, elementSize: a, ctor: l, readerType: "byob" };
          if (e._pendingPullIntos.length > 0)
            return e._pendingPullIntos.push(o), ReadableStreamAddReadIntoRequest(t);
          if ("closed" === t._state) {
            var n = new r.constructor(o.buffer, o.byteOffset, 0);
            return Promise.resolve(CreateIterResultObject(n, true));
          }
          if (e._queueTotalSize > 0) {
            if (true === ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(e, o)) {
              var i2 = ReadableByteStreamControllerConvertPullIntoDescriptor(o);
              return ReadableByteStreamControllerHandleQueueDrain(e), Promise.resolve(CreateIterResultObject(i2, false));
            }
            if (true === e._closeRequested) {
              var d = new TypeError("Insufficient bytes to fill elements in the given buffer");
              return ReadableByteStreamControllerError(e, d), Promise.reject(d);
            }
          }
          e._pendingPullIntos.push(o);
          var s = ReadableStreamAddReadIntoRequest(t);
          return ReadableByteStreamControllerCallPullIfNeeded(e), s;
        }
        function ReadableByteStreamControllerRespondInClosedState(e, r) {
          r.buffer = TransferArrayBuffer(r.buffer);
          var t = e._controlledReadableByteStream;
          if (true === ReadableStreamHasBYOBReader(t))
            for (; ReadableStreamGetNumReadIntoRequests(t) > 0; )
              ReadableByteStreamControllerCommitPullIntoDescriptor(t, ReadableByteStreamControllerShiftPendingPullInto(e));
        }
        function ReadableByteStreamControllerRespondInReadableState(e, r, t) {
          if (t.bytesFilled + r > t.byteLength)
            throw new RangeError("bytesWritten out of range");
          if (ReadableByteStreamControllerFillHeadPullIntoDescriptor(e, r, t), !(t.bytesFilled < t.elementSize)) {
            ReadableByteStreamControllerShiftPendingPullInto(e);
            var a = t.bytesFilled % t.elementSize;
            if (a > 0) {
              var l = t.byteOffset + t.bytesFilled, o = t.buffer.slice(l - a, l);
              ReadableByteStreamControllerEnqueueChunkToQueue(e, o, 0, o.byteLength);
            }
            t.buffer = TransferArrayBuffer(t.buffer), t.bytesFilled -= a, ReadableByteStreamControllerCommitPullIntoDescriptor(e._controlledReadableByteStream, t), ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(e);
          }
        }
        function ReadableByteStreamControllerRespondInternal(e, r) {
          var t = e._pendingPullIntos[0];
          if ("closed" === e._controlledReadableByteStream._state) {
            if (0 !== r)
              throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
            ReadableByteStreamControllerRespondInClosedState(e, t);
          } else
            ReadableByteStreamControllerRespondInReadableState(e, r, t);
        }
        function ReadableByteStreamControllerShiftPendingPullInto(e) {
          var r = e._pendingPullIntos.shift();
          return ReadableByteStreamControllerInvalidateBYOBRequest(e), r;
        }
        function ReadableByteStreamControllerShouldCallPull(e) {
          var r = e._controlledReadableByteStream;
          return "readable" === r._state && (true !== e._closeRequested && (false !== e._started && (true === ReadableStreamHasDefaultReader(r) && ReadableStreamGetNumReadRequests(r) > 0 || (true === ReadableStreamHasBYOBReader(r) && ReadableStreamGetNumReadIntoRequests(r) > 0 || ReadableByteStreamControllerGetDesiredSize(e) > 0))));
        }
        function ReadableByteStreamControllerClose(e) {
          var r = e._controlledReadableByteStream;
          if (e._queueTotalSize > 0)
            e._closeRequested = true;
          else {
            if (e._pendingPullIntos.length > 0 && e._pendingPullIntos[0].bytesFilled > 0) {
              var t = new TypeError("Insufficient bytes to fill elements in the given buffer");
              throw ReadableByteStreamControllerError(e, t), t;
            }
            ReadableStreamClose(r);
          }
        }
        function ReadableByteStreamControllerEnqueue(e, r) {
          var t = e._controlledReadableByteStream, a = r.buffer, l = r.byteOffset, o = r.byteLength, n = TransferArrayBuffer(a);
          true === ReadableStreamHasDefaultReader(t) ? 0 === ReadableStreamGetNumReadRequests(t) ? ReadableByteStreamControllerEnqueueChunkToQueue(e, n, l, o) : ReadableStreamFulfillReadRequest(t, new Uint8Array(n, l, o), false) : true === ReadableStreamHasBYOBReader(t) ? (ReadableByteStreamControllerEnqueueChunkToQueue(e, n, l, o), ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(e)) : ReadableByteStreamControllerEnqueueChunkToQueue(e, n, l, o);
        }
        function ReadableByteStreamControllerError(e, r) {
          var t = e._controlledReadableByteStream;
          ReadableByteStreamControllerClearPendingPullIntos(e), ResetQueue(e), ReadableStreamError(t, r);
        }
        function ReadableByteStreamControllerGetDesiredSize(e) {
          var r = e._controlledReadableByteStream._state;
          return "errored" === r ? null : "closed" === r ? 0 : e._strategyHWM - e._queueTotalSize;
        }
        function ReadableByteStreamControllerRespond(e, r) {
          if (r = Number(r), false === IsFiniteNonNegativeNumber(r))
            throw new RangeError("bytesWritten must be a finite");
          ReadableByteStreamControllerRespondInternal(e, r);
        }
        function ReadableByteStreamControllerRespondWithNewView(e, r) {
          var t = e._pendingPullIntos[0];
          if (t.byteOffset + t.bytesFilled !== r.byteOffset)
            throw new RangeError("The region specified by view does not match byobRequest");
          if (t.byteLength !== r.byteLength)
            throw new RangeError("The buffer of view has different capacity than byobRequest");
          t.buffer = r.buffer, ReadableByteStreamControllerRespondInternal(e, r.byteLength);
        }
        function SetUpReadableByteStreamController(e, r, t, a, l, o, n) {
          r._controlledReadableByteStream = e, r._pullAgain = false, r._pulling = false, ReadableByteStreamControllerClearPendingPullIntos(r), r._queue = r._queueTotalSize = void 0, ResetQueue(r), r._closeRequested = false, r._started = false, r._strategyHWM = ValidateAndNormalizeHighWaterMark(o), r._pullAlgorithm = a, r._cancelAlgorithm = l, r._autoAllocateChunkSize = n, r._pendingPullIntos = [], e._readableStreamController = r;
          var i2 = t();
          Promise.resolve(i2).then(function() {
            r._started = true, ReadableByteStreamControllerCallPullIfNeeded(r);
          }, function(t2) {
            "readable" === e._state && ReadableByteStreamControllerError(r, t2);
          }).catch(rethrowAssertionErrorRejection);
        }
        function SetUpReadableByteStreamControllerFromUnderlyingSource(e, r, t) {
          var a = Object.create(ReadableByteStreamController.prototype), l = CreateAlgorithmFromUnderlyingMethod(r, "pull", 0, [a]), o = CreateAlgorithmFromUnderlyingMethod(r, "cancel", 1, []), n = r.autoAllocateChunkSize;
          if (void 0 !== n && (false === Number.isInteger(n) || n <= 0))
            throw new RangeError("autoAllocateChunkSize must be a positive integer");
          SetUpReadableByteStreamController(e, a, function startAlgorithm() {
            return InvokeOrNoop(r, "start", [a]);
          }, l, o, t, n);
        }
        function SetUpReadableStreamBYOBRequest(e, r, t) {
          e._associatedReadableByteStreamController = r, e._view = t;
        }
        function streamBrandCheckException(e) {
          return new TypeError("ReadableStream.prototype." + e + " can only be used on a ReadableStream");
        }
        function readerLockException(e) {
          return new TypeError("Cannot " + e + " a stream using a released reader");
        }
        function defaultReaderBrandCheckException(e) {
          return new TypeError("ReadableStreamDefaultReader.prototype." + e + " can only be used on a ReadableStreamDefaultReader");
        }
        function defaultReaderClosedPromiseInitialize(e) {
          e._closedPromise = new Promise(function(r, t) {
            e._closedPromise_resolve = r, e._closedPromise_reject = t;
          });
        }
        function defaultReaderClosedPromiseInitializeAsRejected(e, r) {
          e._closedPromise = Promise.reject(r), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0;
        }
        function defaultReaderClosedPromiseInitializeAsResolved(e) {
          e._closedPromise = Promise.resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0;
        }
        function defaultReaderClosedPromiseReject(e, r) {
          e._closedPromise_reject(r), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0;
        }
        function defaultReaderClosedPromiseResetToRejected(e, r) {
          e._closedPromise = Promise.reject(r);
        }
        function defaultReaderClosedPromiseResolve(e) {
          e._closedPromise_resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0;
        }
        function byobReaderBrandCheckException(e) {
          return new TypeError("ReadableStreamBYOBReader.prototype." + e + " can only be used on a ReadableStreamBYOBReader");
        }
        function defaultControllerBrandCheckException(e) {
          return new TypeError("ReadableStreamDefaultController.prototype." + e + " can only be used on a ReadableStreamDefaultController");
        }
        function byobRequestBrandCheckException(e) {
          return new TypeError("ReadableStreamBYOBRequest.prototype." + e + " can only be used on a ReadableStreamBYOBRequest");
        }
        function byteStreamControllerBrandCheckException(e) {
          return new TypeError("ReadableByteStreamController.prototype." + e + " can only be used on a ReadableByteStreamController");
        }
        function ifIsObjectAndHasAPromiseIsHandledInternalSlotSetPromiseIsHandledToTrue(e) {
          try {
            Promise.prototype.then.call(e, void 0, function() {
            });
          } catch (e2) {
          }
        }
        var _createClass = /* @__PURE__ */ function() {
          function defineProperties(e, r) {
            for (var t = 0; t < r.length; t++) {
              var a = r[t];
              a.enumerable = a.enumerable || false, a.configurable = true, "value" in a && (a.writable = true), Object.defineProperty(e, a.key, a);
            }
          }
          return function(e, r, t) {
            return r && defineProperties(e.prototype, r), t && defineProperties(e, t), e;
          };
        }(), assert = _dereq_("better-assert"), _require = _dereq_("./helpers.js"), ArrayBufferCopy = _require.ArrayBufferCopy, CreateAlgorithmFromUnderlyingMethod = _require.CreateAlgorithmFromUnderlyingMethod, CreateIterResultObject = _require.CreateIterResultObject, IsFiniteNonNegativeNumber = _require.IsFiniteNonNegativeNumber, InvokeOrNoop = _require.InvokeOrNoop, IsDetachedBuffer = _require.IsDetachedBuffer, TransferArrayBuffer = _require.TransferArrayBuffer, ValidateAndNormalizeHighWaterMark = _require.ValidateAndNormalizeHighWaterMark, IsNonNegativeNumber = _require.IsNonNegativeNumber, MakeSizeAlgorithmFromSizeFunction = _require.MakeSizeAlgorithmFromSizeFunction, createArrayFromList = _require.createArrayFromList, typeIsObject = _require.typeIsObject, _require2 = _dereq_("./utils.js"), rethrowAssertionErrorRejection = _require2.rethrowAssertionErrorRejection, _require3 = _dereq_("./queue-with-sizes.js"), DequeueValue = _require3.DequeueValue, EnqueueValueWithSize = _require3.EnqueueValueWithSize, ResetQueue = _require3.ResetQueue, _require4 = _dereq_("./writable-stream.js"), AcquireWritableStreamDefaultWriter = _require4.AcquireWritableStreamDefaultWriter, IsWritableStream = _require4.IsWritableStream, IsWritableStreamLocked = _require4.IsWritableStreamLocked, WritableStreamAbort = _require4.WritableStreamAbort, WritableStreamDefaultWriterCloseWithErrorPropagation = _require4.WritableStreamDefaultWriterCloseWithErrorPropagation, WritableStreamDefaultWriterRelease = _require4.WritableStreamDefaultWriterRelease, WritableStreamDefaultWriterWrite = _require4.WritableStreamDefaultWriterWrite, WritableStreamCloseQueuedOrInFlight = _require4.WritableStreamCloseQueuedOrInFlight, CancelSteps = Symbol("[[CancelSteps]]"), PullSteps = Symbol("[[PullSteps]]"), ReadableStream2 = function() {
          function ReadableStream3() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, t = r.size, a = r.highWaterMark;
            _classCallCheck(this, ReadableStream3), InitializeReadableStream(this);
            var l = e.type;
            if ("bytes" === String(l)) {
              if (void 0 === a && (a = 0), a = ValidateAndNormalizeHighWaterMark(a), void 0 !== t)
                throw new RangeError("The strategy for a byte stream cannot have a size function");
              SetUpReadableByteStreamControllerFromUnderlyingSource(this, e, a);
            } else {
              if (void 0 !== l)
                throw new RangeError("Invalid type is specified");
              void 0 === a && (a = 1), SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, e, a = ValidateAndNormalizeHighWaterMark(a), MakeSizeAlgorithmFromSizeFunction(t));
            }
          }
          return _createClass(ReadableStream3, [{ key: "cancel", value: function cancel(e) {
            return false === IsReadableStream(this) ? Promise.reject(streamBrandCheckException("cancel")) : true === IsReadableStreamLocked(this) ? Promise.reject(new TypeError("Cannot cancel a stream that already has a reader")) : ReadableStreamCancel(this, e);
          } }, { key: "getReader", value: function getReader() {
            var e = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).mode;
            if (false === IsReadableStream(this))
              throw streamBrandCheckException("getReader");
            if (void 0 === e)
              return AcquireReadableStreamDefaultReader(this);
            if ("byob" === (e = String(e)))
              return AcquireReadableStreamBYOBReader(this);
            throw new RangeError("Invalid mode is specified");
          } }, { key: "pipeThrough", value: function pipeThrough(e, r) {
            var t = e.writable, a = e.readable;
            if (void 0 === t || void 0 === a)
              throw new TypeError("readable and writable arguments must be defined");
            return ifIsObjectAndHasAPromiseIsHandledInternalSlotSetPromiseIsHandledToTrue(this.pipeTo(t, r)), a;
          } }, { key: "pipeTo", value: function pipeTo(e) {
            var r = this, t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, a = t.preventClose, l = t.preventAbort, o = t.preventCancel;
            if (false === IsReadableStream(this))
              return Promise.reject(streamBrandCheckException("pipeTo"));
            if (false === IsWritableStream(e))
              return Promise.reject(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));
            if (a = Boolean(a), l = Boolean(l), o = Boolean(o), true === IsReadableStreamLocked(this))
              return Promise.reject(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream"));
            if (true === IsWritableStreamLocked(e))
              return Promise.reject(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream"));
            var n = AcquireReadableStreamDefaultReader(this), i2 = AcquireWritableStreamDefaultWriter(e), d = false, s = Promise.resolve();
            return new Promise(function(t2, u) {
              function pipeLoop() {
                return true === d ? Promise.resolve() : i2._readyPromise.then(function() {
                  return ReadableStreamDefaultReaderRead(n).then(function(e2) {
                    var r2 = e2.value;
                    true !== e2.done && (s = WritableStreamDefaultWriterWrite(i2, r2).catch(function() {
                    }));
                  });
                }).then(pipeLoop);
              }
              function waitForWritesToFinish() {
                var e2 = s;
                return s.then(function() {
                  return e2 !== s ? waitForWritesToFinish() : void 0;
                });
              }
              function isOrBecomesErrored(e2, r2, t3) {
                "errored" === e2._state ? t3(e2._storedError) : r2.catch(t3).catch(rethrowAssertionErrorRejection);
              }
              function shutdownWithAction(r2, t3, a2) {
                function doTheRest() {
                  r2().then(function() {
                    return finalize(t3, a2);
                  }, function(e2) {
                    return finalize(true, e2);
                  }).catch(rethrowAssertionErrorRejection);
                }
                true !== d && (d = true, "writable" === e._state && false === WritableStreamCloseQueuedOrInFlight(e) ? waitForWritesToFinish().then(doTheRest) : doTheRest());
              }
              function shutdown(r2, t3) {
                true !== d && (d = true, "writable" === e._state && false === WritableStreamCloseQueuedOrInFlight(e) ? waitForWritesToFinish().then(function() {
                  return finalize(r2, t3);
                }).catch(rethrowAssertionErrorRejection) : finalize(r2, t3));
              }
              function finalize(e2, r2) {
                WritableStreamDefaultWriterRelease(i2), ReadableStreamReaderGenericRelease(n), e2 ? u(r2) : t2(void 0);
              }
              if (isOrBecomesErrored(r, n._closedPromise, function(r2) {
                false === l ? shutdownWithAction(function() {
                  return WritableStreamAbort(e, r2);
                }, true, r2) : shutdown(true, r2);
              }), isOrBecomesErrored(e, i2._closedPromise, function(e2) {
                false === o ? shutdownWithAction(function() {
                  return ReadableStreamCancel(r, e2);
                }, true, e2) : shutdown(true, e2);
              }), function isOrBecomesClosed(e2, r2, t3) {
                "closed" === e2._state ? t3() : r2.then(t3).catch(rethrowAssertionErrorRejection);
              }(r, n._closedPromise, function() {
                false === a ? shutdownWithAction(function() {
                  return WritableStreamDefaultWriterCloseWithErrorPropagation(i2);
                }) : shutdown();
              }), true === WritableStreamCloseQueuedOrInFlight(e) || "closed" === e._state) {
                var c = new TypeError("the destination writable stream closed before all data could be piped to it");
                false === o ? shutdownWithAction(function() {
                  return ReadableStreamCancel(r, c);
                }, true, c) : shutdown(true, c);
              }
              pipeLoop().catch(function(e2) {
                s = Promise.resolve(), rethrowAssertionErrorRejection(e2);
              });
            });
          } }, { key: "tee", value: function tee() {
            if (false === IsReadableStream(this))
              throw streamBrandCheckException("tee");
            var e = ReadableStreamTee(this, false);
            return createArrayFromList(e);
          } }, { key: "locked", get: function get() {
            if (false === IsReadableStream(this))
              throw streamBrandCheckException("locked");
            return IsReadableStreamLocked(this);
          } }]), ReadableStream3;
        }();
        module3.exports = { CreateReadableByteStream, CreateReadableStream, ReadableStream: ReadableStream2, IsReadableStreamDisturbed, ReadableStreamDefaultControllerClose, ReadableStreamDefaultControllerEnqueue, ReadableStreamDefaultControllerError, ReadableStreamDefaultControllerGetDesiredSize, ReadableStreamDefaultControllerHasBackpressure, ReadableStreamDefaultControllerCanCloseOrEnqueue };
        var ReadableStreamDefaultReader = function() {
          function ReadableStreamDefaultReader2(e) {
            if (_classCallCheck(this, ReadableStreamDefaultReader2), false === IsReadableStream(e))
              throw new TypeError("ReadableStreamDefaultReader can only be constructed with a ReadableStream instance");
            if (true === IsReadableStreamLocked(e))
              throw new TypeError("This stream has already been locked for exclusive reading by another reader");
            ReadableStreamReaderGenericInitialize(this, e), this._readRequests = [];
          }
          return _createClass(ReadableStreamDefaultReader2, [{ key: "cancel", value: function cancel(e) {
            return false === IsReadableStreamDefaultReader(this) ? Promise.reject(defaultReaderBrandCheckException("cancel")) : void 0 === this._ownerReadableStream ? Promise.reject(readerLockException("cancel")) : ReadableStreamReaderGenericCancel(this, e);
          } }, { key: "read", value: function read() {
            return false === IsReadableStreamDefaultReader(this) ? Promise.reject(defaultReaderBrandCheckException("read")) : void 0 === this._ownerReadableStream ? Promise.reject(readerLockException("read from")) : ReadableStreamDefaultReaderRead(this);
          } }, { key: "releaseLock", value: function releaseLock() {
            if (false === IsReadableStreamDefaultReader(this))
              throw defaultReaderBrandCheckException("releaseLock");
            if (void 0 !== this._ownerReadableStream) {
              if (this._readRequests.length > 0)
                throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
              ReadableStreamReaderGenericRelease(this);
            }
          } }, { key: "closed", get: function get() {
            return false === IsReadableStreamDefaultReader(this) ? Promise.reject(defaultReaderBrandCheckException("closed")) : this._closedPromise;
          } }]), ReadableStreamDefaultReader2;
        }(), ReadableStreamBYOBReader = function() {
          function ReadableStreamBYOBReader2(e) {
            if (_classCallCheck(this, ReadableStreamBYOBReader2), !IsReadableStream(e))
              throw new TypeError("ReadableStreamBYOBReader can only be constructed with a ReadableStream instance given a byte source");
            if (false === IsReadableByteStreamController(e._readableStreamController))
              throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
            if (IsReadableStreamLocked(e))
              throw new TypeError("This stream has already been locked for exclusive reading by another reader");
            ReadableStreamReaderGenericInitialize(this, e), this._readIntoRequests = [];
          }
          return _createClass(ReadableStreamBYOBReader2, [{ key: "cancel", value: function cancel(e) {
            return IsReadableStreamBYOBReader(this) ? void 0 === this._ownerReadableStream ? Promise.reject(readerLockException("cancel")) : ReadableStreamReaderGenericCancel(this, e) : Promise.reject(byobReaderBrandCheckException("cancel"));
          } }, { key: "read", value: function read(e) {
            return IsReadableStreamBYOBReader(this) ? void 0 === this._ownerReadableStream ? Promise.reject(readerLockException("read from")) : ArrayBuffer.isView(e) ? true === IsDetachedBuffer(e.buffer) ? Promise.reject(new TypeError("Cannot read into a view onto a detached ArrayBuffer")) : 0 === e.byteLength ? Promise.reject(new TypeError("view must have non-zero byteLength")) : ReadableStreamBYOBReaderRead(this, e) : Promise.reject(new TypeError("view must be an array buffer view")) : Promise.reject(byobReaderBrandCheckException("read"));
          } }, { key: "releaseLock", value: function releaseLock() {
            if (!IsReadableStreamBYOBReader(this))
              throw byobReaderBrandCheckException("releaseLock");
            if (void 0 !== this._ownerReadableStream) {
              if (this._readIntoRequests.length > 0)
                throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
              ReadableStreamReaderGenericRelease(this);
            }
          } }, { key: "closed", get: function get() {
            return IsReadableStreamBYOBReader(this) ? this._closedPromise : Promise.reject(byobReaderBrandCheckException("closed"));
          } }]), ReadableStreamBYOBReader2;
        }(), ReadableStreamDefaultController = function() {
          function ReadableStreamDefaultController2() {
            throw _classCallCheck(this, ReadableStreamDefaultController2), new TypeError();
          }
          return _createClass(ReadableStreamDefaultController2, [{ key: "close", value: function close() {
            if (false === IsReadableStreamDefaultController(this))
              throw defaultControllerBrandCheckException("close");
            if (false === ReadableStreamDefaultControllerCanCloseOrEnqueue(this))
              throw new TypeError("The stream is not in a state that permits close");
            ReadableStreamDefaultControllerClose(this);
          } }, { key: "enqueue", value: function enqueue(e) {
            if (false === IsReadableStreamDefaultController(this))
              throw defaultControllerBrandCheckException("enqueue");
            if (false === ReadableStreamDefaultControllerCanCloseOrEnqueue(this))
              throw new TypeError("The stream is not in a state that permits enqueue");
            return ReadableStreamDefaultControllerEnqueue(this, e);
          } }, { key: "error", value: function error2(e) {
            if (false === IsReadableStreamDefaultController(this))
              throw defaultControllerBrandCheckException("error");
            var r = this._controlledReadableStream;
            if ("readable" !== r._state)
              throw new TypeError("The stream is " + r._state + " and so cannot be errored");
            ReadableStreamDefaultControllerError(this, e);
          } }, { key: CancelSteps, value: function value(e) {
            return ResetQueue(this), this._cancelAlgorithm(e);
          } }, { key: PullSteps, value: function value() {
            var e = this._controlledReadableStream;
            if (this._queue.length > 0) {
              var r = DequeueValue(this);
              return true === this._closeRequested && 0 === this._queue.length ? ReadableStreamClose(e) : ReadableStreamDefaultControllerCallPullIfNeeded(this), Promise.resolve(CreateIterResultObject(r, false));
            }
            var t = ReadableStreamAddReadRequest(e);
            return ReadableStreamDefaultControllerCallPullIfNeeded(this), t;
          } }, { key: "desiredSize", get: function get() {
            if (false === IsReadableStreamDefaultController(this))
              throw defaultControllerBrandCheckException("desiredSize");
            return ReadableStreamDefaultControllerGetDesiredSize(this);
          } }]), ReadableStreamDefaultController2;
        }(), ReadableStreamBYOBRequest = function() {
          function ReadableStreamBYOBRequest2() {
            throw _classCallCheck(this, ReadableStreamBYOBRequest2), new TypeError("ReadableStreamBYOBRequest cannot be used directly");
          }
          return _createClass(ReadableStreamBYOBRequest2, [{ key: "respond", value: function respond(e) {
            if (false === IsReadableStreamBYOBRequest(this))
              throw byobRequestBrandCheckException("respond");
            if (void 0 === this._associatedReadableByteStreamController)
              throw new TypeError("This BYOB request has been invalidated");
            if (true === IsDetachedBuffer(this._view.buffer))
              throw new TypeError("The BYOB request's buffer has been detached and so cannot be used as a response");
            ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, e);
          } }, { key: "respondWithNewView", value: function respondWithNewView(e) {
            if (false === IsReadableStreamBYOBRequest(this))
              throw byobRequestBrandCheckException("respond");
            if (void 0 === this._associatedReadableByteStreamController)
              throw new TypeError("This BYOB request has been invalidated");
            if (!ArrayBuffer.isView(e))
              throw new TypeError("You can only respond with array buffer views");
            if (true === IsDetachedBuffer(e.buffer))
              throw new TypeError("The supplied view's buffer has been detached and so cannot be used as a response");
            ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, e);
          } }, { key: "view", get: function get() {
            if (false === IsReadableStreamBYOBRequest(this))
              throw byobRequestBrandCheckException("view");
            return this._view;
          } }]), ReadableStreamBYOBRequest2;
        }(), ReadableByteStreamController = function() {
          function ReadableByteStreamController2() {
            throw _classCallCheck(this, ReadableByteStreamController2), new TypeError("ReadableByteStreamController constructor cannot be used directly");
          }
          return _createClass(ReadableByteStreamController2, [{ key: "close", value: function close() {
            if (false === IsReadableByteStreamController(this))
              throw byteStreamControllerBrandCheckException("close");
            if (true === this._closeRequested)
              throw new TypeError("The stream has already been closed; do not close it again!");
            var e = this._controlledReadableByteStream._state;
            if ("readable" !== e)
              throw new TypeError("The stream (in " + e + " state) is not in the readable state and cannot be closed");
            ReadableByteStreamControllerClose(this);
          } }, { key: "enqueue", value: function enqueue(e) {
            if (false === IsReadableByteStreamController(this))
              throw byteStreamControllerBrandCheckException("enqueue");
            if (true === this._closeRequested)
              throw new TypeError("stream is closed or draining");
            var r = this._controlledReadableByteStream._state;
            if ("readable" !== r)
              throw new TypeError("The stream (in " + r + " state) is not in the readable state and cannot be enqueued to");
            if (!ArrayBuffer.isView(e))
              throw new TypeError("You can only enqueue array buffer views when using a ReadableByteStreamController");
            if (true === IsDetachedBuffer(e.buffer))
              throw new TypeError("Cannot enqueue a view onto a detached ArrayBuffer");
            ReadableByteStreamControllerEnqueue(this, e);
          } }, { key: "error", value: function error2(e) {
            if (false === IsReadableByteStreamController(this))
              throw byteStreamControllerBrandCheckException("error");
            var r = this._controlledReadableByteStream;
            if ("readable" !== r._state)
              throw new TypeError("The stream is " + r._state + " and so cannot be errored");
            ReadableByteStreamControllerError(this, e);
          } }, { key: CancelSteps, value: function value(e) {
            return this._pendingPullIntos.length > 0 && (this._pendingPullIntos[0].bytesFilled = 0), ResetQueue(this), this._cancelAlgorithm(e);
          } }, { key: PullSteps, value: function value() {
            var e = this._controlledReadableByteStream;
            if (this._queueTotalSize > 0) {
              var r = this._queue.shift();
              this._queueTotalSize -= r.byteLength, ReadableByteStreamControllerHandleQueueDrain(this);
              var t = void 0;
              try {
                t = new Uint8Array(r.buffer, r.byteOffset, r.byteLength);
              } catch (e2) {
                return Promise.reject(e2);
              }
              return Promise.resolve(CreateIterResultObject(t, false));
            }
            var a = this._autoAllocateChunkSize;
            if (void 0 !== a) {
              var l = void 0;
              try {
                l = new ArrayBuffer(a);
              } catch (e2) {
                return Promise.reject(e2);
              }
              var o = { buffer: l, byteOffset: 0, byteLength: a, bytesFilled: 0, elementSize: 1, ctor: Uint8Array, readerType: "default" };
              this._pendingPullIntos.push(o);
            }
            var n = ReadableStreamAddReadRequest(e);
            return ReadableByteStreamControllerCallPullIfNeeded(this), n;
          } }, { key: "byobRequest", get: function get() {
            if (false === IsReadableByteStreamController(this))
              throw byteStreamControllerBrandCheckException("byobRequest");
            if (void 0 === this._byobRequest && this._pendingPullIntos.length > 0) {
              var e = this._pendingPullIntos[0], r = new Uint8Array(e.buffer, e.byteOffset + e.bytesFilled, e.byteLength - e.bytesFilled), t = Object.create(ReadableStreamBYOBRequest.prototype);
              SetUpReadableStreamBYOBRequest(t, this, r), this._byobRequest = t;
            }
            return this._byobRequest;
          } }, { key: "desiredSize", get: function get() {
            if (false === IsReadableByteStreamController(this))
              throw byteStreamControllerBrandCheckException("desiredSize");
            return ReadableByteStreamControllerGetDesiredSize(this);
          } }]), ReadableByteStreamController2;
        }();
      }, { "./helpers.js": 10, "./queue-with-sizes.js": 11, "./utils.js": 14, "./writable-stream.js": 15, "better-assert": 16 }], 13: [function(_dereq_, module3, exports3) {
        "use strict";
        function _classCallCheck(r, e) {
          if (!(r instanceof e))
            throw new TypeError("Cannot call a class as a function");
        }
        function CreateTransformStream(r, e, t) {
          var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1, o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : function() {
            return 1;
          }, n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : function() {
            return 1;
          }, i2 = Object.create(TransformStream.prototype), m = void 0;
          InitializeTransformStream(i2, new Promise(function(r2) {
            m = r2;
          }), a, o, n, l), SetUpTransformStreamDefaultController(i2, Object.create(TransformStreamDefaultController.prototype), e, t);
          var s = r();
          return m(s), i2;
        }
        function InitializeTransformStream(r, e, t, a, o, n) {
          function startAlgorithm() {
            return e;
          }
          r._writable = CreateWritableStream(startAlgorithm, function writeAlgorithm(e2) {
            return TransformStreamDefaultSinkWriteAlgorithm(r, e2);
          }, function closeAlgorithm() {
            return TransformStreamDefaultSinkCloseAlgorithm(r);
          }, function abortAlgorithm() {
            return TransformStreamDefaultSinkAbortAlgorithm(r);
          }, t, a), r._readable = CreateReadableStream(startAlgorithm, function pullAlgorithm() {
            return TransformStreamDefaultSourcePullAlgorithm(r);
          }, function cancelAlgorithm(e2) {
            return TransformStreamErrorWritableAndUnblockWrite(r, e2), Promise.resolve();
          }, o, n), r._backpressure = void 0, r._backpressureChangePromise = void 0, r._backpressureChangePromise_resolve = void 0, TransformStreamSetBackpressure(r, true), r._transformStreamController = void 0;
        }
        function IsTransformStream(r) {
          return !!typeIsObject(r) && !!Object.prototype.hasOwnProperty.call(r, "_transformStreamController");
        }
        function TransformStreamError(r, e) {
          verbose("TransformStreamError()"), "readable" === r._readable._state && ReadableStreamDefaultControllerError(r._readable._readableStreamController, e), TransformStreamErrorWritableAndUnblockWrite(r, e);
        }
        function TransformStreamErrorWritableAndUnblockWrite(r, e) {
          WritableStreamDefaultControllerErrorIfNeeded(r._writable._writableStreamController, e), true === r._backpressure && TransformStreamSetBackpressure(r, false);
        }
        function TransformStreamSetBackpressure(r, e) {
          verbose("TransformStreamSetBackpressure() [backpressure = " + e + "]"), void 0 !== r._backpressureChangePromise && r._backpressureChangePromise_resolve(), r._backpressureChangePromise = new Promise(function(e2) {
            r._backpressureChangePromise_resolve = e2;
          }), r._backpressure = e;
        }
        function IsTransformStreamDefaultController(r) {
          return !!typeIsObject(r) && !!Object.prototype.hasOwnProperty.call(r, "_controlledTransformStream");
        }
        function SetUpTransformStreamDefaultController(r, e, t, a) {
          e._controlledTransformStream = r, r._transformStreamController = e, e._transformAlgorithm = t, e._flushAlgorithm = a;
        }
        function SetUpTransformStreamDefaultControllerFromTransformer(r, e) {
          var t = Object.create(TransformStreamDefaultController.prototype), a = function transformAlgorithm(r2) {
            try {
              return TransformStreamDefaultControllerEnqueue(t, r2), Promise.resolve();
            } catch (r3) {
              return Promise.reject(r3);
            }
          }, o = e.transform;
          if (void 0 !== o) {
            if ("function" != typeof o)
              throw new TypeError("transform is not a method");
            a = function transformAlgorithm(a2) {
              return PromiseCall(o, e, [a2, t]).catch(function(e2) {
                throw TransformStreamError(r, e2), e2;
              });
            };
          }
          var n = CreateAlgorithmFromUnderlyingMethod(e, "flush", 0, [t]);
          SetUpTransformStreamDefaultController(r, t, a, n);
        }
        function TransformStreamDefaultControllerEnqueue(r, e) {
          verbose("TransformStreamDefaultControllerEnqueue()");
          var t = r._controlledTransformStream, a = t._readable._readableStreamController;
          if (false === ReadableStreamDefaultControllerCanCloseOrEnqueue(a))
            throw new TypeError("Readable side is not in a state that permits enqueue");
          try {
            ReadableStreamDefaultControllerEnqueue(a, e);
          } catch (r2) {
            throw TransformStreamErrorWritableAndUnblockWrite(t, r2), t._readable._storedError;
          }
          ReadableStreamDefaultControllerHasBackpressure(a) !== t._backpressure && TransformStreamSetBackpressure(t, true);
        }
        function TransformStreamDefaultControllerError(r, e) {
          TransformStreamError(r._controlledTransformStream, e);
        }
        function TransformStreamDefaultControllerTerminate(r) {
          verbose("TransformStreamDefaultControllerTerminate()");
          var e = r._controlledTransformStream, t = e._readable._readableStreamController;
          true === ReadableStreamDefaultControllerCanCloseOrEnqueue(t) && ReadableStreamDefaultControllerClose(t), TransformStreamErrorWritableAndUnblockWrite(e, new TypeError("TransformStream terminated"));
        }
        function TransformStreamDefaultSinkWriteAlgorithm(r, e) {
          verbose("TransformStreamDefaultSinkWriteAlgorithm()");
          var t = r._transformStreamController;
          return true === r._backpressure ? r._backpressureChangePromise.then(function() {
            var a = r._writable;
            if ("erroring" === a._state)
              throw a._storedError;
            return t._transformAlgorithm(e);
          }) : t._transformAlgorithm(e);
        }
        function TransformStreamDefaultSinkAbortAlgorithm(r) {
          return TransformStreamError(r, new TypeError("Writable side aborted")), Promise.resolve();
        }
        function TransformStreamDefaultSinkCloseAlgorithm(r) {
          verbose("TransformStreamDefaultSinkCloseAlgorithm()");
          var e = r._readable;
          return r._transformStreamController._flushAlgorithm().then(function() {
            if ("errored" === e._state)
              throw e._storedError;
            var r2 = e._readableStreamController;
            true === ReadableStreamDefaultControllerCanCloseOrEnqueue(r2) && ReadableStreamDefaultControllerClose(r2);
          }).catch(function(t) {
            throw TransformStreamError(r, t), e._storedError;
          });
        }
        function TransformStreamDefaultSourcePullAlgorithm(r) {
          return verbose("TransformStreamDefaultSourcePullAlgorithm()"), TransformStreamSetBackpressure(r, false), r._backpressureChangePromise;
        }
        function defaultControllerBrandCheckException(r) {
          return new TypeError("TransformStreamDefaultController.prototype." + r + " can only be used on a TransformStreamDefaultController");
        }
        function streamBrandCheckException(r) {
          return new TypeError("TransformStream.prototype." + r + " can only be used on a TransformStream");
        }
        var _createClass = /* @__PURE__ */ function() {
          function defineProperties(r, e) {
            for (var t = 0; t < e.length; t++) {
              var a = e[t];
              a.enumerable = a.enumerable || false, a.configurable = true, "value" in a && (a.writable = true), Object.defineProperty(r, a.key, a);
            }
          }
          return function(r, e, t) {
            return e && defineProperties(r.prototype, e), t && defineProperties(r, t), r;
          };
        }(), assert = _dereq_("better-assert"), verbose = _dereq_("debug")("streams:transform-stream:verbose"), _require = _dereq_("./helpers.js"), InvokeOrNoop = _require.InvokeOrNoop, CreateAlgorithmFromUnderlyingMethod = _require.CreateAlgorithmFromUnderlyingMethod, PromiseCall = _require.PromiseCall, typeIsObject = _require.typeIsObject, ValidateAndNormalizeHighWaterMark = _require.ValidateAndNormalizeHighWaterMark, IsNonNegativeNumber = _require.IsNonNegativeNumber, MakeSizeAlgorithmFromSizeFunction = _require.MakeSizeAlgorithmFromSizeFunction, _require2 = _dereq_("./readable-stream.js"), CreateReadableStream = _require2.CreateReadableStream, ReadableStreamDefaultControllerClose = _require2.ReadableStreamDefaultControllerClose, ReadableStreamDefaultControllerEnqueue = _require2.ReadableStreamDefaultControllerEnqueue, ReadableStreamDefaultControllerError = _require2.ReadableStreamDefaultControllerError, ReadableStreamDefaultControllerGetDesiredSize = _require2.ReadableStreamDefaultControllerGetDesiredSize, ReadableStreamDefaultControllerHasBackpressure = _require2.ReadableStreamDefaultControllerHasBackpressure, ReadableStreamDefaultControllerCanCloseOrEnqueue = _require2.ReadableStreamDefaultControllerCanCloseOrEnqueue, _require3 = _dereq_("./writable-stream.js"), CreateWritableStream = _require3.CreateWritableStream, WritableStreamDefaultControllerErrorIfNeeded = _require3.WritableStreamDefaultControllerErrorIfNeeded, TransformStream = function() {
          function TransformStream2() {
            var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            if (_classCallCheck(this, TransformStream2), void 0 !== r.readableType)
              throw new RangeError("Invalid readable type specified");
            if (void 0 !== r.writableType)
              throw new RangeError("Invalid writable type specified");
            var a = e.size, o = MakeSizeAlgorithmFromSizeFunction(a), n = e.highWaterMark;
            void 0 === n && (n = 1), n = ValidateAndNormalizeHighWaterMark(n);
            var l = t.size, i2 = MakeSizeAlgorithmFromSizeFunction(l), m = t.highWaterMark;
            void 0 === m && (m = 0), m = ValidateAndNormalizeHighWaterMark(m);
            var s = void 0;
            InitializeTransformStream(this, new Promise(function(r2) {
              s = r2;
            }), n, o, m, i2), SetUpTransformStreamDefaultControllerFromTransformer(this, r);
            var u = InvokeOrNoop(r, "start", [this._transformStreamController]);
            s(u);
          }
          return _createClass(TransformStream2, [{ key: "readable", get: function get() {
            if (false === IsTransformStream(this))
              throw streamBrandCheckException("readable");
            return this._readable;
          } }, { key: "writable", get: function get() {
            if (false === IsTransformStream(this))
              throw streamBrandCheckException("writable");
            return this._writable;
          } }]), TransformStream2;
        }(), TransformStreamDefaultController = function() {
          function TransformStreamDefaultController2() {
            throw _classCallCheck(this, TransformStreamDefaultController2), new TypeError("TransformStreamDefaultController instances cannot be created directly");
          }
          return _createClass(TransformStreamDefaultController2, [{ key: "enqueue", value: function enqueue(r) {
            if (false === IsTransformStreamDefaultController(this))
              throw defaultControllerBrandCheckException("enqueue");
            TransformStreamDefaultControllerEnqueue(this, r);
          } }, { key: "error", value: function error2(r) {
            if (false === IsTransformStreamDefaultController(this))
              throw defaultControllerBrandCheckException("error");
            TransformStreamDefaultControllerError(this, r);
          } }, { key: "terminate", value: function terminate() {
            if (false === IsTransformStreamDefaultController(this))
              throw defaultControllerBrandCheckException("terminate");
            TransformStreamDefaultControllerTerminate(this);
          } }, { key: "desiredSize", get: function get() {
            if (false === IsTransformStreamDefaultController(this))
              throw defaultControllerBrandCheckException("desiredSize");
            var r = this._controlledTransformStream._readable._readableStreamController;
            return ReadableStreamDefaultControllerGetDesiredSize(r);
          } }]), TransformStreamDefaultController2;
        }();
        module3.exports = { CreateTransformStream, TransformStream };
      }, { "./helpers.js": 10, "./readable-stream.js": 12, "./writable-stream.js": 15, "better-assert": 16, "debug": 18 }], 14: [function(_dereq_, module3, exports3) {
        "use strict";
        var assert = _dereq_("better-assert");
        exports3.rethrowAssertionErrorRejection = function(r) {
          r && r.constructor === assert.AssertionError && setTimeout(function() {
            throw r;
          }, 0);
        };
      }, { "better-assert": 16 }], 15: [function(_dereq_, module3, exports3) {
        "use strict";
        function _classCallCheck(e, r) {
          if (!(e instanceof r))
            throw new TypeError("Cannot call a class as a function");
        }
        function AcquireWritableStreamDefaultWriter(e) {
          return new WritableStreamDefaultWriter(e);
        }
        function CreateWritableStream(e, r, t, i2) {
          var a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1, o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : function() {
            return 1;
          }, l = Object.create(WritableStream.prototype);
          return InitializeWritableStream(l), SetUpWritableStreamDefaultController(l, Object.create(WritableStreamDefaultController.prototype), e, r, t, i2, a, o), l;
        }
        function InitializeWritableStream(e) {
          e._state = "writable", e._storedError = void 0, e._writer = void 0, e._writableStreamController = void 0, e._writeRequests = [], e._inFlightWriteRequest = void 0, e._closeRequest = void 0, e._inFlightCloseRequest = void 0, e._pendingAbortRequest = void 0, e._backpressure = false;
        }
        function IsWritableStream(e) {
          return !!typeIsObject(e) && !!Object.prototype.hasOwnProperty.call(e, "_writableStreamController");
        }
        function IsWritableStreamLocked(e) {
          return void 0 !== e._writer;
        }
        function WritableStreamAbort(e, r) {
          var t = e._state;
          if ("closed" === t)
            return Promise.resolve(void 0);
          if ("errored" === t)
            return Promise.reject(e._storedError);
          var i2 = new TypeError("Requested to abort");
          if (void 0 !== e._pendingAbortRequest)
            return Promise.reject(i2);
          var a = false;
          "erroring" === t && (a = true, r = void 0);
          var o = new Promise(function(t2, i3) {
            e._pendingAbortRequest = { _resolve: t2, _reject: i3, _reason: r, _wasAlreadyErroring: a };
          });
          return false === a && WritableStreamStartErroring(e, i2), o;
        }
        function WritableStreamAddWriteRequest(e) {
          return new Promise(function(r, t) {
            var i2 = { _resolve: r, _reject: t };
            e._writeRequests.push(i2);
          });
        }
        function WritableStreamDealWithRejection(e, r) {
          verbose("WritableStreamDealWithRejection(stream, %o)", r), "writable" !== e._state ? WritableStreamFinishErroring(e) : WritableStreamStartErroring(e, r);
        }
        function WritableStreamStartErroring(e, r) {
          verbose("WritableStreamStartErroring(stream, %o)", r);
          var t = e._writableStreamController;
          e._state = "erroring", e._storedError = r;
          var i2 = e._writer;
          void 0 !== i2 && WritableStreamDefaultWriterEnsureReadyPromiseRejected(i2, r), false === WritableStreamHasOperationMarkedInFlight(e) && true === t._started && WritableStreamFinishErroring(e);
        }
        function WritableStreamFinishErroring(e) {
          verbose("WritableStreamFinishErroring()"), e._state = "errored", e._writableStreamController[ErrorSteps]();
          var r = e._storedError, t = true, i2 = false, a = void 0;
          try {
            for (var o, l = e._writeRequests[Symbol.iterator](); !(t = (o = l.next()).done); t = true)
              o.value._reject(r);
          } catch (e2) {
            i2 = true, a = e2;
          } finally {
            try {
              !t && l.return && l.return();
            } finally {
              if (i2)
                throw a;
            }
          }
          if (e._writeRequests = [], void 0 !== e._pendingAbortRequest) {
            var s = e._pendingAbortRequest;
            if (e._pendingAbortRequest = void 0, true === s._wasAlreadyErroring)
              return s._reject(r), void WritableStreamRejectCloseAndClosedPromiseIfNeeded(e);
            e._writableStreamController[AbortSteps](s._reason).then(function() {
              s._resolve(), WritableStreamRejectCloseAndClosedPromiseIfNeeded(e);
            }, function(r2) {
              s._reject(r2), WritableStreamRejectCloseAndClosedPromiseIfNeeded(e);
            });
          } else
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(e);
        }
        function WritableStreamFinishInFlightWrite(e) {
          e._inFlightWriteRequest._resolve(void 0), e._inFlightWriteRequest = void 0;
        }
        function WritableStreamFinishInFlightWriteWithError(e, r) {
          e._inFlightWriteRequest._reject(r), e._inFlightWriteRequest = void 0, WritableStreamDealWithRejection(e, r);
        }
        function WritableStreamFinishInFlightClose(e) {
          e._inFlightCloseRequest._resolve(void 0), e._inFlightCloseRequest = void 0, "erroring" === e._state && (e._storedError = void 0, void 0 !== e._pendingAbortRequest && (e._pendingAbortRequest._resolve(), e._pendingAbortRequest = void 0)), e._state = "closed";
          var r = e._writer;
          void 0 !== r && defaultWriterClosedPromiseResolve(r);
        }
        function WritableStreamFinishInFlightCloseWithError(e, r) {
          e._inFlightCloseRequest._reject(r), e._inFlightCloseRequest = void 0, void 0 !== e._pendingAbortRequest && (e._pendingAbortRequest._reject(r), e._pendingAbortRequest = void 0), WritableStreamDealWithRejection(e, r);
        }
        function WritableStreamCloseQueuedOrInFlight(e) {
          return void 0 !== e._closeRequest || void 0 !== e._inFlightCloseRequest;
        }
        function WritableStreamHasOperationMarkedInFlight(e) {
          return void 0 === e._inFlightWriteRequest && void 0 === e._inFlightCloseRequest ? (verbose("WritableStreamHasOperationMarkedInFlight() is false"), false) : (verbose("WritableStreamHasOperationMarkedInFlight() is true"), true);
        }
        function WritableStreamMarkCloseRequestInFlight(e) {
          e._inFlightCloseRequest = e._closeRequest, e._closeRequest = void 0;
        }
        function WritableStreamMarkFirstWriteRequestInFlight(e) {
          e._inFlightWriteRequest = e._writeRequests.shift();
        }
        function WritableStreamRejectCloseAndClosedPromiseIfNeeded(e) {
          verbose("WritableStreamRejectCloseAndClosedPromiseIfNeeded()"), void 0 !== e._closeRequest && (e._closeRequest._reject(e._storedError), e._closeRequest = void 0);
          var r = e._writer;
          void 0 !== r && (defaultWriterClosedPromiseReject(r, e._storedError), r._closedPromise.catch(function() {
          }));
        }
        function WritableStreamUpdateBackpressure(e, r) {
          var t = e._writer;
          void 0 !== t && r !== e._backpressure && (true === r ? defaultWriterReadyPromiseReset(t) : defaultWriterReadyPromiseResolve(t)), e._backpressure = r;
        }
        function IsWritableStreamDefaultWriter(e) {
          return !!typeIsObject(e) && !!Object.prototype.hasOwnProperty.call(e, "_ownerWritableStream");
        }
        function WritableStreamDefaultWriterAbort(e, r) {
          return WritableStreamAbort(e._ownerWritableStream, r);
        }
        function WritableStreamDefaultWriterClose(e) {
          var r = e._ownerWritableStream, t = r._state;
          if ("closed" === t || "errored" === t)
            return Promise.reject(new TypeError("The stream (in " + t + " state) is not in the writable state and cannot be closed"));
          var i2 = new Promise(function(e2, t2) {
            var i3 = { _resolve: e2, _reject: t2 };
            r._closeRequest = i3;
          });
          return true === r._backpressure && "writable" === t && defaultWriterReadyPromiseResolve(e), WritableStreamDefaultControllerClose(r._writableStreamController), i2;
        }
        function WritableStreamDefaultWriterCloseWithErrorPropagation(e) {
          var r = e._ownerWritableStream, t = r._state;
          return true === WritableStreamCloseQueuedOrInFlight(r) || "closed" === t ? Promise.resolve() : "errored" === t ? Promise.reject(r._storedError) : WritableStreamDefaultWriterClose(e);
        }
        function WritableStreamDefaultWriterEnsureClosedPromiseRejected(e, r) {
          "pending" === e._closedPromiseState ? defaultWriterClosedPromiseReject(e, r) : defaultWriterClosedPromiseResetToRejected(e, r), e._closedPromise.catch(function() {
          });
        }
        function WritableStreamDefaultWriterEnsureReadyPromiseRejected(e, r) {
          verbose("WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, %o)", r), "pending" === e._readyPromiseState ? defaultWriterReadyPromiseReject(e, r) : defaultWriterReadyPromiseResetToRejected(e, r), e._readyPromise.catch(function() {
          });
        }
        function WritableStreamDefaultWriterGetDesiredSize(e) {
          var r = e._ownerWritableStream, t = r._state;
          return "errored" === t || "erroring" === t ? null : "closed" === t ? 0 : WritableStreamDefaultControllerGetDesiredSize(r._writableStreamController);
        }
        function WritableStreamDefaultWriterRelease(e) {
          var r = e._ownerWritableStream, t = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");
          WritableStreamDefaultWriterEnsureReadyPromiseRejected(e, t), WritableStreamDefaultWriterEnsureClosedPromiseRejected(e, t), r._writer = void 0, e._ownerWritableStream = void 0;
        }
        function WritableStreamDefaultWriterWrite(e, r) {
          var t = e._ownerWritableStream, i2 = t._writableStreamController, a = WritableStreamDefaultControllerGetChunkSize(i2, r);
          if (t !== e._ownerWritableStream)
            return Promise.reject(defaultWriterLockException("write to"));
          var o = t._state;
          if ("errored" === o)
            return Promise.reject(t._storedError);
          if (true === WritableStreamCloseQueuedOrInFlight(t) || "closed" === o)
            return Promise.reject(new TypeError("The stream is closing or closed and cannot be written to"));
          if ("erroring" === o)
            return Promise.reject(t._storedError);
          var l = WritableStreamAddWriteRequest(t);
          return WritableStreamDefaultControllerWrite(i2, r, a), l;
        }
        function IsWritableStreamDefaultController(e) {
          return !!typeIsObject(e) && !!Object.prototype.hasOwnProperty.call(e, "_controlledWritableStream");
        }
        function SetUpWritableStreamDefaultController(e, r, t, i2, a, o, l, s) {
          r._controlledWritableStream = e, e._writableStreamController = r, r._queue = void 0, r._queueTotalSize = void 0, ResetQueue(r), r._started = false, r._strategySizeAlgorithm = s, r._strategyHWM = l, r._writeAlgorithm = i2, r._closeAlgorithm = a, r._abortAlgorithm = o;
          var n = WritableStreamDefaultControllerGetBackpressure(r);
          WritableStreamUpdateBackpressure(e, n);
          var u = t();
          Promise.resolve(u).then(function() {
            r._started = true, WritableStreamDefaultControllerAdvanceQueueIfNeeded(r);
          }, function(t2) {
            r._started = true, WritableStreamDealWithRejection(e, t2);
          }).catch(rethrowAssertionErrorRejection);
        }
        function SetUpWritableStreamDefaultControllerFromUnderlyingSink(e, r, t, i2) {
          var a = Object.create(WritableStreamDefaultController.prototype), o = CreateAlgorithmFromUnderlyingMethod(r, "write", 1, [a]), l = CreateAlgorithmFromUnderlyingMethod(r, "close", 0, []), s = CreateAlgorithmFromUnderlyingMethod(r, "abort", 1, []);
          SetUpWritableStreamDefaultController(e, a, function startAlgorithm() {
            return InvokeOrNoop(r, "start", [a]);
          }, o, l, s, t, i2);
        }
        function WritableStreamDefaultControllerClose(e) {
          EnqueueValueWithSize(e, "close", 0), WritableStreamDefaultControllerAdvanceQueueIfNeeded(e);
        }
        function WritableStreamDefaultControllerGetChunkSize(e, r) {
          try {
            return e._strategySizeAlgorithm(r);
          } catch (r2) {
            return WritableStreamDefaultControllerErrorIfNeeded(e, r2), 1;
          }
        }
        function WritableStreamDefaultControllerGetDesiredSize(e) {
          return e._strategyHWM - e._queueTotalSize;
        }
        function WritableStreamDefaultControllerWrite(e, r, t) {
          var i2 = { chunk: r };
          try {
            EnqueueValueWithSize(e, i2, t);
          } catch (r2) {
            return void WritableStreamDefaultControllerErrorIfNeeded(e, r2);
          }
          var a = e._controlledWritableStream;
          false === WritableStreamCloseQueuedOrInFlight(a) && "writable" === a._state && WritableStreamUpdateBackpressure(a, WritableStreamDefaultControllerGetBackpressure(e)), WritableStreamDefaultControllerAdvanceQueueIfNeeded(e);
        }
        function WritableStreamDefaultControllerAdvanceQueueIfNeeded(e) {
          verbose("WritableStreamDefaultControllerAdvanceQueueIfNeeded()");
          var r = e._controlledWritableStream;
          if (false !== e._started && void 0 === r._inFlightWriteRequest) {
            var t = r._state;
            if ("closed" !== t && "errored" !== t)
              if ("erroring" !== t) {
                if (0 !== e._queue.length) {
                  var i2 = PeekQueueValue(e);
                  "close" === i2 ? WritableStreamDefaultControllerProcessClose(e) : WritableStreamDefaultControllerProcessWrite(e, i2.chunk);
                }
              } else
                WritableStreamFinishErroring(r);
          }
        }
        function WritableStreamDefaultControllerErrorIfNeeded(e, r) {
          "writable" === e._controlledWritableStream._state && WritableStreamDefaultControllerError(e, r);
        }
        function WritableStreamDefaultControllerProcessClose(e) {
          var r = e._controlledWritableStream;
          WritableStreamMarkCloseRequestInFlight(r), DequeueValue(e), e._closeAlgorithm().then(function() {
            WritableStreamFinishInFlightClose(r);
          }, function(e2) {
            WritableStreamFinishInFlightCloseWithError(r, e2);
          }).catch(rethrowAssertionErrorRejection);
        }
        function WritableStreamDefaultControllerProcessWrite(e, r) {
          var t = e._controlledWritableStream;
          WritableStreamMarkFirstWriteRequestInFlight(t), e._writeAlgorithm(r).then(function() {
            WritableStreamFinishInFlightWrite(t);
            var r2 = t._state;
            if (DequeueValue(e), false === WritableStreamCloseQueuedOrInFlight(t) && "writable" === r2) {
              var i2 = WritableStreamDefaultControllerGetBackpressure(e);
              WritableStreamUpdateBackpressure(t, i2);
            }
            WritableStreamDefaultControllerAdvanceQueueIfNeeded(e);
          }, function(e2) {
            WritableStreamFinishInFlightWriteWithError(t, e2);
          }).catch(rethrowAssertionErrorRejection);
        }
        function WritableStreamDefaultControllerGetBackpressure(e) {
          return WritableStreamDefaultControllerGetDesiredSize(e) <= 0;
        }
        function WritableStreamDefaultControllerError(e, r) {
          WritableStreamStartErroring(e._controlledWritableStream, r);
        }
        function streamBrandCheckException(e) {
          return new TypeError("WritableStream.prototype." + e + " can only be used on a WritableStream");
        }
        function defaultWriterBrandCheckException(e) {
          return new TypeError("WritableStreamDefaultWriter.prototype." + e + " can only be used on a WritableStreamDefaultWriter");
        }
        function defaultWriterLockException(e) {
          return new TypeError("Cannot " + e + " a stream using a released writer");
        }
        function defaultWriterClosedPromiseInitialize(e) {
          e._closedPromise = new Promise(function(r, t) {
            e._closedPromise_resolve = r, e._closedPromise_reject = t, e._closedPromiseState = "pending";
          });
        }
        function defaultWriterClosedPromiseInitializeAsRejected(e, r) {
          e._closedPromise = Promise.reject(r), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = "rejected";
        }
        function defaultWriterClosedPromiseInitializeAsResolved(e) {
          e._closedPromise = Promise.resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = "resolved";
        }
        function defaultWriterClosedPromiseReject(e, r) {
          e._closedPromise_reject(r), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = "rejected";
        }
        function defaultWriterClosedPromiseResetToRejected(e, r) {
          e._closedPromise = Promise.reject(r), e._closedPromiseState = "rejected";
        }
        function defaultWriterClosedPromiseResolve(e) {
          e._closedPromise_resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = "resolved";
        }
        function defaultWriterReadyPromiseInitialize(e) {
          verbose("defaultWriterReadyPromiseInitialize()"), e._readyPromise = new Promise(function(r, t) {
            e._readyPromise_resolve = r, e._readyPromise_reject = t;
          }), e._readyPromiseState = "pending";
        }
        function defaultWriterReadyPromiseInitializeAsRejected(e, r) {
          verbose("defaultWriterReadyPromiseInitializeAsRejected(writer, %o)", r), e._readyPromise = Promise.reject(r), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = "rejected";
        }
        function defaultWriterReadyPromiseInitializeAsResolved(e) {
          verbose("defaultWriterReadyPromiseInitializeAsResolved()"), e._readyPromise = Promise.resolve(void 0), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = "fulfilled";
        }
        function defaultWriterReadyPromiseReject(e, r) {
          verbose("defaultWriterReadyPromiseReject(writer, %o)", r), e._readyPromise_reject(r), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = "rejected";
        }
        function defaultWriterReadyPromiseReset(e) {
          verbose("defaultWriterReadyPromiseReset()"), e._readyPromise = new Promise(function(r, t) {
            e._readyPromise_resolve = r, e._readyPromise_reject = t;
          }), e._readyPromiseState = "pending";
        }
        function defaultWriterReadyPromiseResetToRejected(e, r) {
          verbose("defaultWriterReadyPromiseResetToRejected(writer, %o)", r), e._readyPromise = Promise.reject(r), e._readyPromiseState = "rejected";
        }
        function defaultWriterReadyPromiseResolve(e) {
          verbose("defaultWriterReadyPromiseResolve()"), e._readyPromise_resolve(void 0), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = "fulfilled";
        }
        var _createClass = /* @__PURE__ */ function() {
          function defineProperties(e, r) {
            for (var t = 0; t < r.length; t++) {
              var i2 = r[t];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(e, i2.key, i2);
            }
          }
          return function(e, r, t) {
            return r && defineProperties(e.prototype, r), t && defineProperties(e, t), e;
          };
        }(), assert = _dereq_("better-assert"), verbose = _dereq_("debug")("streams:writable-stream:verbose"), _require = _dereq_("./helpers.js"), CreateAlgorithmFromUnderlyingMethod = _require.CreateAlgorithmFromUnderlyingMethod, InvokeOrNoop = _require.InvokeOrNoop, ValidateAndNormalizeHighWaterMark = _require.ValidateAndNormalizeHighWaterMark, IsNonNegativeNumber = _require.IsNonNegativeNumber, MakeSizeAlgorithmFromSizeFunction = _require.MakeSizeAlgorithmFromSizeFunction, typeIsObject = _require.typeIsObject, _require2 = _dereq_("./utils.js"), rethrowAssertionErrorRejection = _require2.rethrowAssertionErrorRejection, _require3 = _dereq_("./queue-with-sizes.js"), DequeueValue = _require3.DequeueValue, EnqueueValueWithSize = _require3.EnqueueValueWithSize, PeekQueueValue = _require3.PeekQueueValue, ResetQueue = _require3.ResetQueue, AbortSteps = Symbol("[[AbortSteps]]"), ErrorSteps = Symbol("[[ErrorSteps]]"), WritableStream = function() {
          function WritableStream2() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, t = r.size, i2 = r.highWaterMark, a = void 0 === i2 ? 1 : i2;
            if (_classCallCheck(this, WritableStream2), InitializeWritableStream(this), void 0 !== e.type)
              throw new RangeError("Invalid type is specified");
            var o = MakeSizeAlgorithmFromSizeFunction(t);
            SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, e, a = ValidateAndNormalizeHighWaterMark(a), o);
          }
          return _createClass(WritableStream2, [{ key: "abort", value: function abort(e) {
            return false === IsWritableStream(this) ? Promise.reject(streamBrandCheckException("abort")) : true === IsWritableStreamLocked(this) ? Promise.reject(new TypeError("Cannot abort a stream that already has a writer")) : WritableStreamAbort(this, e);
          } }, { key: "getWriter", value: function getWriter() {
            if (false === IsWritableStream(this))
              throw streamBrandCheckException("getWriter");
            return AcquireWritableStreamDefaultWriter(this);
          } }, { key: "locked", get: function get() {
            if (false === IsWritableStream(this))
              throw streamBrandCheckException("locked");
            return IsWritableStreamLocked(this);
          } }]), WritableStream2;
        }();
        module3.exports = { AcquireWritableStreamDefaultWriter, CreateWritableStream, IsWritableStream, IsWritableStreamLocked, WritableStream, WritableStreamAbort, WritableStreamDefaultControllerErrorIfNeeded, WritableStreamDefaultWriterCloseWithErrorPropagation, WritableStreamDefaultWriterRelease, WritableStreamDefaultWriterWrite, WritableStreamCloseQueuedOrInFlight };
        var WritableStreamDefaultWriter = function() {
          function WritableStreamDefaultWriter2(e) {
            if (_classCallCheck(this, WritableStreamDefaultWriter2), false === IsWritableStream(e))
              throw new TypeError("WritableStreamDefaultWriter can only be constructed with a WritableStream instance");
            if (true === IsWritableStreamLocked(e))
              throw new TypeError("This stream has already been locked for exclusive writing by another writer");
            this._ownerWritableStream = e, e._writer = this;
            var r = e._state;
            if ("writable" === r)
              false === WritableStreamCloseQueuedOrInFlight(e) && true === e._backpressure ? defaultWriterReadyPromiseInitialize(this) : defaultWriterReadyPromiseInitializeAsResolved(this), defaultWriterClosedPromiseInitialize(this);
            else if ("erroring" === r)
              defaultWriterReadyPromiseInitializeAsRejected(this, e._storedError), this._readyPromise.catch(function() {
              }), defaultWriterClosedPromiseInitialize(this);
            else if ("closed" === r)
              defaultWriterReadyPromiseInitializeAsResolved(this), defaultWriterClosedPromiseInitializeAsResolved(this);
            else {
              var t = e._storedError;
              defaultWriterReadyPromiseInitializeAsRejected(this, t), this._readyPromise.catch(function() {
              }), defaultWriterClosedPromiseInitializeAsRejected(this, t), this._closedPromise.catch(function() {
              });
            }
          }
          return _createClass(WritableStreamDefaultWriter2, [{ key: "abort", value: function abort(e) {
            return false === IsWritableStreamDefaultWriter(this) ? Promise.reject(defaultWriterBrandCheckException("abort")) : void 0 === this._ownerWritableStream ? Promise.reject(defaultWriterLockException("abort")) : WritableStreamDefaultWriterAbort(this, e);
          } }, { key: "close", value: function close() {
            if (false === IsWritableStreamDefaultWriter(this))
              return Promise.reject(defaultWriterBrandCheckException("close"));
            var e = this._ownerWritableStream;
            return void 0 === e ? Promise.reject(defaultWriterLockException("close")) : true === WritableStreamCloseQueuedOrInFlight(e) ? Promise.reject(new TypeError("cannot close an already-closing stream")) : WritableStreamDefaultWriterClose(this);
          } }, { key: "releaseLock", value: function releaseLock() {
            if (false === IsWritableStreamDefaultWriter(this))
              throw defaultWriterBrandCheckException("releaseLock");
            void 0 !== this._ownerWritableStream && WritableStreamDefaultWriterRelease(this);
          } }, { key: "write", value: function write(e) {
            return false === IsWritableStreamDefaultWriter(this) ? Promise.reject(defaultWriterBrandCheckException("write")) : void 0 === this._ownerWritableStream ? Promise.reject(defaultWriterLockException("write to")) : WritableStreamDefaultWriterWrite(this, e);
          } }, { key: "closed", get: function get() {
            return false === IsWritableStreamDefaultWriter(this) ? Promise.reject(defaultWriterBrandCheckException("closed")) : this._closedPromise;
          } }, { key: "desiredSize", get: function get() {
            if (false === IsWritableStreamDefaultWriter(this))
              throw defaultWriterBrandCheckException("desiredSize");
            if (void 0 === this._ownerWritableStream)
              throw defaultWriterLockException("desiredSize");
            return WritableStreamDefaultWriterGetDesiredSize(this);
          } }, { key: "ready", get: function get() {
            return false === IsWritableStreamDefaultWriter(this) ? Promise.reject(defaultWriterBrandCheckException("ready")) : this._readyPromise;
          } }]), WritableStreamDefaultWriter2;
        }(), WritableStreamDefaultController = function() {
          function WritableStreamDefaultController2() {
            throw _classCallCheck(this, WritableStreamDefaultController2), new TypeError("WritableStreamDefaultController cannot be constructed explicitly");
          }
          return _createClass(WritableStreamDefaultController2, [{ key: "error", value: function error2(e) {
            if (false === IsWritableStreamDefaultController(this))
              throw new TypeError("WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController");
            "writable" === this._controlledWritableStream._state && WritableStreamDefaultControllerError(this, e);
          } }, { key: AbortSteps, value: function value(e) {
            return this._abortAlgorithm(e);
          } }, { key: ErrorSteps, value: function value() {
            ResetQueue(this);
          } }]), WritableStreamDefaultController2;
        }();
      }, { "./helpers.js": 10, "./queue-with-sizes.js": 11, "./utils.js": 14, "better-assert": 16, "debug": 18 }], 16: [function(_dereq_, module3, exports3) {
        (function(process2) {
          function assert(e) {
            if (!e) {
              var r = callsite(), s = r[1], t = s.getFileName(), i2 = s.getLineNumber(), n = (n = fs.readFileSync(t, "utf8")).split("\n")[i2 - 1].match(/assert\((.*)\)/)[1];
              throw new AssertionError({ message: n, stackStartFunction: r[0].getFunction() });
            }
          }
          var AssertionError = _dereq_("assert").AssertionError, callsite = _dereq_("callsite"), fs = _dereq_("fs");
          module3.exports = process2.env.NO_ASSERT ? function() {
          } : assert;
        }).call(this, _dereq_("_process"));
      }, { "_process": 4, "assert": 2, "callsite": 17, "fs": 3 }], 17: [function(_dereq_, module3, exports3) {
        module3.exports = function() {
          var r = Error.prepareStackTrace;
          Error.prepareStackTrace = function(r2, e2) {
            return e2;
          };
          var e = new Error();
          Error.captureStackTrace(e, arguments.callee);
          var a = e.stack;
          return Error.prepareStackTrace = r, a;
        };
      }, {}], 18: [function(_dereq_, module3, exports3) {
        (function(process2) {
          function useColors() {
            return !("undefined" == typeof window || !window.process || "renderer" !== window.process.type) || ("undefined" == typeof navigator || !navigator.userAgent || !navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) && ("undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
          }
          function formatArgs(e) {
            var o = this.useColors;
            if (e[0] = (o ? "%c" : "") + this.namespace + (o ? " %c" : " ") + e[0] + (o ? "%c " : " ") + "+" + exports3.humanize(this.diff), o) {
              var C = "color: " + this.color;
              e.splice(1, 0, C, "color: inherit");
              var t = 0, r = 0;
              e[0].replace(/%[a-zA-Z%]/g, function(e2) {
                "%%" !== e2 && (t++, "%c" === e2 && (r = t));
              }), e.splice(r, 0, C);
            }
          }
          function log() {
            return "object" == typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
          }
          function save(e) {
            try {
              null == e ? exports3.storage.removeItem("debug") : exports3.storage.debug = e;
            } catch (e2) {
            }
          }
          function load() {
            var e;
            try {
              e = exports3.storage.debug;
            } catch (e2) {
            }
            return !e && "undefined" != typeof process2 && "env" in process2 && (e = process2.env.DEBUG), e;
          }
          function localstorage() {
            try {
              return window.localStorage;
            } catch (e) {
            }
          }
          exports3 = module3.exports = _dereq_("./debug"), exports3.log = log, exports3.formatArgs = formatArgs, exports3.save = save, exports3.load = load, exports3.useColors = useColors, exports3.storage = "undefined" != typeof chrome && void 0 !== chrome.storage ? chrome.storage.local : localstorage(), exports3.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], exports3.formatters.j = function(e) {
            try {
              return JSON.stringify(e);
            } catch (e2) {
              return "[UnexpectedJSONParseError]: " + e2.message;
            }
          }, exports3.enable(load());
        }).call(this, _dereq_("_process"));
      }, { "./debug": 19, "_process": 4 }], 19: [function(_dereq_, module3, exports3) {
        function selectColor(e) {
          var r, t = 0;
          for (r in e)
            t = (t << 5) - t + e.charCodeAt(r), t |= 0;
          return exports3.colors[Math.abs(t) % exports3.colors.length];
        }
        function createDebug(e) {
          function debug() {
            if (debug.enabled) {
              var e2 = debug, t = +/* @__PURE__ */ new Date(), s = t - (r || t);
              e2.diff = s, e2.prev = r, e2.curr = t, r = t;
              for (var o = new Array(arguments.length), n = 0; n < o.length; n++)
                o[n] = arguments[n];
              o[0] = exports3.coerce(o[0]), "string" != typeof o[0] && o.unshift("%O");
              var a = 0;
              o[0] = o[0].replace(/%([a-zA-Z%])/g, function(r2, t2) {
                if ("%%" === r2)
                  return r2;
                a++;
                var s2 = exports3.formatters[t2];
                if ("function" == typeof s2) {
                  var n2 = o[a];
                  r2 = s2.call(e2, n2), o.splice(a, 1), a--;
                }
                return r2;
              }), exports3.formatArgs.call(e2, o), (debug.log || exports3.log || console.log.bind(console)).apply(e2, o);
            }
          }
          var r;
          return debug.namespace = e, debug.enabled = exports3.enabled(e), debug.useColors = exports3.useColors(), debug.color = selectColor(e), debug.destroy = destroy, "function" == typeof exports3.init && exports3.init(debug), exports3.instances.push(debug), debug;
        }
        function destroy() {
          var e = exports3.instances.indexOf(this);
          return -1 !== e && (exports3.instances.splice(e, 1), true);
        }
        function enable(e) {
          exports3.save(e), exports3.names = [], exports3.skips = [];
          var r, t = ("string" == typeof e ? e : "").split(/[\s,]+/), s = t.length;
          for (r = 0; r < s; r++)
            t[r] && ("-" === (e = t[r].replace(/\*/g, ".*?"))[0] ? exports3.skips.push(new RegExp("^" + e.substr(1) + "$")) : exports3.names.push(new RegExp("^" + e + "$")));
          for (r = 0; r < exports3.instances.length; r++) {
            var o = exports3.instances[r];
            o.enabled = exports3.enabled(o.namespace);
          }
        }
        function disable() {
          exports3.enable("");
        }
        function enabled(e) {
          if ("*" === e[e.length - 1])
            return true;
          var r, t;
          for (r = 0, t = exports3.skips.length; r < t; r++)
            if (exports3.skips[r].test(e))
              return false;
          for (r = 0, t = exports3.names.length; r < t; r++)
            if (exports3.names[r].test(e))
              return true;
          return false;
        }
        function coerce(e) {
          return e instanceof Error ? e.stack || e.message : e;
        }
        exports3 = module3.exports = createDebug.debug = createDebug.default = createDebug, exports3.coerce = coerce, exports3.disable = disable, exports3.enable = enable, exports3.enabled = enabled, exports3.humanize = _dereq_("ms"), exports3.instances = [], exports3.names = [], exports3.skips = [], exports3.formatters = {};
      }, { "ms": 20 }], 20: [function(_dereq_, module3, exports3) {
        function parse(e) {
          if (!((e = String(e)).length > 100)) {
            var r = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);
            if (r) {
              var a = parseFloat(r[1]);
              switch ((r[2] || "ms").toLowerCase()) {
                case "years":
                case "year":
                case "yrs":
                case "yr":
                case "y":
                  return a * y;
                case "days":
                case "day":
                case "d":
                  return a * d;
                case "hours":
                case "hour":
                case "hrs":
                case "hr":
                case "h":
                  return a * h;
                case "minutes":
                case "minute":
                case "mins":
                case "min":
                case "m":
                  return a * m;
                case "seconds":
                case "second":
                case "secs":
                case "sec":
                case "s":
                  return a * s;
                case "milliseconds":
                case "millisecond":
                case "msecs":
                case "msec":
                case "ms":
                  return a;
                default:
                  return;
              }
            }
          }
        }
        function fmtShort(e) {
          return e >= d ? Math.round(e / d) + "d" : e >= h ? Math.round(e / h) + "h" : e >= m ? Math.round(e / m) + "m" : e >= s ? Math.round(e / s) + "s" : e + "ms";
        }
        function fmtLong(e) {
          return plural(e, d, "day") || plural(e, h, "hour") || plural(e, m, "minute") || plural(e, s, "second") || e + " ms";
        }
        function plural(s2, e, r) {
          if (!(s2 < e))
            return s2 < 1.5 * e ? Math.floor(s2 / e) + " " + r : Math.ceil(s2 / e) + " " + r + "s";
        }
        var s = 1e3, m = 60 * s, h = 60 * m, d = 24 * h, y = 365.25 * d;
        module3.exports = function(s2, e) {
          e = e || {};
          var r = typeof s2;
          if ("string" === r && s2.length > 0)
            return parse(s2);
          if ("number" === r && false === isNaN(s2))
            return e.long ? fmtLong(s2) : fmtShort(s2);
          throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(s2));
        };
      }, {}] }, {}, [1])(1);
    });
  }
});

// node_modules/is-stream/index.js
var require_is_stream = __commonJS({
  "node_modules/is-stream/index.js"(exports, module) {
    "use strict";
    var isStream2 = (stream) => stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
    isStream2.writable = (stream) => isStream2(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
    isStream2.readable = (stream) => isStream2(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
    isStream2.duplex = (stream) => isStream2.writable(stream) && isStream2.readable(stream);
    isStream2.transform = (stream) => isStream2.duplex(stream) && typeof stream._transform === "function";
    module.exports = isStream2;
  }
});

// node_modules/readable-stream-node-to-web/index.js
var require_readable_stream_node_to_web = __commonJS({
  "node_modules/readable-stream-node-to-web/index.js"(exports, module) {
    module.exports = nodeToWeb;
    module.exports.WEBSTREAM_SUPPORT = typeof ReadableStream !== "undefined";
    function nodeToWeb(nodeStream) {
      if (!module.exports.WEBSTREAM_SUPPORT)
        throw new Error("No web ReadableStream support");
      var destroyed = false;
      var listeners = {};
      function start(controller) {
        listeners["data"] = onData;
        listeners["end"] = onData;
        listeners["end"] = onDestroy;
        listeners["close"] = onDestroy;
        listeners["error"] = onDestroy;
        for (var name in listeners)
          nodeStream.on(name, listeners[name]);
        nodeStream.pause();
        function onData(chunk) {
          if (destroyed)
            return;
          controller.enqueue(chunk);
          nodeStream.pause();
        }
        function onDestroy(err) {
          if (destroyed)
            return;
          destroyed = true;
          for (var name2 in listeners)
            nodeStream.removeListener(name2, listeners[name2]);
          if (err)
            controller.error(err);
          else
            controller.close();
        }
      }
      function pull() {
        if (destroyed)
          return;
        nodeStream.resume();
      }
      function cancel() {
        destroyed = true;
        for (var name in listeners)
          nodeStream.removeListener(name, listeners[name]);
        nodeStream.push(null);
        nodeStream.pause();
        if (nodeStream.destroy)
          nodeStream.destroy();
        else if (nodeStream.close)
          nodeStream.close();
      }
      return new ReadableStream({ start, pull, cancel });
    }
  }
});

// node_modules/@comunica/bus-http/lib/ActorHttp.js
var require_ActorHttp = __commonJS({
  "node_modules/@comunica/bus-http/lib/ActorHttp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHttp = void 0;
    var core_1 = require_lib2();
    var readable_web_to_node_stream_1 = require_lib50();
    if (!globalThis.ReadableStream) {
      globalThis.ReadableStream = require_polyfill_ie11_min().ReadableStream;
    }
    var isStream2 = require_is_stream();
    var toWebReadableStream = require_readable_stream_node_to_web();
    var ActorHttp = class extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
      /**
       * Converts WhatWG streams to Node streams if required.
       * Returns the input in case the stream already is a Node stream.
       * @param {ReadableStream} body
       * @returns {NodeJS.ReadableStream}
       */
      static toNodeReadable(body) {
        return isStream2(body) || body === null ? body : new readable_web_to_node_stream_1.ReadableWebToNodeStream(body);
      }
      /**
       * Converts Node streams to WhatWG streams.
       * @param {NodeJS.ReadableStream} body
       * @returns {ReadableStream}
       */
      static toWebReadableStream(body) {
        return toWebReadableStream(body);
      }
      /**
       * Convert the given headers object into a raw hash.
       * @param headers A headers object.
       */
      static headersToHash(headers) {
        const hash = {};
        headers.forEach((value, key) => {
          hash[key] = value;
        });
        return hash;
      }
    };
    exports.ActorHttp = ActorHttp;
  }
});

// node_modules/@comunica/bus-http/lib/index.js
var require_lib51 = __commonJS({
  "node_modules/@comunica/bus-http/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHttp(), exports);
  }
});

// node_modules/promise-polyfill/Promise.js
var require_Promise = __commonJS({
  "node_modules/promise-polyfill/Promise.js"(exports, module) {
    (function() {
      var root;
      if (typeof window === "object" && window) {
        root = window;
      } else {
        root = global;
      }
      if (typeof module !== "undefined" && module.exports) {
        module.exports = root.Promise ? root.Promise : Promise2;
      } else if (!root.Promise) {
        root.Promise = Promise2;
      }
      var asap = root.setImmediate || function(fn) {
        setTimeout(fn, 1);
      };
      function bind(fn, thisArg) {
        return function() {
          fn.apply(thisArg, arguments);
        };
      }
      var isArray = Array.isArray || function(value) {
        return Object.prototype.toString.call(value) === "[object Array]";
      };
      function Promise2(fn) {
        if (typeof this !== "object")
          throw new TypeError("Promises must be constructed via new");
        if (typeof fn !== "function")
          throw new TypeError("not a function");
        this._state = null;
        this._value = null;
        this._deferreds = [];
        doResolve(fn, bind(resolve, this), bind(reject, this));
      }
      function handle(deferred) {
        var me = this;
        if (this._state === null) {
          this._deferreds.push(deferred);
          return;
        }
        asap(function() {
          var cb = me._state ? deferred.onFulfilled : deferred.onRejected;
          if (cb === null) {
            (me._state ? deferred.resolve : deferred.reject)(me._value);
            return;
          }
          var ret;
          try {
            ret = cb(me._value);
          } catch (e) {
            deferred.reject(e);
            return;
          }
          deferred.resolve(ret);
        });
      }
      function resolve(newValue) {
        try {
          if (newValue === this)
            throw new TypeError("A promise cannot be resolved with itself.");
          if (newValue && (typeof newValue === "object" || typeof newValue === "function")) {
            var then = newValue.then;
            if (typeof then === "function") {
              doResolve(bind(then, newValue), bind(resolve, this), bind(reject, this));
              return;
            }
          }
          this._state = true;
          this._value = newValue;
          finale.call(this);
        } catch (e) {
          reject.call(this, e);
        }
      }
      function reject(newValue) {
        this._state = false;
        this._value = newValue;
        finale.call(this);
      }
      function finale() {
        for (var i2 = 0, len = this._deferreds.length; i2 < len; i2++) {
          handle.call(this, this._deferreds[i2]);
        }
        this._deferreds = null;
      }
      function Handler(onFulfilled, onRejected, resolve2, reject2) {
        this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
        this.onRejected = typeof onRejected === "function" ? onRejected : null;
        this.resolve = resolve2;
        this.reject = reject2;
      }
      function doResolve(fn, onFulfilled, onRejected) {
        var done = false;
        try {
          fn(function(value) {
            if (done)
              return;
            done = true;
            onFulfilled(value);
          }, function(reason) {
            if (done)
              return;
            done = true;
            onRejected(reason);
          });
        } catch (ex) {
          if (done)
            return;
          done = true;
          onRejected(ex);
        }
      }
      Promise2.prototype["catch"] = function(onRejected) {
        return this.then(null, onRejected);
      };
      Promise2.prototype.then = function(onFulfilled, onRejected) {
        var me = this;
        return new Promise2(function(resolve2, reject2) {
          handle.call(me, new Handler(onFulfilled, onRejected, resolve2, reject2));
        });
      };
      Promise2.all = function() {
        var args = Array.prototype.slice.call(arguments.length === 1 && isArray(arguments[0]) ? arguments[0] : arguments);
        return new Promise2(function(resolve2, reject2) {
          if (args.length === 0)
            return resolve2([]);
          var remaining = args.length;
          function res(i3, val) {
            try {
              if (val && (typeof val === "object" || typeof val === "function")) {
                var then = val.then;
                if (typeof then === "function") {
                  then.call(val, function(val2) {
                    res(i3, val2);
                  }, reject2);
                  return;
                }
              }
              args[i3] = val;
              if (--remaining === 0) {
                resolve2(args);
              }
            } catch (ex) {
              reject2(ex);
            }
          }
          for (var i2 = 0; i2 < args.length; i2++) {
            res(i2, args[i2]);
          }
        });
      };
      Promise2.resolve = function(value) {
        if (value && typeof value === "object" && value.constructor === Promise2) {
          return value;
        }
        return new Promise2(function(resolve2) {
          resolve2(value);
        });
      };
      Promise2.reject = function(value) {
        return new Promise2(function(resolve2, reject2) {
          reject2(value);
        });
      };
      Promise2.race = function(values) {
        return new Promise2(function(resolve2, reject2) {
          for (var i2 = 0, len = values.length; i2 < len; i2++) {
            values[i2].then(resolve2, reject2);
          }
        });
      };
    })();
  }
});

// node_modules/stream-to-string/index.js
var require_stream_to_string = __commonJS({
  "node_modules/stream-to-string/index.js"(exports, module) {
    var Promise2 = require_Promise();
    module.exports = function(stream, enc, cb) {
      if (typeof enc === "function") {
        cb = enc;
        enc = null;
      }
      var str = "";
      var p = new Promise2(function(resolve, reject) {
        stream.on("data", function(data) {
          str += typeof enc === "string" ? data.toString(enc) : data.toString();
        });
        stream.on("end", function() {
          resolve(str);
        });
        stream.on("error", reject);
      });
      if (cb) {
        p.then(function(str2) {
          cb(null, str2);
        }, cb);
      }
      return p;
    };
  }
});

// node_modules/@comunica/bus-rdf-update-quads/lib/IQuadDestination.js
var require_IQuadDestination = __commonJS({
  "node_modules/@comunica/bus-rdf-update-quads/lib/IQuadDestination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateHttpResponse = void 0;
    var bus_http_1 = require_lib51();
    var stringifyStream = require_stream_to_string();
    async function validateHttpResponse(url, httpResponse) {
      if (httpResponse.status >= 400) {
        let bodyString = "empty response";
        if (httpResponse.body) {
          const responseStream = bus_http_1.ActorHttp.toNodeReadable(httpResponse.body);
          bodyString = await stringifyStream(responseStream);
        }
        throw new Error(`Could not update ${url} (HTTP status ${httpResponse.status}):
${bodyString}`);
      }
      await httpResponse.body?.cancel();
    }
    exports.validateHttpResponse = validateHttpResponse;
  }
});

// node_modules/@comunica/bus-rdf-update-quads/lib/utils.js
var require_utils5 = __commonJS({
  "node_modules/@comunica/bus-rdf-update-quads/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getContextDestinationUrl = exports.getContextDestinationFirst = exports.getContextDestination = exports.getDataDestinationContext = exports.getDataDestinationValue = exports.getDataDestinationType = exports.isDataDestinationRawType = void 0;
    var context_entries_1 = require_lib4();
    function isDataDestinationRawType(dataDestination) {
      return typeof dataDestination === "string" || "remove" in dataDestination;
    }
    exports.isDataDestinationRawType = isDataDestinationRawType;
    function getDataDestinationType(dataDestination) {
      if (typeof dataDestination === "string") {
        return "";
      }
      return "remove" in dataDestination ? "rdfjsStore" : dataDestination.type;
    }
    exports.getDataDestinationType = getDataDestinationType;
    function getDataDestinationValue(dataDestination) {
      return isDataDestinationRawType(dataDestination) ? dataDestination : dataDestination.value;
    }
    exports.getDataDestinationValue = getDataDestinationValue;
    function getDataDestinationContext(dataDestination, context) {
      if (typeof dataDestination === "string" || "remove" in dataDestination || !dataDestination.context) {
        return context;
      }
      return context.merge(dataDestination.context);
    }
    exports.getDataDestinationContext = getDataDestinationContext;
    function getContextDestination(context) {
      return context.get(context_entries_1.KeysRdfUpdateQuads.destination);
    }
    exports.getContextDestination = getContextDestination;
    function getContextDestinationFirst(context) {
      if (context.has(context_entries_1.KeysRdfUpdateQuads.destination)) {
        return context.get(context_entries_1.KeysRdfUpdateQuads.destination);
      }
    }
    exports.getContextDestinationFirst = getContextDestinationFirst;
    function getContextDestinationUrl(destination) {
      if (destination) {
        let fileUrl = getDataDestinationValue(destination);
        if (typeof fileUrl === "string") {
          const hashPosition = fileUrl.indexOf("#");
          if (hashPosition >= 0) {
            fileUrl = fileUrl.slice(0, hashPosition);
          }
          return fileUrl;
        }
      }
    }
    exports.getContextDestinationUrl = getContextDestinationUrl;
  }
});

// node_modules/@comunica/bus-rdf-update-quads/lib/index.js
var require_lib52 = __commonJS({
  "node_modules/@comunica/bus-rdf-update-quads/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfUpdateQuads(), exports);
    __exportStar(require_ActorRdfUpdateQuadsDestination(), exports);
    __exportStar(require_IQuadDestination(), exports);
    __exportStar(require_utils5(), exports);
  }
});

// node_modules/@comunica/actor-rdf-update-quads-rdfjs-store/lib/RdfJsQuadDestination.js
var require_RdfJsQuadDestination = __commonJS({
  "node_modules/@comunica/actor-rdf-update-quads-rdfjs-store/lib/RdfJsQuadDestination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RdfJsQuadDestination = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var rdf_string_1 = require_rdf_string();
    var DF = new rdf_data_factory_1.DataFactory();
    var RdfJsQuadDestination = class {
      constructor(store) {
        this.store = store;
      }
      promisifyEventEmitter(eventEmitter) {
        return new Promise((resolve, reject) => {
          eventEmitter.on("end", resolve);
          eventEmitter.on("error", reject);
        });
      }
      delete(quads) {
        return this.promisifyEventEmitter(this.store.remove(quads));
      }
      insert(quads) {
        return this.promisifyEventEmitter(this.store.import(quads));
      }
      async deleteGraphs(graphs, requireExistence, dropGraphs) {
        switch (graphs) {
          case "ALL":
            await this.promisifyEventEmitter(this.store.deleteGraph(DF.defaultGraph()));
          case "NAMED":
            const allQuads = this.store.match();
            const namedGraphs = {};
            allQuads.on("data", (quad) => {
              if (quad.graph.termType !== "DefaultGraph") {
                namedGraphs[(0, rdf_string_1.termToString)(quad.graph)] = true;
              }
            });
            await this.promisifyEventEmitter(allQuads);
            await Promise.all(Object.keys(namedGraphs).map((namedGraph) => this.promisifyEventEmitter(this.store.deleteGraph((0, rdf_string_1.stringToTerm)(namedGraph)))));
            break;
          default:
            for (const graph of Array.isArray(graphs) ? graphs : [graphs]) {
              await this.promisifyEventEmitter(this.store.deleteGraph(graph));
            }
        }
      }
      async createGraphs(graphs, requireNonExistence) {
        if (requireNonExistence) {
          for (const graph of graphs) {
            const eventEmitter = this.store.match(void 0, void 0, void 0, graph);
            await new Promise((resolve, reject) => {
              eventEmitter.once("data", () => {
                reject(new Error(`Unable to create graph ${graph.value} as it already exists`));
              });
              eventEmitter.on("end", resolve);
              eventEmitter.on("error", reject);
            });
          }
        }
      }
    };
    exports.RdfJsQuadDestination = RdfJsQuadDestination;
  }
});

// node_modules/@comunica/actor-rdf-update-quads-rdfjs-store/lib/ActorRdfUpdateQuadsRdfJsStore.js
var require_ActorRdfUpdateQuadsRdfJsStore = __commonJS({
  "node_modules/@comunica/actor-rdf-update-quads-rdfjs-store/lib/ActorRdfUpdateQuadsRdfJsStore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfUpdateQuadsRdfJsStore = void 0;
    var bus_rdf_update_quads_1 = require_lib52();
    var RdfJsQuadDestination_1 = require_RdfJsQuadDestination();
    var ActorRdfUpdateQuadsRdfJsStore = class extends bus_rdf_update_quads_1.ActorRdfUpdateQuadsDestination {
      constructor(args) {
        super(args);
      }
      async test(action) {
        const destination = (0, bus_rdf_update_quads_1.getContextDestination)(action.context);
        if (!destination || typeof destination === "string" || !("remove" in destination) && "value" in destination && !destination.value.remove) {
          throw new Error(`${this.name} received an invalid rdfjsStore.`);
        }
        return true;
      }
      async getDestination(context) {
        const destination = (0, bus_rdf_update_quads_1.getContextDestination)(context);
        return new RdfJsQuadDestination_1.RdfJsQuadDestination("remove" in destination ? destination : destination.value);
      }
    };
    exports.ActorRdfUpdateQuadsRdfJsStore = ActorRdfUpdateQuadsRdfJsStore;
  }
});

// node_modules/@comunica/actor-rdf-update-quads-rdfjs-store/lib/index.js
var require_lib53 = __commonJS({
  "node_modules/@comunica/actor-rdf-update-quads-rdfjs-store/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfUpdateQuadsRdfJsStore(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-values/lib/ActorQueryOperationValues.js
var require_ActorQueryOperationValues = __commonJS({
  "node_modules/@comunica/actor-query-operation-values/lib/ActorQueryOperationValues.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationValues = void 0;
    var bindings_factory_1 = require_lib6();
    var bus_query_operation_1 = require_lib7();
    var metadata_1 = require_lib48();
    var asynciterator_1 = require_asynciterator();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var BF = new bindings_factory_1.BindingsFactory();
    var DF = new rdf_data_factory_1.DataFactory();
    var ActorQueryOperationValues = class extends bus_query_operation_1.ActorQueryOperationTyped {
      constructor(args) {
        super(args, "values");
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operation, context) {
        const bindingsStream = new asynciterator_1.ArrayIterator(operation.bindings.map((x) => BF.bindings(Object.entries(x).map(([key, value]) => [DF.variable(key.slice(1)), value]))));
        const variables = operation.variables;
        const metadata = () => Promise.resolve({
          state: new metadata_1.MetadataValidationState(),
          cardinality: { type: "exact", value: operation.bindings.length },
          canContainUndefs: operation.bindings.some((bindings) => variables.some((variable) => !(`?${variable.value}` in bindings))),
          variables
        });
        return { type: "bindings", bindingsStream, metadata };
      }
    };
    exports.ActorQueryOperationValues = ActorQueryOperationValues;
  }
});

// node_modules/@comunica/actor-query-operation-values/lib/index.js
var require_lib54 = __commonJS({
  "node_modules/@comunica/actor-query-operation-values/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationValues(), exports);
  }
});

// node_modules/@comunica/mediator-join-coefficients-fixed/lib/MediatorJoinCoefficientsFixed.js
var require_MediatorJoinCoefficientsFixed = __commonJS({
  "node_modules/@comunica/mediator-join-coefficients-fixed/lib/MediatorJoinCoefficientsFixed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorJoinCoefficientsFixed = void 0;
    var context_entries_1 = require_lib4();
    var core_1 = require_lib2();
    var MediatorJoinCoefficientsFixed = class extends core_1.Mediator {
      constructor(args) {
        super(args);
      }
      async mediateWith(action, testResults) {
        const errors = [];
        const promises = testResults.map(({ reply }) => reply).map((promise) => promise.catch((error2) => {
          errors.push(error2);
        }));
        const coefficients = await Promise.all(promises);
        let costs = coefficients.map((coeff, i2) => {
          if (coeff) {
            return coeff.iterations * this.cpuWeight + coeff.persistedItems * this.memoryWeight + coeff.blockingItems * this.timeWeight + coeff.requestTime * this.ioWeight;
          }
        });
        const maxCost = Math.max(...costs.filter((cost) => cost !== void 0));
        const limitIndicator = action.context.get(context_entries_1.KeysQueryOperation.limitIndicator);
        if (limitIndicator) {
          costs = costs.map((cost, i2) => {
            if (cost !== void 0 && coefficients[i2].persistedItems > 0 && coefficients[i2].iterations > limitIndicator) {
              return cost + maxCost;
            }
            return cost;
          });
        }
        let minIndex = -1;
        let minValue = Number.POSITIVE_INFINITY;
        for (const [i2, cost] of costs.entries()) {
          if (cost !== void 0 && (minIndex === -1 || cost < minValue)) {
            minIndex = i2;
            minValue = cost;
          }
        }
        if (minIndex < 0) {
          throw new Error(`All actors rejected their test in ${this.name}
${errors.map((error2) => error2.message).join("\n")}`);
        }
        const bestActor = testResults[minIndex].actor;
        if (bestActor.includeInLogs) {
          core_1.Actor.getContextLogger(action.context)?.debug(`Determined physical join operator '${bestActor.logicalType}-${bestActor.physicalName}'`, {
            entries: action.entries.length,
            variables: await Promise.all(action.entries.map(async (entry) => (await entry.output.metadata()).variables.map((variable) => variable.value))),
            costs: Object.fromEntries(costs.map((coeff, i2) => [
              `${testResults[i2].actor.logicalType}-${testResults[i2].actor.physicalName}`,
              coeff
            ])),
            coefficients: Object.fromEntries(coefficients.map((coeff, i2) => [
              `${testResults[i2].actor.logicalType}-${testResults[i2].actor.physicalName}`,
              coeff
            ]))
          });
        }
        return bestActor;
      }
    };
    exports.MediatorJoinCoefficientsFixed = MediatorJoinCoefficientsFixed;
  }
});

// node_modules/@comunica/mediator-join-coefficients-fixed/lib/index.js
var require_lib55 = __commonJS({
  "node_modules/@comunica/mediator-join-coefficients-fixed/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MediatorJoinCoefficientsFixed(), exports);
  }
});

// node_modules/@comunica/actor-rdf-resolve-quad-pattern-rdfjs-source/lib/RdfJsQuadSource.js
var require_RdfJsQuadSource = __commonJS({
  "node_modules/@comunica/actor-rdf-resolve-quad-pattern-rdfjs-source/lib/RdfJsQuadSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RdfJsQuadSource = void 0;
    var metadata_1 = require_lib48();
    var asynciterator_1 = require_asynciterator();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var rdf_terms_1 = require_rdf_terms();
    var DF = new rdf_data_factory_1.DataFactory();
    var RdfJsQuadSource = class _RdfJsQuadSource {
      constructor(source) {
        this.source = source;
      }
      static nullifyVariables(term, quotedTripleFiltering) {
        return !term || term.termType === "Variable" || !quotedTripleFiltering && term.termType === "Quad" && (0, rdf_terms_1.someTermsNested)(term, (value) => value.termType === "Variable") ? void 0 : term;
      }
      static hasDuplicateVariables(pattern) {
        const variables = (0, rdf_terms_1.filterTermsNested)(pattern, (term) => term.termType === "Variable");
        return variables.length > 1 && (0, rdf_terms_1.uniqTerms)(variables).length < variables.length;
      }
      match(subject, predicate, object, graph) {
        const quotedTripleFiltering = Boolean(this.source.features?.quotedTripleFiltering);
        const rawStream = this.source.match(_RdfJsQuadSource.nullifyVariables(subject, quotedTripleFiltering), _RdfJsQuadSource.nullifyVariables(predicate, quotedTripleFiltering), _RdfJsQuadSource.nullifyVariables(object, quotedTripleFiltering), _RdfJsQuadSource.nullifyVariables(graph, quotedTripleFiltering));
        let it = (0, asynciterator_1.wrap)(rawStream, { autoStart: false });
        const pattern = DF.quad(subject, predicate, object, graph);
        if (!quotedTripleFiltering && (0, rdf_terms_1.someTerms)(pattern, (term) => term.termType === "Quad")) {
          it = it.filter((quad) => (0, rdf_terms_1.matchPatternComplete)(quad, pattern));
        }
        this.setMetadata(it, subject, predicate, object, graph).catch((error2) => it.destroy(error2));
        return it;
      }
      async setMetadata(it, subject, predicate, object, graph) {
        const quotedTripleFiltering = Boolean(this.source.features?.quotedTripleFiltering);
        let cardinality;
        if (this.source.countQuads) {
          cardinality = await this.source.countQuads(_RdfJsQuadSource.nullifyVariables(subject, quotedTripleFiltering), _RdfJsQuadSource.nullifyVariables(predicate, quotedTripleFiltering), _RdfJsQuadSource.nullifyVariables(object, quotedTripleFiltering), _RdfJsQuadSource.nullifyVariables(graph, quotedTripleFiltering));
        } else {
          let i2 = 0;
          cardinality = await new Promise((resolve, reject) => {
            const matches = this.source.match(_RdfJsQuadSource.nullifyVariables(subject, quotedTripleFiltering), _RdfJsQuadSource.nullifyVariables(predicate, quotedTripleFiltering), _RdfJsQuadSource.nullifyVariables(object, quotedTripleFiltering), _RdfJsQuadSource.nullifyVariables(graph, quotedTripleFiltering));
            matches.on("error", reject);
            matches.on("end", () => resolve(i2));
            matches.on("data", () => i2++);
          });
        }
        const pattern = DF.quad(subject, predicate, object, graph);
        const wouldRequirePostFiltering = !quotedTripleFiltering && (0, rdf_terms_1.someTerms)(pattern, (term) => term.termType === "Quad") || _RdfJsQuadSource.hasDuplicateVariables(pattern);
        it.setProperty("metadata", {
          state: new metadata_1.MetadataValidationState(),
          cardinality: { type: wouldRequirePostFiltering ? "estimate" : "exact", value: cardinality },
          canContainUndefs: false
        });
      }
    };
    exports.RdfJsQuadSource = RdfJsQuadSource;
  }
});

// node_modules/@comunica/actor-rdf-resolve-quad-pattern-rdfjs-source/lib/ActorRdfResolveQuadPatternRdfJsSource.js
var require_ActorRdfResolveQuadPatternRdfJsSource = __commonJS({
  "node_modules/@comunica/actor-rdf-resolve-quad-pattern-rdfjs-source/lib/ActorRdfResolveQuadPatternRdfJsSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfResolveQuadPatternRdfJsSource = void 0;
    var bus_rdf_resolve_quad_pattern_1 = require_lib47();
    var RdfJsQuadSource_1 = require_RdfJsQuadSource();
    var ActorRdfResolveQuadPatternRdfJsSource = class extends bus_rdf_resolve_quad_pattern_1.ActorRdfResolveQuadPatternSource {
      constructor(args) {
        super(args);
      }
      async test(action) {
        if (!(0, bus_rdf_resolve_quad_pattern_1.hasContextSingleSourceOfType)("rdfjsSource", action.context)) {
          throw new Error(`${this.name} requires a single source with an rdfjsSource to be present in the context.`);
        }
        const source = (0, bus_rdf_resolve_quad_pattern_1.getContextSource)(action.context);
        if (!source || typeof source === "string" || !("match" in source) && !source.value.match) {
          throw new Error(`${this.name} received an invalid rdfjsSource.`);
        }
        return true;
      }
      async getSource(context) {
        const source = (0, bus_rdf_resolve_quad_pattern_1.getContextSource)(context);
        return new RdfJsQuadSource_1.RdfJsQuadSource("match" in source ? source : source.value);
      }
    };
    exports.ActorRdfResolveQuadPatternRdfJsSource = ActorRdfResolveQuadPatternRdfJsSource;
  }
});

// node_modules/@comunica/actor-rdf-resolve-quad-pattern-rdfjs-source/lib/IRdfJsSourceExtended.js
var require_IRdfJsSourceExtended = __commonJS({
  "node_modules/@comunica/actor-rdf-resolve-quad-pattern-rdfjs-source/lib/IRdfJsSourceExtended.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@comunica/actor-rdf-resolve-quad-pattern-rdfjs-source/lib/index.js
var require_lib56 = __commonJS({
  "node_modules/@comunica/actor-rdf-resolve-quad-pattern-rdfjs-source/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfResolveQuadPatternRdfJsSource(), exports);
    __exportStar(require_IRdfJsSourceExtended(), exports);
    __exportStar(require_RdfJsQuadSource(), exports);
  }
});

// node_modules/@comunica/mediator-all/lib/MediatorAll.js
var require_MediatorAll = __commonJS({
  "node_modules/@comunica/mediator-all/lib/MediatorAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MediatorAll = void 0;
    var core_1 = require_lib2();
    var MediatorAll = class extends core_1.Mediator {
      constructor(args) {
        super(args);
      }
      async mediate(action) {
        const validActors = [];
        let testResults;
        try {
          testResults = this.publish(action);
        } catch {
          testResults = [];
        }
        for (const testResult of testResults) {
          try {
            await testResult.reply;
            validActors.push(testResult.actor);
          } catch {
          }
        }
        const outputs = await Promise.all(validActors.map((actor) => actor.runObservable(action)));
        return outputs[0];
      }
      async mediateWith() {
        throw new Error("Unsupported operation: MediatorAll#mediateWith");
      }
    };
    exports.MediatorAll = MediatorAll;
  }
});

// node_modules/@comunica/mediator-all/lib/index.js
var require_lib57 = __commonJS({
  "node_modules/@comunica/mediator-all/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_MediatorAll(), exports);
  }
});

// node_modules/@comunica/bus-http-invalidate/lib/ActorHttpInvalidate.js
var require_ActorHttpInvalidate = __commonJS({
  "node_modules/@comunica/bus-http-invalidate/lib/ActorHttpInvalidate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHttpInvalidate = void 0;
    var core_1 = require_lib2();
    var ActorHttpInvalidate = class extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       */
      constructor(args) {
        super(args);
      }
    };
    exports.ActorHttpInvalidate = ActorHttpInvalidate;
  }
});

// node_modules/@comunica/bus-http-invalidate/lib/ActorHttpInvalidateListenable.js
var require_ActorHttpInvalidateListenable = __commonJS({
  "node_modules/@comunica/bus-http-invalidate/lib/ActorHttpInvalidateListenable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorHttpInvalidateListenable = void 0;
    var ActorHttpInvalidate_1 = require_ActorHttpInvalidate();
    var ActorHttpInvalidateListenable = class extends ActorHttpInvalidate_1.ActorHttpInvalidate {
      constructor(args) {
        super(args);
        this.invalidateListeners = [];
        this.invalidateListeners = [];
      }
      addInvalidateListener(listener) {
        this.invalidateListeners.push(listener);
      }
      async test(action) {
        return true;
      }
      async run(action) {
        for (const listener of this.invalidateListeners) {
          listener(action);
        }
        return {};
      }
    };
    exports.ActorHttpInvalidateListenable = ActorHttpInvalidateListenable;
  }
});

// node_modules/@comunica/bus-http-invalidate/lib/index.js
var require_lib58 = __commonJS({
  "node_modules/@comunica/bus-http-invalidate/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorHttpInvalidate(), exports);
    __exportStar(require_ActorHttpInvalidateListenable(), exports);
  }
});

// node_modules/@comunica/bus-rdf-join/lib/ActorRdfJoin.js
var require_ActorRdfJoin = __commonJS({
  "node_modules/@comunica/bus-rdf-join/lib/ActorRdfJoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoin = void 0;
    var bus_query_operation_1 = require_lib7();
    var context_entries_1 = require_lib4();
    var core_1 = require_lib2();
    var metadata_1 = require_lib48();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var rdf_string_1 = require_rdf_string();
    var DF = new rdf_data_factory_1.DataFactory();
    var ActorRdfJoin = class _ActorRdfJoin extends core_1.Actor {
      /**
       * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
       * @param options - Actor-specific join options.
       */
      constructor(args, options) {
        super(args);
        this.includeInLogs = true;
        this.logicalType = options.logicalType;
        this.physicalName = options.physicalName;
        this.limitEntries = options.limitEntries ?? Number.POSITIVE_INFINITY;
        this.limitEntriesMin = options.limitEntriesMin ?? false;
        this.canHandleUndefs = options.canHandleUndefs ?? false;
      }
      /**
       * Creates a hash of the given bindings by concatenating the results of the given variables.
       * This function will not sort the variables and expects them to be in the same order for every call.
       * @param {Bindings} bindings
       * @param {string[]} variables
       * @returns {string}
       */
      static hash(bindings, variables) {
        return variables.filter((variable) => bindings.has(variable)).map((variable) => (0, rdf_string_1.termToString)(bindings.get(variable))).join("");
      }
      /**
       * Returns an array containing all the variable names that occur in all bindings streams.
       * @param {MetadataBindings[]} metadatas An array of optional metadata objects for the entries.
       * @returns {string[]}
       */
      static overlappingVariables(metadatas) {
        const variables = metadatas.map((metadata) => metadata.variables);
        let baseArray = variables[0];
        for (const array of variables.slice(1)) {
          baseArray = baseArray.filter((el) => array.some((value) => value.value === el.value));
        }
        return baseArray;
      }
      /**
       * Returns the variables that will occur in the joined bindings.
       * @param {MetadataBindings[]} metadatas An array of metadata objects for the entries.
       * @returns {string[]}
       */
      static joinVariables(metadatas) {
        return [...new Set(metadatas.flatMap((metadata) => metadata.variables.map((variable) => variable.value)))].map((variable) => DF.variable(variable));
      }
      /**
       * Returns the result of joining bindings, or `null` if no join is possible.
       * @param {Bindings[]} bindings
       * @returns {Bindings}
       */
      static joinBindings(...bindings) {
        if (bindings.length === 0) {
          return null;
        }
        if (bindings.length === 1) {
          return bindings[0];
        }
        let acc = bindings[0];
        for (const binding of bindings.slice(1)) {
          const merged = acc.merge(binding);
          if (!merged) {
            return null;
          }
          acc = merged;
        }
        return acc;
      }
      /**
       * Get the estimated number of items from the given metadata.
       * @param {Record<string, any>} metadata A metadata object.
       * @return {number} The estimated number of items, or `Infinity` if cardinality is falsy.
       */
      static getCardinality(metadata) {
        return metadata.cardinality;
      }
      /**
       * Obtain the metadata from all given join entries.
       * @param entries Join entries.
       */
      static async getMetadatas(entries) {
        return await Promise.all(entries.map((entry) => entry.output.metadata()));
      }
      /**
       * Obtain the join entries witt metadata from all given join entries.
       * @param entries Join entries.
       */
      static async getEntriesWithMetadatas(entries) {
        const metadatas = await _ActorRdfJoin.getMetadatas(entries);
        return entries.map((entry, i2) => ({ ...entry, metadata: metadatas[i2] }));
      }
      /**
       * Calculate the time to initiate a request for the given metadata entries.
       * @param metadatas An array of checked metadata.
       */
      static getRequestInitialTimes(metadatas) {
        return metadatas.map((metadata) => metadata.pageSize ? 0 : metadata.requestTime || 0);
      }
      /**
       * Calculate the time to receive a single item for the given metadata entries.
       * @param metadatas An array of checked metadata.
       */
      static getRequestItemTimes(metadatas) {
        return metadatas.map((metadata) => !metadata.pageSize ? 0 : (metadata.requestTime || 0) / metadata.pageSize);
      }
      /**
       * Helper function to create a new metadata object for the join result.
       * For required metadata entries that are not provided, sane defaults are calculated.
       * @param entries Join entries.
       * @param metadatas Metadata of the join entries.
       * @param context The action context.
       * @param partialMetadata Partial metadata entries.
       */
      async constructResultMetadata(entries, metadatas, context, partialMetadata = {}) {
        let cardinalityJoined;
        if (partialMetadata.cardinality) {
          cardinalityJoined = partialMetadata.cardinality;
        } else {
          cardinalityJoined = metadatas.reduce((acc, metadata) => {
            const cardinalityThis = _ActorRdfJoin.getCardinality(metadata);
            return {
              type: cardinalityThis.type === "estimate" ? "estimate" : acc.type,
              value: acc.value * cardinalityThis.value
            };
          }, { type: "exact", value: 1 });
          cardinalityJoined.value *= (await this.mediatorJoinSelectivity.mediate({ entries, context })).selectivity;
        }
        const state = new metadata_1.MetadataValidationState();
        const invalidateListener = () => state.invalidate();
        for (const metadata of metadatas) {
          metadata.state.addInvalidateListener(invalidateListener);
        }
        return {
          state,
          ...partialMetadata,
          cardinality: {
            type: cardinalityJoined.type,
            value: cardinalityJoined.value
          },
          canContainUndefs: partialMetadata.canContainUndefs ?? metadatas.some((metadata) => metadata.canContainUndefs),
          variables: _ActorRdfJoin.joinVariables(metadatas)
        };
      }
      /**
       * Default test function for join actors.
       * Checks whether all iterators have metadata.
       * If yes: call the abstract getIterations method, if not: return Infinity.
       * @param {IActionRdfJoin} action The input action containing the relevant iterators
       * @returns {Promise<IMediatorTypeJoinCoefficients>} The join coefficients.
       */
      async test(action) {
        if (action.type !== this.logicalType) {
          throw new Error(`${this.name} can only handle logical joins of type '${this.logicalType}', while '${action.type}' was given.`);
        }
        if (action.entries.length <= 1) {
          throw new Error(`${this.name} requires at least two join entries.`);
        }
        if (this.limitEntriesMin ? action.entries.length < this.limitEntries : action.entries.length > this.limitEntries) {
          throw new Error(`${this.name} requires ${this.limitEntries} join entries at ${this.limitEntriesMin ? "least" : "most"}. The input contained ${action.entries.length}.`);
        }
        for (const entry of action.entries) {
          if (entry.output.type !== "bindings") {
            throw new Error(`Invalid type of a join entry: Expected 'bindings' but got '${entry.output.type}'`);
          }
        }
        const metadatas = await _ActorRdfJoin.getMetadatas(action.entries);
        if (!this.canHandleUndefs) {
          for (const metadata of metadatas) {
            if (metadata.canContainUndefs) {
              throw new Error(`Actor ${this.name} can not join streams containing undefs`);
            }
          }
        }
        return await this.getJoinCoefficients(action, metadatas);
      }
      /**
       * Returns default input for 0 or 1 entries. Calls the getOutput function otherwise
       * @param {IActionRdfJoin} action
       * @returns {Promise<IActorQueryOperationOutput>}
       */
      async run(action) {
        let parentPhysicalQueryPlanNode;
        if (action.context.has(context_entries_1.KeysInitQuery.physicalQueryPlanLogger)) {
          parentPhysicalQueryPlanNode = action.context.get(context_entries_1.KeysInitQuery.physicalQueryPlanNode);
          action.context = action.context.set(context_entries_1.KeysInitQuery.physicalQueryPlanNode, action);
        }
        const physicalQueryPlanLogger = action.context.get(context_entries_1.KeysInitQuery.physicalQueryPlanLogger);
        let planMetadata;
        if (this.includeInLogs && physicalQueryPlanLogger) {
          planMetadata = {};
          physicalQueryPlanLogger.logOperation(`join-${this.logicalType}`, this.physicalName, action, parentPhysicalQueryPlanNode, this.name, planMetadata);
        }
        const { result, physicalPlanMetadata } = await this.getOutput(action);
        const metadatas = await _ActorRdfJoin.getMetadatas(action.entries);
        if (planMetadata) {
          Object.assign(planMetadata, physicalPlanMetadata);
          planMetadata.cardinalities = metadatas.map(_ActorRdfJoin.getCardinality);
          planMetadata.joinCoefficients = await this.getJoinCoefficients(action, metadatas);
        }
        result.metadata = bus_query_operation_1.ActorQueryOperation.cachifyMetadata(result.metadata);
        return result;
      }
    };
    exports.ActorRdfJoin = ActorRdfJoin;
  }
});

// node_modules/@comunica/bus-rdf-join/lib/index.js
var require_lib59 = __commonJS({
  "node_modules/@comunica/bus-rdf-join/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoin(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-inner-none/lib/ActorRdfJoinNone.js
var require_ActorRdfJoinNone = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-none/lib/ActorRdfJoinNone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinNone = void 0;
    var bindings_factory_1 = require_lib6();
    var bus_rdf_join_1 = require_lib59();
    var metadata_1 = require_lib48();
    var asynciterator_1 = require_asynciterator();
    var BF = new bindings_factory_1.BindingsFactory();
    var ActorRdfJoinNone = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "none",
          limitEntries: 0
        });
      }
      async test(action) {
        if (action.entries.length > 0) {
          throw new Error(`Actor ${this.name} can only join zero entries`);
        }
        return await this.getJoinCoefficients();
      }
      async getOutput(action) {
        return {
          result: {
            bindingsStream: new asynciterator_1.ArrayIterator([BF.bindings()], { autoStart: false }),
            metadata: () => Promise.resolve({
              state: new metadata_1.MetadataValidationState(),
              cardinality: { type: "exact", value: 1 },
              canContainUndefs: false,
              variables: []
            }),
            type: "bindings"
          }
        };
      }
      async getJoinCoefficients() {
        return {
          iterations: 0,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: 0
        };
      }
    };
    exports.ActorRdfJoinNone = ActorRdfJoinNone;
  }
});

// node_modules/@comunica/actor-rdf-join-inner-none/lib/index.js
var require_lib60 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-none/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinNone(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-inner-single/lib/ActorRdfJoinSingle.js
var require_ActorRdfJoinSingle = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-single/lib/ActorRdfJoinSingle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinSingle = void 0;
    var bus_rdf_join_1 = require_lib59();
    var ActorRdfJoinSingle = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "single",
          limitEntries: 1
        });
        this.includeInLogs = false;
      }
      async test(action) {
        if (action.entries.length !== 1) {
          throw new Error(`Actor ${this.name} can only join a single entry`);
        }
        return await this.getJoinCoefficients();
      }
      async getOutput(action) {
        return {
          result: action.entries[0].output
        };
      }
      async getJoinCoefficients() {
        return {
          iterations: 0,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: 0
        };
      }
    };
    exports.ActorRdfJoinSingle = ActorRdfJoinSingle;
  }
});

// node_modules/@comunica/actor-rdf-join-inner-single/lib/index.js
var require_lib61 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-single/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinSingle(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-inner-multi-empty/lib/ActorRdfJoinMultiEmpty.js
var require_ActorRdfJoinMultiEmpty = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-multi-empty/lib/ActorRdfJoinMultiEmpty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinMultiEmpty = void 0;
    var bus_rdf_join_1 = require_lib59();
    var metadata_1 = require_lib48();
    var asynciterator_1 = require_asynciterator();
    var ActorRdfJoinMultiEmpty = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "multi-empty",
          canHandleUndefs: true
        });
      }
      async test(action) {
        if ((await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries)).every((metadata) => bus_rdf_join_1.ActorRdfJoin.getCardinality(metadata).value > 0)) {
          throw new Error(`Actor ${this.name} can only join entries where at least one is empty`);
        }
        return super.test(action);
      }
      async getOutput(action) {
        for (const entry of action.entries) {
          entry.output.bindingsStream.close();
        }
        return {
          result: {
            bindingsStream: new asynciterator_1.ArrayIterator([], { autoStart: false }),
            metadata: async () => ({
              state: new metadata_1.MetadataValidationState(),
              cardinality: { type: "exact", value: 0 },
              canContainUndefs: false,
              variables: bus_rdf_join_1.ActorRdfJoin.joinVariables(await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries))
            }),
            type: "bindings"
          }
        };
      }
      async getJoinCoefficients(action, metadatas) {
        return {
          iterations: 0,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: 0
        };
      }
    };
    exports.ActorRdfJoinMultiEmpty = ActorRdfJoinMultiEmpty;
  }
});

// node_modules/@comunica/actor-rdf-join-inner-multi-empty/lib/index.js
var require_lib62 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-multi-empty/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinMultiEmpty(), exports);
  }
});

// node_modules/asyncjoin/join/DynamicNestedLoopJoin.js
var require_DynamicNestedLoopJoin = __commonJS({
  "node_modules/asyncjoin/join/DynamicNestedLoopJoin.js"(exports, module) {
    var AsyncIterator = require_asynciterator();
    var MultiTransformIterator = AsyncIterator.MultiTransformIterator;
    var SimpleTransformIterator = AsyncIterator.SimpleTransformIterator;
    var DynamicNestedLoopJoin = class extends MultiTransformIterator {
      constructor(left, funRight, funJoin, options) {
        super(left, options);
        this.funRight = funRight;
        this.funJoin = funJoin;
      }
      _createTransformer(leftItem) {
        return new SimpleTransformIterator(this.funRight(leftItem), { transform: (rightItem, done, push) => {
          let result = this.funJoin(leftItem, rightItem);
          if (result !== null)
            push(result);
          done();
        } });
      }
    };
    module.exports = DynamicNestedLoopJoin;
  }
});

// node_modules/asyncjoin/join/HashJoin.js
var require_HashJoin = __commonJS({
  "node_modules/asyncjoin/join/HashJoin.js"(exports, module) {
    var AsyncIterator = require_asynciterator().AsyncIterator;
    var HashJoin = class extends AsyncIterator {
      constructor(left, right, funHash, funJoin) {
        super();
        this.addedDataListener = false;
        this.left = left;
        this.right = right;
        this.funHash = funHash;
        this.funJoin = funJoin;
        this.leftMap = /* @__PURE__ */ new Map();
        this.match = null;
        this.matches = [];
        this.matchIdx = 0;
        this.left.on("error", (error2) => this.destroy(error2));
        this.right.on("error", (error2) => this.destroy(error2));
        this.readable = false;
        this.left.on("end", allowJoining.bind(this));
        function allowJoining() {
          if (this.leftMap.size <= 0)
            return this.close();
          this.readable = true;
          this.right.on("readable", () => this.readable = true);
          this.right.on("end", () => {
            if (!this.hasResults())
              this._end();
          });
        }
        this.on("newListener", (eventName) => {
          if (eventName === "data" && !this.addedDataListener) {
            this.addedDataListener = true;
            this._addDataListener();
          }
        });
      }
      hasResults() {
        return !this.right.ended || this.matchIdx < this.matches.length;
      }
      _end() {
        super._end();
        this.left.destroy();
        this.right.destroy();
      }
      read() {
        if (!this.addedDataListener) {
          this.addedDataListener = true;
          this._addDataListener();
        }
        while (true) {
          if (this.ended || !this.readable)
            return null;
          while (this.matchIdx < this.matches.length) {
            let item = this.matches[this.matchIdx++];
            let result = this.funJoin(item, this.match);
            if (result !== null)
              return result;
          }
          if (!this.hasResults())
            this._end();
          this.match = this.right.read();
          if (this.match === null) {
            this.readable = false;
            return null;
          }
          let hash = this.funHash(this.match);
          this.matches = this.leftMap.get(hash) || [];
          this.matchIdx = 0;
        }
      }
      _addDataListener() {
        this.left.on("data", addItem.bind(this));
        function addItem(item) {
          let hash = this.funHash(item);
          if (!this.leftMap.has(hash))
            this.leftMap.set(hash, []);
          let arr = this.leftMap.get(hash);
          arr.push(item);
        }
      }
    };
    module.exports = HashJoin;
  }
});

// node_modules/asyncjoin/join/NestedLoopJoin.js
var require_NestedLoopJoin = __commonJS({
  "node_modules/asyncjoin/join/NestedLoopJoin.js"(exports, module) {
    var { MultiTransformIterator, SimpleTransformIterator, scheduleTask } = require_asynciterator();
    var NestedLoopJoin = class extends MultiTransformIterator {
      constructor(left, right, funJoin, options) {
        super(left, options);
        this.right = right;
        this.funJoin = funJoin;
        this.on("end", () => this.right.close());
      }
      _end() {
        super._end();
        scheduleTask(() => this.right.destroy());
      }
      _createTransformer(leftItem) {
        return new SimpleTransformIterator(this.right.clone(), { transform: (rightItem, done, push) => {
          let result = this.funJoin(leftItem, rightItem);
          if (result !== null)
            push(result);
          done();
        } });
      }
    };
    module.exports = NestedLoopJoin;
  }
});

// node_modules/asyncjoin/join/SymmetricHashJoin.js
var require_SymmetricHashJoin = __commonJS({
  "node_modules/asyncjoin/join/SymmetricHashJoin.js"(exports, module) {
    var AsyncIterator = require_asynciterator().AsyncIterator;
    var SymmetricHashJoin = class extends AsyncIterator {
      constructor(left, right, funHash, funJoin) {
        super();
        this.left = left;
        this.right = right;
        this.funHash = funHash;
        this.funJoin = funJoin;
        this.usedLeft = false;
        this.leftMap = /* @__PURE__ */ new Map();
        this.rightMap = /* @__PURE__ */ new Map();
        this.on("end", () => this._cleanup());
        this.match = null;
        this.matches = [];
        this.matchIdx = 0;
        if (this.left.readable || this.right.readable) {
          this.readable = true;
        }
        this.left.on("error", (error2) => this.destroy(error2));
        this.right.on("error", (error2) => this.destroy(error2));
        this.left.on("readable", () => this.readable = true);
        this.right.on("readable", () => this.readable = true);
        this.left.on("end", () => {
          if (!this.hasResults())
            this._end();
        });
        this.right.on("end", () => {
          if (!this.hasResults())
            this._end();
        });
      }
      hasResults() {
        return !this.left.ended || !this.right.ended || !!this.matches && this.matchIdx < this.matches.length;
      }
      _cleanup() {
        this.leftMap = null;
        this.rightMap = null;
        this.matches = null;
      }
      _end() {
        super._end();
        this.left.destroy();
        this.right.destroy();
      }
      read() {
        while (true) {
          if (this.ended)
            return null;
          while (this.matchIdx < this.matches.length) {
            let item2 = this.matches[this.matchIdx++];
            let result = this.usedLeft ? this.funJoin(this.match, item2) : this.funJoin(item2, this.match);
            if (result !== null)
              return result;
          }
          if (!this.hasResults())
            this._end();
          let item = null;
          for (let i2 = 0; i2 < 2; ++i2) {
            item = this.usedLeft ? this.right.read() : this.left.read();
            this.usedLeft = !this.usedLeft;
            if (item !== null)
              break;
          }
          if (this.done || item === null) {
            this.readable = false;
            return null;
          }
          let hash = this.funHash(item);
          let map = this.usedLeft ? this.leftMap : this.rightMap;
          if (!map.has(hash))
            map.set(hash, []);
          let arr = map.get(hash);
          arr.push(item);
          this.match = item;
          this.matches = (this.usedLeft ? this.rightMap : this.leftMap).get(hash) || [];
          this.matchIdx = 0;
        }
      }
    };
    module.exports = SymmetricHashJoin;
  }
});

// node_modules/asyncjoin/util/MergeIterator.js
var require_MergeIterator = __commonJS({
  "node_modules/asyncjoin/util/MergeIterator.js"(exports, module) {
    var AsyncIterator = require_asynciterator().AsyncIterator;
    var MergeIterator = class extends AsyncIterator {
      constructor(streams) {
        super();
        if (!Array.isArray(streams))
          streams = Array.prototype.slice.call(arguments);
        this.streams = streams;
        for (let stream of streams) {
          stream.on("readable", () => this.emit("readable"));
          stream.on("end", () => this._removeStream(stream));
        }
        if (this.streams.length === 0)
          this.close();
        this.idx = this.streams.length - 1;
      }
      _removeStream(stream) {
        let idx = this.streams.indexOf(stream);
        if (idx < 0)
          return;
        this.streams.splice(idx, 1);
        if (this.idx >= this.streams.length)
          --this.idx;
        if (this.streams.length === 0)
          this._end();
      }
      close() {
        super.close();
        for (let stream of this.streams)
          stream.close();
      }
      read() {
        for (let attempts = 0; attempts < this.streams.length; ++attempts) {
          this.idx = (this.idx + 1) % this.streams.length;
          let item = this.streams[this.idx].read();
          if (item !== null)
            return item;
        }
        return null;
      }
    };
    module.exports = MergeIterator;
  }
});

// node_modules/asyncjoin/index.js
var require_asyncjoin = __commonJS({
  "node_modules/asyncjoin/index.js"(exports, module) {
    var DynamicNestedLoopJoin = require_DynamicNestedLoopJoin();
    var HashJoin = require_HashJoin();
    var NestedLoopJoin = require_NestedLoopJoin();
    var SymmetricHashJoin = require_SymmetricHashJoin();
    var MergeStream = require_MergeIterator();
    module.exports = {
      DynamicNestedLoopJoin,
      HashJoin,
      NestedLoopJoin,
      SymmetricHashJoin,
      MergeStream
    };
  }
});

// node_modules/@comunica/actor-rdf-join-inner-hash/lib/ActorRdfJoinHash.js
var require_ActorRdfJoinHash = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-hash/lib/ActorRdfJoinHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinHash = void 0;
    var bus_rdf_join_1 = require_lib59();
    var asyncjoin_1 = require_asyncjoin();
    var ActorRdfJoinHash = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "hash",
          limitEntries: 2
        });
      }
      async getOutput(action) {
        const metadatas = await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries);
        const variables = bus_rdf_join_1.ActorRdfJoin.overlappingVariables(metadatas);
        const join = new asyncjoin_1.HashJoin(action.entries[0].output.bindingsStream, action.entries[1].output.bindingsStream, (entry) => bus_rdf_join_1.ActorRdfJoin.hash(entry, variables), bus_rdf_join_1.ActorRdfJoin.joinBindings);
        return {
          result: {
            type: "bindings",
            bindingsStream: join,
            metadata: async () => await this.constructResultMetadata(action.entries, metadatas, action.context)
          }
        };
      }
      async getJoinCoefficients(action, metadatas) {
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        return {
          iterations: metadatas[0].cardinality.value + metadatas[1].cardinality.value,
          persistedItems: metadatas[0].cardinality.value,
          blockingItems: metadatas[0].cardinality.value,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1]
        };
      }
    };
    exports.ActorRdfJoinHash = ActorRdfJoinHash;
  }
});

// node_modules/@comunica/actor-rdf-join-inner-hash/lib/index.js
var require_lib63 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-hash/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinHash(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-inner-symmetrichash/lib/ActorRdfJoinSymmetricHash.js
var require_ActorRdfJoinSymmetricHash = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-symmetrichash/lib/ActorRdfJoinSymmetricHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinSymmetricHash = void 0;
    var bus_rdf_join_1 = require_lib59();
    var asyncjoin_1 = require_asyncjoin();
    var ActorRdfJoinSymmetricHash = class _ActorRdfJoinSymmetricHash extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "symmetric-hash",
          limitEntries: 2
        });
      }
      async getOutput(action) {
        const metadatas = await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries);
        const variables = bus_rdf_join_1.ActorRdfJoin.overlappingVariables(metadatas);
        const join = new asyncjoin_1.SymmetricHashJoin(action.entries[0].output.bindingsStream, action.entries[1].output.bindingsStream, (entry) => _ActorRdfJoinSymmetricHash.hash(entry, variables), bus_rdf_join_1.ActorRdfJoin.joinBindings);
        return {
          result: {
            type: "bindings",
            bindingsStream: join,
            metadata: async () => await this.constructResultMetadata(action.entries, metadatas, action.context)
          }
        };
      }
      async getJoinCoefficients(action, metadatas) {
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        return {
          iterations: metadatas[0].cardinality.value + metadatas[1].cardinality.value,
          persistedItems: metadatas[0].cardinality.value + metadatas[1].cardinality.value,
          blockingItems: 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1]
        };
      }
    };
    exports.ActorRdfJoinSymmetricHash = ActorRdfJoinSymmetricHash;
  }
});

// node_modules/@comunica/actor-rdf-join-inner-symmetrichash/lib/index.js
var require_lib64 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-symmetrichash/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinSymmetricHash(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-inner-nestedloop/lib/ActorRdfJoinNestedLoop.js
var require_ActorRdfJoinNestedLoop = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-nestedloop/lib/ActorRdfJoinNestedLoop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinNestedLoop = void 0;
    var bus_rdf_join_1 = require_lib59();
    var asyncjoin_1 = require_asyncjoin();
    var ActorRdfJoinNestedLoop = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "nested-loop",
          limitEntries: 2,
          canHandleUndefs: true
        });
      }
      async getOutput(action) {
        const join = new asyncjoin_1.NestedLoopJoin(action.entries[0].output.bindingsStream, action.entries[1].output.bindingsStream, bus_rdf_join_1.ActorRdfJoin.joinBindings, { autoStart: false });
        return {
          result: {
            type: "bindings",
            bindingsStream: join,
            metadata: async () => await this.constructResultMetadata(action.entries, await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries), action.context)
          }
        };
      }
      async getJoinCoefficients(action, metadatas) {
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        return {
          iterations: metadatas[0].cardinality.value * metadatas[1].cardinality.value,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1]
        };
      }
    };
    exports.ActorRdfJoinNestedLoop = ActorRdfJoinNestedLoop;
  }
});

// node_modules/@comunica/actor-rdf-join-inner-nestedloop/lib/index.js
var require_lib65 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-nestedloop/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinNestedLoop(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-minus-hash/lib/ActorRdfJoinMinusHash.js
var require_ActorRdfJoinMinusHash = __commonJS({
  "node_modules/@comunica/actor-rdf-join-minus-hash/lib/ActorRdfJoinMinusHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinMinusHash = void 0;
    var bus_query_operation_1 = require_lib7();
    var bus_rdf_join_1 = require_lib59();
    var ActorRdfJoinMinusHash = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "minus",
          physicalName: "hash",
          limitEntries: 2
        });
      }
      async getOutput(action) {
        const buffer2 = action.entries[1].output;
        const output = action.entries[0].output;
        const metadatas = await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries);
        const commonVariables = bus_rdf_join_1.ActorRdfJoin.overlappingVariables(metadatas);
        if (commonVariables.length > 0) {
          const index = {};
          const bindingsStream = new bus_query_operation_1.ClosableTransformIterator(async () => {
            await new Promise((resolve) => {
              buffer2.bindingsStream.on("data", (data) => {
                index[bus_rdf_join_1.ActorRdfJoin.hash(data, commonVariables)] = true;
              });
              buffer2.bindingsStream.on("end", resolve);
            });
            return output.bindingsStream.filter((data) => !index[bus_rdf_join_1.ActorRdfJoin.hash(data, commonVariables)]);
          }, {
            autoStart: false,
            onClose() {
              buffer2.bindingsStream.destroy();
              output.bindingsStream.destroy();
            }
          });
          return {
            result: {
              type: "bindings",
              bindingsStream,
              metadata: output.metadata
            }
          };
        }
        buffer2.bindingsStream.destroy();
        return {
          result: output
        };
      }
      async getJoinCoefficients(action, metadatas) {
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        return {
          iterations: metadatas[0].cardinality.value + metadatas[1].cardinality.value,
          persistedItems: metadatas[0].cardinality.value,
          blockingItems: metadatas[0].cardinality.value,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1]
        };
      }
    };
    exports.ActorRdfJoinMinusHash = ActorRdfJoinMinusHash;
  }
});

// node_modules/@comunica/actor-rdf-join-minus-hash/lib/index.js
var require_lib66 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-minus-hash/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinMinusHash(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-minus-hash-undef/lib/BindingsIndex.js
var require_BindingsIndex = __commonJS({
  "node_modules/@comunica/actor-rdf-join-minus-hash-undef/lib/BindingsIndex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingsIndex = void 0;
    var rdf_string_1 = require_rdf_string();
    var BindingsIndex = class _BindingsIndex {
      constructor(keys) {
        this.data = {};
        this.keys = keys;
      }
      static hashTerm(term) {
        return term && term.termType !== "Variable" ? (0, rdf_string_1.termToString)(term) : "";
      }
      /**
       * Add the given bindings to the index.
       * @param {Bindings} bindings A bindings.
       */
      add(bindings) {
        if (this.isBindingsValid(bindings)) {
          let dataIt = this.data;
          for (const key of this.keys) {
            const dataKey = _BindingsIndex.hashTerm(bindings.get(key));
            let subDataIt = dataIt[dataKey];
            if (!subDataIt) {
              subDataIt = dataIt[dataKey] = {};
            }
            dataIt = subDataIt;
          }
        }
      }
      /**
       * Check if the given bindings is contained in this index.
       * @param {Bindings} bindings A bindings.
       * @return {boolean} If it exists in the index.
       */
      contains(bindings) {
        if (!this.isBindingsValid(bindings)) {
          return false;
        }
        return this.containsRecursive(bindings, this.keys, [this.data]);
      }
      isBindingsValid(bindings) {
        let validKeys = false;
        for (const key of this.keys) {
          if (bindings.get(key)) {
            validKeys = true;
            break;
          }
        }
        return validKeys;
      }
      containsRecursive(bindings, keys, dataIndexes) {
        if (keys.length === 0) {
          return true;
        }
        let key;
        [key, ...keys] = keys;
        for (const data of dataIndexes) {
          const dataKey = _BindingsIndex.hashTerm(bindings.get(key));
          if (!dataKey) {
            let subDatas = Object.keys(data).map((subKey) => data[subKey]);
            if (subDatas.length === 0) {
              subDatas = [{}];
            }
            if (this.containsRecursive(bindings, keys, subDatas)) {
              return true;
            }
          } else {
            const subDatas = [data[dataKey], data[""]].filter(Boolean);
            if (subDatas.length === 0) {
              continue;
            }
            if (this.containsRecursive(bindings, keys, subDatas)) {
              return true;
            }
          }
        }
        return false;
      }
    };
    exports.BindingsIndex = BindingsIndex;
  }
});

// node_modules/@comunica/actor-rdf-join-minus-hash-undef/lib/ActorRdfJoinMinusHashUndef.js
var require_ActorRdfJoinMinusHashUndef = __commonJS({
  "node_modules/@comunica/actor-rdf-join-minus-hash-undef/lib/ActorRdfJoinMinusHashUndef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinMinusHashUndef = void 0;
    var bus_query_operation_1 = require_lib7();
    var bus_rdf_join_1 = require_lib59();
    var BindingsIndex_1 = require_BindingsIndex();
    var ActorRdfJoinMinusHashUndef = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "minus",
          physicalName: "hash-undef",
          limitEntries: 2,
          canHandleUndefs: true
        });
      }
      async getOutput(action) {
        const buffer2 = action.entries[1].output;
        const output = action.entries[0].output;
        const metadatas = await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries);
        const commonVariables = bus_rdf_join_1.ActorRdfJoin.overlappingVariables(metadatas);
        if (commonVariables.length > 0) {
          const index = new BindingsIndex_1.BindingsIndex(commonVariables);
          const bindingsStream = new bus_query_operation_1.ClosableTransformIterator(async () => {
            await new Promise((resolve) => {
              buffer2.bindingsStream.on("data", (data) => index.add(data));
              buffer2.bindingsStream.on("end", resolve);
            });
            return output.bindingsStream.filter((data) => !index.contains(data));
          }, {
            autoStart: false,
            onClose() {
              buffer2.bindingsStream.destroy();
              output.bindingsStream.destroy();
            }
          });
          return {
            result: {
              type: "bindings",
              bindingsStream,
              async metadata() {
                const bufferMetadata = await output.metadata();
                const outputMetadata = await output.metadata();
                return {
                  ...outputMetadata,
                  canContainUndefs: bufferMetadata.canContainUndefs || outputMetadata.canContainUndefs
                };
              }
            }
          };
        }
        buffer2.bindingsStream.destroy();
        return {
          result: output
        };
      }
      async getJoinCoefficients(action, metadatas) {
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        return {
          // Slightly increase iteration cost, as operations in our BindingsIndex do not happen in constant time
          // This enables the mediator to favor other minus actors,
          // while this one will only be selected when streams contain undefs.
          iterations: (metadatas[0].cardinality.value + metadatas[1].cardinality.value) * 1.01,
          persistedItems: metadatas[0].cardinality.value,
          blockingItems: metadatas[0].cardinality.value,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1]
        };
      }
    };
    exports.ActorRdfJoinMinusHashUndef = ActorRdfJoinMinusHashUndef;
  }
});

// node_modules/@comunica/actor-rdf-join-minus-hash-undef/lib/index.js
var require_lib67 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-minus-hash-undef/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinMinusHashUndef(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-optional-nestedloop/lib/ActorRdfJoinOptionalNestedLoop.js
var require_ActorRdfJoinOptionalNestedLoop = __commonJS({
  "node_modules/@comunica/actor-rdf-join-optional-nestedloop/lib/ActorRdfJoinOptionalNestedLoop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinOptionalNestedLoop = void 0;
    var bus_rdf_join_1 = require_lib59();
    var asyncjoin_1 = require_asyncjoin();
    var ActorRdfJoinOptionalNestedLoop = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "optional",
          physicalName: "nested-loop",
          limitEntries: 2,
          canHandleUndefs: true
        });
      }
      async getOutput(action) {
        const join = new asyncjoin_1.NestedLoopJoin(action.entries[0].output.bindingsStream, action.entries[1].output.bindingsStream, bus_rdf_join_1.ActorRdfJoin.joinBindings, { optional: true, autoStart: false });
        return {
          result: {
            type: "bindings",
            bindingsStream: join,
            metadata: async () => await this.constructResultMetadata(action.entries, await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries), action.context, { canContainUndefs: true })
          }
        };
      }
      async getJoinCoefficients(action, metadatas) {
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        return {
          iterations: metadatas[0].cardinality.value * metadatas[1].cardinality.value,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1]
        };
      }
    };
    exports.ActorRdfJoinOptionalNestedLoop = ActorRdfJoinOptionalNestedLoop;
  }
});

// node_modules/@comunica/actor-rdf-join-optional-nestedloop/lib/index.js
var require_lib68 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-optional-nestedloop/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinOptionalNestedLoop(), exports);
  }
});

// node_modules/@comunica/actor-query-result-serialize-rdf/lib/ActorQueryResultSerializeRdf.js
var require_ActorQueryResultSerializeRdf = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-rdf/lib/ActorQueryResultSerializeRdf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeRdf = void 0;
    var bus_query_result_serialize_1 = require_lib23();
    var ActorQueryResultSerializeRdf = class extends bus_query_result_serialize_1.ActorQueryResultSerialize {
      constructor(args) {
        super(args);
      }
      async testHandle(action, mediaType, context) {
        if (action.type !== "quads") {
          throw new Error(`Actor ${this.name} can only handle quad streams`);
        }
        const { mediaTypes } = await this.mediatorMediaTypeCombiner.mediate({ context, mediaTypes: true });
        if (!(mediaType in mediaTypes)) {
          throw new Error(`Actor ${this.name} can not handle media type ${mediaType}. All available types: ${Object.keys(mediaTypes)}`);
        }
        return true;
      }
      async runHandle(action, mediaType, context) {
        return (await this.mediatorRdfSerialize.mediate({
          context,
          handle: {
            context,
            quadStream: action.quadStream
          },
          handleMediaType: mediaType
        })).handle;
      }
      async testMediaType(context) {
        return true;
      }
      async getMediaTypes(context) {
        return (await this.mediatorMediaTypeCombiner.mediate({ context, mediaTypes: true })).mediaTypes;
      }
      async testMediaTypeFormats(context) {
        return true;
      }
      async getMediaTypeFormats(context) {
        return (await this.mediatorMediaTypeFormatCombiner.mediate({ context, mediaTypeFormats: true })).mediaTypeFormats;
      }
    };
    exports.ActorQueryResultSerializeRdf = ActorQueryResultSerializeRdf;
  }
});

// node_modules/@comunica/actor-query-result-serialize-rdf/lib/index.js
var require_lib69 = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-rdf/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryResultSerializeRdf(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-ask/lib/ActorQueryOperationAsk.js
var require_ActorQueryOperationAsk = __commonJS({
  "node_modules/@comunica/actor-query-operation-ask/lib/ActorQueryOperationAsk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationAsk = void 0;
    var bus_query_operation_1 = require_lib7();
    var ActorQueryOperationAsk = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "ask");
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operation, context) {
        const output = await this.mediatorQueryOperation.mediate({ operation: operation.input, context });
        const { bindingsStream } = bus_query_operation_1.ActorQueryOperation.getSafeBindings(output);
        return { type: "boolean", execute: async () => (await bindingsStream.take(1).toArray()).length === 1 };
      }
    };
    exports.ActorQueryOperationAsk = ActorQueryOperationAsk;
  }
});

// node_modules/@comunica/actor-query-operation-ask/lib/index.js
var require_lib70 = __commonJS({
  "node_modules/@comunica/actor-query-operation-ask/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationAsk(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-union/lib/ActorQueryOperationUnion.js
var require_ActorQueryOperationUnion = __commonJS({
  "node_modules/@comunica/actor-query-operation-union/lib/ActorQueryOperationUnion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationUnion = void 0;
    var bus_query_operation_1 = require_lib7();
    var metadata_1 = require_lib48();
    var asynciterator_1 = require_asynciterator();
    var rdf_terms_1 = require_rdf_terms();
    var ActorQueryOperationUnion = class _ActorQueryOperationUnion extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "union");
      }
      /**
       * Takes the union of the given double array variables.
       * Uniqueness is guaranteed.
       * @param {string[][]} variables Double array of variables to take the union of.
       * @return {string[]} The union of the given variables.
       */
      static unionVariables(variables) {
        return (0, rdf_terms_1.uniqTerms)(variables.flat());
      }
      /**
       * Takes the union of the given metadata array.
       * It will ensure that the cardinality metadata value is properly calculated.
       * @param {{[p: string]: any}[]} metadatas Array of metadata.
       * @param bindings If the union of the variables field should also be taken.
       * @return {{[p: string]: any}} Union of the metadata.
       */
      static unionMetadata(metadatas, bindings) {
        const cardinality = { type: "exact", value: 0 };
        for (const metadata of metadatas) {
          if (metadata.cardinality.value && Number.isFinite(metadata.cardinality.value) || metadata.cardinality.value === 0) {
            if (metadata.cardinality.type === "estimate") {
              cardinality.type = "estimate";
            }
            cardinality.value += metadata.cardinality.value;
          } else {
            cardinality.type = "estimate";
            cardinality.value = Number.POSITIVE_INFINITY;
            break;
          }
        }
        const metadataBase = {
          state: new metadata_1.MetadataValidationState(),
          cardinality,
          canContainUndefs: metadatas.some((metadata) => metadata.canContainUndefs)
        };
        const invalidateListener = () => metadataBase.state.invalidate();
        for (const metadata of metadatas) {
          metadata.state.addInvalidateListener(invalidateListener);
        }
        if (bindings) {
          metadataBase.variables = _ActorQueryOperationUnion.unionVariables(metadatas.map((metadata) => metadata.variables));
          return metadataBase;
        }
        return metadataBase;
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operation, context) {
        const outputs = (await Promise.all(operation.input.map((subOperation) => this.mediatorQueryOperation.mediate({ operation: subOperation, context })))).map(bus_query_operation_1.ActorQueryOperation.getSafeBindings);
        const bindingsStream = new asynciterator_1.UnionIterator(outputs.map((output) => output.bindingsStream), { autoStart: false });
        const metadata = () => Promise.all(outputs.map((output) => output.metadata())).then((subMeta) => _ActorQueryOperationUnion.unionMetadata(subMeta, true));
        return { type: "bindings", bindingsStream, metadata };
      }
    };
    exports.ActorQueryOperationUnion = ActorQueryOperationUnion;
  }
});

// node_modules/@comunica/actor-query-operation-union/lib/index.js
var require_lib71 = __commonJS({
  "node_modules/@comunica/actor-query-operation-union/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationUnion(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-describe-subject/lib/ActorQueryOperationDescribeSubject.js
var require_ActorQueryOperationDescribeSubject = __commonJS({
  "node_modules/@comunica/actor-query-operation-describe-subject/lib/ActorQueryOperationDescribeSubject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationDescribeSubject = void 0;
    var actor_query_operation_union_1 = require_lib71();
    var bus_query_operation_1 = require_lib7();
    var asynciterator_1 = require_asynciterator();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var DF = new rdf_data_factory_1.DataFactory();
    var ActorQueryOperationDescribeSubject = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "describe");
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operationOriginal, context) {
        const operations = operationOriginal.terms.filter((term) => term.termType !== "Variable").map((term) => {
          const patterns = [
            DF.quad(term, DF.variable("__predicate"), DF.variable("__object"))
          ];
          patterns.forEach((templatePattern) => templatePattern.type = "pattern");
          const templateOperation = {
            type: sparqlalgebrajs_1.Algebra.types.BGP,
            patterns
          };
          return {
            input: templateOperation,
            template: patterns,
            type: "construct"
          };
        });
        if (operations.length !== operationOriginal.terms.length) {
          let variablePatterns = [];
          operationOriginal.terms.filter((term) => term.termType === "Variable").forEach((term, i2) => {
            const patterns = [
              DF.quad(term, DF.variable(`__predicate${i2}`), DF.variable(`__object${i2}`))
            ];
            patterns.forEach((templatePattern) => templatePattern.type = "pattern");
            variablePatterns = [...variablePatterns, ...patterns];
          });
          operations.push({
            input: {
              type: sparqlalgebrajs_1.Algebra.types.JOIN,
              input: [
                operationOriginal.input,
                { type: sparqlalgebrajs_1.Algebra.types.BGP, patterns: variablePatterns }
              ]
            },
            template: variablePatterns,
            type: sparqlalgebrajs_1.Algebra.types.CONSTRUCT
          });
        }
        const outputs = (await Promise.all(operations.map((operation) => this.mediatorQueryOperation.mediate({ operation, context })))).map(bus_query_operation_1.ActorQueryOperation.getSafeQuads);
        const quadStream = new asynciterator_1.UnionIterator(outputs.map((output) => output.quadStream), { autoStart: false });
        const metadata = () => Promise.all(outputs.map((x) => x.metadata())).then((metadatas) => actor_query_operation_union_1.ActorQueryOperationUnion.unionMetadata(metadatas, false));
        return { type: "quads", quadStream, metadata };
      }
    };
    exports.ActorQueryOperationDescribeSubject = ActorQueryOperationDescribeSubject;
  }
});

// node_modules/@comunica/actor-query-operation-describe-subject/lib/index.js
var require_lib72 = __commonJS({
  "node_modules/@comunica/actor-query-operation-describe-subject/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationDescribeSubject(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-construct/lib/BindingsToQuadsIterator.js
var require_BindingsToQuadsIterator = __commonJS({
  "node_modules/@comunica/actor-query-operation-construct/lib/BindingsToQuadsIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingsToQuadsIterator = void 0;
    var asynciterator_1 = require_asynciterator();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var rdf_terms_1 = require_rdf_terms();
    var DF = new rdf_data_factory_1.DataFactory();
    var BindingsToQuadsIterator = class _BindingsToQuadsIterator extends asynciterator_1.MultiTransformIterator {
      constructor(template, bindingsStream) {
        super(bindingsStream, { autoStart: false });
        this.template = template;
        this.blankNodeCounter = 0;
      }
      /**
       * Bind the given term.
       * If the term is a variable and the variable is bound in the bindings object,
       * return the bindings value.
       * If the term is a variable and the variable is not bound in the bindings object,
       * a falsy value is returned..
       * Otherwise, the term itself is returned.
       * @param {Bindings}  bindings A bindings object.
       * @param {RDF.Term}  term     An RDF term.
       * @return {RDF.Term}          If the given term is not a variable, the term itself is returned.
       *                             If the given term is a variable, then the bound term is returned,
       *                             or a falsy value if it did not exist in the bindings.
       */
      static bindTerm(bindings, term) {
        if (term.termType === "Variable") {
          return bindings.get(term);
        }
        return term;
      }
      /**
       * Bind the given quad pattern.
       * If one of the terms was a variable AND is not bound in the bindings,
       * a falsy value will be returned.
       * @param {Bindings} bindings A bindings object.
       * @param {RDF.Quad} pattern  An RDF quad.
       * @return {RDF.Quad}         A bound RDF quad or undefined.
       */
      static bindQuad(bindings, pattern) {
        try {
          return (0, rdf_terms_1.mapTermsNested)(pattern, (term) => {
            const boundTerm = _BindingsToQuadsIterator.bindTerm(bindings, term);
            if (!boundTerm) {
              throw new Error("Unbound term");
            }
            return boundTerm;
          });
        } catch {
        }
      }
      /**
       * Convert a blank node to a unique blank node in the given context.
       * If the given term is not a blank node, the term itself will be returned.
       * @param             blankNodeCounter A counter value for the blank node.
       * @param {RDF.Term}  term             The term that should be localized.
       * @return {RDF.Term}                  A term.
       */
      static localizeBlankNode(blankNodeCounter, term) {
        if (term.termType === "BlankNode") {
          return DF.blankNode(`${term.value}${blankNodeCounter}`);
        }
        return term;
      }
      /**
       * Convert the given quad to a quad that only contains unique blank nodes.
       * @param            blankNodeCounter A counter value for the blank node.
       * @param {RDF.BaseQuad} pattern          The pattern that should be localized.
       * @return {RDF.BaseQuad}                 A quad.
       */
      static localizeQuad(blankNodeCounter, pattern) {
        return (0, rdf_terms_1.mapTermsNested)(pattern, (term) => _BindingsToQuadsIterator.localizeBlankNode(blankNodeCounter, term));
      }
      /**
       * Convert the given template to a list of quads based on the given bindings.
       * @param {Bindings}    bindings           A bindings object.
       * @param {RDF.Quad[]}  template           A list of quad patterns.
       * @param               blankNodeCounter   A counter value for the blank node.
       * @return {RDF.Quad[]}                    A list of quads.
       */
      bindTemplate(bindings, template, blankNodeCounter) {
        const quads = template.map(_BindingsToQuadsIterator.localizeQuad.bind(null, blankNodeCounter)).map((x) => _BindingsToQuadsIterator.bindQuad.bind(null, bindings)(x)).filter(Boolean);
        return quads;
      }
      _createTransformer(bindings) {
        return new asynciterator_1.ArrayIterator(this.bindTemplate(bindings, this.template, this.blankNodeCounter++), { autoStart: false });
      }
    };
    exports.BindingsToQuadsIterator = BindingsToQuadsIterator;
  }
});

// node_modules/@comunica/actor-query-operation-construct/lib/ActorQueryOperationConstruct.js
var require_ActorQueryOperationConstruct = __commonJS({
  "node_modules/@comunica/actor-query-operation-construct/lib/ActorQueryOperationConstruct.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationConstruct = void 0;
    var bus_query_operation_1 = require_lib7();
    var rdf_terms_1 = require_rdf_terms();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var BindingsToQuadsIterator_1 = require_BindingsToQuadsIterator();
    var ActorQueryOperationConstruct = class _ActorQueryOperationConstruct extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "construct");
      }
      /**
       * Find all variables in a list of triple patterns.
       * @param {Algebra.Pattern[]} patterns An array of triple patterns.
       * @return {RDF.Variable[]} The variables in the triple patterns.
       */
      static getVariables(patterns) {
        return (0, rdf_terms_1.uniqTerms)([].concat.apply([], patterns.map((pattern) => (0, rdf_terms_1.getVariables)((0, rdf_terms_1.getTermsNested)(pattern)))));
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operationOriginal, context) {
        const variables = _ActorQueryOperationConstruct.getVariables(operationOriginal.template);
        const operation = { type: sparqlalgebrajs_1.Algebra.types.PROJECT, input: operationOriginal.input, variables };
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation, context }));
        const quadStream = new BindingsToQuadsIterator_1.BindingsToQuadsIterator(operationOriginal.template, output.bindingsStream);
        const metadata = () => output.metadata().then((meta) => ({
          ...meta,
          order: void 0,
          cardinality: {
            type: meta.cardinality.type,
            value: meta.cardinality.value * operationOriginal.template.length
          },
          canContainUndefs: false,
          availableOrders: void 0
        }));
        return {
          metadata,
          quadStream,
          type: "quads"
        };
      }
    };
    exports.ActorQueryOperationConstruct = ActorQueryOperationConstruct;
  }
});

// node_modules/@comunica/actor-query-operation-construct/lib/index.js
var require_lib73 = __commonJS({
  "node_modules/@comunica/actor-query-operation-construct/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationConstruct(), exports);
    __exportStar(require_BindingsToQuadsIterator(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-bgp-join/lib/ActorQueryOperationBgpJoin.js
var require_ActorQueryOperationBgpJoin = __commonJS({
  "node_modules/@comunica/actor-query-operation-bgp-join/lib/ActorQueryOperationBgpJoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationBgpJoin = void 0;
    var bus_query_operation_1 = require_lib7();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationBgpJoin = class _ActorQueryOperationBgpJoin extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "bgp");
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operation, context) {
        return this.mediatorQueryOperation.mediate({
          operation: _ActorQueryOperationBgpJoin.FACTORY.createJoin(operation.patterns),
          context
        });
      }
    };
    exports.ActorQueryOperationBgpJoin = ActorQueryOperationBgpJoin;
    ActorQueryOperationBgpJoin.FACTORY = new sparqlalgebrajs_1.Factory();
  }
});

// node_modules/@comunica/actor-query-operation-bgp-join/lib/index.js
var require_lib74 = __commonJS({
  "node_modules/@comunica/actor-query-operation-bgp-join/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationBgpJoin(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-distinct-hash/lib/ActorQueryOperationDistinctHash.js
var require_ActorQueryOperationDistinctHash = __commonJS({
  "node_modules/@comunica/actor-query-operation-distinct-hash/lib/ActorQueryOperationDistinctHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationDistinctHash = void 0;
    var bus_query_operation_1 = require_lib7();
    var ActorQueryOperationDistinctHash = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "distinct");
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operation, context) {
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: operation.input, context }));
        const bindingsStream = output.bindingsStream.filter(await this.newHashFilter(context));
        return {
          type: "bindings",
          bindingsStream,
          metadata: output.metadata
        };
      }
      /**
       * Create a new distinct filter function.
       * This will maintain an internal hash datastructure so that every bindings object only returns true once.
       * @param context The action context.
       * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.
       */
      async newHashFilter(context) {
        const { hashFunction } = await this.mediatorHashBindings.mediate({ allowHashCollisions: true, context });
        const hashes = {};
        return (bindings) => {
          const hash = hashFunction(bindings);
          return !(hash in hashes) && (hashes[hash] = true);
        };
      }
    };
    exports.ActorQueryOperationDistinctHash = ActorQueryOperationDistinctHash;
  }
});

// node_modules/@comunica/actor-query-operation-distinct-hash/lib/index.js
var require_lib75 = __commonJS({
  "node_modules/@comunica/actor-query-operation-distinct-hash/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationDistinctHash(), exports);
  }
});

// node_modules/lru-cache/dist/commonjs/index.js
var require_commonjs = __commonJS({
  "node_modules/lru-cache/dist/commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LRUCache = void 0;
    var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
    var warned = /* @__PURE__ */ new Set();
    var PROCESS = typeof process === "object" && !!process ? process : {};
    var emitWarning = (msg, type, code, fn) => {
      typeof PROCESS.emitWarning === "function" ? PROCESS.emitWarning(msg, type, code, fn) : console.error(`[${code}] ${type}: ${msg}`);
    };
    var AC = globalThis.AbortController;
    var AS = globalThis.AbortSignal;
    if (typeof AC === "undefined") {
      AS = class AbortSignal {
        onabort;
        _onabort = [];
        reason;
        aborted = false;
        addEventListener(_, fn) {
          this._onabort.push(fn);
        }
      };
      AC = class AbortController {
        constructor() {
          warnACPolyfill();
        }
        signal = new AS();
        abort(reason) {
          if (this.signal.aborted)
            return;
          this.signal.reason = reason;
          this.signal.aborted = true;
          for (const fn of this.signal._onabort) {
            fn(reason);
          }
          this.signal.onabort?.(reason);
        }
      };
      let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== "1";
      const warnACPolyfill = () => {
        if (!printACPolyfillWarning)
          return;
        printACPolyfillWarning = false;
        emitWarning("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", warnACPolyfill);
      };
    }
    var shouldWarn = (code) => !warned.has(code);
    var TYPE = Symbol("type");
    var isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
    var getUintArray = (max) => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
    var ZeroArray = class extends Array {
      constructor(size) {
        super(size);
        this.fill(0);
      }
    };
    var Stack = class _Stack {
      heap;
      length;
      // private constructor
      static #constructing = false;
      static create(max) {
        const HeapCls = getUintArray(max);
        if (!HeapCls)
          return [];
        _Stack.#constructing = true;
        const s = new _Stack(max, HeapCls);
        _Stack.#constructing = false;
        return s;
      }
      constructor(max, HeapCls) {
        if (!_Stack.#constructing) {
          throw new TypeError("instantiate Stack using Stack.create(n)");
        }
        this.heap = new HeapCls(max);
        this.length = 0;
      }
      push(n) {
        this.heap[this.length++] = n;
      }
      pop() {
        return this.heap[--this.length];
      }
    };
    var LRUCache = class _LRUCache {
      // properties coming in from the options of these, only max and maxSize
      // really *need* to be protected. The rest can be modified, as they just
      // set defaults for various methods.
      #max;
      #maxSize;
      #dispose;
      #disposeAfter;
      #fetchMethod;
      /**
       * {@link LRUCache.OptionsBase.ttl}
       */
      ttl;
      /**
       * {@link LRUCache.OptionsBase.ttlResolution}
       */
      ttlResolution;
      /**
       * {@link LRUCache.OptionsBase.ttlAutopurge}
       */
      ttlAutopurge;
      /**
       * {@link LRUCache.OptionsBase.updateAgeOnGet}
       */
      updateAgeOnGet;
      /**
       * {@link LRUCache.OptionsBase.updateAgeOnHas}
       */
      updateAgeOnHas;
      /**
       * {@link LRUCache.OptionsBase.allowStale}
       */
      allowStale;
      /**
       * {@link LRUCache.OptionsBase.noDisposeOnSet}
       */
      noDisposeOnSet;
      /**
       * {@link LRUCache.OptionsBase.noUpdateTTL}
       */
      noUpdateTTL;
      /**
       * {@link LRUCache.OptionsBase.maxEntrySize}
       */
      maxEntrySize;
      /**
       * {@link LRUCache.OptionsBase.sizeCalculation}
       */
      sizeCalculation;
      /**
       * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
       */
      noDeleteOnFetchRejection;
      /**
       * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
       */
      noDeleteOnStaleGet;
      /**
       * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
       */
      allowStaleOnFetchAbort;
      /**
       * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
       */
      allowStaleOnFetchRejection;
      /**
       * {@link LRUCache.OptionsBase.ignoreFetchAbort}
       */
      ignoreFetchAbort;
      // computed properties
      #size;
      #calculatedSize;
      #keyMap;
      #keyList;
      #valList;
      #next;
      #prev;
      #head;
      #tail;
      #free;
      #disposed;
      #sizes;
      #starts;
      #ttls;
      #hasDispose;
      #hasFetchMethod;
      #hasDisposeAfter;
      /**
       * Do not call this method unless you need to inspect the
       * inner workings of the cache.  If anything returned by this
       * object is modified in any way, strange breakage may occur.
       *
       * These fields are private for a reason!
       *
       * @internal
       */
      static unsafeExposeInternals(c) {
        return {
          // properties
          starts: c.#starts,
          ttls: c.#ttls,
          sizes: c.#sizes,
          keyMap: c.#keyMap,
          keyList: c.#keyList,
          valList: c.#valList,
          next: c.#next,
          prev: c.#prev,
          get head() {
            return c.#head;
          },
          get tail() {
            return c.#tail;
          },
          free: c.#free,
          // methods
          isBackgroundFetch: (p) => c.#isBackgroundFetch(p),
          backgroundFetch: (k, index, options, context) => c.#backgroundFetch(k, index, options, context),
          moveToTail: (index) => c.#moveToTail(index),
          indexes: (options) => c.#indexes(options),
          rindexes: (options) => c.#rindexes(options),
          isStale: (index) => c.#isStale(index)
        };
      }
      // Protected read-only members
      /**
       * {@link LRUCache.OptionsBase.max} (read-only)
       */
      get max() {
        return this.#max;
      }
      /**
       * {@link LRUCache.OptionsBase.maxSize} (read-only)
       */
      get maxSize() {
        return this.#maxSize;
      }
      /**
       * The total computed size of items in the cache (read-only)
       */
      get calculatedSize() {
        return this.#calculatedSize;
      }
      /**
       * The number of items stored in the cache (read-only)
       */
      get size() {
        return this.#size;
      }
      /**
       * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
       */
      get fetchMethod() {
        return this.#fetchMethod;
      }
      /**
       * {@link LRUCache.OptionsBase.dispose} (read-only)
       */
      get dispose() {
        return this.#dispose;
      }
      /**
       * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
       */
      get disposeAfter() {
        return this.#disposeAfter;
      }
      constructor(options) {
        const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options;
        if (max !== 0 && !isPosInt(max)) {
          throw new TypeError("max option must be a nonnegative integer");
        }
        const UintArray = max ? getUintArray(max) : Array;
        if (!UintArray) {
          throw new Error("invalid max value: " + max);
        }
        this.#max = max;
        this.#maxSize = maxSize;
        this.maxEntrySize = maxEntrySize || this.#maxSize;
        this.sizeCalculation = sizeCalculation;
        if (this.sizeCalculation) {
          if (!this.#maxSize && !this.maxEntrySize) {
            throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
          }
          if (typeof this.sizeCalculation !== "function") {
            throw new TypeError("sizeCalculation set to non-function");
          }
        }
        if (fetchMethod !== void 0 && typeof fetchMethod !== "function") {
          throw new TypeError("fetchMethod must be a function if specified");
        }
        this.#fetchMethod = fetchMethod;
        this.#hasFetchMethod = !!fetchMethod;
        this.#keyMap = /* @__PURE__ */ new Map();
        this.#keyList = new Array(max).fill(void 0);
        this.#valList = new Array(max).fill(void 0);
        this.#next = new UintArray(max);
        this.#prev = new UintArray(max);
        this.#head = 0;
        this.#tail = 0;
        this.#free = Stack.create(max);
        this.#size = 0;
        this.#calculatedSize = 0;
        if (typeof dispose === "function") {
          this.#dispose = dispose;
        }
        if (typeof disposeAfter === "function") {
          this.#disposeAfter = disposeAfter;
          this.#disposed = [];
        } else {
          this.#disposeAfter = void 0;
          this.#disposed = void 0;
        }
        this.#hasDispose = !!this.#dispose;
        this.#hasDisposeAfter = !!this.#disposeAfter;
        this.noDisposeOnSet = !!noDisposeOnSet;
        this.noUpdateTTL = !!noUpdateTTL;
        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
        this.ignoreFetchAbort = !!ignoreFetchAbort;
        if (this.maxEntrySize !== 0) {
          if (this.#maxSize !== 0) {
            if (!isPosInt(this.#maxSize)) {
              throw new TypeError("maxSize must be a positive integer if specified");
            }
          }
          if (!isPosInt(this.maxEntrySize)) {
            throw new TypeError("maxEntrySize must be a positive integer if specified");
          }
          this.#initializeSizeTracking();
        }
        this.allowStale = !!allowStale;
        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
        this.updateAgeOnGet = !!updateAgeOnGet;
        this.updateAgeOnHas = !!updateAgeOnHas;
        this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
        this.ttlAutopurge = !!ttlAutopurge;
        this.ttl = ttl || 0;
        if (this.ttl) {
          if (!isPosInt(this.ttl)) {
            throw new TypeError("ttl must be a positive integer if specified");
          }
          this.#initializeTTLTracking();
        }
        if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {
          throw new TypeError("At least one of max, maxSize, or ttl is required");
        }
        if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {
          const code = "LRU_CACHE_UNBOUNDED";
          if (shouldWarn(code)) {
            warned.add(code);
            const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
            emitWarning(msg, "UnboundedCacheWarning", code, _LRUCache);
          }
        }
      }
      /**
       * Return the remaining TTL time for a given entry key
       */
      getRemainingTTL(key) {
        return this.#keyMap.has(key) ? Infinity : 0;
      }
      #initializeTTLTracking() {
        const ttls = new ZeroArray(this.#max);
        const starts = new ZeroArray(this.#max);
        this.#ttls = ttls;
        this.#starts = starts;
        this.#setItemTTL = (index, ttl, start = perf.now()) => {
          starts[index] = ttl !== 0 ? start : 0;
          ttls[index] = ttl;
          if (ttl !== 0 && this.ttlAutopurge) {
            const t = setTimeout(() => {
              if (this.#isStale(index)) {
                this.delete(this.#keyList[index]);
              }
            }, ttl + 1);
            if (t.unref) {
              t.unref();
            }
          }
        };
        this.#updateItemAge = (index) => {
          starts[index] = ttls[index] !== 0 ? perf.now() : 0;
        };
        this.#statusTTL = (status, index) => {
          if (ttls[index]) {
            const ttl = ttls[index];
            const start = starts[index];
            if (!ttl || !start)
              return;
            status.ttl = ttl;
            status.start = start;
            status.now = cachedNow || getNow();
            const age = status.now - start;
            status.remainingTTL = ttl - age;
          }
        };
        let cachedNow = 0;
        const getNow = () => {
          const n = perf.now();
          if (this.ttlResolution > 0) {
            cachedNow = n;
            const t = setTimeout(() => cachedNow = 0, this.ttlResolution);
            if (t.unref) {
              t.unref();
            }
          }
          return n;
        };
        this.getRemainingTTL = (key) => {
          const index = this.#keyMap.get(key);
          if (index === void 0) {
            return 0;
          }
          const ttl = ttls[index];
          const start = starts[index];
          if (!ttl || !start) {
            return Infinity;
          }
          const age = (cachedNow || getNow()) - start;
          return ttl - age;
        };
        this.#isStale = (index) => {
          const s = starts[index];
          const t = ttls[index];
          return !!t && !!s && (cachedNow || getNow()) - s > t;
        };
      }
      // conditionally set private methods related to TTL
      #updateItemAge = () => {
      };
      #statusTTL = () => {
      };
      #setItemTTL = () => {
      };
      /* c8 ignore stop */
      #isStale = () => false;
      #initializeSizeTracking() {
        const sizes = new ZeroArray(this.#max);
        this.#calculatedSize = 0;
        this.#sizes = sizes;
        this.#removeItemSize = (index) => {
          this.#calculatedSize -= sizes[index];
          sizes[index] = 0;
        };
        this.#requireSize = (k, v, size, sizeCalculation) => {
          if (this.#isBackgroundFetch(v)) {
            return 0;
          }
          if (!isPosInt(size)) {
            if (sizeCalculation) {
              if (typeof sizeCalculation !== "function") {
                throw new TypeError("sizeCalculation must be a function");
              }
              size = sizeCalculation(v, k);
              if (!isPosInt(size)) {
                throw new TypeError("sizeCalculation return invalid (expect positive integer)");
              }
            } else {
              throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
            }
          }
          return size;
        };
        this.#addItemSize = (index, size, status) => {
          sizes[index] = size;
          if (this.#maxSize) {
            const maxSize = this.#maxSize - sizes[index];
            while (this.#calculatedSize > maxSize) {
              this.#evict(true);
            }
          }
          this.#calculatedSize += sizes[index];
          if (status) {
            status.entrySize = size;
            status.totalCalculatedSize = this.#calculatedSize;
          }
        };
      }
      #removeItemSize = (_i) => {
      };
      #addItemSize = (_i, _s, _st) => {
      };
      #requireSize = (_k, _v, size, sizeCalculation) => {
        if (size || sizeCalculation) {
          throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
        }
        return 0;
      };
      *#indexes({ allowStale = this.allowStale } = {}) {
        if (this.#size) {
          for (let i2 = this.#tail; true; ) {
            if (!this.#isValidIndex(i2)) {
              break;
            }
            if (allowStale || !this.#isStale(i2)) {
              yield i2;
            }
            if (i2 === this.#head) {
              break;
            } else {
              i2 = this.#prev[i2];
            }
          }
        }
      }
      *#rindexes({ allowStale = this.allowStale } = {}) {
        if (this.#size) {
          for (let i2 = this.#head; true; ) {
            if (!this.#isValidIndex(i2)) {
              break;
            }
            if (allowStale || !this.#isStale(i2)) {
              yield i2;
            }
            if (i2 === this.#tail) {
              break;
            } else {
              i2 = this.#next[i2];
            }
          }
        }
      }
      #isValidIndex(index) {
        return index !== void 0 && this.#keyMap.get(this.#keyList[index]) === index;
      }
      /**
       * Return a generator yielding `[key, value]` pairs,
       * in order from most recently used to least recently used.
       */
      *entries() {
        for (const i2 of this.#indexes()) {
          if (this.#valList[i2] !== void 0 && this.#keyList[i2] !== void 0 && !this.#isBackgroundFetch(this.#valList[i2])) {
            yield [this.#keyList[i2], this.#valList[i2]];
          }
        }
      }
      /**
       * Inverse order version of {@link LRUCache.entries}
       *
       * Return a generator yielding `[key, value]` pairs,
       * in order from least recently used to most recently used.
       */
      *rentries() {
        for (const i2 of this.#rindexes()) {
          if (this.#valList[i2] !== void 0 && this.#keyList[i2] !== void 0 && !this.#isBackgroundFetch(this.#valList[i2])) {
            yield [this.#keyList[i2], this.#valList[i2]];
          }
        }
      }
      /**
       * Return a generator yielding the keys in the cache,
       * in order from most recently used to least recently used.
       */
      *keys() {
        for (const i2 of this.#indexes()) {
          const k = this.#keyList[i2];
          if (k !== void 0 && !this.#isBackgroundFetch(this.#valList[i2])) {
            yield k;
          }
        }
      }
      /**
       * Inverse order version of {@link LRUCache.keys}
       *
       * Return a generator yielding the keys in the cache,
       * in order from least recently used to most recently used.
       */
      *rkeys() {
        for (const i2 of this.#rindexes()) {
          const k = this.#keyList[i2];
          if (k !== void 0 && !this.#isBackgroundFetch(this.#valList[i2])) {
            yield k;
          }
        }
      }
      /**
       * Return a generator yielding the values in the cache,
       * in order from most recently used to least recently used.
       */
      *values() {
        for (const i2 of this.#indexes()) {
          const v = this.#valList[i2];
          if (v !== void 0 && !this.#isBackgroundFetch(this.#valList[i2])) {
            yield this.#valList[i2];
          }
        }
      }
      /**
       * Inverse order version of {@link LRUCache.values}
       *
       * Return a generator yielding the values in the cache,
       * in order from least recently used to most recently used.
       */
      *rvalues() {
        for (const i2 of this.#rindexes()) {
          const v = this.#valList[i2];
          if (v !== void 0 && !this.#isBackgroundFetch(this.#valList[i2])) {
            yield this.#valList[i2];
          }
        }
      }
      /**
       * Iterating over the cache itself yields the same results as
       * {@link LRUCache.entries}
       */
      [Symbol.iterator]() {
        return this.entries();
      }
      /**
       * Find a value for which the supplied fn method returns a truthy value,
       * similar to Array.find().  fn is called as fn(value, key, cache).
       */
      find(fn, getOptions = {}) {
        for (const i2 of this.#indexes()) {
          const v = this.#valList[i2];
          const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0)
            continue;
          if (fn(value, this.#keyList[i2], this)) {
            return this.get(this.#keyList[i2], getOptions);
          }
        }
      }
      /**
       * Call the supplied function on each item in the cache, in order from
       * most recently used to least recently used.  fn is called as
       * fn(value, key, cache).  Does not update age or recenty of use.
       * Does not iterate over stale values.
       */
      forEach(fn, thisp = this) {
        for (const i2 of this.#indexes()) {
          const v = this.#valList[i2];
          const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0)
            continue;
          fn.call(thisp, value, this.#keyList[i2], this);
        }
      }
      /**
       * The same as {@link LRUCache.forEach} but items are iterated over in
       * reverse order.  (ie, less recently used items are iterated over first.)
       */
      rforEach(fn, thisp = this) {
        for (const i2 of this.#rindexes()) {
          const v = this.#valList[i2];
          const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0)
            continue;
          fn.call(thisp, value, this.#keyList[i2], this);
        }
      }
      /**
       * Delete any stale entries. Returns true if anything was removed,
       * false otherwise.
       */
      purgeStale() {
        let deleted = false;
        for (const i2 of this.#rindexes({ allowStale: true })) {
          if (this.#isStale(i2)) {
            this.delete(this.#keyList[i2]);
            deleted = true;
          }
        }
        return deleted;
      }
      /**
       * Get the extended info about a given entry, to get its value, size, and
       * TTL info simultaneously. Like {@link LRUCache#dump}, but just for a
       * single key. Always returns stale values, if their info is found in the
       * cache, so be sure to check for expired TTLs if relevant.
       */
      info(key) {
        const i2 = this.#keyMap.get(key);
        if (i2 === void 0)
          return void 0;
        const v = this.#valList[i2];
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
        if (value === void 0)
          return void 0;
        const entry = { value };
        if (this.#ttls && this.#starts) {
          const ttl = this.#ttls[i2];
          const start = this.#starts[i2];
          if (ttl && start) {
            const remain = ttl - (perf.now() - start);
            entry.ttl = remain;
            entry.start = Date.now();
          }
        }
        if (this.#sizes) {
          entry.size = this.#sizes[i2];
        }
        return entry;
      }
      /**
       * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
       * passed to cache.load()
       */
      dump() {
        const arr = [];
        for (const i2 of this.#indexes({ allowStale: true })) {
          const key = this.#keyList[i2];
          const v = this.#valList[i2];
          const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0 || key === void 0)
            continue;
          const entry = { value };
          if (this.#ttls && this.#starts) {
            entry.ttl = this.#ttls[i2];
            const age = perf.now() - this.#starts[i2];
            entry.start = Math.floor(Date.now() - age);
          }
          if (this.#sizes) {
            entry.size = this.#sizes[i2];
          }
          arr.unshift([key, entry]);
        }
        return arr;
      }
      /**
       * Reset the cache and load in the items in entries in the order listed.
       * Note that the shape of the resulting cache may be different if the
       * same options are not used in both caches.
       */
      load(arr) {
        this.clear();
        for (const [key, entry] of arr) {
          if (entry.start) {
            const age = Date.now() - entry.start;
            entry.start = perf.now() - age;
          }
          this.set(key, entry.value, entry);
        }
      }
      /**
       * Add a value to the cache.
       *
       * Note: if `undefined` is specified as a value, this is an alias for
       * {@link LRUCache#delete}
       */
      set(k, v, setOptions = {}) {
        if (v === void 0) {
          this.delete(k);
          return this;
        }
        const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status } = setOptions;
        let { noUpdateTTL = this.noUpdateTTL } = setOptions;
        const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);
        if (this.maxEntrySize && size > this.maxEntrySize) {
          if (status) {
            status.set = "miss";
            status.maxEntrySizeExceeded = true;
          }
          this.delete(k);
          return this;
        }
        let index = this.#size === 0 ? void 0 : this.#keyMap.get(k);
        if (index === void 0) {
          index = this.#size === 0 ? this.#tail : this.#free.length !== 0 ? this.#free.pop() : this.#size === this.#max ? this.#evict(false) : this.#size;
          this.#keyList[index] = k;
          this.#valList[index] = v;
          this.#keyMap.set(k, index);
          this.#next[this.#tail] = index;
          this.#prev[index] = this.#tail;
          this.#tail = index;
          this.#size++;
          this.#addItemSize(index, size, status);
          if (status)
            status.set = "add";
          noUpdateTTL = false;
        } else {
          this.#moveToTail(index);
          const oldVal = this.#valList[index];
          if (v !== oldVal) {
            if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {
              oldVal.__abortController.abort(new Error("replaced"));
              const { __staleWhileFetching: s } = oldVal;
              if (s !== void 0 && !noDisposeOnSet) {
                if (this.#hasDispose) {
                  this.#dispose?.(s, k, "set");
                }
                if (this.#hasDisposeAfter) {
                  this.#disposed?.push([s, k, "set"]);
                }
              }
            } else if (!noDisposeOnSet) {
              if (this.#hasDispose) {
                this.#dispose?.(oldVal, k, "set");
              }
              if (this.#hasDisposeAfter) {
                this.#disposed?.push([oldVal, k, "set"]);
              }
            }
            this.#removeItemSize(index);
            this.#addItemSize(index, size, status);
            this.#valList[index] = v;
            if (status) {
              status.set = "replace";
              const oldValue = oldVal && this.#isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
              if (oldValue !== void 0)
                status.oldValue = oldValue;
            }
          } else if (status) {
            status.set = "update";
          }
        }
        if (ttl !== 0 && !this.#ttls) {
          this.#initializeTTLTracking();
        }
        if (this.#ttls) {
          if (!noUpdateTTL) {
            this.#setItemTTL(index, ttl, start);
          }
          if (status)
            this.#statusTTL(status, index);
        }
        if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {
          const dt = this.#disposed;
          let task;
          while (task = dt?.shift()) {
            this.#disposeAfter?.(...task);
          }
        }
        return this;
      }
      /**
       * Evict the least recently used item, returning its value or
       * `undefined` if cache is empty.
       */
      pop() {
        try {
          while (this.#size) {
            const val = this.#valList[this.#head];
            this.#evict(true);
            if (this.#isBackgroundFetch(val)) {
              if (val.__staleWhileFetching) {
                return val.__staleWhileFetching;
              }
            } else if (val !== void 0) {
              return val;
            }
          }
        } finally {
          if (this.#hasDisposeAfter && this.#disposed) {
            const dt = this.#disposed;
            let task;
            while (task = dt?.shift()) {
              this.#disposeAfter?.(...task);
            }
          }
        }
      }
      #evict(free) {
        const head = this.#head;
        const k = this.#keyList[head];
        const v = this.#valList[head];
        if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {
          v.__abortController.abort(new Error("evicted"));
        } else if (this.#hasDispose || this.#hasDisposeAfter) {
          if (this.#hasDispose) {
            this.#dispose?.(v, k, "evict");
          }
          if (this.#hasDisposeAfter) {
            this.#disposed?.push([v, k, "evict"]);
          }
        }
        this.#removeItemSize(head);
        if (free) {
          this.#keyList[head] = void 0;
          this.#valList[head] = void 0;
          this.#free.push(head);
        }
        if (this.#size === 1) {
          this.#head = this.#tail = 0;
          this.#free.length = 0;
        } else {
          this.#head = this.#next[head];
        }
        this.#keyMap.delete(k);
        this.#size--;
        return head;
      }
      /**
       * Check if a key is in the cache, without updating the recency of use.
       * Will return false if the item is stale, even though it is technically
       * in the cache.
       *
       * Will not update item age unless
       * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
       */
      has(k, hasOptions = {}) {
        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;
        const index = this.#keyMap.get(k);
        if (index !== void 0) {
          const v = this.#valList[index];
          if (this.#isBackgroundFetch(v) && v.__staleWhileFetching === void 0) {
            return false;
          }
          if (!this.#isStale(index)) {
            if (updateAgeOnHas) {
              this.#updateItemAge(index);
            }
            if (status) {
              status.has = "hit";
              this.#statusTTL(status, index);
            }
            return true;
          } else if (status) {
            status.has = "stale";
            this.#statusTTL(status, index);
          }
        } else if (status) {
          status.has = "miss";
        }
        return false;
      }
      /**
       * Like {@link LRUCache#get} but doesn't update recency or delete stale
       * items.
       *
       * Returns `undefined` if the item is stale, unless
       * {@link LRUCache.OptionsBase.allowStale} is set.
       */
      peek(k, peekOptions = {}) {
        const { allowStale = this.allowStale } = peekOptions;
        const index = this.#keyMap.get(k);
        if (index === void 0 || !allowStale && this.#isStale(index)) {
          return;
        }
        const v = this.#valList[index];
        return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      }
      #backgroundFetch(k, index, options, context) {
        const v = index === void 0 ? void 0 : this.#valList[index];
        if (this.#isBackgroundFetch(v)) {
          return v;
        }
        const ac = new AC();
        const { signal } = options;
        signal?.addEventListener("abort", () => ac.abort(signal.reason), {
          signal: ac.signal
        });
        const fetchOpts = {
          signal: ac.signal,
          options,
          context
        };
        const cb = (v2, updateCache = false) => {
          const { aborted } = ac.signal;
          const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
          if (options.status) {
            if (aborted && !updateCache) {
              options.status.fetchAborted = true;
              options.status.fetchError = ac.signal.reason;
              if (ignoreAbort)
                options.status.fetchAbortIgnored = true;
            } else {
              options.status.fetchResolved = true;
            }
          }
          if (aborted && !ignoreAbort && !updateCache) {
            return fetchFail(ac.signal.reason);
          }
          const bf2 = p;
          if (this.#valList[index] === p) {
            if (v2 === void 0) {
              if (bf2.__staleWhileFetching) {
                this.#valList[index] = bf2.__staleWhileFetching;
              } else {
                this.delete(k);
              }
            } else {
              if (options.status)
                options.status.fetchUpdated = true;
              this.set(k, v2, fetchOpts.options);
            }
          }
          return v2;
        };
        const eb = (er) => {
          if (options.status) {
            options.status.fetchRejected = true;
            options.status.fetchError = er;
          }
          return fetchFail(er);
        };
        const fetchFail = (er) => {
          const { aborted } = ac.signal;
          const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
          const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
          const noDelete = allowStale || options.noDeleteOnFetchRejection;
          const bf2 = p;
          if (this.#valList[index] === p) {
            const del = !noDelete || bf2.__staleWhileFetching === void 0;
            if (del) {
              this.delete(k);
            } else if (!allowStaleAborted) {
              this.#valList[index] = bf2.__staleWhileFetching;
            }
          }
          if (allowStale) {
            if (options.status && bf2.__staleWhileFetching !== void 0) {
              options.status.returnedStale = true;
            }
            return bf2.__staleWhileFetching;
          } else if (bf2.__returned === bf2) {
            throw er;
          }
        };
        const pcall = (res, rej) => {
          const fmp = this.#fetchMethod?.(k, v, fetchOpts);
          if (fmp && fmp instanceof Promise) {
            fmp.then((v2) => res(v2 === void 0 ? void 0 : v2), rej);
          }
          ac.signal.addEventListener("abort", () => {
            if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
              res(void 0);
              if (options.allowStaleOnFetchAbort) {
                res = (v2) => cb(v2, true);
              }
            }
          });
        };
        if (options.status)
          options.status.fetchDispatched = true;
        const p = new Promise(pcall).then(cb, eb);
        const bf = Object.assign(p, {
          __abortController: ac,
          __staleWhileFetching: v,
          __returned: void 0
        });
        if (index === void 0) {
          this.set(k, bf, { ...fetchOpts.options, status: void 0 });
          index = this.#keyMap.get(k);
        } else {
          this.#valList[index] = bf;
        }
        return bf;
      }
      #isBackgroundFetch(p) {
        if (!this.#hasFetchMethod)
          return false;
        const b = p;
        return !!b && b instanceof Promise && b.hasOwnProperty("__staleWhileFetching") && b.__abortController instanceof AC;
      }
      async fetch(k, fetchOptions = {}) {
        const {
          // get options
          allowStale = this.allowStale,
          updateAgeOnGet = this.updateAgeOnGet,
          noDeleteOnStaleGet = this.noDeleteOnStaleGet,
          // set options
          ttl = this.ttl,
          noDisposeOnSet = this.noDisposeOnSet,
          size = 0,
          sizeCalculation = this.sizeCalculation,
          noUpdateTTL = this.noUpdateTTL,
          // fetch exclusive options
          noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
          allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
          ignoreFetchAbort = this.ignoreFetchAbort,
          allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
          context,
          forceRefresh = false,
          status,
          signal
        } = fetchOptions;
        if (!this.#hasFetchMethod) {
          if (status)
            status.fetch = "get";
          return this.get(k, {
            allowStale,
            updateAgeOnGet,
            noDeleteOnStaleGet,
            status
          });
        }
        const options = {
          allowStale,
          updateAgeOnGet,
          noDeleteOnStaleGet,
          ttl,
          noDisposeOnSet,
          size,
          sizeCalculation,
          noUpdateTTL,
          noDeleteOnFetchRejection,
          allowStaleOnFetchRejection,
          allowStaleOnFetchAbort,
          ignoreFetchAbort,
          status,
          signal
        };
        let index = this.#keyMap.get(k);
        if (index === void 0) {
          if (status)
            status.fetch = "miss";
          const p = this.#backgroundFetch(k, index, options, context);
          return p.__returned = p;
        } else {
          const v = this.#valList[index];
          if (this.#isBackgroundFetch(v)) {
            const stale = allowStale && v.__staleWhileFetching !== void 0;
            if (status) {
              status.fetch = "inflight";
              if (stale)
                status.returnedStale = true;
            }
            return stale ? v.__staleWhileFetching : v.__returned = v;
          }
          const isStale = this.#isStale(index);
          if (!forceRefresh && !isStale) {
            if (status)
              status.fetch = "hit";
            this.#moveToTail(index);
            if (updateAgeOnGet) {
              this.#updateItemAge(index);
            }
            if (status)
              this.#statusTTL(status, index);
            return v;
          }
          const p = this.#backgroundFetch(k, index, options, context);
          const hasStale = p.__staleWhileFetching !== void 0;
          const staleVal = hasStale && allowStale;
          if (status) {
            status.fetch = isStale ? "stale" : "refresh";
            if (staleVal && isStale)
              status.returnedStale = true;
          }
          return staleVal ? p.__staleWhileFetching : p.__returned = p;
        }
      }
      /**
       * Return a value from the cache. Will update the recency of the cache
       * entry found.
       *
       * If the key is not found, get() will return `undefined`.
       */
      get(k, getOptions = {}) {
        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = getOptions;
        const index = this.#keyMap.get(k);
        if (index !== void 0) {
          const value = this.#valList[index];
          const fetching = this.#isBackgroundFetch(value);
          if (status)
            this.#statusTTL(status, index);
          if (this.#isStale(index)) {
            if (status)
              status.get = "stale";
            if (!fetching) {
              if (!noDeleteOnStaleGet) {
                this.delete(k);
              }
              if (status && allowStale)
                status.returnedStale = true;
              return allowStale ? value : void 0;
            } else {
              if (status && allowStale && value.__staleWhileFetching !== void 0) {
                status.returnedStale = true;
              }
              return allowStale ? value.__staleWhileFetching : void 0;
            }
          } else {
            if (status)
              status.get = "hit";
            if (fetching) {
              return value.__staleWhileFetching;
            }
            this.#moveToTail(index);
            if (updateAgeOnGet) {
              this.#updateItemAge(index);
            }
            return value;
          }
        } else if (status) {
          status.get = "miss";
        }
      }
      #connect(p, n) {
        this.#prev[n] = p;
        this.#next[p] = n;
      }
      #moveToTail(index) {
        if (index !== this.#tail) {
          if (index === this.#head) {
            this.#head = this.#next[index];
          } else {
            this.#connect(this.#prev[index], this.#next[index]);
          }
          this.#connect(this.#tail, index);
          this.#tail = index;
        }
      }
      /**
       * Deletes a key out of the cache.
       * Returns true if the key was deleted, false otherwise.
       */
      delete(k) {
        let deleted = false;
        if (this.#size !== 0) {
          const index = this.#keyMap.get(k);
          if (index !== void 0) {
            deleted = true;
            if (this.#size === 1) {
              this.clear();
            } else {
              this.#removeItemSize(index);
              const v = this.#valList[index];
              if (this.#isBackgroundFetch(v)) {
                v.__abortController.abort(new Error("deleted"));
              } else if (this.#hasDispose || this.#hasDisposeAfter) {
                if (this.#hasDispose) {
                  this.#dispose?.(v, k, "delete");
                }
                if (this.#hasDisposeAfter) {
                  this.#disposed?.push([v, k, "delete"]);
                }
              }
              this.#keyMap.delete(k);
              this.#keyList[index] = void 0;
              this.#valList[index] = void 0;
              if (index === this.#tail) {
                this.#tail = this.#prev[index];
              } else if (index === this.#head) {
                this.#head = this.#next[index];
              } else {
                const pi = this.#prev[index];
                this.#next[pi] = this.#next[index];
                const ni = this.#next[index];
                this.#prev[ni] = this.#prev[index];
              }
              this.#size--;
              this.#free.push(index);
            }
          }
        }
        if (this.#hasDisposeAfter && this.#disposed?.length) {
          const dt = this.#disposed;
          let task;
          while (task = dt?.shift()) {
            this.#disposeAfter?.(...task);
          }
        }
        return deleted;
      }
      /**
       * Clear the cache entirely, throwing away all values.
       */
      clear() {
        for (const index of this.#rindexes({ allowStale: true })) {
          const v = this.#valList[index];
          if (this.#isBackgroundFetch(v)) {
            v.__abortController.abort(new Error("deleted"));
          } else {
            const k = this.#keyList[index];
            if (this.#hasDispose) {
              this.#dispose?.(v, k, "delete");
            }
            if (this.#hasDisposeAfter) {
              this.#disposed?.push([v, k, "delete"]);
            }
          }
        }
        this.#keyMap.clear();
        this.#valList.fill(void 0);
        this.#keyList.fill(void 0);
        if (this.#ttls && this.#starts) {
          this.#ttls.fill(0);
          this.#starts.fill(0);
        }
        if (this.#sizes) {
          this.#sizes.fill(0);
        }
        this.#head = 0;
        this.#tail = 0;
        this.#free.length = 0;
        this.#calculatedSize = 0;
        this.#size = 0;
        if (this.#hasDisposeAfter && this.#disposed) {
          const dt = this.#disposed;
          let task;
          while (task = dt?.shift()) {
            this.#disposeAfter?.(...task);
          }
        }
      }
    };
    exports.LRUCache = LRUCache;
  }
});

// node_modules/@comunica/expression-evaluator/lib/expressions/Expressions.js
var require_Expressions = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/expressions/Expressions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.asTermType = exports.ExpressionType = void 0;
    var ExpressionType;
    (function(ExpressionType2) {
      ExpressionType2["Aggregate"] = "aggregate";
      ExpressionType2["Existence"] = "existence";
      ExpressionType2["Named"] = "named";
      ExpressionType2["Operator"] = "operator";
      ExpressionType2["SpecialOperator"] = "specialOperator";
      ExpressionType2["Term"] = "term";
      ExpressionType2["Variable"] = "variable";
      ExpressionType2["AsyncExtension"] = "asyncExtension";
      ExpressionType2["SyncExtension"] = "syncExtension";
    })(ExpressionType || (exports.ExpressionType = ExpressionType = {}));
    function asTermType(type) {
      if (type === "namedNode" || type === "literal" || type === "blankNode" || type === "quad") {
        return type;
      }
      return void 0;
    }
    exports.asTermType = asTermType;
  }
});

// node_modules/@comunica/expression-evaluator/lib/expressions/Variable.js
var require_Variable2 = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/expressions/Variable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Variable = void 0;
    var Expressions_1 = require_Expressions();
    var Variable2 = class {
      constructor(name) {
        this.expressionType = Expressions_1.ExpressionType.Variable;
        this.name = name;
      }
    };
    exports.Variable = Variable2;
  }
});

// node_modules/@comunica/expression-evaluator/lib/util/Consts.js
var require_Consts = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/util/Consts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NamedOperators = exports.SetFunctions = exports.SetFunction = exports.Operators = exports.SpecialOperators = exports.RegularOperators = exports.SpecialOperator = exports.RegularOperator = exports.TypeURL = exports.TypeAlias = void 0;
    var TypeAlias;
    (function(TypeAlias2) {
      TypeAlias2["SPARQL_NUMERIC"] = "SPARQL_NUMERIC";
      TypeAlias2["SPARQL_STRINGLY"] = "SPARQL_STRINGLY";
    })(TypeAlias || (exports.TypeAlias = TypeAlias = {}));
    var TypeURL;
    (function(TypeURL2) {
      TypeURL2["XSD_ANY_URI"] = "http://www.w3.org/2001/XMLSchema#anyURI";
      TypeURL2["XSD_STRING"] = "http://www.w3.org/2001/XMLSchema#string";
      TypeURL2["RDF_LANG_STRING"] = "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString";
      TypeURL2["XSD_BOOLEAN"] = "http://www.w3.org/2001/XMLSchema#boolean";
      TypeURL2["XSD_DATE_TIME"] = "http://www.w3.org/2001/XMLSchema#dateTime";
      TypeURL2["XSD_DATE_TIME_STAMP"] = "http://www.w3.org/2001/XMLSchema#dateTimeStamp";
      TypeURL2["XSD_DATE"] = "http://www.w3.org/2001/XMLSchema#date";
      TypeURL2["XSD_G_MONTH"] = "http://www.w3.org/2001/XMLSchema#gMonth";
      TypeURL2["XSD_G_MONTHDAY"] = "http://www.w3.org/2001/XMLSchema#gMonthDay";
      TypeURL2["XSD_G_YEAR"] = "http://www.w3.org/2001/XMLSchema#gYear";
      TypeURL2["XSD_G_YEAR_MONTH"] = "http://www.w3.org/2001/XMLSchema#gYearMonth";
      TypeURL2["XSD_TIME"] = "http://www.w3.org/2001/XMLSchema#time";
      TypeURL2["XSD_G_DAY"] = "http://www.w3.org/2001/XMLSchema#gDay";
      TypeURL2["XSD_DECIMAL"] = "http://www.w3.org/2001/XMLSchema#decimal";
      TypeURL2["XSD_FLOAT"] = "http://www.w3.org/2001/XMLSchema#float";
      TypeURL2["XSD_DOUBLE"] = "http://www.w3.org/2001/XMLSchema#double";
      TypeURL2["XSD_INTEGER"] = "http://www.w3.org/2001/XMLSchema#integer";
      TypeURL2["XSD_NON_POSITIVE_INTEGER"] = "http://www.w3.org/2001/XMLSchema#nonPositiveInteger";
      TypeURL2["XSD_NEGATIVE_INTEGER"] = "http://www.w3.org/2001/XMLSchema#negativeInteger";
      TypeURL2["XSD_LONG"] = "http://www.w3.org/2001/XMLSchema#long";
      TypeURL2["XSD_INT"] = "http://www.w3.org/2001/XMLSchema#int";
      TypeURL2["XSD_SHORT"] = "http://www.w3.org/2001/XMLSchema#short";
      TypeURL2["XSD_BYTE"] = "http://www.w3.org/2001/XMLSchema#byte";
      TypeURL2["XSD_NON_NEGATIVE_INTEGER"] = "http://www.w3.org/2001/XMLSchema#nonNegativeInteger";
      TypeURL2["XSD_POSITIVE_INTEGER"] = "http://www.w3.org/2001/XMLSchema#positiveInteger";
      TypeURL2["XSD_UNSIGNED_LONG"] = "http://www.w3.org/2001/XMLSchema#unsignedLong";
      TypeURL2["XSD_UNSIGNED_INT"] = "http://www.w3.org/2001/XMLSchema#unsignedInt";
      TypeURL2["XSD_UNSIGNED_SHORT"] = "http://www.w3.org/2001/XMLSchema#unsignedShort";
      TypeURL2["XSD_UNSIGNED_BYTE"] = "http://www.w3.org/2001/XMLSchema#unsignedByte";
      TypeURL2["XSD_NORMALIZED_STRING"] = "http://www.w3.org/2001/XMLSchema#normalizedString";
      TypeURL2["XSD_TOKEN"] = "http://www.w3.org/2001/XMLSchema#token";
      TypeURL2["XSD_LANGUAGE"] = "http://www.w3.org/2001/XMLSchema#language";
      TypeURL2["XSD_NM_TOKEN"] = "http://www.w3.org/2001/XMLSchema#NMTOKEN";
      TypeURL2["XSD_NAME"] = "http://www.w3.org/2001/XMLSchema#name";
      TypeURL2["XSD_NC_NAME"] = "http://www.w3.org/2001/XMLSchema#NCName";
      TypeURL2["XSD_ENTITY"] = "http://www.w3.org/2001/XMLSchema#ENTITY";
      TypeURL2["XSD_ID"] = "http://www.w3.org/2001/XMLSchema#ID";
      TypeURL2["XSD_ID_REF"] = "http://www.w3.org/2001/XMLSchema#IDREF";
      TypeURL2["XSD_DURATION"] = "http://www.w3.org/2001/XMLSchema#duration";
      TypeURL2["XSD_YEAR_MONTH_DURATION"] = "http://www.w3.org/2001/XMLSchema#yearMonthDuration";
      TypeURL2["XSD_DAY_TIME_DURATION"] = "http://www.w3.org/2001/XMLSchema#dayTimeDuration";
    })(TypeURL || (exports.TypeURL = TypeURL = {}));
    var RegularOperator;
    (function(RegularOperator2) {
      RegularOperator2["NOT"] = "!";
      RegularOperator2["UMINUS"] = "uminus";
      RegularOperator2["UPLUS"] = "uplus";
      RegularOperator2["EQUAL"] = "=";
      RegularOperator2["NOT_EQUAL"] = "!=";
      RegularOperator2["LT"] = "<";
      RegularOperator2["GT"] = ">";
      RegularOperator2["LTE"] = "<=";
      RegularOperator2["GTE"] = ">=";
      RegularOperator2["MULTIPLICATION"] = "*";
      RegularOperator2["DIVISION"] = "/";
      RegularOperator2["ADDITION"] = "+";
      RegularOperator2["SUBTRACTION"] = "-";
      RegularOperator2["IS_IRI"] = "isiri";
      RegularOperator2["IS_URI"] = "isuri";
      RegularOperator2["IS_BLANK"] = "isblank";
      RegularOperator2["IS_LITERAL"] = "isliteral";
      RegularOperator2["IS_NUMERIC"] = "isnumeric";
      RegularOperator2["STR"] = "str";
      RegularOperator2["LANG"] = "lang";
      RegularOperator2["DATATYPE"] = "datatype";
      RegularOperator2["IRI"] = "iri";
      RegularOperator2["URI"] = "uri";
      RegularOperator2["STRDT"] = "strdt";
      RegularOperator2["STRLANG"] = "strlang";
      RegularOperator2["UUID"] = "uuid";
      RegularOperator2["STRUUID"] = "struuid";
      RegularOperator2["STRLEN"] = "strlen";
      RegularOperator2["SUBSTR"] = "substr";
      RegularOperator2["UCASE"] = "ucase";
      RegularOperator2["LCASE"] = "lcase";
      RegularOperator2["STRSTARTS"] = "strstarts";
      RegularOperator2["STRENDS"] = "strends";
      RegularOperator2["CONTAINS"] = "contains";
      RegularOperator2["STRBEFORE"] = "strbefore";
      RegularOperator2["STRAFTER"] = "strafter";
      RegularOperator2["ENCODE_FOR_URI"] = "encode_for_uri";
      RegularOperator2["LANG_MATCHES"] = "langmatches";
      RegularOperator2["REGEX"] = "regex";
      RegularOperator2["REPLACE"] = "replace";
      RegularOperator2["ABS"] = "abs";
      RegularOperator2["ROUND"] = "round";
      RegularOperator2["CEIL"] = "ceil";
      RegularOperator2["FLOOR"] = "floor";
      RegularOperator2["RAND"] = "rand";
      RegularOperator2["NOW"] = "now";
      RegularOperator2["YEAR"] = "year";
      RegularOperator2["MONTH"] = "month";
      RegularOperator2["DAY"] = "day";
      RegularOperator2["HOURS"] = "hours";
      RegularOperator2["MINUTES"] = "minutes";
      RegularOperator2["SECONDS"] = "seconds";
      RegularOperator2["TIMEZONE"] = "timezone";
      RegularOperator2["TZ"] = "tz";
      RegularOperator2["MD5"] = "md5";
      RegularOperator2["SHA1"] = "sha1";
      RegularOperator2["SHA256"] = "sha256";
      RegularOperator2["SHA384"] = "sha384";
      RegularOperator2["SHA512"] = "sha512";
      RegularOperator2["TRIPLE"] = "triple";
      RegularOperator2["SUBJECT"] = "subject";
      RegularOperator2["PREDICATE"] = "predicate";
      RegularOperator2["OBJECT"] = "object";
      RegularOperator2["IS_TRIPLE"] = "istriple";
    })(RegularOperator || (exports.RegularOperator = RegularOperator = {}));
    var SpecialOperator;
    (function(SpecialOperator2) {
      SpecialOperator2["BOUND"] = "bound";
      SpecialOperator2["IF"] = "if";
      SpecialOperator2["COALESCE"] = "coalesce";
      SpecialOperator2["LOGICAL_OR"] = "||";
      SpecialOperator2["LOGICAL_AND"] = "&&";
      SpecialOperator2["SAME_TERM"] = "sameterm";
      SpecialOperator2["IN"] = "in";
      SpecialOperator2["NOT_IN"] = "notin";
      SpecialOperator2["CONCAT"] = "concat";
      SpecialOperator2["BNODE"] = "bnode";
    })(SpecialOperator || (exports.SpecialOperator = SpecialOperator = {}));
    exports.RegularOperators = new Set(Object.values(RegularOperator));
    exports.SpecialOperators = new Set(Object.values(SpecialOperator));
    exports.Operators = /* @__PURE__ */ new Set([...exports.RegularOperators, ...exports.SpecialOperators]);
    var SetFunction;
    (function(SetFunction2) {
      SetFunction2["COUNT"] = "count";
      SetFunction2["SUM"] = "sum";
      SetFunction2["MIN"] = "min";
      SetFunction2["MAX"] = "max";
      SetFunction2["AVG"] = "avg";
      SetFunction2["GROUP_CONCAT"] = "group_concat";
      SetFunction2["SAMPLE"] = "sample";
    })(SetFunction || (exports.SetFunction = SetFunction = {}));
    exports.SetFunctions = new Set(Object.values(SetFunction));
    exports.NamedOperators = /* @__PURE__ */ new Set([
      TypeURL.XSD_STRING,
      TypeURL.XSD_FLOAT,
      TypeURL.XSD_DOUBLE,
      TypeURL.XSD_DECIMAL,
      TypeURL.XSD_INTEGER,
      TypeURL.XSD_DATE_TIME,
      TypeURL.XSD_DATE,
      TypeURL.XSD_BOOLEAN,
      TypeURL.XSD_TIME,
      TypeURL.XSD_DURATION,
      TypeURL.XSD_DAY_TIME_DURATION,
      TypeURL.XSD_YEAR_MONTH_DURATION
    ]);
  }
});

// node_modules/@comunica/expression-evaluator/lib/util/Errors.js
var require_Errors = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/util/Errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NoExistenceHook = exports.NoAggregator = exports.ExtensionFunctionError = exports.UnknownNamedOperator = exports.UnknownOperator = exports.InvalidTermType = exports.InvalidExpressionType = exports.InvalidExpression = exports.InvalidArity = exports.UnexpectedError = exports.ParseError = exports.EmptyAggregateError = exports.IncompatibleLanguageOperation = exports.InvalidTimezoneCall = exports.CastError = exports.InvalidCompareArgumentTypes = exports.InvalidArgumentTypes = exports.InError = exports.CoalesceError = exports.RDFEqualTypeError = exports.EBVCoercionError = exports.UnboundVariableError = exports.InvalidLexicalForm = exports.isExpressionError = exports.ExpressionError = void 0;
    var ExpressionError = class extends Error {
    };
    exports.ExpressionError = ExpressionError;
    function isExpressionError(error2) {
      return error2 instanceof ExpressionError;
    }
    exports.isExpressionError = isExpressionError;
    var InvalidLexicalForm = class extends ExpressionError {
      constructor(arg) {
        super(`Invalid lexical form '${pp(arg)}'`);
        this.arg = arg;
      }
    };
    exports.InvalidLexicalForm = InvalidLexicalForm;
    var UnboundVariableError = class extends ExpressionError {
      constructor(variable, bindings) {
        super(`Unbound variable '${pp(variable)}'`);
        this.variable = variable;
        this.bindings = bindings;
      }
    };
    exports.UnboundVariableError = UnboundVariableError;
    var EBVCoercionError = class extends ExpressionError {
      constructor(arg) {
        super(`Cannot coerce term to EBV '${pp(arg)}'`);
        this.arg = arg;
      }
    };
    exports.EBVCoercionError = EBVCoercionError;
    var RDFEqualTypeError = class extends ExpressionError {
      constructor(args) {
        super("Equality test for literals with unsupported datatypes");
        this.args = args;
      }
    };
    exports.RDFEqualTypeError = RDFEqualTypeError;
    var CoalesceError = class extends ExpressionError {
      constructor(errors) {
        super("All COALESCE arguments threw errors");
        this.errors = errors;
      }
    };
    exports.CoalesceError = CoalesceError;
    var InError = class extends ExpressionError {
      constructor(errors) {
        super(`Some argument to IN errorred and none where equal. ${errors.map((err) => `(${err.toString()}) `).join("and ")}`);
        this.errors = errors;
      }
    };
    exports.InError = InError;
    var InvalidArgumentTypes = class extends ExpressionError {
      constructor(args, op) {
        super(`Argument types not valid for operator: '${pp(op)}' with '${pp(args)}`);
        this.args = args;
        this.op = op;
      }
    };
    exports.InvalidArgumentTypes = InvalidArgumentTypes;
    var InvalidCompareArgumentTypes = class extends ExpressionError {
      constructor(arg0, arg1) {
        super(`Compared argument types are supported: '${arg0.termType}' and '${arg1.termType}'`);
        this.arg0 = arg0;
        this.arg1 = arg1;
      }
    };
    exports.InvalidCompareArgumentTypes = InvalidCompareArgumentTypes;
    var CastError = class extends ExpressionError {
      constructor(arg, cast) {
        super(`Invalid cast: '${pp(arg)}' to '${pp(cast)}'`);
        this.arg = arg;
      }
    };
    exports.CastError = CastError;
    var InvalidTimezoneCall = class extends ExpressionError {
      constructor(dateString) {
        super(`TIMEZONE call on ${dateString} which has no timezone`);
        this.dateString = dateString;
      }
    };
    exports.InvalidTimezoneCall = InvalidTimezoneCall;
    var IncompatibleLanguageOperation = class extends ExpressionError {
      constructor(arg1, arg2) {
        super(`Operation on incompatible language literals '${pp(arg1)}' and '${pp(arg2)}'`);
        this.arg1 = arg1;
        this.arg2 = arg2;
      }
    };
    exports.IncompatibleLanguageOperation = IncompatibleLanguageOperation;
    var EmptyAggregateError = class extends ExpressionError {
      constructor() {
        super("Empty aggregate expression");
      }
    };
    exports.EmptyAggregateError = EmptyAggregateError;
    var ParseError = class extends ExpressionError {
      constructor(str, type) {
        super(`Failed to parse ${str} as ${type}.`);
      }
    };
    exports.ParseError = ParseError;
    var UnexpectedError = class extends Error {
      constructor(message, payload) {
        super(`Programmer Error '${message}'`);
        this.payload = payload;
      }
    };
    exports.UnexpectedError = UnexpectedError;
    var InvalidArity = class extends Error {
      constructor(args, op) {
        super(`The number of args does not match the arity of the operator '${pp(op)}'.`);
        this.args = args;
        this.op = op;
      }
    };
    exports.InvalidArity = InvalidArity;
    var InvalidExpression = class extends Error {
      constructor(expr) {
        super(`Invalid SPARQL Expression '${pp(expr)}'`);
      }
    };
    exports.InvalidExpression = InvalidExpression;
    var InvalidExpressionType = class extends Error {
      constructor(expr) {
        super(`Invalid expression type for SPARQL Expression '${pp(expr)}'`);
        this.expr = expr;
      }
    };
    exports.InvalidExpressionType = InvalidExpressionType;
    var InvalidTermType = class extends Error {
      constructor(term) {
        super(`Invalid term type for term '${pp(term)}'`);
        this.term = term;
      }
    };
    exports.InvalidTermType = InvalidTermType;
    var UnknownOperator = class extends Error {
      constructor(name) {
        super(`Unknown operator: '${pp(name)}`);
      }
    };
    exports.UnknownOperator = UnknownOperator;
    var UnknownNamedOperator = class extends Error {
      constructor(name) {
        super(`Unknown named operator: '${pp(name)}'`);
      }
    };
    exports.UnknownNamedOperator = UnknownNamedOperator;
    var ExtensionFunctionError = class extends Error {
      constructor(name, functionError) {
        if (functionError instanceof Error) {
          super(`Error thrown in ${name}: ${functionError.message}${functionError.stack ? `
${functionError.stack}` : ""}`);
        } else {
          super(`Error thrown in ${name}`);
        }
      }
    };
    exports.ExtensionFunctionError = ExtensionFunctionError;
    var NoAggregator = class extends Error {
      constructor(name) {
        super(`Aggregate expression ${pp(name)} found, but no aggregate hook provided.`);
      }
    };
    exports.NoAggregator = NoAggregator;
    var NoExistenceHook = class extends Error {
      constructor() {
        super("EXISTS found, but no existence hook provided.");
      }
    };
    exports.NoExistenceHook = NoExistenceHook;
    function pp(object) {
      return JSON.stringify(object);
    }
  }
});

// node_modules/@comunica/expression-evaluator/lib/util/DateTimeHelpers.js
var require_DateTimeHelpers = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/util/DateTimeHelpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extractTimeZone = exports.extractRawTimeZone = exports.dayTimeDurationsToSeconds = exports.yearMonthDurationsToMonths = exports.trimToDayTimeDuration = exports.trimToYearMonthDuration = exports.toUTCDate = exports.toJSDate = exports.negateDuration = exports.toDateTimeRepresentation = exports.defaultedDateTimeRepresentation = exports.simplifyDurationRepresentation = exports.defaultedDurationRepresentation = exports.defaultedYearMonthDurationRepresentation = exports.defaultedDayTimeDurationRepresentation = void 0;
    function defaultedDayTimeDurationRepresentation(rep) {
      return {
        day: rep.day || 0,
        hours: rep.hours || 0,
        minutes: rep.minutes || 0,
        seconds: rep.seconds || 0
      };
    }
    exports.defaultedDayTimeDurationRepresentation = defaultedDayTimeDurationRepresentation;
    function defaultedYearMonthDurationRepresentation(rep) {
      return {
        year: rep.year || 0,
        month: rep.month || 0
      };
    }
    exports.defaultedYearMonthDurationRepresentation = defaultedYearMonthDurationRepresentation;
    function defaultedDurationRepresentation(rep) {
      return {
        ...defaultedDayTimeDurationRepresentation(rep),
        ...defaultedYearMonthDurationRepresentation(rep)
      };
    }
    exports.defaultedDurationRepresentation = defaultedDurationRepresentation;
    function simplifyDurationRepresentation(rep) {
      const temp = defaultedDurationRepresentation(rep);
      const res = {};
      const years = temp.year + Math.trunc(temp.month / 12);
      if (years) {
        res.year = years;
        temp.month %= 12;
      }
      if (temp.month) {
        res.month = temp.month;
      }
      const days = temp.day + Math.trunc(temp.hours / 24) + Math.trunc(temp.minutes / (24 * 60)) + Math.trunc(temp.seconds / (24 * 60 * 60));
      if (days) {
        res.day = days;
        temp.hours %= 24;
        temp.minutes %= 24 * 60;
        temp.seconds %= 24 * 60 * 60;
      }
      const hours = temp.hours + Math.trunc(temp.minutes / 60) + Math.trunc(temp.seconds / (60 * 60));
      if (hours) {
        res.hours = hours;
        temp.minutes %= 60;
        temp.seconds %= 60 * 60;
      }
      const minutes = temp.minutes + Math.trunc(temp.seconds / 60);
      if (minutes) {
        res.minutes = minutes;
        temp.seconds %= 60;
      }
      if (temp.seconds) {
        res.seconds = temp.seconds;
      }
      return res;
    }
    exports.simplifyDurationRepresentation = simplifyDurationRepresentation;
    function defaultedDateTimeRepresentation(rep) {
      return {
        ...rep,
        day: rep.day || 1,
        hours: rep.hours || 0,
        month: rep.month || 1,
        year: rep.year || 0,
        seconds: rep.seconds || 0,
        minutes: rep.minutes || 0
      };
    }
    exports.defaultedDateTimeRepresentation = defaultedDateTimeRepresentation;
    function toDateTimeRepresentation({ date, timeZone }) {
      return {
        year: date.getFullYear(),
        month: date.getMonth() + 1,
        day: date.getDate(),
        hours: date.getHours(),
        minutes: date.getMinutes(),
        seconds: date.getSeconds(),
        zoneHours: timeZone.zoneHours,
        zoneMinutes: timeZone.zoneMinutes
      };
    }
    exports.toDateTimeRepresentation = toDateTimeRepresentation;
    function negateDuration(dur) {
      return {
        year: dur.year !== void 0 ? -1 * dur.year : void 0,
        month: dur.month !== void 0 ? -1 * dur.month : void 0,
        day: dur.day !== void 0 ? -1 * dur.day : void 0,
        hours: dur.hours !== void 0 ? -1 * dur.hours : void 0,
        minutes: dur.minutes !== void 0 ? -1 * dur.minutes : void 0,
        seconds: dur.seconds !== void 0 ? -1 * dur.seconds : void 0
      };
    }
    exports.negateDuration = negateDuration;
    function toJSDate(date) {
      const res = new Date(date.year, date.month - 1, date.day, date.hours, date.minutes, Math.trunc(date.seconds), date.seconds % 1 * 1e3);
      if (0 <= date.year && date.year < 100) {
        const jumpDeltaOfDate = 1900;
        res.setFullYear(res.getFullYear() - jumpDeltaOfDate);
      }
      return res;
    }
    exports.toJSDate = toJSDate;
    function toUTCDate(date, defaultTimezone) {
      const localTime = toJSDate(defaultedDateTimeRepresentation(date));
      const minutesCorrectionLocal = localTime.getTimezoneOffset();
      const hourCorrectionUTC = date.zoneHours === void 0 ? defaultTimezone.zoneHours : date.zoneHours;
      const minutesCorrectionUTC = date.zoneMinutes === void 0 ? defaultTimezone.zoneMinutes : date.zoneMinutes;
      return new Date(localTime.getTime() - (minutesCorrectionLocal + hourCorrectionUTC * 60 + minutesCorrectionUTC) * 60 * 1e3);
    }
    exports.toUTCDate = toUTCDate;
    function trimToYearMonthDuration(dur) {
      return {
        year: dur.year,
        month: dur.month
      };
    }
    exports.trimToYearMonthDuration = trimToYearMonthDuration;
    function trimToDayTimeDuration(dur) {
      return {
        day: dur.day,
        hours: dur.hours,
        minutes: dur.minutes,
        seconds: dur.seconds
      };
    }
    exports.trimToDayTimeDuration = trimToDayTimeDuration;
    function yearMonthDurationsToMonths(dur) {
      return dur.year * 12 + dur.month;
    }
    exports.yearMonthDurationsToMonths = yearMonthDurationsToMonths;
    function dayTimeDurationsToSeconds(dur) {
      return ((dur.day * 24 + dur.hours) * 60 + dur.minutes) * 60 + dur.seconds;
    }
    exports.dayTimeDurationsToSeconds = dayTimeDurationsToSeconds;
    function extractRawTimeZone(zoneContained) {
      const extraction = /(Z|([+-]\d\d:\d\d))?$/u.exec(zoneContained);
      return extraction[0];
    }
    exports.extractRawTimeZone = extractRawTimeZone;
    function extractTimeZone(date) {
      return {
        zoneHours: date.getTimezoneOffset() / 60,
        zoneMinutes: date.getTimezoneOffset() % 60
      };
    }
    exports.extractTimeZone = extractTimeZone;
  }
});

// node_modules/@comunica/expression-evaluator/lib/util/SpecAlgos.js
var require_SpecAlgos = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/util/SpecAlgos.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.elapsedDuration = exports.addDurationToDateTime = exports.maximumDayInMonthFor = void 0;
    var DateTimeHelpers_1 = require_DateTimeHelpers();
    function fDiv(arg, high, low = 0) {
      const first = arg - low;
      const second = high - low;
      const intDiv = Math.floor(first / second);
      return { intDiv, remainder: arg - intDiv * second };
    }
    function maximumDayInMonthFor(yearValue, monthValue) {
      const { intDiv: additionalYears, remainder: month } = fDiv(monthValue, 13, 1);
      const year = yearValue + additionalYears;
      if ([1, 3, 5, 7, 8, 10, 12].includes(month)) {
        return 31;
      }
      if ([4, 6, 9, 11].includes(month)) {
        return 30;
      }
      if (month === 2 && (fDiv(year, 400).remainder === 0 || fDiv(year, 100).remainder !== 0 && fDiv(year, 4).remainder === 0)) {
        return 29;
      }
      return 28;
    }
    exports.maximumDayInMonthFor = maximumDayInMonthFor;
    function addDurationToDateTime(date, duration) {
      const newDate = { ...date };
      let tempDiv = fDiv(date.month + duration.month, 13, 1);
      newDate.month = tempDiv.remainder;
      newDate.year = date.year + duration.year + tempDiv.intDiv;
      tempDiv = fDiv(date.seconds + duration.seconds, 60);
      newDate.seconds = tempDiv.remainder;
      tempDiv = fDiv(date.minutes + duration.minutes + tempDiv.intDiv, 60);
      newDate.minutes = tempDiv.remainder;
      tempDiv = fDiv(date.hours + duration.hours + tempDiv.intDiv, 24);
      newDate.hours = tempDiv.remainder;
      newDate.day = date.day + duration.day + tempDiv.intDiv;
      while (true) {
        let carry;
        if (newDate.day < 1) {
          newDate.day += maximumDayInMonthFor(newDate.year, newDate.month - 1);
          carry = -1;
        } else if (newDate.day > maximumDayInMonthFor(newDate.year, newDate.month)) {
          newDate.day -= maximumDayInMonthFor(newDate.year, newDate.month);
          carry = 1;
        } else {
          break;
        }
        tempDiv = fDiv(newDate.month + carry, 13, 1);
        newDate.month = tempDiv.remainder;
        newDate.year += tempDiv.intDiv;
      }
      return newDate;
    }
    exports.addDurationToDateTime = addDurationToDateTime;
    function elapsedDuration(first, second, defaultTimeZone) {
      const d1 = (0, DateTimeHelpers_1.toUTCDate)(first, defaultTimeZone);
      const d2 = (0, DateTimeHelpers_1.toUTCDate)(second, defaultTimeZone);
      const diff = d1.getTime() - d2.getTime();
      return {
        day: Math.floor(diff / (1e3 * 60 * 60 * 24)),
        hours: Math.floor(diff % (1e3 * 60 * 60 * 24) / (1e3 * 60 * 60)),
        minutes: Math.floor(diff % (1e3 * 60 * 60) / (1e3 * 60)),
        seconds: diff % (1e3 * 60)
      };
    }
    exports.elapsedDuration = elapsedDuration;
  }
});

// node_modules/@comunica/expression-evaluator/lib/util/Parsing.js
var require_Parsing = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/util/Parsing.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseDayTimeDuration = exports.parseYearMonthDuration = exports.parseDuration = exports.parseTime = exports.parseDate = exports.parseDateTime = exports.parseXSDInteger = exports.parseXSDDecimal = exports.parseXSDFloat = void 0;
    var DateTimeHelpers_1 = require_DateTimeHelpers();
    var Errors_1 = require_Errors();
    var SpecAlgos_1 = require_SpecAlgos();
    function parseXSDFloat(value) {
      const numb = Number(value);
      if (Number.isNaN(numb)) {
        if (value === "NaN") {
          return Number.NaN;
        }
        if (value === "INF" || value === "+INF") {
          return Number.POSITIVE_INFINITY;
        }
        if (value === "-INF") {
          return Number.NEGATIVE_INFINITY;
        }
        return void 0;
      }
      return numb;
    }
    exports.parseXSDFloat = parseXSDFloat;
    function parseXSDDecimal(value) {
      const numb = Number(value);
      return Number.isNaN(numb) ? void 0 : numb;
    }
    exports.parseXSDDecimal = parseXSDDecimal;
    function parseXSDInteger(value) {
      const numb = Number.parseInt(value, 10);
      return Number.isNaN(numb) ? void 0 : numb;
    }
    exports.parseXSDInteger = parseXSDInteger;
    function parseDateTime(dateTimeStr) {
      const [date, time] = dateTimeStr.split("T");
      return { ...parseDate(date), ...__parseTime(time) };
    }
    exports.parseDateTime = parseDateTime;
    function parseTimeZone(timeZoneStr) {
      if (timeZoneStr === "") {
        return { zoneHours: void 0, zoneMinutes: void 0 };
      }
      if (timeZoneStr === "Z") {
        return { zoneHours: 0, zoneMinutes: 0 };
      }
      const timeZoneStrings = timeZoneStr.replace(/^([+|-])(\d\d):(\d\d)$/gu, "$11!$2!$3").split("!");
      const timeZone = timeZoneStrings.map((str) => Number(str));
      return {
        zoneHours: timeZone[0] * timeZone[1],
        zoneMinutes: timeZone[0] * timeZone[2]
      };
    }
    function parseDate(dateStr) {
      const formatted = dateStr.replace(/^(-)?([123456789]*\d{4})-(\d\d)-(\d\d)(Z|([+-]\d\d:\d\d))?$/gu, "$11!$2!$3!$4!$5");
      if (formatted === dateStr) {
        throw new Errors_1.ParseError(dateStr, "date");
      }
      const dateStrings = formatted.split("!");
      const date = dateStrings.slice(0, -1).map((str) => Number(str));
      const res = {
        year: date[0] * date[1],
        month: date[2],
        day: date[3],
        ...parseTimeZone(dateStrings[4])
      };
      if (!(1 <= res.month && res.month <= 12) || !(1 <= res.day && res.day <= (0, SpecAlgos_1.maximumDayInMonthFor)(res.year, res.month))) {
        throw new Errors_1.ParseError(dateStr, "date");
      }
      return res;
    }
    exports.parseDate = parseDate;
    function __parseTime(timeStr) {
      const formatted = timeStr.replace(/^(\d\d):(\d\d):(\d\d(\.\d+)?)(Z|([+-]\d\d:\d\d))?$/gu, "$1!$2!$3!$5");
      if (formatted === timeStr) {
        throw new Errors_1.ParseError(timeStr, "time");
      }
      const timeStrings = formatted.split("!");
      const time = timeStrings.slice(0, -1).map((str) => Number(str));
      const res = {
        hours: time[0],
        minutes: time[1],
        seconds: time[2],
        ...parseTimeZone(timeStrings[3])
      };
      if (res.seconds >= 60 || res.minutes >= 60 || res.hours > 24 || res.hours === 24 && (res.minutes !== 0 || res.seconds !== 0)) {
        throw new Errors_1.ParseError(timeStr, "time");
      }
      return res;
    }
    function parseTime(timeStr) {
      const res = __parseTime(timeStr);
      res.hours %= 24;
      return res;
    }
    exports.parseTime = parseTime;
    function parseDuration(durationStr) {
      const [dayNotation, timeNotation] = durationStr.split("T");
      const formattedDayDur = dayNotation.replace(/^(-)?P(\d+Y)?(\d+M)?(\d+D)?$/gu, "$11S!$2!$3!$4");
      if (formattedDayDur === dayNotation) {
        throw new Errors_1.ParseError(durationStr, "duration");
      }
      const durationStrings = formattedDayDur.split("!");
      if (timeNotation !== void 0) {
        const formattedTimeDur = timeNotation.replace(/^(\d+H)?(\d+M)?(\d+(\.\d+)?S)?$/gu, "$1!$2!$3");
        if (timeNotation === "" || timeNotation === formattedTimeDur) {
          throw new Errors_1.ParseError(durationStr, "duration");
        }
        durationStrings.push(...formattedTimeDur.split("!"));
      }
      const duration = durationStrings.map((str) => str.slice(0, -1));
      if (!duration.slice(1).some((item) => item)) {
        throw new Errors_1.ParseError(durationStr, "duration");
      }
      const sign = Number(duration[0]);
      return (0, DateTimeHelpers_1.simplifyDurationRepresentation)({
        year: duration[1] ? sign * Number(duration[1]) : void 0,
        month: duration[2] ? sign * Number(duration[2]) : void 0,
        day: duration[3] ? sign * Number(duration[3]) : void 0,
        hours: duration[4] ? sign * Number(duration[4]) : void 0,
        minutes: duration[5] ? sign * Number(duration[5]) : void 0,
        seconds: duration[6] ? sign * Number(duration[6]) : void 0
      });
    }
    exports.parseDuration = parseDuration;
    function parseYearMonthDuration(durationStr) {
      const res = parseDuration(durationStr);
      if (["hours", "minutes", "seconds", "day"].some((key) => Boolean(res[key]))) {
        throw new Errors_1.ParseError(durationStr, "yearMonthDuration");
      }
      return res;
    }
    exports.parseYearMonthDuration = parseYearMonthDuration;
    function parseDayTimeDuration(durationStr) {
      const res = parseDuration(durationStr);
      if (["year", "month"].some((key) => Boolean(res[key]))) {
        throw new Errors_1.ParseError(durationStr, "dayTimeDuration");
      }
      return res;
    }
    exports.parseDayTimeDuration = parseDayTimeDuration;
  }
});

// node_modules/@comunica/expression-evaluator/lib/functions/OverloadTree.js
var require_OverloadTree = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/functions/OverloadTree.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OverloadTree = void 0;
    var expressions_1 = require_expressions();
    var TypeHandling_1 = require_TypeHandling();
    var OverloadTree = class _OverloadTree {
      constructor(identifier, depth) {
        this.identifier = identifier;
        this.implementation = void 0;
        this.generalOverloads = /* @__PURE__ */ Object.create(null);
        this.literalOverLoads = [];
        this.depth = depth || 0;
        this.promotionCount = void 0;
      }
      getSubtree(overrideType) {
        const generalType = (0, TypeHandling_1.asGeneralType)(overrideType);
        if (generalType) {
          return this.generalOverloads[generalType];
        }
        for (const [type, overloadTree] of this.literalOverLoads) {
          if (overrideType === type) {
            return overloadTree;
          }
        }
        return void 0;
      }
      /**
       * Get the implementation for the types that exactly match @param args .
       */
      getImplementationExact(args) {
        let node = this;
        for (const expression of args) {
          node = node.getSubtree(expression);
          if (!node) {
            return void 0;
          }
        }
        return node.implementation;
      }
      /**
       * Searches in a depth first way for the best matching overload. considering this a the tree's root.
       * @param args the arguments to the function.
       * @param functionArgumentsCache
       * @param superTypeProvider
       */
      search(args, superTypeProvider, functionArgumentsCache) {
        let cacheIter = functionArgumentsCache[this.identifier];
        let searchIndex = 0;
        while (searchIndex < args.length && cacheIter?.cache) {
          const term = args[searchIndex];
          const literalExpression = (0, expressions_1.isLiteralTermExpression)(term);
          cacheIter = cacheIter.cache[literalExpression ? literalExpression.dataType : term.termType];
          searchIndex++;
        }
        if (searchIndex === args.length && cacheIter?.func) {
          return cacheIter.func;
        }
        const searchStack = [];
        const startIndex = 0;
        if (args.length === 0) {
          return this.implementation;
        }
        searchStack.push(...this.getSubTreeWithArg(args[startIndex], superTypeProvider).map((node) => ({ node, index: startIndex + 1 })));
        while (searchStack.length > 0) {
          const { index, node } = searchStack.pop();
          if (index === args.length && node.implementation) {
            this.addToCache(functionArgumentsCache, args, node.implementation);
            return node.implementation;
          }
          searchStack.push(...node.getSubTreeWithArg(args[index], superTypeProvider).map((item) => ({ node: item, index: index + 1 })));
        }
        return void 0;
      }
      addToCache(functionArgumentsCache, args, func) {
        function getDefault(lruCache, key) {
          if (!(key in lruCache)) {
            lruCache[key] = {};
          }
          return lruCache[key];
        }
        let cache = getDefault(functionArgumentsCache, this.identifier);
        for (const term of args) {
          const literalExpression = (0, expressions_1.isLiteralTermExpression)(term);
          const key = literalExpression ? literalExpression.dataType : term.termType;
          cache.cache = cache.cache || {};
          cache = getDefault(cache.cache, key);
        }
        cache.func = func;
      }
      /**
       * Adds an overload to the tree structure considering this as the tree's root.
       * @param argumentTypes a list of argumentTypes that would need to be provided in
       * the same order to get the implementation.
       * @param func the implementation for this overload.
       */
      addOverload(argumentTypes, func) {
        this._addOverload([...argumentTypes], func, 0);
      }
      _addOverload(argumentTypes, func, promotionCount) {
        const [argumentType, ..._argumentTypes] = argumentTypes;
        if (!argumentType) {
          if (this.promotionCount === void 0 || promotionCount <= this.promotionCount) {
            this.promotionCount = promotionCount;
            this.implementation = func;
          }
          return;
        }
        let nextTree = this.getSubtree(argumentType);
        if (!nextTree) {
          const newNode = new _OverloadTree(this.identifier, this.depth + 1);
          const generalType = (0, TypeHandling_1.asGeneralType)(argumentType);
          if (generalType) {
            this.generalOverloads[generalType] = newNode;
          }
          const overrideType = (0, TypeHandling_1.asOverrideType)(argumentType);
          if (overrideType) {
            this.literalOverLoads.push([overrideType, newNode]);
          }
          nextTree = newNode;
        }
        nextTree._addOverload(_argumentTypes, func, promotionCount);
        TypeHandling_1.typePromotion[argumentType]?.forEach((ret) => this.addPromotedOverload(ret.typeToPromote, func, ret.conversionFunction, _argumentTypes, promotionCount));
      }
      addPromotedOverload(typeToPromote, func, conversionFunction, argumentTypes, promotionCount) {
        let nextTree = this.getSubtree(typeToPromote);
        if (!nextTree) {
          const newNode = new _OverloadTree(this.identifier, this.depth + 1);
          this.literalOverLoads.push([typeToPromote, newNode]);
          nextTree = newNode;
        }
        nextTree._addOverload(argumentTypes, (funcConf) => (args) => func(funcConf)([
          ...args.slice(0, this.depth),
          conversionFunction(args[this.depth]),
          ...args.slice(this.depth + 1, args.length)
        ]), promotionCount + 1);
      }
      /**
       * @param arg term to try and match to possible overloads of this node.
       * @param openWorldType interface allowing to discover relations between types.
       * @returns SearchStack a stack with top element the next node that should be asked for implementation or overload.
       */
      getSubTreeWithArg(arg, openWorldType) {
        const res = [];
        const literalExpression = (0, expressions_1.isLiteralTermExpression)(arg);
        if (this.generalOverloads.term) {
          res.push(this.generalOverloads.term);
        }
        if (this.generalOverloads[arg.termType]) {
          res.push(this.generalOverloads[arg.termType]);
        }
        if (literalExpression) {
          const concreteType = (0, TypeHandling_1.asKnownLiteralType)(literalExpression.dataType);
          let subExtensionTable;
          if (concreteType) {
            subExtensionTable = TypeHandling_1.superTypeDictTable[concreteType];
          } else {
            subExtensionTable = (0, TypeHandling_1.getSuperTypes)(literalExpression.dataType, openWorldType);
          }
          const matches = this.literalOverLoads.filter(([matchType, _]) => matchType in subExtensionTable).map(([matchType, tree]) => [subExtensionTable[matchType], tree]);
          matches.sort(([prioA, matchTypeA], [prioB, matchTypeB]) => prioA - prioB);
          res.push(...matches.map(([_, sortedType]) => sortedType));
        }
        return res;
      }
    };
    exports.OverloadTree = OverloadTree;
  }
});

// node_modules/@comunica/expression-evaluator/lib/functions/Helpers.js
var require_Helpers = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/functions/Helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expressionToVar = exports.dateTime = exports.langString = exports.string = exports.double = exports.float = exports.decimal = exports.integer = exports.bool = exports.Builder = exports.declare = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var E = require_expressions();
    var expressions_1 = require_expressions();
    var C = require_Consts();
    var Consts_1 = require_Consts();
    var Err = require_Errors();
    var OverloadTree_1 = require_OverloadTree();
    var DF = new rdf_data_factory_1.DataFactory();
    function declare(identifier) {
      return new Builder(identifier);
    }
    exports.declare = declare;
    var Builder = class _Builder {
      constructor(identifier) {
        this.overloadTree = new OverloadTree_1.OverloadTree(identifier);
        this.collected = false;
      }
      collect() {
        if (this.collected) {
          throw new Error("Builders can only be collected once!");
        }
        this.collected = true;
        return this.overloadTree;
      }
      static wrapInvalidLexicalProtected(func) {
        return (context) => (args) => {
          args.forEach((arg, index) => {
            if (arg instanceof expressions_1.NonLexicalLiteral) {
              throw new Err.InvalidLexicalForm(args[index].toRDF());
            }
          });
          return func(context)(args);
        };
      }
      set(argTypes, func, addInvalidHandling = true) {
        this.overloadTree.addOverload(argTypes, addInvalidHandling ? _Builder.wrapInvalidLexicalProtected(func) : func);
        return this;
      }
      copy({ from, to }) {
        const impl = this.overloadTree.getImplementationExact(from);
        if (!impl) {
          throw new Err.UnexpectedError("Tried to copy implementation, but types not found", { from, to });
        }
        return this.set(to, impl);
      }
      onUnary(type, op, addInvalidHandling = true) {
        return this.set([type], (context) => ([val]) => op(context)(val), addInvalidHandling);
      }
      onUnaryTyped(type, op, addInvalidHandling = true) {
        return this.set([type], (context) => ([val]) => op(context)(val.typedValue), addInvalidHandling);
      }
      onBinary(types, op, addInvalidHandling = true) {
        return this.set(types, (context) => ([left, right]) => op(context)(left, right), addInvalidHandling);
      }
      onBinaryTyped(types, op, addInvalidHandling = true) {
        return this.set(types, (context) => ([left, right]) => op(context)(left.typedValue, right.typedValue), addInvalidHandling);
      }
      onTernaryTyped(types, op, addInvalidHandling = true) {
        return this.set(types, (context) => ([a1, a2, a3]) => op(context)(a1.typedValue, a2.typedValue, a3.typedValue), addInvalidHandling);
      }
      onTernary(types, op, addInvalidHandling = true) {
        return this.set(types, (context) => ([a1, a2, a3]) => op(context)(a1, a2, a3), addInvalidHandling);
      }
      onQuaternaryTyped(types, op, addInvalidHandling = true) {
        return this.set(types, (context) => ([a1, a2, a3, a4]) => op(context)(a1.typedValue, a2.typedValue, a3.typedValue, a4.typedValue), addInvalidHandling);
      }
      onTerm1(op, addInvalidHandling = false) {
        return this.set(["term"], (context) => ([term]) => op(context)(term), addInvalidHandling);
      }
      onTerm3(op) {
        return this.set(["term", "term", "term"], (context) => ([t1, t2, t3]) => op(context)(t1, t2, t3));
      }
      onQuad1(op) {
        return this.set(["quad"], (context) => ([term]) => op(context)(term));
      }
      onLiteral1(op, addInvalidHandling = true) {
        return this.set(["literal"], (context) => ([term]) => op(context)(term), addInvalidHandling);
      }
      onBoolean1(op, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_BOOLEAN], (context) => ([lit]) => op(context)(lit), addInvalidHandling);
      }
      onBoolean1Typed(op, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_BOOLEAN], (context) => ([lit]) => op(context)(lit.typedValue), addInvalidHandling);
      }
      onString1(op, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_STRING], (context) => ([lit]) => op(context)(lit), addInvalidHandling);
      }
      onString1Typed(op, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_STRING], (context) => ([lit]) => op(context)(lit.typedValue), addInvalidHandling);
      }
      onLangString1(op, addInvalidHandling = true) {
        return this.set([C.TypeURL.RDF_LANG_STRING], (context) => ([lit]) => op(context)(lit), addInvalidHandling);
      }
      onStringly1(op, addInvalidHandling = true) {
        return this.set([C.TypeAlias.SPARQL_STRINGLY], (context) => ([lit]) => op(context)(lit), addInvalidHandling);
      }
      onStringly1Typed(op, addInvalidHandling = true) {
        return this.set([C.TypeAlias.SPARQL_STRINGLY], (context) => ([lit]) => op(context)(lit.typedValue), addInvalidHandling);
      }
      onNumeric1(op, addInvalidHandling = true) {
        return this.set([C.TypeAlias.SPARQL_NUMERIC], (context) => ([val]) => op(context)(val), addInvalidHandling);
      }
      onDateTime1(op, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_DATE_TIME], (context) => ([val]) => op(context)(val), addInvalidHandling);
      }
      /**
       * We return the base types and not the provided types because we don't want to create invalid terms.
       * Providing negative number to a function unary - for example should not
       * return a term of type negative number having a positive value.
       * @param op the numeric operator performed
       * @param addInvalidHandling whether to add invalid handling,
       *   whether to add @param op in @see wrapInvalidLexicalProtected
       */
      numericConverter(op, addInvalidHandling = true) {
        const evalHelper = (context) => (arg) => op(context)(arg.typedValue);
        return this.onBinary([Consts_1.TypeURL.XSD_INTEGER], (context) => (arg) => integer(evalHelper(context)(arg)), addInvalidHandling).onBinary([Consts_1.TypeURL.XSD_DECIMAL], (context) => (arg) => decimal(evalHelper(context)(arg)), addInvalidHandling).onBinary([Consts_1.TypeURL.XSD_FLOAT], (context) => (arg) => float(evalHelper(context)(arg)), addInvalidHandling).onBinary([Consts_1.TypeURL.XSD_DOUBLE], (context) => (arg) => double(evalHelper(context)(arg)), addInvalidHandling);
      }
      /**
       * !!! Be aware when using this function, it will create different overloads with different return types !!!
       * Arithmetic operators take 2 numeric arguments, and return a single numerical
       * value. The type of the return value is heavily dependent on the types of the
       * input arguments. In JS everything is a double, but in SPARQL it is not.
       *
       * The different arguments are handled by type promotion and subtype substitution.
       * The way numeric function arguments work is described here:
       * https://www.w3.org/TR/xpath20/#mapping
       * Above url is referenced in the sparql spec: https://www.w3.org/TR/sparql11-query/#OperatorMapping
       */
      arithmetic(op, addInvalidHandling = true) {
        const evalHelper = (context) => (left, right) => op(context)(left.typedValue, right.typedValue);
        return this.onBinary([Consts_1.TypeURL.XSD_INTEGER, Consts_1.TypeURL.XSD_INTEGER], (context) => (left, right) => integer(evalHelper(context)(left, right)), addInvalidHandling).onBinary([Consts_1.TypeURL.XSD_DECIMAL, Consts_1.TypeURL.XSD_DECIMAL], (context) => (left, right) => decimal(evalHelper(context)(left, right)), addInvalidHandling).onBinary([Consts_1.TypeURL.XSD_FLOAT, Consts_1.TypeURL.XSD_FLOAT], (context) => (left, right) => float(evalHelper(context)(left, right)), addInvalidHandling).onBinary([Consts_1.TypeURL.XSD_DOUBLE, Consts_1.TypeURL.XSD_DOUBLE], (context) => (left, right) => double(evalHelper(context)(left, right)), addInvalidHandling);
      }
      numberTest(test) {
        return this.numeric((context) => ([left, right]) => {
          const result = test(context)(left.typedValue, right.typedValue);
          return bool(result);
        });
      }
      stringTest(test, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_STRING, C.TypeURL.XSD_STRING], (context) => ([left, right]) => {
          const result = test(context)(left.typedValue, right.typedValue);
          return bool(result);
        }, addInvalidHandling);
      }
      booleanTest(test, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_BOOLEAN, C.TypeURL.XSD_BOOLEAN], (context) => ([left, right]) => {
          const result = test(context)(left.typedValue, right.typedValue);
          return bool(result);
        }, addInvalidHandling);
      }
      dateTimeTest(test, addInvalidHandling = true) {
        return this.set([C.TypeURL.XSD_DATE_TIME, C.TypeURL.XSD_DATE_TIME], (context) => ([left, right]) => {
          const result = test(context)(left.typedValue, right.typedValue);
          return bool(result);
        }, addInvalidHandling);
      }
      numeric(op) {
        return this.set([C.TypeAlias.SPARQL_NUMERIC, C.TypeAlias.SPARQL_NUMERIC], op);
      }
    };
    exports.Builder = Builder;
    function bool(val) {
      return new E.BooleanLiteral(val);
    }
    exports.bool = bool;
    function integer(num) {
      return new E.IntegerLiteral(num);
    }
    exports.integer = integer;
    function decimal(num) {
      return new E.DecimalLiteral(num);
    }
    exports.decimal = decimal;
    function float(num) {
      return new E.FloatLiteral(num);
    }
    exports.float = float;
    function double(num) {
      return new E.DoubleLiteral(num);
    }
    exports.double = double;
    function string(str) {
      return new E.StringLiteral(str);
    }
    exports.string = string;
    function langString(str, lang) {
      return new E.LangStringLiteral(str, lang);
    }
    exports.langString = langString;
    function dateTime(date, str) {
      return new E.DateTimeLiteral(date, str);
    }
    exports.dateTime = dateTime;
    function expressionToVar(variableExpression) {
      return DF.variable(variableExpression.name.slice(1));
    }
    exports.expressionToVar = expressionToVar;
  }
});

// node_modules/@comunica/expression-evaluator/lib/util/TypeHandling.js
var require_TypeHandling = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/util/TypeHandling.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.typePromotion = exports.isSubTypeOf = exports.getSuperTypeDict = exports.isInternalSubType = exports.asGeneralType = exports.asOverrideType = exports.asKnownLiteralType = exports.asTypeAlias = exports.typeAliasCheck = exports.extensionTableInit = exports.getSuperTypes = exports.superTypeDictTable = exports.extensionTableInput = void 0;
    var expressions_1 = require_expressions();
    var Helpers_1 = require_Helpers();
    var Consts_1 = require_Consts();
    exports.extensionTableInput = {
      // Datetime types
      [Consts_1.TypeURL.XSD_DATE_TIME_STAMP]: Consts_1.TypeURL.XSD_DATE_TIME,
      // Duration types
      [Consts_1.TypeURL.XSD_DAY_TIME_DURATION]: Consts_1.TypeURL.XSD_DURATION,
      [Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION]: Consts_1.TypeURL.XSD_DURATION,
      // Stringly types
      [Consts_1.TypeURL.RDF_LANG_STRING]: Consts_1.TypeAlias.SPARQL_STRINGLY,
      [Consts_1.TypeURL.XSD_STRING]: Consts_1.TypeAlias.SPARQL_STRINGLY,
      // String types
      [Consts_1.TypeURL.XSD_NORMALIZED_STRING]: Consts_1.TypeURL.XSD_STRING,
      [Consts_1.TypeURL.XSD_TOKEN]: Consts_1.TypeURL.XSD_NORMALIZED_STRING,
      [Consts_1.TypeURL.XSD_LANGUAGE]: Consts_1.TypeURL.XSD_TOKEN,
      [Consts_1.TypeURL.XSD_NM_TOKEN]: Consts_1.TypeURL.XSD_TOKEN,
      [Consts_1.TypeURL.XSD_NAME]: Consts_1.TypeURL.XSD_TOKEN,
      [Consts_1.TypeURL.XSD_NC_NAME]: Consts_1.TypeURL.XSD_NAME,
      [Consts_1.TypeURL.XSD_ENTITY]: Consts_1.TypeURL.XSD_NC_NAME,
      [Consts_1.TypeURL.XSD_ID]: Consts_1.TypeURL.XSD_NC_NAME,
      [Consts_1.TypeURL.XSD_ID_REF]: Consts_1.TypeURL.XSD_NC_NAME,
      // Numeric types
      // https://www.w3.org/TR/sparql11-query/#operandDataTypes
      // > numeric denotes typed literals with datatypes xsd:integer, xsd:decimal, xsd:float, and xsd:double
      [Consts_1.TypeURL.XSD_DOUBLE]: Consts_1.TypeAlias.SPARQL_NUMERIC,
      [Consts_1.TypeURL.XSD_FLOAT]: Consts_1.TypeAlias.SPARQL_NUMERIC,
      [Consts_1.TypeURL.XSD_DECIMAL]: Consts_1.TypeAlias.SPARQL_NUMERIC,
      // Decimal types
      [Consts_1.TypeURL.XSD_INTEGER]: Consts_1.TypeURL.XSD_DECIMAL,
      [Consts_1.TypeURL.XSD_NON_POSITIVE_INTEGER]: Consts_1.TypeURL.XSD_INTEGER,
      [Consts_1.TypeURL.XSD_NEGATIVE_INTEGER]: Consts_1.TypeURL.XSD_NON_POSITIVE_INTEGER,
      [Consts_1.TypeURL.XSD_LONG]: Consts_1.TypeURL.XSD_INTEGER,
      [Consts_1.TypeURL.XSD_INT]: Consts_1.TypeURL.XSD_LONG,
      [Consts_1.TypeURL.XSD_SHORT]: Consts_1.TypeURL.XSD_INT,
      [Consts_1.TypeURL.XSD_BYTE]: Consts_1.TypeURL.XSD_SHORT,
      [Consts_1.TypeURL.XSD_NON_NEGATIVE_INTEGER]: Consts_1.TypeURL.XSD_INTEGER,
      [Consts_1.TypeURL.XSD_POSITIVE_INTEGER]: Consts_1.TypeURL.XSD_NON_NEGATIVE_INTEGER,
      [Consts_1.TypeURL.XSD_UNSIGNED_LONG]: Consts_1.TypeURL.XSD_NON_NEGATIVE_INTEGER,
      [Consts_1.TypeURL.XSD_UNSIGNED_INT]: Consts_1.TypeURL.XSD_UNSIGNED_LONG,
      [Consts_1.TypeURL.XSD_UNSIGNED_SHORT]: Consts_1.TypeURL.XSD_UNSIGNED_INT,
      [Consts_1.TypeURL.XSD_UNSIGNED_BYTE]: Consts_1.TypeURL.XSD_UNSIGNED_SHORT,
      [Consts_1.TypeURL.XSD_DATE_TIME]: "term",
      [Consts_1.TypeURL.XSD_BOOLEAN]: "term",
      [Consts_1.TypeURL.XSD_DATE]: "term",
      [Consts_1.TypeURL.XSD_G_MONTH]: "term",
      [Consts_1.TypeURL.XSD_G_MONTHDAY]: "term",
      [Consts_1.TypeURL.XSD_G_YEAR]: "term",
      [Consts_1.TypeURL.XSD_G_YEAR_MONTH]: "term",
      [Consts_1.TypeURL.XSD_TIME]: "term",
      [Consts_1.TypeURL.XSD_G_DAY]: "term",
      [Consts_1.TypeURL.XSD_DURATION]: "term",
      [Consts_1.TypeAlias.SPARQL_NUMERIC]: "term",
      [Consts_1.TypeAlias.SPARQL_STRINGLY]: "term",
      [Consts_1.TypeURL.XSD_ANY_URI]: "term"
    };
    exports.superTypeDictTable = /* @__PURE__ */ Object.create(null);
    function getSuperTypes(type, openWorldType) {
      const cached = openWorldType.cache.get(type);
      if (cached) {
        return cached;
      }
      const value = openWorldType.discoverer(type);
      if (value === "term") {
        const res = /* @__PURE__ */ Object.create(null);
        res.__depth = 0;
        res[type] = 0;
        openWorldType.cache.set(type, res);
        return res;
      }
      let subExtension;
      const knownValue = asKnownLiteralType(value);
      if (knownValue) {
        subExtension = { ...exports.superTypeDictTable[knownValue] };
      } else {
        subExtension = { ...getSuperTypes(value, openWorldType) };
      }
      subExtension.__depth++;
      subExtension[type] = subExtension.__depth;
      openWorldType.cache.set(type, subExtension);
      return subExtension;
    }
    exports.getSuperTypes = getSuperTypes;
    function extensionTableInit() {
      for (const [_key, value] of Object.entries(exports.extensionTableInput)) {
        const key = _key;
        if (exports.superTypeDictTable[key]) {
          continue;
        }
        extensionTableBuilderInitKey(key, value, exports.superTypeDictTable);
      }
    }
    exports.extensionTableInit = extensionTableInit;
    extensionTableInit();
    function extensionTableBuilderInitKey(key, value, res) {
      if (value === "term" || value === void 0) {
        const baseRes = /* @__PURE__ */ Object.create(null);
        baseRes.__depth = 0;
        baseRes[key] = 0;
        res[key] = baseRes;
        return;
      }
      if (!res[value]) {
        extensionTableBuilderInitKey(value, exports.extensionTableInput[value], res);
      }
      res[key] = { ...res[value], [key]: res[value].__depth + 1, __depth: res[value].__depth + 1 };
    }
    exports.typeAliasCheck = /* @__PURE__ */ Object.create(null);
    function initTypeAliasCheck() {
      for (const val of Object.values(Consts_1.TypeAlias)) {
        exports.typeAliasCheck[val] = true;
      }
    }
    initTypeAliasCheck();
    function asTypeAlias(type) {
      if (type in exports.typeAliasCheck) {
        return type;
      }
      return void 0;
    }
    exports.asTypeAlias = asTypeAlias;
    function asKnownLiteralType(type) {
      if (type in exports.superTypeDictTable) {
        return type;
      }
      return void 0;
    }
    exports.asKnownLiteralType = asKnownLiteralType;
    function asOverrideType(type) {
      if (asKnownLiteralType(type) || type === "term") {
        return type;
      }
      return void 0;
    }
    exports.asOverrideType = asOverrideType;
    function asGeneralType(type) {
      if (type === "term" || (0, expressions_1.asTermType)(type)) {
        return type;
      }
      return void 0;
    }
    exports.asGeneralType = asGeneralType;
    function isInternalSubType(baseType, argumentType) {
      return baseType !== "term" && (exports.superTypeDictTable[baseType] && exports.superTypeDictTable[baseType][argumentType] !== void 0);
    }
    exports.isInternalSubType = isInternalSubType;
    function getSuperTypeDict(baseType, superTypeProvider) {
      const concreteType = asKnownLiteralType(baseType);
      if (concreteType) {
        return exports.superTypeDictTable[concreteType];
      }
      return getSuperTypes(baseType, superTypeProvider);
    }
    exports.getSuperTypeDict = getSuperTypeDict;
    function isSubTypeOf(baseType, argumentType, superTypeProvider) {
      if (baseType === "term") {
        return false;
      }
      return getSuperTypeDict(baseType, superTypeProvider)[argumentType] !== void 0;
    }
    exports.isSubTypeOf = isSubTypeOf;
    exports.typePromotion = {
      [Consts_1.TypeURL.XSD_STRING]: [
        { typeToPromote: Consts_1.TypeURL.XSD_ANY_URI, conversionFunction: (arg) => (0, Helpers_1.string)(arg.str()) }
      ],
      [Consts_1.TypeURL.XSD_DOUBLE]: [
        { typeToPromote: Consts_1.TypeURL.XSD_FLOAT, conversionFunction: (arg) => (0, Helpers_1.double)(arg.typedValue) },
        // TODO: in case of decimal a round needs to happen.
        { typeToPromote: Consts_1.TypeURL.XSD_DECIMAL, conversionFunction: (arg) => (0, Helpers_1.double)(arg.typedValue) }
      ],
      [Consts_1.TypeURL.XSD_FLOAT]: [
        // TODO: in case of decimal a round needs to happen.
        { typeToPromote: Consts_1.TypeURL.XSD_DECIMAL, conversionFunction: (arg) => (0, Helpers_1.float)(arg.typedValue) }
      ]
    };
  }
});

// node_modules/@comunica/expression-evaluator/lib/transformers/TermTransformer.js
var require_TermTransformer = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/transformers/TermTransformer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TermTransformer = void 0;
    var RDFString = require_rdf_string();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var E = require_expressions();
    var Consts_1 = require_Consts();
    var Err = require_Errors();
    var Errors_1 = require_Errors();
    var Parsing_1 = require_Parsing();
    var P = require_Parsing();
    var TypeHandling_1 = require_TypeHandling();
    var TermTransformer = class {
      constructor(superTypeProvider) {
        this.superTypeProvider = superTypeProvider;
      }
      /**
       * Transforms an RDF term to the internal representation of a term,
       * assuming it is not a variable, which would be an expression (internally).
       *
       * @param term RDF term to transform into internal representation of a term
       */
      transformRDFTermUnsafe(term) {
        return this.transformTerm({
          term,
          type: sparqlalgebrajs_1.Algebra.types.EXPRESSION,
          expressionType: sparqlalgebrajs_1.Algebra.expressionTypes.TERM
        });
      }
      transformTerm(term) {
        if (!term.term) {
          throw new Err.InvalidExpression(term);
        }
        switch (term.term.termType) {
          case "Variable":
            return new E.Variable(RDFString.termToString(term.term));
          case "Literal":
            return this.transformLiteral(term.term);
          case "NamedNode":
            return new E.NamedNode(term.term.value);
          case "BlankNode":
            return new E.BlankNode(term.term.value);
          case "Quad":
            return new E.Quad(term.term, this.superTypeProvider);
          default:
            throw new Err.InvalidTermType(term);
        }
      }
      /**
       * @param lit the rdf literal we want to transform to an internal Literal expression.
       */
      transformLiteral(lit) {
        if (!lit.datatype || [null, void 0, ""].includes(lit.datatype.value)) {
          return lit.language ? new E.LangStringLiteral(lit.value, lit.language) : new E.StringLiteral(lit.value);
        }
        const dataType = lit.datatype.value;
        const superTypeDict = (0, TypeHandling_1.getSuperTypeDict)(dataType, this.superTypeProvider);
        try {
          if (Consts_1.TypeURL.XSD_STRING in superTypeDict) {
            return new E.StringLiteral(lit.value, dataType);
          }
          if (Consts_1.TypeURL.RDF_LANG_STRING in superTypeDict) {
            return new E.LangStringLiteral(lit.value, lit.language);
          }
          if (Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION in superTypeDict) {
            return new E.YearMonthDurationLiteral((0, Parsing_1.parseYearMonthDuration)(lit.value), lit.value, dataType);
          }
          if (Consts_1.TypeURL.XSD_DAY_TIME_DURATION in superTypeDict) {
            return new E.DayTimeDurationLiteral((0, Parsing_1.parseDayTimeDuration)(lit.value), lit.value, dataType);
          }
          if (Consts_1.TypeURL.XSD_DURATION in superTypeDict) {
            return new E.DurationLiteral((0, Parsing_1.parseDuration)(lit.value), lit.value, dataType);
          }
          if (Consts_1.TypeURL.XSD_DATE_TIME in superTypeDict) {
            const dateVal = new Date(lit.value);
            if (Number.isNaN(dateVal.getTime())) {
              return new E.NonLexicalLiteral(void 0, dataType, this.superTypeProvider, lit.value);
            }
            return new E.DateTimeLiteral((0, Parsing_1.parseDateTime)(lit.value), lit.value, dataType);
          }
          if (Consts_1.TypeURL.XSD_DATE in superTypeDict) {
            return new E.DateLiteral((0, Parsing_1.parseDate)(lit.value), lit.value, dataType);
          }
          if (Consts_1.TypeURL.XSD_TIME in superTypeDict) {
            return new E.TimeLiteral((0, Parsing_1.parseTime)(lit.value), lit.value, dataType);
          }
          if (Consts_1.TypeURL.XSD_BOOLEAN in superTypeDict) {
            if (lit.value !== "true" && lit.value !== "false" && lit.value !== "1" && lit.value !== "0") {
              return new E.NonLexicalLiteral(void 0, dataType, this.superTypeProvider, lit.value);
            }
            return new E.BooleanLiteral(lit.value === "true" || lit.value === "1", lit.value);
          }
          if (Consts_1.TypeURL.XSD_DECIMAL in superTypeDict) {
            const intVal = P.parseXSDDecimal(lit.value);
            if (intVal === void 0) {
              return new E.NonLexicalLiteral(void 0, dataType, this.superTypeProvider, lit.value);
            }
            if (Consts_1.TypeURL.XSD_INTEGER in superTypeDict) {
              return new E.IntegerLiteral(intVal, dataType, lit.value);
            }
            return new E.DecimalLiteral(intVal, dataType, lit.value);
          }
          const isFloat = Consts_1.TypeURL.XSD_FLOAT in superTypeDict;
          const isDouble = Consts_1.TypeURL.XSD_DOUBLE in superTypeDict;
          if (isFloat || isDouble) {
            const doubleVal = P.parseXSDFloat(lit.value);
            if (doubleVal === void 0) {
              return new E.NonLexicalLiteral(void 0, dataType, this.superTypeProvider, lit.value);
            }
            if (isFloat) {
              return new E.FloatLiteral(doubleVal, dataType, lit.value);
            }
            return new E.DoubleLiteral(doubleVal, dataType, lit.value);
          }
          return new E.Literal(lit.value, dataType, lit.value);
        } catch (error2) {
          if (error2 instanceof Error && (0, Errors_1.isExpressionError)(error2)) {
            return new E.NonLexicalLiteral(void 0, dataType, this.superTypeProvider, lit.value);
          }
          throw error2;
        }
      }
    };
    exports.TermTransformer = TermTransformer;
  }
});

// node_modules/@comunica/expression-evaluator/lib/util/Serialization.js
var require_Serialization = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/util/Serialization.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeDuration = exports.serializeTime = exports.serializeDate = exports.serializeDateTime = void 0;
    function numSerializer(num, min = 2) {
      return num.toLocaleString(void 0, { minimumIntegerDigits: min, useGrouping: false });
    }
    function serializeDateTime(date) {
      return `${serializeDate({ year: date.year, month: date.month, day: date.day })}T${serializeTime(date)}`;
    }
    exports.serializeDateTime = serializeDateTime;
    function serializeTimeZone(tz) {
      if (tz.zoneHours === void 0 || tz.zoneMinutes === void 0) {
        return "";
      }
      if (tz.zoneHours === 0 && tz.zoneMinutes === 0) {
        return "Z";
      }
      return `${tz.zoneHours >= 0 ? `+${numSerializer(tz.zoneHours)}` : numSerializer(tz.zoneHours)}:${numSerializer(Math.abs(tz.zoneMinutes))}`;
    }
    function serializeDate(date) {
      return `${numSerializer(date.year, 4)}-${numSerializer(date.month)}-${numSerializer(date.day)}${serializeTimeZone(date)}`;
    }
    exports.serializeDate = serializeDate;
    function serializeTime(time) {
      return `${numSerializer(time.hours)}:${numSerializer(time.minutes)}:${numSerializer(time.seconds)}${serializeTimeZone(time)}`;
    }
    exports.serializeTime = serializeTime;
    function serializeDuration(dur, zeroString = "PT0S") {
      if (!Object.values(dur).some((val) => (val || 0) !== 0)) {
        return zeroString;
      }
      const sign = Object.values(dur).some((val) => (val || 0) < 0) ? "-" : "";
      const year = dur.year ? `${Math.abs(dur.year)}Y` : "";
      const month = dur.month ? `${Math.abs(dur.month)}M` : "";
      const day = dur.day ? `${Math.abs(dur.day)}D` : "";
      const dayNotation = `${sign}P${year}${month}${day}`;
      if (!(dur.hours || dur.minutes || dur.seconds)) {
        return dayNotation;
      }
      const hour = dur.hours ? `${Math.abs(dur.hours)}H` : "";
      const minute = dur.minutes ? `${Math.abs(dur.minutes)}M` : "";
      const second = dur.seconds ? `${Math.abs(dur.seconds)}S` : "";
      return `${dayNotation}T${hour}${minute}${second}`;
    }
    exports.serializeDuration = serializeDuration;
  }
});

// node_modules/@comunica/expression-evaluator/lib/expressions/Term.js
var require_Term = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/expressions/Term.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNonLexicalLiteral = exports.NonLexicalLiteral = exports.YearMonthDurationLiteral = exports.DayTimeDurationLiteral = exports.DurationLiteral = exports.DateLiteral = exports.TimeLiteral = exports.DateTimeLiteral = exports.StringLiteral = exports.LangStringLiteral = exports.BooleanLiteral = exports.DoubleLiteral = exports.FloatLiteral = exports.DecimalLiteral = exports.IntegerLiteral = exports.NumericLiteral = exports.Literal = exports.isLiteralTermExpression = exports.Quad = exports.BlankNode = exports.NamedNode = exports.Term = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var TermTransformer_1 = require_TermTransformer();
    var C = require_Consts();
    var Consts_1 = require_Consts();
    var Err = require_Errors();
    var Serialization_1 = require_Serialization();
    var TypeHandling_1 = require_TypeHandling();
    var Expressions_1 = require_Expressions();
    var DF = new rdf_data_factory_1.DataFactory();
    var Term = class {
      constructor() {
        this.expressionType = Expressions_1.ExpressionType.Term;
      }
      str() {
        throw new Err.InvalidArgumentTypes([this], C.RegularOperator.STR);
      }
      coerceEBV() {
        throw new Err.EBVCoercionError(this);
      }
    };
    exports.Term = Term;
    var NamedNode2 = class extends Term {
      constructor(value) {
        super();
        this.value = value;
        this.termType = "namedNode";
      }
      toRDF() {
        return DF.namedNode(this.value);
      }
      str() {
        return this.value;
      }
    };
    exports.NamedNode = NamedNode2;
    var BlankNode2 = class extends Term {
      constructor(value) {
        super();
        this.termType = "blankNode";
        this.value = typeof value === "string" ? DF.blankNode(value) : value;
      }
      toRDF() {
        return this.value;
      }
    };
    exports.BlankNode = BlankNode2;
    var Quad2 = class extends Term {
      constructor(input, superTypeProvider) {
        super();
        this.termType = "quad";
        this.transformer = new TermTransformer_1.TermTransformer(superTypeProvider);
        this.valueTerm = input;
      }
      toRDF() {
        return this.valueTerm;
      }
      get subject() {
        return this.transformer.transformRDFTermUnsafe(this.RDFsubject);
      }
      get predicate() {
        return this.transformer.transformRDFTermUnsafe(this.RDFpredicate);
      }
      get object() {
        return this.transformer.transformRDFTermUnsafe(this.RDFobject);
      }
      get RDFsubject() {
        return this.toRDF().subject;
      }
      get RDFpredicate() {
        return this.toRDF().predicate;
      }
      get RDFobject() {
        return this.toRDF().object;
      }
    };
    exports.Quad = Quad2;
    function isLiteralTermExpression(expr) {
      if (expr.termType === "literal") {
        return expr;
      }
      return void 0;
    }
    exports.isLiteralTermExpression = isLiteralTermExpression;
    var Literal2 = class extends Term {
      /**
       * @param typedValue internal representation of this literal's value
       * @param dataType a string representing the datatype. Can be of type @see LiteralTypes or any URI
       * @param strValue the string value of this literal. In other words, the string representing the RDF.literal value.
       * @param language the language, mainly for language enabled strings like RDF_LANG_STRING
       */
      constructor(typedValue, dataType, strValue, language) {
        super();
        this.typedValue = typedValue;
        this.dataType = dataType;
        this.strValue = strValue;
        this.language = language;
        this.termType = "literal";
      }
      toRDF() {
        return DF.literal(this.strValue || this.str(), this.language || DF.namedNode(this.dataType));
      }
      str() {
        return this.strValue || this.typedValue.toString();
      }
    };
    exports.Literal = Literal2;
    var NumericLiteral = class extends Literal2 {
      constructor(typedValue, dataType, strValue, language) {
        super(typedValue, dataType, strValue, language);
        this.typedValue = typedValue;
        this.strValue = strValue;
        this.language = language;
      }
      coerceEBV() {
        return Boolean(this.typedValue);
      }
      toRDF() {
        const term = super.toRDF();
        if (!Number.isFinite(this.typedValue)) {
          term.value = term.value.replace("Infinity", "INF");
        }
        return term;
      }
      str() {
        return this.strValue || this.specificFormatter(this.typedValue);
      }
    };
    exports.NumericLiteral = NumericLiteral;
    var IntegerLiteral = class extends NumericLiteral {
      constructor(typedValue, dataType, strValue, language) {
        super(typedValue, dataType || Consts_1.TypeURL.XSD_INTEGER, strValue, language);
        this.typedValue = typedValue;
        this.strValue = strValue;
        this.language = language;
      }
      specificFormatter(val) {
        return val.toFixed(0);
      }
    };
    exports.IntegerLiteral = IntegerLiteral;
    var DecimalLiteral = class extends NumericLiteral {
      constructor(typedValue, dataType, strValue, language) {
        super(typedValue, dataType || Consts_1.TypeURL.XSD_DECIMAL, strValue, language);
        this.typedValue = typedValue;
        this.strValue = strValue;
        this.language = language;
      }
      specificFormatter(val) {
        return val.toString();
      }
    };
    exports.DecimalLiteral = DecimalLiteral;
    var FloatLiteral = class extends NumericLiteral {
      constructor(typedValue, dataType, strValue, language) {
        super(typedValue, dataType || Consts_1.TypeURL.XSD_FLOAT, strValue, language);
        this.typedValue = typedValue;
        this.strValue = strValue;
        this.language = language;
      }
      specificFormatter(val) {
        return val.toString();
      }
    };
    exports.FloatLiteral = FloatLiteral;
    var DoubleLiteral = class extends NumericLiteral {
      constructor(typedValue, dataType, strValue, language) {
        super(typedValue, dataType || Consts_1.TypeURL.XSD_DOUBLE, strValue, language);
        this.typedValue = typedValue;
        this.strValue = strValue;
        this.language = language;
      }
      specificFormatter(val) {
        if (!Number.isFinite(val)) {
          if (val > 0) {
            return "INF";
          }
          if (val < 0) {
            return "-INF";
          }
          return "NaN";
        }
        const jsExponential = val.toExponential();
        const [jsMantisse, jsExponent] = jsExponential.split("e");
        const exponent = jsExponent.replace(/\+/u, "");
        const mantisse = jsMantisse.includes(".") ? jsMantisse : `${jsMantisse}.0`;
        return `${mantisse}E${exponent}`;
      }
    };
    exports.DoubleLiteral = DoubleLiteral;
    var BooleanLiteral = class extends Literal2 {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, dataType || Consts_1.TypeURL.XSD_BOOLEAN, strValue);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
      coerceEBV() {
        return this.typedValue;
      }
    };
    exports.BooleanLiteral = BooleanLiteral;
    var LangStringLiteral = class extends Literal2 {
      constructor(typedValue, language, dataType) {
        super(typedValue, dataType || Consts_1.TypeURL.RDF_LANG_STRING, typedValue, language);
        this.typedValue = typedValue;
        this.language = language;
      }
      coerceEBV() {
        return this.str().length > 0;
      }
    };
    exports.LangStringLiteral = LangStringLiteral;
    var StringLiteral = class extends Literal2 {
      /**
       * @param typedValue
       * @param dataType Should be type that implements XSD_STRING
       */
      constructor(typedValue, dataType) {
        super(typedValue, dataType || Consts_1.TypeURL.XSD_STRING, typedValue);
        this.typedValue = typedValue;
      }
      coerceEBV() {
        return this.str().length > 0;
      }
    };
    exports.StringLiteral = StringLiteral;
    var DateTimeLiteral = class extends Literal2 {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, dataType || Consts_1.TypeURL.XSD_DATE_TIME, strValue);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
      str() {
        return (0, Serialization_1.serializeDateTime)(this.typedValue);
      }
    };
    exports.DateTimeLiteral = DateTimeLiteral;
    var TimeLiteral = class extends Literal2 {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, dataType || Consts_1.TypeURL.XSD_TIME, strValue);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
      str() {
        return (0, Serialization_1.serializeTime)(this.typedValue);
      }
    };
    exports.TimeLiteral = TimeLiteral;
    var DateLiteral = class extends Literal2 {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, dataType || Consts_1.TypeURL.XSD_DATE, strValue);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
      str() {
        return (0, Serialization_1.serializeDate)(this.typedValue);
      }
    };
    exports.DateLiteral = DateLiteral;
    var DurationLiteral = class extends Literal2 {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, dataType || Consts_1.TypeURL.XSD_DURATION, strValue);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
      str() {
        return (0, Serialization_1.serializeDuration)(this.typedValue);
      }
    };
    exports.DurationLiteral = DurationLiteral;
    var DayTimeDurationLiteral = class extends DurationLiteral {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, strValue, dataType || Consts_1.TypeURL.XSD_DAY_TIME_DURATION);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
    };
    exports.DayTimeDurationLiteral = DayTimeDurationLiteral;
    var YearMonthDurationLiteral = class extends Literal2 {
      constructor(typedValue, strValue, dataType) {
        super(typedValue, dataType || Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION, strValue);
        this.typedValue = typedValue;
        this.strValue = strValue;
      }
      str() {
        return (0, Serialization_1.serializeDuration)(this.typedValue, "P0M");
      }
    };
    exports.YearMonthDurationLiteral = YearMonthDurationLiteral;
    var NonLexicalLiteral = class extends Literal2 {
      constructor(typedValue, dataType, openWorldType, strValue, language) {
        super({ toString: () => "undefined" }, dataType, strValue, language);
        this.openWorldType = openWorldType;
      }
      coerceEBV() {
        const isNumericOrBool = (0, TypeHandling_1.isSubTypeOf)(this.dataType, Consts_1.TypeURL.XSD_BOOLEAN, this.openWorldType) || (0, TypeHandling_1.isSubTypeOf)(this.dataType, Consts_1.TypeAlias.SPARQL_NUMERIC, this.openWorldType);
        if (isNumericOrBool) {
          return false;
        }
        throw new Err.EBVCoercionError(this);
      }
      toRDF() {
        return DF.literal(this.str(), this.language || DF.namedNode(this.dataType));
      }
      str() {
        return this.strValue || "";
      }
    };
    exports.NonLexicalLiteral = NonLexicalLiteral;
    function isNonLexicalLiteral(lit) {
      if (lit instanceof NonLexicalLiteral) {
        return lit;
      }
      return void 0;
    }
    exports.isNonLexicalLiteral = isNonLexicalLiteral;
  }
});

// node_modules/@comunica/expression-evaluator/lib/expressions/Operator.js
var require_Operator = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/expressions/Operator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Operator = void 0;
    var Expressions_1 = require_Expressions();
    var Operator = class {
      constructor(args, apply) {
        this.args = args;
        this.apply = apply;
        this.expressionType = Expressions_1.ExpressionType.Operator;
      }
    };
    exports.Operator = Operator;
  }
});

// node_modules/@comunica/expression-evaluator/lib/expressions/SpecialOperator.js
var require_SpecialOperator = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/expressions/SpecialOperator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SpecialOperator = void 0;
    var Expressions_1 = require_Expressions();
    var SpecialOperator = class {
      constructor(args, applyAsync, applySynchronously) {
        this.args = args;
        this.applyAsync = applyAsync;
        this.applySynchronously = applySynchronously;
        this.expressionType = Expressions_1.ExpressionType.SpecialOperator;
      }
    };
    exports.SpecialOperator = SpecialOperator;
  }
});

// node_modules/@comunica/expression-evaluator/lib/expressions/Named.js
var require_Named = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/expressions/Named.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Named = void 0;
    var Expressions_1 = require_Expressions();
    var Named = class {
      constructor(name, args, apply) {
        this.name = name;
        this.args = args;
        this.apply = apply;
        this.expressionType = Expressions_1.ExpressionType.Named;
      }
    };
    exports.Named = Named;
  }
});

// node_modules/@comunica/expression-evaluator/lib/expressions/Aggregate.js
var require_Aggregate = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/expressions/Aggregate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Aggregate = void 0;
    var Expressions_1 = require_Expressions();
    var Aggregate = class {
      constructor(name, expression) {
        this.name = name;
        this.expression = expression;
        this.expressionType = Expressions_1.ExpressionType.Aggregate;
      }
    };
    exports.Aggregate = Aggregate;
  }
});

// node_modules/@comunica/expression-evaluator/lib/expressions/Existence.js
var require_Existence = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/expressions/Existence.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Existence = void 0;
    var Expressions_1 = require_Expressions();
    var Existence = class {
      constructor(expression) {
        this.expression = expression;
        this.expressionType = Expressions_1.ExpressionType.Existence;
      }
    };
    exports.Existence = Existence;
  }
});

// node_modules/@comunica/expression-evaluator/lib/expressions/AsyncExtension.js
var require_AsyncExtension = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/expressions/AsyncExtension.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncExtension = void 0;
    var Expressions_1 = require_Expressions();
    var AsyncExtension = class {
      constructor(name, args, apply) {
        this.name = name;
        this.args = args;
        this.apply = apply;
        this.expressionType = Expressions_1.ExpressionType.AsyncExtension;
      }
    };
    exports.AsyncExtension = AsyncExtension;
  }
});

// node_modules/@comunica/expression-evaluator/lib/expressions/SyncExtension.js
var require_SyncExtension = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/expressions/SyncExtension.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SyncExtension = void 0;
    var Expressions_1 = require_Expressions();
    var SyncExtension = class {
      constructor(name, args, apply) {
        this.name = name;
        this.args = args;
        this.apply = apply;
        this.expressionType = Expressions_1.ExpressionType.SyncExtension;
      }
    };
    exports.SyncExtension = SyncExtension;
  }
});

// node_modules/@comunica/expression-evaluator/lib/expressions/index.js
var require_expressions = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/expressions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Expressions(), exports);
    __exportStar(require_Variable2(), exports);
    __exportStar(require_Term(), exports);
    __exportStar(require_Operator(), exports);
    __exportStar(require_SpecialOperator(), exports);
    __exportStar(require_Named(), exports);
    __exportStar(require_Aggregate(), exports);
    __exportStar(require_Existence(), exports);
    __exportStar(require_AsyncExtension(), exports);
    __exportStar(require_SyncExtension(), exports);
  }
});

// node_modules/@comunica/expression-evaluator/lib/functions/Core.js
var require_Core = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/functions/Core.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SpecialFunction = exports.NamedFunction = exports.RegularFunction = exports.BaseFunction = void 0;
    var Err = require_Errors();
    var BaseFunction = class {
      constructor(operator, definition) {
        this.operator = operator;
        this.apply = (args, context) => {
          const concreteFunction = this.monomorph(args, context.superTypeProvider, context.functionArgumentsCache) || this.handleInvalidTypes(args);
          return concreteFunction(context)(args);
        };
        this.arity = definition.arity;
        this.overloads = definition.overloads;
      }
      /**
       * We monomorph by checking the map of overloads for keys corresponding
       * to the runtime types. We start by checking for an implementation for the
       * most concrete types (integer, string, date, IRI), if we find none,
       * we consider their term types (literal, blank, IRI), and lastly we consider
       * all arguments as generic terms.
       *
       * Another option would be to populate the overloads with an implementation
       * for every concrete type when the function is generic over termtypes or
       * terms.
       */
      monomorph(args, superTypeProvider, functionArgumentsCache) {
        return this.overloads.search(args, superTypeProvider, functionArgumentsCache);
      }
    };
    exports.BaseFunction = BaseFunction;
    var RegularFunction = class extends BaseFunction {
      constructor(op, definition) {
        super(op, definition);
        this.functionClass = "regular";
      }
      handleInvalidTypes(args) {
        throw new Err.InvalidArgumentTypes(args, this.operator);
      }
    };
    exports.RegularFunction = RegularFunction;
    var NamedFunction = class extends BaseFunction {
      constructor(op, definition) {
        super(op, definition);
        this.functionClass = "named";
      }
      handleInvalidTypes(args) {
        throw new Err.InvalidArgumentTypes(args, this.operator);
      }
    };
    exports.NamedFunction = NamedFunction;
    var SpecialFunction = class {
      constructor(operator, definition) {
        this.operator = operator;
        this.functionClass = "special";
        this.arity = definition.arity;
        this.applySynchronously = definition.applySynchronously;
        this.applyAsync = definition.applyAsync;
        this.checkArity = definition.checkArity || defaultArityCheck(this.arity);
      }
    };
    exports.SpecialFunction = SpecialFunction;
    function defaultArityCheck(arity) {
      return (args) => {
        if (arity === Number.POSITIVE_INFINITY) {
          return true;
        }
        return args.length === arity;
      };
    }
  }
});

// node_modules/@comunica/expression-evaluator/lib/functions/NamedFunctions.js
var require_NamedFunctions = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/functions/NamedFunctions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.namedDefinitions = void 0;
    var E = require_expressions();
    var expressions_1 = require_expressions();
    var Consts_1 = require_Consts();
    var DateTimeHelpers_1 = require_DateTimeHelpers();
    var Err = require_Errors();
    var Parsing_1 = require_Parsing();
    var Helpers_1 = require_Helpers();
    var xsdToString = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(Consts_1.TypeURL.XSD_STRING).onNumeric1(() => (val) => (0, Helpers_1.string)((0, Helpers_1.float)(val.typedValue).str())).onBoolean1Typed(() => (val) => (0, Helpers_1.string)((0, Helpers_1.bool)(val).str())).onTerm1(() => (val) => (0, Helpers_1.string)(val.str())).collect()
    };
    var xsdToFloat = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(Consts_1.TypeURL.XSD_FLOAT).onNumeric1(() => (val) => (0, Helpers_1.float)(val.typedValue)).onBoolean1Typed(() => (val) => (0, Helpers_1.float)(val ? 1 : 0)).onUnary(Consts_1.TypeURL.XSD_STRING, () => (val) => {
        const result = (0, Parsing_1.parseXSDFloat)(val.str());
        if (result === void 0) {
          throw new Err.CastError(val, Consts_1.TypeURL.XSD_FLOAT);
        }
        return (0, Helpers_1.float)(result);
      }, false).collect()
    };
    var xsdToDouble = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(Consts_1.TypeURL.XSD_DOUBLE).onNumeric1(() => (val) => (0, Helpers_1.double)(val.typedValue)).onBoolean1Typed(() => (val) => (0, Helpers_1.double)(val ? 1 : 0)).onUnary(Consts_1.TypeURL.XSD_STRING, () => (val) => {
        const result = (0, Parsing_1.parseXSDFloat)(val.str());
        if (result === void 0) {
          throw new Err.CastError(val, Consts_1.TypeURL.XSD_DOUBLE);
        }
        return (0, Helpers_1.double)(result);
      }, false).collect()
    };
    var xsdToDecimal = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(Consts_1.TypeURL.XSD_DECIMAL).onNumeric1(() => (val) => {
        const result = (0, Parsing_1.parseXSDDecimal)(val.str());
        if (result === void 0) {
          throw new Err.CastError(val, Consts_1.TypeURL.XSD_DECIMAL);
        }
        return (0, Helpers_1.decimal)(result);
      }).onString1(() => (val) => {
        const str = val.str();
        const result = /^([+-])?(\d+(\.\d+)?)$/u.test(str) ? (0, Parsing_1.parseXSDDecimal)(str) : void 0;
        if (result === void 0) {
          throw new Err.CastError(val, Consts_1.TypeURL.XSD_DECIMAL);
        }
        return (0, Helpers_1.decimal)(result);
      }, false).onBoolean1Typed(() => (val) => (0, Helpers_1.decimal)(val ? 1 : 0)).collect()
    };
    var xsdToInteger = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(Consts_1.TypeURL.XSD_INTEGER).onBoolean1Typed(() => (val) => (0, Helpers_1.integer)(val ? 1 : 0)).onNumeric1(() => (val) => {
        const result = (0, Parsing_1.parseXSDInteger)(val.str());
        if (result === void 0) {
          throw new Err.CastError(val, Consts_1.TypeURL.XSD_INTEGER);
        }
        return (0, Helpers_1.integer)(result);
      }, false).onString1(() => (val) => {
        const str = val.str();
        const result = /^\d+$/u.test(str) ? (0, Parsing_1.parseXSDInteger)(str) : void 0;
        if (result === void 0) {
          throw new Err.CastError(val, Consts_1.TypeURL.XSD_INTEGER);
        }
        return (0, Helpers_1.integer)(result);
      }).collect()
    };
    var xsdToDatetime = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(Consts_1.TypeURL.XSD_DATE_TIME).onUnary(Consts_1.TypeURL.XSD_DATE_TIME, () => (val) => val).onUnary(Consts_1.TypeURL.XSD_STRING, () => (val) => (0, Helpers_1.dateTime)((0, Parsing_1.parseDateTime)(val.str()), val.str()), false).onUnary(Consts_1.TypeURL.XSD_DATE, () => (val) => new E.DateTimeLiteral({ ...val.typedValue, hours: 0, minutes: 0, seconds: 0 })).collect()
    };
    var xsdToBoolean = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(Consts_1.TypeURL.XSD_BOOLEAN).onNumeric1(() => (val) => (0, Helpers_1.bool)(val.coerceEBV()), true).onUnary(Consts_1.TypeURL.XSD_BOOLEAN, () => (val) => (0, Helpers_1.bool)(val.coerceEBV()), true).onUnary(Consts_1.TypeURL.XSD_STRING, () => (val) => {
        switch (val.str()) {
          case "true":
            return (0, Helpers_1.bool)(true);
          case "false":
            return (0, Helpers_1.bool)(false);
          case "1":
            return (0, Helpers_1.bool)(true);
          case "0":
            return (0, Helpers_1.bool)(false);
          default:
            throw new Err.CastError(val, Consts_1.TypeURL.XSD_BOOLEAN);
        }
      }, false).collect()
    };
    var xsdToTime = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(Consts_1.TypeURL.XSD_TIME).onUnary(Consts_1.TypeURL.XSD_TIME, () => (val) => new E.TimeLiteral(val.typedValue, val.strValue)).onUnary(Consts_1.TypeURL.XSD_DATE_TIME, () => (val) => new E.TimeLiteral(val.typedValue)).onStringly1(() => (val) => new E.TimeLiteral((0, Parsing_1.parseTime)(val.str()))).collect()
    };
    var xsdToDate = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(Consts_1.TypeURL.XSD_DATE).onUnary(Consts_1.TypeURL.XSD_DATE, () => (val) => new E.DateLiteral(val.typedValue, val.strValue)).onUnary(Consts_1.TypeURL.XSD_DATE_TIME, () => (val) => new E.DateLiteral(val.typedValue)).onStringly1(() => (val) => new E.DateLiteral((0, Parsing_1.parseDate)(val.str()))).collect()
    };
    var xsdToDuration = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(Consts_1.TypeURL.XSD_DURATION).onUnary(Consts_1.TypeURL.XSD_DURATION, () => (val) => (
        // Copy is needed to make sure the dataType is changed, even when the provided type was a subtype
        new E.DurationLiteral(val.typedValue, val.strValue)
      )).onStringly1(() => (val) => new expressions_1.DurationLiteral((0, Parsing_1.parseDuration)(val.str()))).collect()
    };
    var xsdToDayTimeDuration = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(Consts_1.TypeURL.XSD_DAY_TIME_DURATION).onUnary(Consts_1.TypeURL.XSD_DURATION, () => (val) => (
        // Copy is needed to make sure the dataType is changed, even when the provided type was a subtype
        new E.DayTimeDurationLiteral((0, DateTimeHelpers_1.trimToDayTimeDuration)(val.typedValue))
      )).onStringly1(() => (val) => new E.DayTimeDurationLiteral((0, Parsing_1.parseDayTimeDuration)(val.str()))).collect()
    };
    var xsdToYearMonthDuration = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION).onUnary(Consts_1.TypeURL.XSD_DURATION, () => (val) => (
        // Copy is needed to make sure the dataType is changed, even when the provided type was a subtype
        new E.YearMonthDurationLiteral((0, DateTimeHelpers_1.trimToYearMonthDuration)(val.typedValue))
      )).onStringly1(() => (val) => new E.YearMonthDurationLiteral((0, Parsing_1.parseYearMonthDuration)(val.str()))).collect()
    };
    exports.namedDefinitions = {
      // --------------------------------------------------------------------------
      // XPath Constructor functions
      // https://www.w3.org/TR/sparql11-query/#FunctionMapping
      // --------------------------------------------------------------------------
      [Consts_1.TypeURL.XSD_STRING]: xsdToString,
      [Consts_1.TypeURL.XSD_FLOAT]: xsdToFloat,
      [Consts_1.TypeURL.XSD_DOUBLE]: xsdToDouble,
      [Consts_1.TypeURL.XSD_DECIMAL]: xsdToDecimal,
      [Consts_1.TypeURL.XSD_INTEGER]: xsdToInteger,
      [Consts_1.TypeURL.XSD_DATE_TIME]: xsdToDatetime,
      [Consts_1.TypeURL.XSD_DATE]: xsdToDate,
      [Consts_1.TypeURL.XSD_BOOLEAN]: xsdToBoolean,
      [Consts_1.TypeURL.XSD_TIME]: xsdToTime,
      [Consts_1.TypeURL.XSD_DURATION]: xsdToDuration,
      [Consts_1.TypeURL.XSD_DAY_TIME_DURATION]: xsdToDayTimeDuration,
      [Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION]: xsdToYearMonthDuration
    };
  }
});

// node_modules/bignumber.js/bignumber.js
var require_bignumber = __commonJS({
  "node_modules/bignumber.js/bignumber.js"(exports, module) {
    (function(globalObject) {
      "use strict";
      var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
      function clone(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
          prefix: "",
          groupSize: 3,
          secondaryGroupSize: 0,
          groupSeparator: ",",
          decimalSeparator: ".",
          fractionGroupSize: 0,
          fractionGroupSeparator: "\xA0",
          // non-breaking space
          suffix: ""
        }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        function BigNumber2(v, b) {
          var alphabet, c, caseChanged, e, i2, isNum, len, str, x = this;
          if (!(x instanceof BigNumber2))
            return new BigNumber2(v, b);
          if (b == null) {
            if (v && v._isBigNumber === true) {
              x.s = v.s;
              if (!v.c || v.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (v.e < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = v.e;
                x.c = v.c.slice();
              }
              return;
            }
            if ((isNum = typeof v == "number") && v * 0 == 0) {
              x.s = 1 / v < 0 ? (v = -v, -1) : 1;
              if (v === ~~v) {
                for (e = 0, i2 = v; i2 >= 10; i2 /= 10, e++)
                  ;
                if (e > MAX_EXP) {
                  x.c = x.e = null;
                } else {
                  x.e = e;
                  x.c = [v];
                }
                return;
              }
              str = String(v);
            } else {
              if (!isNumeric.test(str = String(v)))
                return parseNumeric(x, str, isNum);
              x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }
            if ((e = str.indexOf(".")) > -1)
              str = str.replace(".", "");
            if ((i2 = str.search(/e/i)) > 0) {
              if (e < 0)
                e = i2;
              e += +str.slice(i2 + 1);
              str = str.substring(0, i2);
            } else if (e < 0) {
              e = str.length;
            }
          } else {
            intCheck(b, 2, ALPHABET.length, "Base");
            if (b == 10 && alphabetHasNormalDecimalDigits) {
              x = new BigNumber2(v);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }
            str = String(v);
            if (isNum = typeof v == "number") {
              if (v * 0 != 0)
                return parseNumeric(x, str, isNum, b);
              x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
              if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                throw Error(tooManyDigits + v);
              }
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
            alphabet = ALPHABET.slice(0, b);
            e = i2 = 0;
            for (len = str.length; i2 < len; i2++) {
              if (alphabet.indexOf(c = str.charAt(i2)) < 0) {
                if (c == ".") {
                  if (i2 > e) {
                    e = len;
                    continue;
                  }
                } else if (!caseChanged) {
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i2 = -1;
                    e = 0;
                    continue;
                  }
                }
                return parseNumeric(x, String(v), isNum, b);
              }
            }
            isNum = false;
            str = convertBase(str, b, 10, x.s);
            if ((e = str.indexOf(".")) > -1)
              str = str.replace(".", "");
            else
              e = str.length;
          }
          for (i2 = 0; str.charCodeAt(i2) === 48; i2++)
            ;
          for (len = str.length; str.charCodeAt(--len) === 48; )
            ;
          if (str = str.slice(i2, ++len)) {
            len -= i2;
            if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
              throw Error(tooManyDigits + x.s * v);
            }
            if ((e = e - i2 - 1) > MAX_EXP) {
              x.c = x.e = null;
            } else if (e < MIN_EXP) {
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];
              i2 = (e + 1) % LOG_BASE;
              if (e < 0)
                i2 += LOG_BASE;
              if (i2 < len) {
                if (i2)
                  x.c.push(+str.slice(0, i2));
                for (len -= LOG_BASE; i2 < len; ) {
                  x.c.push(+str.slice(i2, i2 += LOG_BASE));
                }
                i2 = LOG_BASE - (str = str.slice(i2)).length;
              } else {
                i2 -= len;
              }
              for (; i2--; str += "0")
                ;
              x.c.push(+str);
            }
          } else {
            x.c = [x.e = 0];
          }
        }
        BigNumber2.clone = clone;
        BigNumber2.ROUND_UP = 0;
        BigNumber2.ROUND_DOWN = 1;
        BigNumber2.ROUND_CEIL = 2;
        BigNumber2.ROUND_FLOOR = 3;
        BigNumber2.ROUND_HALF_UP = 4;
        BigNumber2.ROUND_HALF_DOWN = 5;
        BigNumber2.ROUND_HALF_EVEN = 6;
        BigNumber2.ROUND_HALF_CEIL = 7;
        BigNumber2.ROUND_HALF_FLOOR = 8;
        BigNumber2.EUCLID = 9;
        BigNumber2.config = BigNumber2.set = function(obj) {
          var p, v;
          if (obj != null) {
            if (typeof obj == "object") {
              if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                DECIMAL_PLACES = v;
              }
              if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                v = obj[p];
                intCheck(v, 0, 8, p);
                ROUNDING_MODE = v;
              }
              if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, 0, p);
                  intCheck(v[1], 0, MAX, p);
                  TO_EXP_NEG = v[0];
                  TO_EXP_POS = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                }
              }
              if (obj.hasOwnProperty(p = "RANGE")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, -1, p);
                  intCheck(v[1], 1, MAX, p);
                  MIN_EXP = v[0];
                  MAX_EXP = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  if (v) {
                    MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                  } else {
                    throw Error(bignumberError + p + " cannot be zero: " + v);
                  }
                }
              }
              if (obj.hasOwnProperty(p = "CRYPTO")) {
                v = obj[p];
                if (v === !!v) {
                  if (v) {
                    if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v;
                    } else {
                      CRYPTO = !v;
                      throw Error(bignumberError + "crypto unavailable");
                    }
                  } else {
                    CRYPTO = v;
                  }
                } else {
                  throw Error(bignumberError + p + " not true or false: " + v);
                }
              }
              if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                v = obj[p];
                intCheck(v, 0, 9, p);
                MODULO_MODE = v;
              }
              if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                POW_PRECISION = v;
              }
              if (obj.hasOwnProperty(p = "FORMAT")) {
                v = obj[p];
                if (typeof v == "object")
                  FORMAT = v;
                else
                  throw Error(bignumberError + p + " not an object: " + v);
              }
              if (obj.hasOwnProperty(p = "ALPHABET")) {
                v = obj[p];
                if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                  alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                  ALPHABET = v;
                } else {
                  throw Error(bignumberError + p + " invalid: " + v);
                }
              }
            } else {
              throw Error(bignumberError + "Object expected: " + obj);
            }
          }
          return {
            DECIMAL_PLACES,
            ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO,
            MODULO_MODE,
            POW_PRECISION,
            FORMAT,
            ALPHABET
          };
        };
        BigNumber2.isBigNumber = function(v) {
          if (!v || v._isBigNumber !== true)
            return false;
          if (!BigNumber2.DEBUG)
            return true;
          var i2, n, c = v.c, e = v.e, s = v.s;
          out:
            if ({}.toString.call(c) == "[object Array]") {
              if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
                if (c[0] === 0) {
                  if (e === 0 && c.length === 1)
                    return true;
                  break out;
                }
                i2 = (e + 1) % LOG_BASE;
                if (i2 < 1)
                  i2 += LOG_BASE;
                if (String(c[0]).length == i2) {
                  for (i2 = 0; i2 < c.length; i2++) {
                    n = c[i2];
                    if (n < 0 || n >= BASE || n !== mathfloor(n))
                      break out;
                  }
                  if (n !== 0)
                    return true;
                }
              }
            } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
              return true;
            }
          throw Error(bignumberError + "Invalid BigNumber: " + v);
        };
        BigNumber2.maximum = BigNumber2.max = function() {
          return maxOrMin(arguments, -1);
        };
        BigNumber2.minimum = BigNumber2.min = function() {
          return maxOrMin(arguments, 1);
        };
        BigNumber2.random = function() {
          var pow2_53 = 9007199254740992;
          var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
            return mathfloor(Math.random() * pow2_53);
          } : function() {
            return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
          };
          return function(dp) {
            var a, b, e, k, v, i2 = 0, c = [], rand = new BigNumber2(ONE);
            if (dp == null)
              dp = DECIMAL_PLACES;
            else
              intCheck(dp, 0, MAX);
            k = mathceil(dp / LOG_BASE);
            if (CRYPTO) {
              if (crypto.getRandomValues) {
                a = crypto.getRandomValues(new Uint32Array(k *= 2));
                for (; i2 < k; ) {
                  v = a[i2] * 131072 + (a[i2 + 1] >>> 11);
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i2] = b[0];
                    a[i2 + 1] = b[1];
                  } else {
                    c.push(v % 1e14);
                    i2 += 2;
                  }
                }
                i2 = k / 2;
              } else if (crypto.randomBytes) {
                a = crypto.randomBytes(k *= 7);
                for (; i2 < k; ) {
                  v = (a[i2] & 31) * 281474976710656 + a[i2 + 1] * 1099511627776 + a[i2 + 2] * 4294967296 + a[i2 + 3] * 16777216 + (a[i2 + 4] << 16) + (a[i2 + 5] << 8) + a[i2 + 6];
                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i2);
                  } else {
                    c.push(v % 1e14);
                    i2 += 7;
                  }
                }
                i2 = k / 7;
              } else {
                CRYPTO = false;
                throw Error(bignumberError + "crypto unavailable");
              }
            }
            if (!CRYPTO) {
              for (; i2 < k; ) {
                v = random53bitInt();
                if (v < 9e15)
                  c[i2++] = v % 1e14;
              }
            }
            k = c[--i2];
            dp %= LOG_BASE;
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i2] = mathfloor(k / v) * v;
            }
            for (; c[i2] === 0; c.pop(), i2--)
              ;
            if (i2 < 0) {
              c = [e = 0];
            } else {
              for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE)
                ;
              for (i2 = 1, v = c[0]; v >= 10; v /= 10, i2++)
                ;
              if (i2 < LOG_BASE)
                e -= LOG_BASE - i2;
            }
            rand.e = e;
            rand.c = c;
            return rand;
          };
        }();
        BigNumber2.sum = function() {
          var i2 = 1, args = arguments, sum = new BigNumber2(args[0]);
          for (; i2 < args.length; )
            sum = sum.plus(args[i2++]);
          return sum;
        };
        convertBase = /* @__PURE__ */ function() {
          var decimal = "0123456789";
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j, arr = [0], arrL, i2 = 0, len = str.length;
            for (; i2 < len; ) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn)
                ;
              arr[0] += alphabet.indexOf(str.charAt(i2++));
              for (j = 0; j < arr.length; j++) {
                if (arr[j] > baseOut - 1) {
                  if (arr[j + 1] == null)
                    arr[j + 1] = 0;
                  arr[j + 1] += arr[j] / baseOut | 0;
                  arr[j] %= baseOut;
                }
              }
            }
            return arr.reverse();
          }
          return function(str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet, d, e, k, r, x, xc, y, i2 = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (i2 >= 0) {
              k = POW_PRECISION;
              POW_PRECISION = 0;
              str = str.replace(".", "");
              y = new BigNumber2(baseIn);
              x = y.pow(str.length - i2);
              POW_PRECISION = k;
              y.c = toBaseOut(
                toFixedPoint(coeffToString(x.c), x.e, "0"),
                10,
                baseOut,
                decimal
              );
              y.e = y.c.length;
            }
            xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
            e = k = xc.length;
            for (; xc[--k] == 0; xc.pop())
              ;
            if (!xc[0])
              return alphabet.charAt(0);
            if (i2 < 0) {
              --e;
            } else {
              x.c = xc;
              x.e = e;
              x.s = sign;
              x = div(x, y, dp, rm, baseOut);
              xc = x.c;
              r = x.r;
              e = x.e;
            }
            d = e + dp + 1;
            i2 = xc[d];
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;
            r = rm < 4 ? (i2 != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i2 > k || i2 == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
            if (d < 1 || !xc[0]) {
              str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {
              xc.length = d;
              if (r) {
                for (--baseOut; ++xc[--d] > baseOut; ) {
                  xc[d] = 0;
                  if (!d) {
                    ++e;
                    xc = [1].concat(xc);
                  }
                }
              }
              for (k = xc.length; !xc[--k]; )
                ;
              for (i2 = 0, str = ""; i2 <= k; str += alphabet.charAt(xc[i2++]))
                ;
              str = toFixedPoint(str, e, alphabet.charAt(0));
            }
            return str;
          };
        }();
        div = /* @__PURE__ */ function() {
          function multiply(x, k, base) {
            var m, temp, xlo, xhi, carry = 0, i2 = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
            for (x = x.slice(); i2--; ) {
              xlo = x[i2] % SQRT_BASE;
              xhi = x[i2] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i2] = temp % base;
            }
            if (carry)
              x = [carry].concat(x);
            return x;
          }
          function compare2(a, b, aL, bL) {
            var i2, cmp;
            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
              for (i2 = cmp = 0; i2 < aL; i2++) {
                if (a[i2] != b[i2]) {
                  cmp = a[i2] > b[i2] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }
          function subtract(a, b, aL, base) {
            var i2 = 0;
            for (; aL--; ) {
              a[aL] -= i2;
              i2 = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i2 * base + a[aL] - b[aL];
            }
            for (; !a[0] && a.length > 1; a.splice(0, 1))
              ;
          }
          return function(x, y, dp, rm, base) {
            var cmp, e, i2, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
            if (!xc || !xc[0] || !yc || !yc[0]) {
              return new BigNumber2(
                // Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
                  // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                  xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                )
              );
            }
            q = new BigNumber2(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;
            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }
            for (i2 = 0; yc[i2] == (xc[i2] || 0); i2++)
              ;
            if (yc[i2] > (xc[i2] || 0))
              e--;
            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i2 = 0;
              s += 2;
              n = mathfloor(base / (yc[0] + 1));
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }
              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; rem[remL++] = 0)
                ;
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2)
                yc0++;
              do {
                n = 0;
                cmp = compare2(yc, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL)
                    rem0 = rem0 * base + (rem[1] || 0);
                  n = mathfloor(rem0 / yc0);
                  if (n > 1) {
                    if (n >= base)
                      n = base - 1;
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;
                    while (compare2(prod, rem, prodL, remL) == 1) {
                      n--;
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {
                    if (n == 0) {
                      cmp = n = 1;
                    }
                    prod = yc.slice();
                    prodL = prod.length;
                  }
                  if (prodL < remL)
                    prod = [0].concat(prod);
                  subtract(rem, prod, remL, base);
                  remL = rem.length;
                  if (cmp == -1) {
                    while (compare2(yc, rem, yL, remL) < 1) {
                      n++;
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                }
                qc[i2++] = n;
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);
              more = rem[0] != null;
              if (!qc[0])
                qc.splice(0, 1);
            }
            if (base == BASE) {
              for (i2 = 1, s = qc[0]; s >= 10; s /= 10, i2++)
                ;
              round(q, dp + (q.e = i2 + e * LOG_BASE - 1) + 1, rm, more);
            } else {
              q.e = e;
              q.r = +more;
            }
            return q;
          };
        }();
        function format(n, i2, rm, id) {
          var c0, e, ne, len, str;
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          if (!n.c)
            return n.toString();
          c0 = n.c[0];
          ne = n.e;
          if (i2 == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
          } else {
            n = round(new BigNumber2(n), i2, rm);
            e = n.e;
            str = coeffToString(n.c);
            len = str.length;
            if (id == 1 || id == 2 && (i2 <= e || e <= TO_EXP_NEG)) {
              for (; len < i2; str += "0", len++)
                ;
              str = toExponential(str, e);
            } else {
              i2 -= ne;
              str = toFixedPoint(str, e, "0");
              if (e + 1 > len) {
                if (--i2 > 0)
                  for (str += "."; i2--; str += "0")
                    ;
              } else {
                i2 += e - len;
                if (i2 > 0) {
                  if (e + 1 == len)
                    str += ".";
                  for (; i2--; str += "0")
                    ;
                }
              }
            }
          }
          return n.s < 0 && c0 ? "-" + str : str;
        }
        function maxOrMin(args, n) {
          var k, y, i2 = 1, x = new BigNumber2(args[0]);
          for (; i2 < args.length; i2++) {
            y = new BigNumber2(args[i2]);
            if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
              x = y;
            }
          }
          return x;
        }
        function normalise(n, c, e) {
          var i2 = 1, j = c.length;
          for (; !c[--j]; c.pop())
            ;
          for (j = c[0]; j >= 10; j /= 10, i2++)
            ;
          if ((e = i2 + e * LOG_BASE - 1) > MAX_EXP) {
            n.c = n.e = null;
          } else if (e < MIN_EXP) {
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }
          return n;
        }
        parseNumeric = /* @__PURE__ */ function() {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
          return function(x, str, isNum, b) {
            var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!isNum) {
                s = s.replace(basePrefix, function(m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                  return !b || b == base ? p1 : m;
                });
                if (b) {
                  base = b;
                  s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                }
                if (str != s)
                  return new BigNumber2(s, base);
              }
              if (BigNumber2.DEBUG) {
                throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
              }
              x.s = null;
            }
            x.c = x.e = null;
          };
        }();
        function round(x, sd, rm, r) {
          var d, i2, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
          if (xc) {
            out: {
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++)
                ;
              i2 = sd - d;
              if (i2 < 0) {
                i2 += LOG_BASE;
                j = sd;
                n = xc[ni = 0];
                rd = mathfloor(n / pows10[d - j - 1] % 10);
              } else {
                ni = mathceil((i2 + 1) / LOG_BASE);
                if (ni >= xc.length) {
                  if (r) {
                    for (; xc.length <= ni; xc.push(0))
                      ;
                    n = rd = 0;
                    d = 1;
                    i2 %= LOG_BASE;
                    j = i2 - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];
                  for (d = 1; k >= 10; k /= 10, d++)
                    ;
                  i2 %= LOG_BASE;
                  j = i2 - LOG_BASE + d;
                  rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
                }
              }
              r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
              xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
              r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
              (i2 > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
              if (sd < 1 || !xc[0]) {
                xc.length = 0;
                if (r) {
                  sd -= x.e + 1;
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {
                  xc[0] = x.e = 0;
                }
                return x;
              }
              if (i2 == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i2];
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }
              if (r) {
                for (; ; ) {
                  if (ni == 0) {
                    for (i2 = 1, j = xc[0]; j >= 10; j /= 10, i2++)
                      ;
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++)
                      ;
                    if (i2 != k) {
                      x.e++;
                      if (xc[0] == BASE)
                        xc[0] = 1;
                    }
                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE)
                      break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }
              for (i2 = xc.length; xc[--i2] === 0; xc.pop())
                ;
            }
            if (x.e > MAX_EXP) {
              x.c = x.e = null;
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }
          return x;
        }
        function valueOf(n) {
          var str, e = n.e;
          if (e === null)
            return n.toString();
          str = coeffToString(n.c);
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
          return n.s < 0 ? "-" + str : str;
        }
        P.absoluteValue = P.abs = function() {
          var x = new BigNumber2(this);
          if (x.s < 0)
            x.s = 1;
          return x;
        };
        P.comparedTo = function(y, b) {
          return compare(this, new BigNumber2(y, b));
        };
        P.decimalPlaces = P.dp = function(dp, rm) {
          var c, n, v, x = this;
          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            return round(new BigNumber2(x), dp + x.e + 1, rm);
          }
          if (!(c = x.c))
            return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
          if (v = c[v])
            for (; v % 10 == 0; v /= 10, n--)
              ;
          if (n < 0)
            n = 0;
          return n;
        };
        P.dividedBy = P.div = function(y, b) {
          return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        P.dividedToIntegerBy = P.idiv = function(y, b) {
          return div(this, new BigNumber2(y, b), 0, 1);
        };
        P.exponentiatedBy = P.pow = function(n, m) {
          var half, isModExp, i2, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
          n = new BigNumber2(n);
          if (n.c && !n.isInteger()) {
            throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
          }
          if (m != null)
            m = new BigNumber2(m);
          nIsBig = n.e > 14;
          if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
            y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
            return m ? y.mod(m) : y;
          }
          nIsNeg = n.s < 0;
          if (m) {
            if (m.c ? !m.c[0] : !m.s)
              return new BigNumber2(NaN);
            isModExp = !nIsNeg && x.isInteger() && m.isInteger();
            if (isModExp)
              x = x.mod(m);
          } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
            k = x.s < 0 && isOdd(n) ? -0 : 0;
            if (x.e > -1)
              k = 1 / k;
            return new BigNumber2(nIsNeg ? 1 / k : k);
          } else if (POW_PRECISION) {
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }
          if (nIsBig) {
            half = new BigNumber2(0.5);
            if (nIsNeg)
              n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i2 = Math.abs(+valueOf(n));
            nIsOdd = i2 % 2;
          }
          y = new BigNumber2(ONE);
          for (; ; ) {
            if (nIsOdd) {
              y = y.times(x);
              if (!y.c)
                break;
              if (k) {
                if (y.c.length > k)
                  y.c.length = k;
              } else if (isModExp) {
                y = y.mod(m);
              }
            }
            if (i2) {
              i2 = mathfloor(i2 / 2);
              if (i2 === 0)
                break;
              nIsOdd = i2 % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);
              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i2 = +valueOf(n);
                if (i2 === 0)
                  break;
                nIsOdd = i2 % 2;
              }
            }
            x = x.times(x);
            if (k) {
              if (x.c && x.c.length > k)
                x.c.length = k;
            } else if (isModExp) {
              x = x.mod(m);
            }
          }
          if (isModExp)
            return y;
          if (nIsNeg)
            y = ONE.div(y);
          return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        P.integerValue = function(rm) {
          var n = new BigNumber2(this);
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };
        P.isEqualTo = P.eq = function(y, b) {
          return compare(this, new BigNumber2(y, b)) === 0;
        };
        P.isFinite = function() {
          return !!this.c;
        };
        P.isGreaterThan = P.gt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) > 0;
        };
        P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
        };
        P.isInteger = function() {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        P.isLessThan = P.lt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) < 0;
        };
        P.isLessThanOrEqualTo = P.lte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
        };
        P.isNaN = function() {
          return !this.s;
        };
        P.isNegative = function() {
          return this.s < 0;
        };
        P.isPositive = function() {
          return this.s > 0;
        };
        P.isZero = function() {
          return !!this.c && this.c[0] == 0;
        };
        P.minus = function(y, b) {
          var i2, j, t, xLTy, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b)
            return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc)
              return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
            if (!xc[0] || !yc[0]) {
              return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0
              ));
            }
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }
            t.reverse();
            for (b = a; b--; t.push(0))
              ;
            t.reverse();
          } else {
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
            for (a = b = 0; b < j; b++) {
              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }
          if (xLTy) {
            t = xc;
            xc = yc;
            yc = t;
            y.s = -y.s;
          }
          b = (j = yc.length) - (i2 = xc.length);
          if (b > 0)
            for (; b--; xc[i2++] = 0)
              ;
          b = BASE - 1;
          for (; j > a; ) {
            if (xc[--j] < yc[j]) {
              for (i2 = j; i2 && !xc[--i2]; xc[i2] = b)
                ;
              --xc[i2];
              xc[j] += BASE;
            }
            xc[j] -= yc[j];
          }
          for (; xc[0] == 0; xc.splice(0, 1), --ye)
            ;
          if (!xc[0]) {
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }
          return normalise(y, xc, ye);
        };
        P.modulo = P.mod = function(y, b) {
          var q, s, x = this;
          y = new BigNumber2(y, b);
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber2(NaN);
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber2(x);
          }
          if (MODULO_MODE == 9) {
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }
          y = x.minus(q.times(y));
          if (!y.c[0] && MODULO_MODE == 1)
            y.s = x.s;
          return y;
        };
        P.multipliedBy = P.times = function(y, b) {
          var c, e, i2, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
          if (!xc || !yc || !xc[0] || !yc[0]) {
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;
              if (!xc || !yc) {
                y.c = y.e = null;
              } else {
                y.c = [0];
                y.e = 0;
              }
            }
            return y;
          }
          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;
          if (xcL < ycL) {
            zc = xc;
            xc = yc;
            yc = zc;
            i2 = xcL;
            xcL = ycL;
            ycL = i2;
          }
          for (i2 = xcL + ycL, zc = []; i2--; zc.push(0))
            ;
          base = BASE;
          sqrtBase = SQRT_BASE;
          for (i2 = ycL; --i2 >= 0; ) {
            c = 0;
            ylo = yc[i2] % sqrtBase;
            yhi = yc[i2] / sqrtBase | 0;
            for (k = xcL, j = i2 + k; j > i2; ) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }
            zc[j] = c;
          }
          if (c) {
            ++e;
          } else {
            zc.splice(0, 1);
          }
          return normalise(y, zc, e);
        };
        P.negated = function() {
          var x = new BigNumber2(this);
          x.s = -x.s || null;
          return x;
        };
        P.plus = function(y, b) {
          var t, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b)
            return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.minus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc)
              return new BigNumber2(a / 0);
            if (!xc[0] || !yc[0])
              return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }
            t.reverse();
            for (; a--; t.push(0))
              ;
            t.reverse();
          }
          a = xc.length;
          b = yc.length;
          if (a - b < 0) {
            t = yc;
            yc = xc;
            xc = t;
            b = a;
          }
          for (a = 0; b; ) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }
          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }
          return normalise(y, xc, ye);
        };
        P.precision = P.sd = function(sd, rm) {
          var c, n, v, x = this;
          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            return round(new BigNumber2(x), sd, rm);
          }
          if (!(c = x.c))
            return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;
          if (v = c[v]) {
            for (; v % 10 == 0; v /= 10, n--)
              ;
            for (v = c[0]; v >= 10; v /= 10, n++)
              ;
          }
          if (sd && x.e + 1 > n)
            n = x.e + 1;
          return n;
        };
        P.shiftedBy = function(k) {
          intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times("1e" + k);
        };
        P.squareRoot = P.sqrt = function() {
          var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }
          s = Math.sqrt(+valueOf(x));
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0)
              n += "0";
            s = Math.sqrt(+n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
            if (s == 1 / 0) {
              n = "5e" + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e;
            }
            r = new BigNumber2(n);
          } else {
            r = new BigNumber2(s + "");
          }
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3)
              s = 0;
            for (; ; ) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));
              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                if (r.e < e)
                  --s;
                n = n.slice(s - 3, s + 1);
                if (n == "9999" || !rep && n == "4999") {
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);
                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }
                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {
                  if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }
                  break;
                }
              }
            }
          }
          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        P.toExponential = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };
        P.toFixed = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };
        P.toFormat = function(dp, rm, format2) {
          var str, x = this;
          if (format2 == null) {
            if (dp != null && rm && typeof rm == "object") {
              format2 = rm;
              rm = null;
            } else if (dp && typeof dp == "object") {
              format2 = dp;
              dp = rm = null;
            } else {
              format2 = FORMAT;
            }
          } else if (typeof format2 != "object") {
            throw Error(bignumberError + "Argument not an object: " + format2);
          }
          str = x.toFixed(dp, rm);
          if (x.c) {
            var i2, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
            if (g2) {
              i2 = g1;
              g1 = g2;
              g2 = i2;
              len -= i2;
            }
            if (g1 > 0 && len > 0) {
              i2 = len % g1 || g1;
              intPart = intDigits.substr(0, i2);
              for (; i2 < len; i2 += g1)
                intPart += groupSeparator + intDigits.substr(i2, g1);
              if (g2 > 0)
                intPart += groupSeparator + intDigits.slice(i2);
              if (isNeg)
                intPart = "-" + intPart;
            }
            str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
              new RegExp("\\d{" + g2 + "}\\B", "g"),
              "$&" + (format2.fractionGroupSeparator || "")
            ) : fractionPart) : intPart;
          }
          return (format2.prefix || "") + str + (format2.suffix || "");
        };
        P.toFraction = function(md) {
          var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
          if (md != null) {
            n = new BigNumber2(md);
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
            }
          }
          if (!xc)
            return new BigNumber2(x);
          d = new BigNumber2(ONE);
          n1 = d0 = new BigNumber2(ONE);
          d1 = n0 = new BigNumber2(ONE);
          s = coeffToString(xc);
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber2(s);
          n0.c[0] = 0;
          for (; ; ) {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1)
              break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }
          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e = e * 2;
          r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
            div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
          ) < 1 ? [n1, d1] : [n0, d0];
          MAX_EXP = exp;
          return r;
        };
        P.toNumber = function() {
          return +valueOf(this);
        };
        P.toPrecision = function(sd, rm) {
          if (sd != null)
            intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };
        P.toString = function(b) {
          var str, n = this, s = n.s, e = n.e;
          if (e === null) {
            if (s) {
              str = "Infinity";
              if (s < 0)
                str = "-" + str;
            } else {
              str = "NaN";
            }
          } else {
            if (b == null) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
            } else if (b === 10 && alphabetHasNormalDecimalDigits) {
              n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, "0");
            } else {
              intCheck(b, 2, ALPHABET.length, "Base");
              str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
            }
            if (s < 0 && n.c[0])
              str = "-" + str;
          }
          return str;
        };
        P.valueOf = P.toJSON = function() {
          return valueOf(this);
        };
        P._isBigNumber = true;
        if (configObject != null)
          BigNumber2.set(configObject);
        return BigNumber2;
      }
      function bitFloor(n) {
        var i2 = n | 0;
        return n > 0 || n === i2 ? i2 : i2 - 1;
      }
      function coeffToString(a) {
        var s, z, i2 = 1, j = a.length, r = a[0] + "";
        for (; i2 < j; ) {
          s = a[i2++] + "";
          z = LOG_BASE - s.length;
          for (; z--; s = "0" + s)
            ;
          r += s;
        }
        for (j = r.length; r.charCodeAt(--j) === 48; )
          ;
        return r.slice(0, j + 1 || 1);
      }
      function compare(x, y) {
        var a, b, xc = x.c, yc = y.c, i2 = x.s, j = y.s, k = x.e, l = y.e;
        if (!i2 || !j)
          return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        if (a || b)
          return a ? b ? 0 : -j : i2;
        if (i2 != j)
          return i2;
        a = i2 < 0;
        b = k == l;
        if (!xc || !yc)
          return b ? 0 : !xc ^ a ? 1 : -1;
        if (!b)
          return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        for (i2 = 0; i2 < j; i2++)
          if (xc[i2] != yc[i2])
            return xc[i2] > yc[i2] ^ a ? 1 : -1;
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }
      function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) {
          throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
        }
      }
      function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
      }
      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
      }
      function toFixedPoint(str, e, z) {
        var len, zs;
        if (e < 0) {
          for (zs = z + "."; ++e; zs += z)
            ;
          str = zs + str;
        } else {
          len = str.length;
          if (++e > len) {
            for (zs = z, e -= len; --e; zs += z)
              ;
            str += zs;
          } else if (e < len) {
            str = str.slice(0, e) + "." + str.slice(e);
          }
        }
        return str;
      }
      BigNumber = clone();
      BigNumber["default"] = BigNumber.BigNumber = BigNumber;
      if (typeof define == "function" && define.amd) {
        define(function() {
          return BigNumber;
        });
      } else if (typeof module != "undefined" && module.exports) {
        module.exports = BigNumber;
      } else {
        if (!globalObject) {
          globalObject = typeof self != "undefined" && self ? self : window;
        }
        globalObject.BigNumber = BigNumber;
      }
    })(exports);
  }
});

// node_modules/spark-md5/spark-md5.js
var require_spark_md5 = __commonJS({
  "node_modules/spark-md5/spark-md5.js"(exports, module) {
    (function(factory3) {
      if (typeof exports === "object") {
        module.exports = factory3();
      } else if (typeof define === "function" && define.amd) {
        define(factory3);
      } else {
        var glob;
        try {
          glob = window;
        } catch (e) {
          glob = self;
        }
        glob.SparkMD5 = factory3();
      }
    })(function(undefined2) {
      "use strict";
      var add32 = function(a, b) {
        return a + b & 4294967295;
      }, hex_chr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
      function cmn(q, a, b, x, s, t) {
        a = add32(add32(a, q), add32(x, t));
        return add32(a << s | a >>> 32 - s, b);
      }
      function md5cycle(x, k) {
        var a = x[0], b = x[1], c = x[2], d = x[3];
        a += (b & c | ~b & d) + k[0] - 680876936 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[1] - 389564586 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[2] + 606105819 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[4] - 176418897 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[7] - 45705983 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[10] - 42063 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[13] - 40341101 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & d | c & ~d) + k[1] - 165796510 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[11] + 643717713 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[0] - 373897302 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[5] - 701558691 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[10] + 38016083 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[15] - 660478335 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[4] - 405537848 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[9] + 568446438 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[3] - 187363961 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[2] - 51403784 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b ^ c ^ d) + k[5] - 378558 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[14] - 35309556 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[7] - 155497632 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[13] + 681279174 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[0] - 358537222 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[3] - 722521979 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[6] + 76029189 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[9] - 640364487 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[12] - 421815835 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[15] + 530742520 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[2] - 995338651 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
      }
      function md5blk(s) {
        var md5blks = [], i2;
        for (i2 = 0; i2 < 64; i2 += 4) {
          md5blks[i2 >> 2] = s.charCodeAt(i2) + (s.charCodeAt(i2 + 1) << 8) + (s.charCodeAt(i2 + 2) << 16) + (s.charCodeAt(i2 + 3) << 24);
        }
        return md5blks;
      }
      function md5blk_array(a) {
        var md5blks = [], i2;
        for (i2 = 0; i2 < 64; i2 += 4) {
          md5blks[i2 >> 2] = a[i2] + (a[i2 + 1] << 8) + (a[i2 + 2] << 16) + (a[i2 + 3] << 24);
        }
        return md5blks;
      }
      function md51(s) {
        var n = s.length, state = [1732584193, -271733879, -1732584194, 271733878], i2, length, tail, tmp, lo, hi;
        for (i2 = 64; i2 <= n; i2 += 64) {
          md5cycle(state, md5blk(s.substring(i2 - 64, i2)));
        }
        s = s.substring(i2 - 64);
        length = s.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i2 = 0; i2 < length; i2 += 1) {
          tail[i2 >> 2] |= s.charCodeAt(i2) << (i2 % 4 << 3);
        }
        tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
        if (i2 > 55) {
          md5cycle(state, tail);
          for (i2 = 0; i2 < 16; i2 += 1) {
            tail[i2] = 0;
          }
        }
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(state, tail);
        return state;
      }
      function md51_array(a) {
        var n = a.length, state = [1732584193, -271733879, -1732584194, 271733878], i2, length, tail, tmp, lo, hi;
        for (i2 = 64; i2 <= n; i2 += 64) {
          md5cycle(state, md5blk_array(a.subarray(i2 - 64, i2)));
        }
        a = i2 - 64 < n ? a.subarray(i2 - 64) : new Uint8Array(0);
        length = a.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i2 = 0; i2 < length; i2 += 1) {
          tail[i2 >> 2] |= a[i2] << (i2 % 4 << 3);
        }
        tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
        if (i2 > 55) {
          md5cycle(state, tail);
          for (i2 = 0; i2 < 16; i2 += 1) {
            tail[i2] = 0;
          }
        }
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(state, tail);
        return state;
      }
      function rhex(n) {
        var s = "", j;
        for (j = 0; j < 4; j += 1) {
          s += hex_chr[n >> j * 8 + 4 & 15] + hex_chr[n >> j * 8 & 15];
        }
        return s;
      }
      function hex(x) {
        var i2;
        for (i2 = 0; i2 < x.length; i2 += 1) {
          x[i2] = rhex(x[i2]);
        }
        return x.join("");
      }
      if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592") {
        add32 = function(x, y) {
          var lsw = (x & 65535) + (y & 65535), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
          return msw << 16 | lsw & 65535;
        };
      }
      if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
        (function() {
          function clamp(val, length) {
            val = val | 0 || 0;
            if (val < 0) {
              return Math.max(val + length, 0);
            }
            return Math.min(val, length);
          }
          ArrayBuffer.prototype.slice = function(from, to) {
            var length = this.byteLength, begin = clamp(from, length), end = length, num, target, targetArray, sourceArray;
            if (to !== undefined2) {
              end = clamp(to, length);
            }
            if (begin > end) {
              return new ArrayBuffer(0);
            }
            num = end - begin;
            target = new ArrayBuffer(num);
            targetArray = new Uint8Array(target);
            sourceArray = new Uint8Array(this, begin, num);
            targetArray.set(sourceArray);
            return target;
          };
        })();
      }
      function toUtf8(str) {
        if (/[\u0080-\uFFFF]/.test(str)) {
          str = unescape(encodeURIComponent(str));
        }
        return str;
      }
      function utf8Str2ArrayBuffer(str, returnUInt8Array) {
        var length = str.length, buff = new ArrayBuffer(length), arr = new Uint8Array(buff), i2;
        for (i2 = 0; i2 < length; i2 += 1) {
          arr[i2] = str.charCodeAt(i2);
        }
        return returnUInt8Array ? arr : buff;
      }
      function arrayBuffer2Utf8Str(buff) {
        return String.fromCharCode.apply(null, new Uint8Array(buff));
      }
      function concatenateArrayBuffers(first, second, returnUInt8Array) {
        var result = new Uint8Array(first.byteLength + second.byteLength);
        result.set(new Uint8Array(first));
        result.set(new Uint8Array(second), first.byteLength);
        return returnUInt8Array ? result : result.buffer;
      }
      function hexToBinaryString(hex2) {
        var bytes = [], length = hex2.length, x;
        for (x = 0; x < length - 1; x += 2) {
          bytes.push(parseInt(hex2.substr(x, 2), 16));
        }
        return String.fromCharCode.apply(String, bytes);
      }
      function SparkMD5() {
        this.reset();
      }
      SparkMD5.prototype.append = function(str) {
        this.appendBinary(toUtf8(str));
        return this;
      };
      SparkMD5.prototype.appendBinary = function(contents) {
        this._buff += contents;
        this._length += contents.length;
        var length = this._buff.length, i2;
        for (i2 = 64; i2 <= length; i2 += 64) {
          md5cycle(this._hash, md5blk(this._buff.substring(i2 - 64, i2)));
        }
        this._buff = this._buff.substring(i2 - 64);
        return this;
      };
      SparkMD5.prototype.end = function(raw) {
        var buff = this._buff, length = buff.length, i2, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ret;
        for (i2 = 0; i2 < length; i2 += 1) {
          tail[i2 >> 2] |= buff.charCodeAt(i2) << (i2 % 4 << 3);
        }
        this._finish(tail, length);
        ret = hex(this._hash);
        if (raw) {
          ret = hexToBinaryString(ret);
        }
        this.reset();
        return ret;
      };
      SparkMD5.prototype.reset = function() {
        this._buff = "";
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];
        return this;
      };
      SparkMD5.prototype.getState = function() {
        return {
          buff: this._buff,
          length: this._length,
          hash: this._hash.slice()
        };
      };
      SparkMD5.prototype.setState = function(state) {
        this._buff = state.buff;
        this._length = state.length;
        this._hash = state.hash;
        return this;
      };
      SparkMD5.prototype.destroy = function() {
        delete this._hash;
        delete this._buff;
        delete this._length;
      };
      SparkMD5.prototype._finish = function(tail, length) {
        var i2 = length, tmp, lo, hi;
        tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
        if (i2 > 55) {
          md5cycle(this._hash, tail);
          for (i2 = 0; i2 < 16; i2 += 1) {
            tail[i2] = 0;
          }
        }
        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(this._hash, tail);
      };
      SparkMD5.hash = function(str, raw) {
        return SparkMD5.hashBinary(toUtf8(str), raw);
      };
      SparkMD5.hashBinary = function(content, raw) {
        var hash = md51(content), ret = hex(hash);
        return raw ? hexToBinaryString(ret) : ret;
      };
      SparkMD5.ArrayBuffer = function() {
        this.reset();
      };
      SparkMD5.ArrayBuffer.prototype.append = function(arr) {
        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true), length = buff.length, i2;
        this._length += arr.byteLength;
        for (i2 = 64; i2 <= length; i2 += 64) {
          md5cycle(this._hash, md5blk_array(buff.subarray(i2 - 64, i2)));
        }
        this._buff = i2 - 64 < length ? new Uint8Array(buff.buffer.slice(i2 - 64)) : new Uint8Array(0);
        return this;
      };
      SparkMD5.ArrayBuffer.prototype.end = function(raw) {
        var buff = this._buff, length = buff.length, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], i2, ret;
        for (i2 = 0; i2 < length; i2 += 1) {
          tail[i2 >> 2] |= buff[i2] << (i2 % 4 << 3);
        }
        this._finish(tail, length);
        ret = hex(this._hash);
        if (raw) {
          ret = hexToBinaryString(ret);
        }
        this.reset();
        return ret;
      };
      SparkMD5.ArrayBuffer.prototype.reset = function() {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];
        return this;
      };
      SparkMD5.ArrayBuffer.prototype.getState = function() {
        var state = SparkMD5.prototype.getState.call(this);
        state.buff = arrayBuffer2Utf8Str(state.buff);
        return state;
      };
      SparkMD5.ArrayBuffer.prototype.setState = function(state) {
        state.buff = utf8Str2ArrayBuffer(state.buff, true);
        return SparkMD5.prototype.setState.call(this, state);
      };
      SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;
      SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;
      SparkMD5.ArrayBuffer.hash = function(arr, raw) {
        var hash = md51_array(new Uint8Array(arr)), ret = hex(hash);
        return raw ? hexToBinaryString(ret) : ret;
      };
      return SparkMD5;
    });
  }
});

// node_modules/uuid/dist/commonjs-browser/rng.js
var require_rng = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/rng.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rng;
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
      if (!getRandomValues) {
        getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
        if (!getRandomValues) {
          throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        }
      }
      return getRandomValues(rnds8);
    }
  }
});

// node_modules/uuid/dist/commonjs-browser/regex.js
var require_regex = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/regex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/validate.js
var require_validate = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === "string" && _regex.default.test(uuid);
    }
    var _default = validate;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/stringify.js
var require_stringify = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/stringify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    exports.unsafeStringify = unsafeStringify;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i2 = 0; i2 < 256; ++i2) {
      byteToHex.push((i2 + 256).toString(16).slice(1));
    }
    function unsafeStringify(arr, offset = 0) {
      return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
    }
    function stringify(arr, offset = 0) {
      const uuid = unsafeStringify(arr, offset);
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid;
    }
    var _default = stringify;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v1.js
var require_v1 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = require_stringify();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i2 = buf && offset || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i2++] = tl >>> 24 & 255;
      b[i2++] = tl >>> 16 & 255;
      b[i2++] = tl >>> 8 & 255;
      b[i2++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i2++] = tmh >>> 8 & 255;
      b[i2++] = tmh & 255;
      b[i2++] = tmh >>> 24 & 15 | 16;
      b[i2++] = tmh >>> 16 & 255;
      b[i2++] = clockseq >>> 8 | 128;
      b[i2++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i2 + n] = node[n];
      }
      return buf || (0, _stringify.unsafeStringify)(b);
    }
    var _default = v1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/parse.js
var require_parse = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 255;
      arr[2] = v >>> 8 & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
      arr[11] = v / 4294967296 & 255;
      arr[12] = v >>> 24 & 255;
      arr[13] = v >>> 16 & 255;
      arr[14] = v >>> 8 & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v35.js
var require_v35 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v35.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.URL = exports.DNS = void 0;
    exports.default = v35;
    var _stringify = require_stringify();
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        bytes.push(str.charCodeAt(i2));
      }
      return bytes;
    }
    var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports.DNS = DNS;
    var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports.URL = URL2;
    function v35(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        var _namespace;
        if (typeof value === "string") {
          value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
          namespace = (0, _parse.default)(namespace);
        }
        if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
          throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 15 | version;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i2 = 0; i2 < 16; ++i2) {
            buf[offset + i2] = bytes[i2];
          }
          return buf;
        }
        return (0, _stringify.unsafeStringify)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS;
      generateUUID.URL = URL2;
      return generateUUID;
    }
  }
});

// node_modules/uuid/dist/commonjs-browser/md5.js
var require_md5 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function md5(bytes) {
      if (typeof bytes === "string") {
        const msg = unescape(encodeURIComponent(bytes));
        bytes = new Uint8Array(msg.length);
        for (let i2 = 0; i2 < msg.length; ++i2) {
          bytes[i2] = msg.charCodeAt(i2);
        }
      }
      return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
    }
    function md5ToHexEncodedArray(input) {
      const output = [];
      const length32 = input.length * 32;
      const hexTab = "0123456789abcdef";
      for (let i2 = 0; i2 < length32; i2 += 8) {
        const x = input[i2 >> 5] >>> i2 % 32 & 255;
        const hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
        output.push(hex);
      }
      return output;
    }
    function getOutputLength(inputLength8) {
      return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
    }
    function wordsToMd5(x, len) {
      x[len >> 5] |= 128 << len % 32;
      x[getOutputLength(len) - 1] = len;
      let a = 1732584193;
      let b = -271733879;
      let c = -1732584194;
      let d = 271733878;
      for (let i2 = 0; i2 < x.length; i2 += 16) {
        const olda = a;
        const oldb = b;
        const oldc = c;
        const oldd = d;
        a = md5ff(a, b, c, d, x[i2], 7, -680876936);
        d = md5ff(d, a, b, c, x[i2 + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i2 + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i2 + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i2 + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i2 + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i2 + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i2 + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i2 + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i2 + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i2 + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i2 + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i2 + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i2 + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i2 + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i2 + 15], 22, 1236535329);
        a = md5gg(a, b, c, d, x[i2 + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i2 + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i2 + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i2], 20, -373897302);
        a = md5gg(a, b, c, d, x[i2 + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i2 + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i2 + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i2 + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i2 + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i2 + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i2 + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i2 + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i2 + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i2 + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i2 + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i2 + 12], 20, -1926607734);
        a = md5hh(a, b, c, d, x[i2 + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i2 + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i2 + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i2 + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i2 + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i2 + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i2 + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i2 + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i2 + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i2], 11, -358537222);
        c = md5hh(c, d, a, b, x[i2 + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i2 + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i2 + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i2 + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i2 + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i2 + 2], 23, -995338651);
        a = md5ii(a, b, c, d, x[i2], 6, -198630844);
        d = md5ii(d, a, b, c, x[i2 + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i2 + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i2 + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i2 + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i2 + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i2 + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i2 + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i2 + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i2 + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i2 + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i2 + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i2 + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i2 + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i2 + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i2 + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
      }
      return [a, b, c, d];
    }
    function bytesToWords(input) {
      if (input.length === 0) {
        return [];
      }
      const length8 = input.length * 8;
      const output = new Uint32Array(getOutputLength(length8));
      for (let i2 = 0; i2 < length8; i2 += 8) {
        output[i2 >> 5] |= (input[i2 / 8] & 255) << i2 % 32;
      }
      return output;
    }
    function safeAdd(x, y) {
      const lsw = (x & 65535) + (y & 65535);
      const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 65535;
    }
    function bitRotateLeft(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }
    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn(b & c | ~b & d, a, b, x, s, t);
    }
    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn(b & d | c & ~d, a, b, x, s, t);
    }
    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    var _default = md5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v3.js
var require_v3 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)("v3", 48, _md.default);
    var _default = v3;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/native.js
var require_native = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/native.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
    var _default = {
      randomUUID
    };
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _native = _interopRequireDefault(require_native());
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = require_stringify();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      if (_native.default.randomUUID && !buf && !options) {
        return _native.default.randomUUID();
      }
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i2 = 0; i2 < 16; ++i2) {
          buf[offset + i2] = rnds[i2];
        }
        return buf;
      }
      return (0, _stringify.unsafeStringify)(rnds);
    }
    var _default = v4;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/sha1.js
var require_sha1 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/sha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function f(s, x, y, z) {
      switch (s) {
        case 0:
          return x & y ^ ~x & z;
        case 1:
          return x ^ y ^ z;
        case 2:
          return x & y ^ x & z ^ y & z;
        case 3:
          return x ^ y ^ z;
      }
    }
    function ROTL(x, n) {
      return x << n | x >>> 32 - n;
    }
    function sha1(bytes) {
      const K = [1518500249, 1859775393, 2400959708, 3395469782];
      const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      if (typeof bytes === "string") {
        const msg = unescape(encodeURIComponent(bytes));
        bytes = [];
        for (let i2 = 0; i2 < msg.length; ++i2) {
          bytes.push(msg.charCodeAt(i2));
        }
      } else if (!Array.isArray(bytes)) {
        bytes = Array.prototype.slice.call(bytes);
      }
      bytes.push(128);
      const l = bytes.length / 4 + 2;
      const N = Math.ceil(l / 16);
      const M = new Array(N);
      for (let i2 = 0; i2 < N; ++i2) {
        const arr = new Uint32Array(16);
        for (let j = 0; j < 16; ++j) {
          arr[j] = bytes[i2 * 64 + j * 4] << 24 | bytes[i2 * 64 + j * 4 + 1] << 16 | bytes[i2 * 64 + j * 4 + 2] << 8 | bytes[i2 * 64 + j * 4 + 3];
        }
        M[i2] = arr;
      }
      M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
      M[N - 1][14] = Math.floor(M[N - 1][14]);
      M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
      for (let i2 = 0; i2 < N; ++i2) {
        const W = new Uint32Array(80);
        for (let t = 0; t < 16; ++t) {
          W[t] = M[i2][t];
        }
        for (let t = 16; t < 80; ++t) {
          W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
        }
        let a = H[0];
        let b = H[1];
        let c = H[2];
        let d = H[3];
        let e = H[4];
        for (let t = 0; t < 80; ++t) {
          const s = Math.floor(t / 20);
          const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
          e = d;
          d = c;
          c = ROTL(b, 30) >>> 0;
          b = a;
          a = T;
        }
        H[0] = H[0] + a >>> 0;
        H[1] = H[1] + b >>> 0;
        H[2] = H[2] + c >>> 0;
        H[3] = H[3] + d >>> 0;
        H[4] = H[4] + e >>> 0;
      }
      return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
    }
    var _default = sha1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v5.js
var require_v5 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)("v5", 80, _sha.default);
    var _default = v5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/nil.js
var require_nil = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/nil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = "00000000-0000-0000-0000-000000000000";
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/version.js
var require_version = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid.slice(14, 15), 16);
    }
    var _default = version;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/index.js
var require_commonjs_browser = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "NIL", {
      enumerable: true,
      get: function get() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function get() {
        return _parse.default;
      }
    });
    Object.defineProperty(exports, "stringify", {
      enumerable: true,
      get: function get() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports, "v1", {
      enumerable: true,
      get: function get() {
        return _v.default;
      }
    });
    Object.defineProperty(exports, "v3", {
      enumerable: true,
      get: function get() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports, "v4", {
      enumerable: true,
      get: function get() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports, "v5", {
      enumerable: true,
      get: function get() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function get() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function get() {
        return _version.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/@comunica/expression-evaluator/lib/util/Ordering.js
var require_Ordering = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/util/Ordering.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.orderTypes = void 0;
    var lru_cache_1 = require_commonjs();
    var functions_1 = require_functions();
    var TermTransformer_1 = require_TermTransformer();
    var C = require_Consts();
    var Err = require_Errors();
    function orderTypes(termA, termB, strict = false, typeDiscoveryCallback, typeCache) {
      if (termA === termB) {
        return 0;
      }
      if (termA === void 0) {
        return -1;
      }
      if (termB === void 0) {
        return 1;
      }
      if (termA.termType !== termB.termType) {
        return _TERM_ORDERING_PRIORITY[termA.termType] < _TERM_ORDERING_PRIORITY[termB.termType] ? -1 : 1;
      }
      if (termA.equals(termB)) {
        return 0;
      }
      if (termA.termType === "Quad" && termB.termType === "Quad") {
        const orderSubject = orderTypes(termA.subject, termB.subject, strict, typeDiscoveryCallback, typeCache);
        if (orderSubject !== 0) {
          return orderSubject;
        }
        const orderPredicate = orderTypes(termA.predicate, termB.predicate, strict, typeDiscoveryCallback, typeCache);
        if (orderPredicate !== 0) {
          return orderPredicate;
        }
        const orderObject = orderTypes(termA.object, termB.object, strict, typeDiscoveryCallback, typeCache);
        if (orderObject !== 0) {
          return orderObject;
        }
        return orderTypes(termA.graph, termB.graph, strict, typeDiscoveryCallback, typeCache);
      }
      if (termA.termType === "Literal") {
        return orderLiteralTypes(termA, termB, typeDiscoveryCallback, typeCache);
      }
      if (strict) {
        throw new Err.InvalidCompareArgumentTypes(termA, termB);
      }
      return comparePrimitives(termA.value, termB.value);
    }
    exports.orderTypes = orderTypes;
    function orderLiteralTypes(litA, litB, typeDiscoveryCallback, typeCache) {
      const isGreater = functions_1.regularFunctions[C.RegularOperator.GT];
      const isEqual = functions_1.regularFunctions[C.RegularOperator.EQUAL];
      const context = {
        now: /* @__PURE__ */ new Date(),
        functionArgumentsCache: {},
        superTypeProvider: {
          discoverer: typeDiscoveryCallback || (() => "term"),
          cache: typeCache || new lru_cache_1.LRUCache({ max: 1e3 })
        },
        defaultTimeZone: { zoneHours: 0, zoneMinutes: 0 }
      };
      const termTransformer = new TermTransformer_1.TermTransformer(context.superTypeProvider);
      const myLitA = termTransformer.transformLiteral(litA);
      const myLitB = termTransformer.transformLiteral(litB);
      try {
        if (isEqual.apply([myLitA, myLitB], context).typedValue) {
          return 0;
        }
        if (isGreater.apply([myLitA, myLitB], context).typedValue) {
          return 1;
        }
        return -1;
      } catch {
        const compareType = comparePrimitives(myLitA.dataType, myLitB.dataType);
        if (compareType !== 0) {
          return compareType;
        }
        return comparePrimitives(myLitA.str(), myLitB.str());
      }
    }
    function comparePrimitives(valueA, valueB) {
      return valueA === valueB ? 0 : valueA < valueB ? -1 : 1;
    }
    var _TERM_ORDERING_PRIORITY = {
      Variable: 0,
      BlankNode: 1,
      NamedNode: 2,
      Literal: 3,
      Quad: 4,
      DefaultGraph: 5
    };
  }
});

// node_modules/@comunica/expression-evaluator/lib/functions/XPathFunctions.js
var require_XPathFunctions = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/functions/XPathFunctions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langMatches = exports.replace = exports.matches = void 0;
    function matches(text, pattern, flags) {
      const reg = new RegExp(pattern, flags);
      return reg.test(text);
    }
    exports.matches = matches;
    function replace(arg, pattern, replacement, flags) {
      let reg = new RegExp(pattern, flags);
      if (!reg.global) {
        const flags_ = flags || "";
        reg = new RegExp(pattern, `${flags_}g`);
      }
      return arg.replace(reg, replacement);
    }
    exports.replace = replace;
    function langMatches(tag, range) {
      const langTags = tag.split("-");
      const rangeTags = range.split("-");
      if (!_matchLangTag(rangeTags[0], langTags[0]) && !_isWildCard(langTags[0])) {
        return false;
      }
      let lI = 1;
      let rI = 1;
      while (rI < rangeTags.length) {
        if (_isWildCard(rangeTags[rI])) {
          rI++;
          continue;
        }
        if (lI === langTags.length) {
          return false;
        }
        if (_matchLangTag(rangeTags[rI], langTags[lI])) {
          lI++;
          rI++;
          continue;
        }
        if (langTags[lI].length === 1) {
          return false;
        }
        lI++;
      }
      return true;
    }
    exports.langMatches = langMatches;
    function _isWildCard(tag) {
      return tag === "*";
    }
    function _matchLangTag(left, right) {
      const matchInitial = new RegExp(`/${left}/`, "iu");
      return matchInitial.test(`/${right}/`);
    }
  }
});

// node_modules/@comunica/expression-evaluator/lib/functions/RegularFunctions.js
var require_RegularFunctions = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/functions/RegularFunctions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.definitions = void 0;
    var bignumber_js_1 = require_bignumber();
    var hash_js_1 = require_hash();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var spark_md5_1 = require_spark_md5();
    var uuid = require_commonjs_browser();
    var E = require_expressions();
    var TermTransformer_1 = require_TermTransformer();
    var C = require_Consts();
    var Consts_1 = require_Consts();
    var DateTimeHelpers_1 = require_DateTimeHelpers();
    var Err = require_Errors();
    var Ordering_1 = require_Ordering();
    var SpecAlgos_1 = require_SpecAlgos();
    var Core_1 = require_Core();
    var Helpers_1 = require_Helpers();
    var X = require_XPathFunctions();
    var _1 = require_functions();
    var DF = new rdf_data_factory_1.DataFactory();
    var not = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.NOT).onTerm1(() => (val) => (0, Helpers_1.bool)(!val.coerceEBV())).collect()
    };
    var unaryPlus = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.UPLUS).numericConverter(() => (val) => val).collect()
    };
    var unaryMinus = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.UMINUS).numericConverter(() => (val) => -val).collect()
    };
    var multiplication = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.MULTIPLICATION).arithmetic(() => (left, right) => new bignumber_js_1.BigNumber(left).times(right).toNumber()).collect()
    };
    var division = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.DIVISION).arithmetic(() => (left, right) => new bignumber_js_1.BigNumber(left).div(right).toNumber()).onBinaryTyped([Consts_1.TypeURL.XSD_INTEGER, Consts_1.TypeURL.XSD_INTEGER], () => (left, right) => {
        if (right === 0) {
          throw new Err.ExpressionError("Integer division by 0");
        }
        return (0, Helpers_1.decimal)(new bignumber_js_1.BigNumber(left).div(right).toNumber());
      }).collect()
    };
    var addition = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.ADDITION).arithmetic(() => (left, right) => new bignumber_js_1.BigNumber(left).plus(right).toNumber()).set([Consts_1.TypeURL.XSD_DATE_TIME, Consts_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([date, dur]) => (
        // https://www.w3.org/TR/xpath-functions/#func-add-dayTimeDuration-to-dateTime
        new E.DateTimeLiteral((0, SpecAlgos_1.addDurationToDateTime)(date.typedValue, (0, DateTimeHelpers_1.defaultedDurationRepresentation)(dur.typedValue)))
      )).copy({
        from: [Consts_1.TypeURL.XSD_DATE_TIME, Consts_1.TypeURL.XSD_DAY_TIME_DURATION],
        to: [Consts_1.TypeURL.XSD_DATE_TIME, Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION]
      }).set([Consts_1.TypeURL.XSD_DATE, Consts_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([date, dur]) => (
        // https://www.w3.org/TR/xpath-functions/#func-add-dayTimeDuration-to-date
        new E.DateLiteral((0, SpecAlgos_1.addDurationToDateTime)((0, DateTimeHelpers_1.defaultedDateTimeRepresentation)(date.typedValue), (0, DateTimeHelpers_1.defaultedDurationRepresentation)(dur.typedValue)))
      )).copy({
        from: [Consts_1.TypeURL.XSD_DATE, Consts_1.TypeURL.XSD_DAY_TIME_DURATION],
        to: [Consts_1.TypeURL.XSD_DATE, Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION]
      }).set([Consts_1.TypeURL.XSD_TIME, Consts_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([time, dur]) => (
        // https://www.w3.org/TR/xpath-functions/#func-add-dayTimeDuration-to-time
        new E.TimeLiteral((0, SpecAlgos_1.addDurationToDateTime)((0, DateTimeHelpers_1.defaultedDateTimeRepresentation)(time.typedValue), (0, DateTimeHelpers_1.defaultedDurationRepresentation)(dur.typedValue)))
      )).copy({
        from: [Consts_1.TypeURL.XSD_TIME, Consts_1.TypeURL.XSD_DAY_TIME_DURATION],
        to: [Consts_1.TypeURL.XSD_TIME, Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION]
      }).collect()
    };
    var subtraction = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.SUBTRACTION).arithmetic(() => (left, right) => new bignumber_js_1.BigNumber(left).minus(right).toNumber()).set([Consts_1.TypeURL.XSD_DATE_TIME, Consts_1.TypeURL.XSD_DATE_TIME], ({ defaultTimeZone }) => ([date1, date2]) => (
        // https://www.w3.org/TR/xpath-functions/#func-subtract-dateTimes;
        new E.DayTimeDurationLiteral((0, SpecAlgos_1.elapsedDuration)(date1.typedValue, date2.typedValue, defaultTimeZone))
      )).copy({ from: [Consts_1.TypeURL.XSD_DATE_TIME, Consts_1.TypeURL.XSD_DATE_TIME], to: [Consts_1.TypeURL.XSD_DATE, Consts_1.TypeURL.XSD_DATE] }).copy({ from: [Consts_1.TypeURL.XSD_DATE_TIME, Consts_1.TypeURL.XSD_DATE_TIME], to: [Consts_1.TypeURL.XSD_TIME, Consts_1.TypeURL.XSD_TIME] }).set([Consts_1.TypeURL.XSD_DATE_TIME, Consts_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([date, dur]) => (
        // https://www.w3.org/TR/xpath-functions/#func-subtract-dayTimeDuration-from-dateTime
        new E.DateTimeLiteral((0, SpecAlgos_1.addDurationToDateTime)(date.typedValue, (0, DateTimeHelpers_1.defaultedDurationRepresentation)((0, DateTimeHelpers_1.negateDuration)(dur.typedValue))))
      )).copy({
        from: [Consts_1.TypeURL.XSD_DATE_TIME, Consts_1.TypeURL.XSD_DAY_TIME_DURATION],
        to: [Consts_1.TypeURL.XSD_DATE_TIME, Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION]
      }).set([Consts_1.TypeURL.XSD_DATE, Consts_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([date, dur]) => (
        // https://www.w3.org/TR/xpath-functions/#func-subtract-dayTimeDuration-from-date
        new E.DateLiteral((0, SpecAlgos_1.addDurationToDateTime)((0, DateTimeHelpers_1.defaultedDateTimeRepresentation)(date.typedValue), (0, DateTimeHelpers_1.defaultedDurationRepresentation)((0, DateTimeHelpers_1.negateDuration)(dur.typedValue))))
      )).copy({
        from: [Consts_1.TypeURL.XSD_DATE, Consts_1.TypeURL.XSD_DAY_TIME_DURATION],
        to: [Consts_1.TypeURL.XSD_DATE, Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION]
      }).set([Consts_1.TypeURL.XSD_TIME, Consts_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([time, dur]) => (
        // https://www.w3.org/TR/xpath-functions/#func-subtract-dayTimeDuration-from-date
        new E.TimeLiteral((0, SpecAlgos_1.addDurationToDateTime)((0, DateTimeHelpers_1.defaultedDateTimeRepresentation)(time.typedValue), (0, DateTimeHelpers_1.defaultedDurationRepresentation)((0, DateTimeHelpers_1.negateDuration)(dur.typedValue))))
      )).collect()
    };
    var equality = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.EQUAL).numberTest(() => (left, right) => left === right).stringTest(() => (left, right) => left.localeCompare(right) === 0).set([Consts_1.TypeURL.RDF_LANG_STRING, Consts_1.TypeURL.RDF_LANG_STRING], () => ([left, right]) => (0, Helpers_1.bool)(left.str() === right.str() && left.language === right.language)).set([Consts_1.TypeAlias.SPARQL_STRINGLY, Consts_1.TypeAlias.SPARQL_STRINGLY], () => () => (0, Helpers_1.bool)(false)).booleanTest(() => (left, right) => left === right).dateTimeTest(({ defaultTimeZone }) => (left, right) => (0, DateTimeHelpers_1.toUTCDate)(left, defaultTimeZone).getTime() === (0, DateTimeHelpers_1.toUTCDate)(right, defaultTimeZone).getTime()).copy({
        // https://www.w3.org/TR/xpath-functions/#func-date-equal
        from: [Consts_1.TypeURL.XSD_DATE_TIME, Consts_1.TypeURL.XSD_DATE_TIME],
        to: [Consts_1.TypeURL.XSD_DATE, Consts_1.TypeURL.XSD_DATE]
      }).set(["quad", "quad"], (context) => ([left, right]) => {
        const op = new Core_1.RegularFunction(Consts_1.RegularOperator.EQUAL, equality);
        return (0, Helpers_1.bool)(op.apply([left.subject, right.subject], context).coerceEBV() && op.apply([left.predicate, right.predicate], context).coerceEBV() && op.apply([left.object, right.object], context).coerceEBV());
      }, false).set(["term", "term"], () => ([left, right]) => (0, Helpers_1.bool)(RDFTermEqual(left, right)), false).set([Consts_1.TypeURL.XSD_DURATION, Consts_1.TypeURL.XSD_DURATION], () => ([dur1, dur2]) => (0, Helpers_1.bool)((0, DateTimeHelpers_1.yearMonthDurationsToMonths)((0, DateTimeHelpers_1.defaultedYearMonthDurationRepresentation)(dur1.typedValue)) === (0, DateTimeHelpers_1.yearMonthDurationsToMonths)((0, DateTimeHelpers_1.defaultedYearMonthDurationRepresentation)(dur2.typedValue)) && (0, DateTimeHelpers_1.dayTimeDurationsToSeconds)((0, DateTimeHelpers_1.defaultedDayTimeDurationRepresentation)(dur1.typedValue)) === (0, DateTimeHelpers_1.dayTimeDurationsToSeconds)((0, DateTimeHelpers_1.defaultedDayTimeDurationRepresentation)(dur2.typedValue)))).set([Consts_1.TypeURL.XSD_TIME, Consts_1.TypeURL.XSD_TIME], ({ defaultTimeZone }) => ([time1, time2]) => (
        // https://www.w3.org/TR/xpath-functions/#func-time-equal
        (0, Helpers_1.bool)((0, DateTimeHelpers_1.toUTCDate)((0, DateTimeHelpers_1.defaultedDateTimeRepresentation)(time1.typedValue), defaultTimeZone).getTime() === (0, DateTimeHelpers_1.toUTCDate)((0, DateTimeHelpers_1.defaultedDateTimeRepresentation)(time2.typedValue), defaultTimeZone).getTime())
      )).collect()
    };
    function RDFTermEqual(_left, _right) {
      const left = _left.toRDF();
      const right = _right.toRDF();
      const val = left.equals(right);
      if (!val && left.termType === "Literal" && right.termType === "Literal") {
        throw new Err.RDFEqualTypeError([_left, _right]);
      }
      return val;
    }
    var inequality = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.NOT_EQUAL).set(["term", "term"], (context) => ([first, second]) => (0, Helpers_1.bool)(!_1.regularFunctions[C.RegularOperator.EQUAL].apply([first, second], context).typedValue)).collect()
    };
    var lesserThan = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.LT).numberTest(() => (left, right) => left < right).stringTest(() => (left, right) => left.localeCompare(right) === -1).booleanTest(() => (left, right) => left < right).set(["quad", "quad"], () => ([left, right]) => (0, Helpers_1.bool)((0, Ordering_1.orderTypes)(left.toRDF(), right.toRDF(), true) === -1), false).dateTimeTest(({ defaultTimeZone }) => (left, right) => (0, DateTimeHelpers_1.toUTCDate)(left, defaultTimeZone).getTime() < (0, DateTimeHelpers_1.toUTCDate)(right, defaultTimeZone).getTime()).copy({
        // https://www.w3.org/TR/xpath-functions/#func-date-less-than
        from: [Consts_1.TypeURL.XSD_DATE_TIME, Consts_1.TypeURL.XSD_DATE_TIME],
        to: [Consts_1.TypeURL.XSD_DATE, Consts_1.TypeURL.XSD_DATE]
      }).set([Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION, Consts_1.TypeURL.XSD_YEAR_MONTH_DURATION], () => ([dur1L, dur2L]) => (
        // https://www.w3.org/TR/xpath-functions/#func-yearMonthDuration-less-than
        (0, Helpers_1.bool)((0, DateTimeHelpers_1.yearMonthDurationsToMonths)((0, DateTimeHelpers_1.defaultedYearMonthDurationRepresentation)(dur1L.typedValue)) < (0, DateTimeHelpers_1.yearMonthDurationsToMonths)((0, DateTimeHelpers_1.defaultedYearMonthDurationRepresentation)(dur2L.typedValue)))
      )).set([Consts_1.TypeURL.XSD_DAY_TIME_DURATION, Consts_1.TypeURL.XSD_DAY_TIME_DURATION], () => ([dur1, dur2]) => (
        // https://www.w3.org/TR/xpath-functions/#func-dayTimeDuration-greater-than
        (0, Helpers_1.bool)((0, DateTimeHelpers_1.dayTimeDurationsToSeconds)((0, DateTimeHelpers_1.defaultedDayTimeDurationRepresentation)(dur1.typedValue)) < (0, DateTimeHelpers_1.dayTimeDurationsToSeconds)((0, DateTimeHelpers_1.defaultedDayTimeDurationRepresentation)(dur2.typedValue)))
      )).set([Consts_1.TypeURL.XSD_TIME, Consts_1.TypeURL.XSD_TIME], ({ defaultTimeZone }) => ([time1, time2]) => (
        // https://www.w3.org/TR/xpath-functions/#func-time-less-than
        (0, Helpers_1.bool)((0, DateTimeHelpers_1.toUTCDate)((0, DateTimeHelpers_1.defaultedDateTimeRepresentation)(time1.typedValue), defaultTimeZone).getTime() < (0, DateTimeHelpers_1.toUTCDate)((0, DateTimeHelpers_1.defaultedDateTimeRepresentation)(time2.typedValue), defaultTimeZone).getTime())
      )).collect()
    };
    var greaterThan = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.GT).set(["term", "term"], (context) => ([first, second]) => (
        // X < Y -> Y > X
        _1.regularFunctions[C.RegularOperator.LT].apply([second, first], context)
      )).collect()
    };
    var lesserThanEqual = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.LTE).set(["term", "term"], (context) => ([first, second]) => (
        // X <= Y -> X < Y || X = Y
        // First check if the first is lesser than the second, then check if they are equal.
        // Doing this, the correct error will be thrown, each type that has a lesserThanEqual has a matching lesserThan.
        (0, Helpers_1.bool)(_1.regularFunctions[C.RegularOperator.LT].apply([first, second], context).typedValue || _1.regularFunctions[C.RegularOperator.EQUAL].apply([first, second], context).typedValue)
      )).collect()
    };
    var greaterThanEqual = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.GTE).set(["term", "term"], (context) => ([first, second]) => (
        // X >= Y -> Y <= X
        _1.regularFunctions[C.RegularOperator.LTE].apply([second, first], context)
      )).collect()
    };
    var isIRI = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.IS_IRI).onTerm1(() => (term) => (0, Helpers_1.bool)(term.termType === "namedNode")).collect()
    };
    var isBlank = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.IS_BLANK).onTerm1(() => (term) => (0, Helpers_1.bool)(term.termType === "blankNode")).collect()
    };
    var isLiteral = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.IS_LITERAL).onTerm1(() => (term) => (0, Helpers_1.bool)(term.termType === "literal")).collect()
    };
    var isNumeric = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.IS_NUMERIC).onNumeric1(() => () => (0, Helpers_1.bool)(true)).onTerm1(() => () => (0, Helpers_1.bool)(false)).collect()
    };
    var STR = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.STR).onTerm1(() => (term) => (0, Helpers_1.string)(term.str())).collect()
    };
    var lang = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.LANG).onLiteral1(() => (lit) => (0, Helpers_1.string)(lit.language || "")).collect()
    };
    var datatype = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.DATATYPE).onLiteral1(() => (lit) => new E.NamedNode(lit.dataType)).collect()
    };
    var IRI = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.IRI).set(["namedNode"], (context) => (args) => {
        const lit = args[0];
        const iri = (0, relative_to_absolute_iri_1.resolve)(lit.str(), context.baseIRI || "");
        return new E.NamedNode(iri);
      }).onString1((context) => (lit) => {
        const iri = (0, relative_to_absolute_iri_1.resolve)(lit.str(), context.baseIRI || "");
        return new E.NamedNode(iri);
      }).collect()
    };
    var STRDT = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.STRDT).set([Consts_1.TypeURL.XSD_STRING, "namedNode"], ({ superTypeProvider }) => ([str, iri]) => {
        const lit = DF.literal(str.typedValue, DF.namedNode(iri.value));
        return new TermTransformer_1.TermTransformer(superTypeProvider).transformLiteral(lit);
      }).collect()
    };
    var STRLANG = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.STRLANG).onBinaryTyped([Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING], () => (val, language) => new E.LangStringLiteral(val, language.toLowerCase())).collect()
    };
    var UUID = {
      arity: 0,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.UUID).set([], () => () => new E.NamedNode(`urn:uuid:${uuid.v4()}`)).collect()
    };
    var STRUUID = {
      arity: 0,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.STRUUID).set([], () => () => (0, Helpers_1.string)(uuid.v4())).collect()
    };
    var STRLEN = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.STRLEN).onStringly1(() => (str) => (0, Helpers_1.integer)([...str.typedValue].length)).collect()
    };
    var SUBSTR = {
      arity: [2, 3],
      overloads: (0, Helpers_1.declare)(C.RegularOperator.SUBSTR).onBinaryTyped([Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_INTEGER], () => (source, startingLoc) => (0, Helpers_1.string)([...source].slice(startingLoc - 1).join(""))).onBinary([Consts_1.TypeURL.RDF_LANG_STRING, Consts_1.TypeURL.XSD_INTEGER], () => (source, startingLoc) => {
        const sub = [...source.typedValue].slice(startingLoc.typedValue - 1).join("");
        return (0, Helpers_1.langString)(sub, source.language);
      }).onTernaryTyped([Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_INTEGER, Consts_1.TypeURL.XSD_INTEGER], () => (source, startingLoc, length) => (0, Helpers_1.string)([...source].slice(startingLoc - 1, length + startingLoc - 1).join(""))).onTernary([Consts_1.TypeURL.RDF_LANG_STRING, Consts_1.TypeURL.XSD_INTEGER, Consts_1.TypeURL.XSD_INTEGER], () => (source, startingLoc, length) => {
        const sub = [...source.typedValue].slice(startingLoc.typedValue - 1, length.typedValue + startingLoc.typedValue - 1).join("");
        return (0, Helpers_1.langString)(sub, source.language);
      }).collect()
    };
    var UCASE = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.UCASE).onString1Typed(() => (lit) => (0, Helpers_1.string)(lit.toUpperCase())).onLangString1(() => (lit) => (0, Helpers_1.langString)(lit.typedValue.toUpperCase(), lit.language)).collect()
    };
    var LCASE = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.LCASE).onString1Typed(() => (lit) => (0, Helpers_1.string)(lit.toLowerCase())).onLangString1(() => (lit) => (0, Helpers_1.langString)(lit.typedValue.toLowerCase(), lit.language)).collect()
    };
    var STRSTARTS = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.STRSTARTS).onBinaryTyped([Consts_1.TypeAlias.SPARQL_STRINGLY, Consts_1.TypeURL.XSD_STRING], () => (arg1, arg2) => (0, Helpers_1.bool)(arg1.startsWith(arg2))).onBinary([Consts_1.TypeURL.RDF_LANG_STRING, Consts_1.TypeURL.RDF_LANG_STRING], () => (arg1, arg2) => {
        if (arg1.language !== arg2.language) {
          throw new Err.IncompatibleLanguageOperation(arg1, arg2);
        }
        return (0, Helpers_1.bool)(arg1.typedValue.startsWith(arg2.typedValue));
      }).collect()
    };
    var STRENDS = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.STRENDS).onBinaryTyped([Consts_1.TypeAlias.SPARQL_STRINGLY, Consts_1.TypeURL.XSD_STRING], () => (arg1, arg2) => (0, Helpers_1.bool)(arg1.endsWith(arg2))).onBinary([Consts_1.TypeURL.RDF_LANG_STRING, Consts_1.TypeURL.RDF_LANG_STRING], () => (arg1, arg2) => {
        if (arg1.language !== arg2.language) {
          throw new Err.IncompatibleLanguageOperation(arg1, arg2);
        }
        return (0, Helpers_1.bool)(arg1.typedValue.endsWith(arg2.typedValue));
      }).collect()
    };
    var CONTAINS = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.CONTAINS).onBinaryTyped([Consts_1.TypeAlias.SPARQL_STRINGLY, Consts_1.TypeURL.XSD_STRING], () => (arg1, arg2) => (0, Helpers_1.bool)(arg1.includes(arg2))).onBinary([Consts_1.TypeURL.RDF_LANG_STRING, Consts_1.TypeURL.RDF_LANG_STRING], () => (arg1, arg2) => {
        if (arg1.language !== arg2.language) {
          throw new Err.IncompatibleLanguageOperation(arg1, arg2);
        }
        return (0, Helpers_1.bool)(arg1.typedValue.includes(arg2.typedValue));
      }).collect()
    };
    var STRBEFORE = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.STRBEFORE).onBinaryTyped([Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING], () => (arg1, arg2) => (0, Helpers_1.string)(arg1.slice(0, Math.max(0, arg1.indexOf(arg2))))).onBinary([Consts_1.TypeURL.RDF_LANG_STRING, Consts_1.TypeURL.XSD_STRING], () => (arg1, arg2) => {
        const [a1, a2] = [arg1.typedValue, arg2.typedValue];
        const sub = arg1.typedValue.slice(0, Math.max(0, a1.indexOf(a2)));
        return sub || !a2 ? (0, Helpers_1.langString)(sub, arg1.language) : (0, Helpers_1.string)(sub);
      }).onBinary([Consts_1.TypeURL.RDF_LANG_STRING, Consts_1.TypeURL.RDF_LANG_STRING], () => (arg1, arg2) => {
        if (arg1.language !== arg2.language) {
          throw new Err.IncompatibleLanguageOperation(arg1, arg2);
        }
        const [a1, a2] = [arg1.typedValue, arg2.typedValue];
        const sub = arg1.typedValue.slice(0, Math.max(0, a1.indexOf(a2)));
        return sub || !a2 ? (0, Helpers_1.langString)(sub, arg1.language) : (0, Helpers_1.string)(sub);
      }).collect()
    };
    var STRAFTER = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.STRAFTER).onBinaryTyped([Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING], () => (arg1, arg2) => (0, Helpers_1.string)(arg1.slice(arg1.indexOf(arg2)).slice(arg2.length))).onBinary([Consts_1.TypeURL.RDF_LANG_STRING, Consts_1.TypeURL.XSD_STRING], () => (arg1, arg2) => {
        const [a1, a2] = [arg1.typedValue, arg2.typedValue];
        const sub = a1.slice(a1.indexOf(a2)).slice(a2.length);
        return sub || !a2 ? (0, Helpers_1.langString)(sub, arg1.language) : (0, Helpers_1.string)(sub);
      }).onBinary([Consts_1.TypeURL.RDF_LANG_STRING, Consts_1.TypeURL.RDF_LANG_STRING], () => (arg1, arg2) => {
        if (arg1.language !== arg2.language) {
          throw new Err.IncompatibleLanguageOperation(arg1, arg2);
        }
        const [a1, a2] = [arg1.typedValue, arg2.typedValue];
        const sub = a1.slice(a1.indexOf(a2)).slice(a2.length);
        return sub || !a2 ? (0, Helpers_1.langString)(sub, arg1.language) : (0, Helpers_1.string)(sub);
      }).collect()
    };
    var ENCODE_FOR_URI = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.ENCODE_FOR_URI).onStringly1Typed(() => (val) => (0, Helpers_1.string)(encodeURI(val))).collect()
    };
    var langmatches = {
      arity: 2,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.LANG_MATCHES).onBinaryTyped([Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING], () => (tag, range) => (0, Helpers_1.bool)(X.langMatches(tag, range))).collect()
    };
    var regex2 = () => (text, pattern) => (0, Helpers_1.bool)(X.matches(text, pattern));
    var regex3 = () => (text, pattern, flags) => (0, Helpers_1.bool)(X.matches(text, pattern, flags));
    var REGEX = {
      arity: [2, 3],
      overloads: (0, Helpers_1.declare)(C.RegularOperator.REGEX).onBinaryTyped([Consts_1.TypeAlias.SPARQL_STRINGLY, Consts_1.TypeURL.XSD_STRING], regex2).onTernaryTyped([Consts_1.TypeAlias.SPARQL_STRINGLY, Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING], regex3).collect()
    };
    var REPLACE = {
      arity: [3, 4],
      overloads: (0, Helpers_1.declare)(C.RegularOperator.REPLACE).onTernaryTyped([Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING], () => (arg, pattern, replacement) => (0, Helpers_1.string)(X.replace(arg, pattern, replacement))).set([Consts_1.TypeURL.RDF_LANG_STRING, Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING], () => ([arg, pattern, replacement]) => {
        const result = X.replace(arg.typedValue, pattern.typedValue, replacement.typedValue);
        return (0, Helpers_1.langString)(result, arg.language);
      }).onQuaternaryTyped([Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING], () => (arg, pattern, replacement, flags) => (0, Helpers_1.string)(X.replace(arg, pattern, replacement, flags))).set([Consts_1.TypeURL.RDF_LANG_STRING, Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING, Consts_1.TypeURL.XSD_STRING], () => ([arg, pattern, replacement, flags]) => {
        const result = X.replace(arg.typedValue, pattern.typedValue, replacement.typedValue, flags.typedValue);
        return (0, Helpers_1.langString)(result, arg.language);
      }).collect()
    };
    var abs = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.ABS).numericConverter(() => (num) => Math.abs(num)).collect()
    };
    var round = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.ROUND).numericConverter(() => (num) => Math.round(num)).collect()
    };
    var ceil = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.CEIL).numericConverter(() => (num) => Math.ceil(num)).collect()
    };
    var floor = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.FLOOR).numericConverter(() => (num) => Math.floor(num)).collect()
    };
    var rand = {
      arity: 0,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.RAND).set([], () => () => (0, Helpers_1.double)(Math.random())).collect()
    };
    var now = {
      arity: 0,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.NOW).set([], (sharedContext) => () => new E.DateTimeLiteral((0, DateTimeHelpers_1.toDateTimeRepresentation)({ date: sharedContext.now, timeZone: sharedContext.defaultTimeZone }))).collect()
    };
    var year = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.YEAR).onDateTime1(() => (date) => (0, Helpers_1.integer)(date.typedValue.year)).set([Consts_1.TypeURL.XSD_DATE], () => ([date]) => (0, Helpers_1.integer)(date.typedValue.year)).collect()
    };
    var month = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.MONTH).onDateTime1(() => (date) => (0, Helpers_1.integer)(date.typedValue.month)).set([Consts_1.TypeURL.XSD_DATE], () => ([date]) => (0, Helpers_1.integer)(date.typedValue.month)).collect()
    };
    var day = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.DAY).onDateTime1(() => (date) => (0, Helpers_1.integer)(date.typedValue.day)).set([Consts_1.TypeURL.XSD_DATE], () => ([date]) => (0, Helpers_1.integer)(date.typedValue.day)).collect()
    };
    var hours = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.HOURS).onDateTime1(() => (date) => (0, Helpers_1.integer)(date.typedValue.hours)).set([Consts_1.TypeURL.XSD_TIME], () => ([time]) => (0, Helpers_1.integer)(time.typedValue.hours)).collect()
    };
    var minutes = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.MINUTES).onDateTime1(() => (date) => (0, Helpers_1.integer)(date.typedValue.minutes)).set([Consts_1.TypeURL.XSD_TIME], () => ([time]) => (0, Helpers_1.integer)(time.typedValue.minutes)).collect()
    };
    var seconds = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.SECONDS).onDateTime1(() => (date) => (0, Helpers_1.decimal)(date.typedValue.seconds)).set([Consts_1.TypeURL.XSD_TIME], () => ([time]) => (0, Helpers_1.integer)(time.typedValue.seconds)).collect()
    };
    var timezone = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.TIMEZONE).onDateTime1(() => (date) => {
        const duration = {
          hours: date.typedValue.zoneHours,
          minutes: date.typedValue.zoneMinutes
        };
        if (duration.hours === void 0 && duration.minutes === void 0) {
          throw new Err.InvalidTimezoneCall(date.str());
        }
        return new E.DayTimeDurationLiteral(duration);
      }).copy({ from: [Consts_1.TypeURL.XSD_DATE_TIME], to: [Consts_1.TypeURL.XSD_DATE] }).copy({ from: [Consts_1.TypeURL.XSD_DATE_TIME], to: [Consts_1.TypeURL.XSD_TIME] }).collect()
    };
    var tz = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.TZ).onDateTime1(() => (date) => (0, Helpers_1.string)((0, DateTimeHelpers_1.extractRawTimeZone)(date.str()))).copy({ from: [Consts_1.TypeURL.XSD_DATE_TIME], to: [Consts_1.TypeURL.XSD_DATE] }).copy({ from: [Consts_1.TypeURL.XSD_DATE_TIME], to: [Consts_1.TypeURL.XSD_TIME] }).collect()
    };
    var MD5 = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.MD5).onString1Typed(() => (str) => (0, Helpers_1.string)((0, spark_md5_1.hash)(str))).collect()
    };
    var SHA1 = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.SHA1).onString1Typed(() => (str) => (0, Helpers_1.string)((0, hash_js_1.sha1)().update(str).digest("hex"))).collect()
    };
    var SHA256 = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.SHA256).onString1Typed(() => (str) => (0, Helpers_1.string)((0, hash_js_1.sha256)().update(str).digest("hex"))).collect()
    };
    var SHA384 = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.SHA384).onString1Typed(() => (str) => (0, Helpers_1.string)((0, hash_js_1.sha384)().update(str).digest("hex"))).collect()
    };
    var SHA512 = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.SHA512).onString1Typed(() => (str) => (0, Helpers_1.string)((0, hash_js_1.sha512)().update(str).digest("hex"))).collect()
    };
    var triple = {
      arity: 3,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.TRIPLE).onTerm3((context) => (...args) => new E.Quad(DF.quad(args[0].toRDF(), args[1].toRDF(), args[2].toRDF()), context.superTypeProvider)).collect()
    };
    var subject = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.SUBJECT).onQuad1(() => (quad) => quad.subject).collect()
    };
    var predicate = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.PREDICATE).onQuad1(() => (quad) => quad.predicate).collect()
    };
    var object = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.OBJECT).onQuad1(() => (quad) => quad.object).collect()
    };
    var istriple = {
      arity: 1,
      overloads: (0, Helpers_1.declare)(C.RegularOperator.IS_TRIPLE).onTerm1(() => (term) => (0, Helpers_1.bool)(term.termType === "quad")).collect()
    };
    exports.definitions = {
      // --------------------------------------------------------------------------
      // Operator Mapping
      // https://www.w3.org/TR/sparql11-query/#OperatorMapping
      // --------------------------------------------------------------------------
      "!": not,
      uplus: unaryPlus,
      uminus: unaryMinus,
      "*": multiplication,
      "/": division,
      "+": addition,
      "-": subtraction,
      "=": equality,
      "!=": inequality,
      "<": lesserThan,
      ">": greaterThan,
      "<=": lesserThanEqual,
      ">=": greaterThanEqual,
      // --------------------------------------------------------------------------
      // Functions on RDF Terms
      // https://www.w3.org/TR/sparql11-query/#func-rdfTerms
      // --------------------------------------------------------------------------
      isiri: isIRI,
      isuri: isIRI,
      isblank: isBlank,
      isliteral: isLiteral,
      isnumeric: isNumeric,
      str: STR,
      lang,
      datatype,
      iri: IRI,
      uri: IRI,
      // 'BNODE': BNODE (see special operators),
      strdt: STRDT,
      strlang: STRLANG,
      uuid: UUID,
      struuid: STRUUID,
      // --------------------------------------------------------------------------
      // Functions on strings
      // https://www.w3.org/TR/sparql11-query/#func-forms
      // --------------------------------------------------------------------------
      strlen: STRLEN,
      substr: SUBSTR,
      ucase: UCASE,
      lcase: LCASE,
      strstarts: STRSTARTS,
      strends: STRENDS,
      contains: CONTAINS,
      strbefore: STRBEFORE,
      strafter: STRAFTER,
      encode_for_uri: ENCODE_FOR_URI,
      // 'concat': CONCAT (see special operators)
      langmatches,
      regex: REGEX,
      replace: REPLACE,
      // --------------------------------------------------------------------------
      // Functions on numerics
      // https://www.w3.org/TR/sparql11-query/#func-numerics
      // --------------------------------------------------------------------------
      abs,
      round,
      ceil,
      floor,
      rand,
      // --------------------------------------------------------------------------
      // Functions on Dates and Times
      // https://www.w3.org/TR/sparql11-query/#func-date-time
      // --------------------------------------------------------------------------
      now,
      year,
      month,
      day,
      hours,
      minutes,
      seconds,
      timezone,
      tz,
      // --------------------------------------------------------------------------
      // Hash functions
      // https://www.w3.org/TR/sparql11-query/#func-hash
      // --------------------------------------------------------------------------
      md5: MD5,
      sha1: SHA1,
      sha256: SHA256,
      sha384: SHA384,
      sha512: SHA512,
      // --------------------------------------------------------------------------
      // Functions for quoted triples
      // https://w3c.github.io/rdf-star/cg-spec/editors_draft.html#triple-function
      // --------------------------------------------------------------------------
      triple,
      subject,
      predicate,
      object,
      istriple
    };
  }
});

// node_modules/@comunica/expression-evaluator/lib/functions/SpecialFunctions.js
var require_SpecialFunctions = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/functions/SpecialFunctions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.specialDefinitions = void 0;
    var uuid = require_commonjs_browser();
    var E = require_expressions();
    var C = require_Consts();
    var Err = require_Errors();
    var Helpers_1 = require_Helpers();
    var _1 = require_functions();
    var bound = {
      arity: 1,
      async applyAsync({ args, mapping }) {
        return bound_({ args, mapping });
      },
      applySynchronously({ args, mapping }) {
        return bound_({ args, mapping });
      }
    };
    function bound_({ args, mapping }) {
      const variable = args[0];
      if (variable.expressionType !== E.ExpressionType.Variable) {
        throw new Err.InvalidArgumentTypes(args, C.SpecialOperator.BOUND);
      }
      const val = mapping.has((0, Helpers_1.expressionToVar)(variable));
      return (0, Helpers_1.bool)(val);
    }
    var ifSPARQL = {
      arity: 3,
      async applyAsync({ args, mapping, evaluate }) {
        const valFirst = await evaluate(args[0], mapping);
        const ebv = valFirst.coerceEBV();
        return ebv ? evaluate(args[1], mapping) : evaluate(args[2], mapping);
      },
      applySynchronously({ args, mapping, evaluate }) {
        const valFirst = evaluate(args[0], mapping);
        const ebv = valFirst.coerceEBV();
        return ebv ? evaluate(args[1], mapping) : evaluate(args[2], mapping);
      }
    };
    var coalesce = {
      arity: Number.POSITIVE_INFINITY,
      async applyAsync({ args, mapping, evaluate }) {
        const errors = [];
        for (const expr of args) {
          try {
            return await evaluate(expr, mapping);
          } catch (error2) {
            errors.push(error2);
          }
        }
        throw new Err.CoalesceError(errors);
      },
      applySynchronously({ args, mapping, evaluate }) {
        const errors = [];
        for (const expr of args) {
          try {
            return evaluate(expr, mapping);
          } catch (error2) {
            errors.push(error2);
          }
        }
        throw new Err.CoalesceError(errors);
      }
    };
    var logicalOr = {
      arity: 2,
      async applyAsync({ args, mapping, evaluate }) {
        const [leftExpr, rightExpr] = args;
        try {
          const leftTerm = await evaluate(leftExpr, mapping);
          const left = leftTerm.coerceEBV();
          if (left) {
            return (0, Helpers_1.bool)(true);
          }
          const rightTerm = await evaluate(rightExpr, mapping);
          const right = rightTerm.coerceEBV();
          return (0, Helpers_1.bool)(right);
        } catch (error2) {
          const rightErrorTerm = await evaluate(rightExpr, mapping);
          const rightError = rightErrorTerm.coerceEBV();
          if (!rightError) {
            throw error2;
          }
          return (0, Helpers_1.bool)(true);
        }
      },
      applySynchronously({ args, mapping, evaluate }) {
        const [leftExpr, rightExpr] = args;
        try {
          const leftTerm = evaluate(leftExpr, mapping);
          const left = leftTerm.coerceEBV();
          if (left) {
            return (0, Helpers_1.bool)(true);
          }
          const rightTerm = evaluate(rightExpr, mapping);
          const right = rightTerm.coerceEBV();
          return (0, Helpers_1.bool)(right);
        } catch (error2) {
          const rightErrorTerm = evaluate(rightExpr, mapping);
          const rightError = rightErrorTerm.coerceEBV();
          if (!rightError) {
            throw error2;
          }
          return (0, Helpers_1.bool)(true);
        }
      }
    };
    var logicalAnd = {
      arity: 2,
      async applyAsync({ args, mapping, evaluate }) {
        const [leftExpr, rightExpr] = args;
        try {
          const leftTerm = await evaluate(leftExpr, mapping);
          const left = leftTerm.coerceEBV();
          if (!left) {
            return (0, Helpers_1.bool)(false);
          }
          const rightTerm = await evaluate(rightExpr, mapping);
          const right = rightTerm.coerceEBV();
          return (0, Helpers_1.bool)(right);
        } catch (error2) {
          const rightErrorTerm = await evaluate(rightExpr, mapping);
          const rightError = rightErrorTerm.coerceEBV();
          if (rightError) {
            throw error2;
          }
          return (0, Helpers_1.bool)(false);
        }
      },
      applySynchronously({ args, mapping, evaluate }) {
        const [leftExpr, rightExpr] = args;
        try {
          const leftTerm = evaluate(leftExpr, mapping);
          const left = leftTerm.coerceEBV();
          if (!left) {
            return (0, Helpers_1.bool)(false);
          }
          const rightTerm = evaluate(rightExpr, mapping);
          const right = rightTerm.coerceEBV();
          return (0, Helpers_1.bool)(right);
        } catch (error2) {
          const rightErrorTerm = evaluate(rightExpr, mapping);
          const rightError = rightErrorTerm.coerceEBV();
          if (rightError) {
            throw error2;
          }
          return (0, Helpers_1.bool)(false);
        }
      }
    };
    var sameTerm = {
      arity: 2,
      async applyAsync({ args, mapping, evaluate }) {
        const [leftExpr, rightExpr] = args.map((arg) => evaluate(arg, mapping));
        const [left, right] = await Promise.all([leftExpr, rightExpr]);
        return (0, Helpers_1.bool)(left.toRDF().equals(right.toRDF()));
      },
      applySynchronously({ args, mapping, evaluate }) {
        const [left, right] = args.map((arg) => evaluate(arg, mapping));
        return (0, Helpers_1.bool)(left.toRDF().equals(right.toRDF()));
      }
    };
    var inSPARQL = {
      arity: Number.POSITIVE_INFINITY,
      checkArity(args) {
        return args.length > 0;
      },
      async applyAsync(context) {
        const { args, mapping, evaluate } = context;
        const [leftExpr, ...remaining] = args;
        const left = await evaluate(leftExpr, mapping);
        return inRecursiveAsync(left, { ...context, args: remaining }, []);
      },
      applySynchronously(context) {
        const { args, mapping, evaluate } = context;
        const [leftExpr, ...remaining] = args;
        const left = evaluate(leftExpr, mapping);
        return inRecursiveSync(left, { ...context, args: remaining }, []);
      }
    };
    async function inRecursiveAsync(needle, context, results) {
      const { args, mapping, evaluate } = context;
      if (args.length === 0) {
        const noErrors = results.every((val) => !val);
        return noErrors ? (0, Helpers_1.bool)(false) : Promise.reject(new Err.InError(results));
      }
      try {
        const nextExpression = args.shift();
        const next = await evaluate(nextExpression, mapping);
        const isEqual = _1.regularFunctions[C.RegularOperator.EQUAL];
        if (isEqual.apply([needle, next], context).typedValue) {
          return (0, Helpers_1.bool)(true);
        }
        return inRecursiveAsync(needle, context, [...results, false]);
      } catch (error2) {
        return inRecursiveAsync(needle, context, [...results, error2]);
      }
    }
    function inRecursiveSync(needle, context, results) {
      const { args, mapping, evaluate } = context;
      if (args.length === 0) {
        const noErrors = results.every((val) => !val);
        if (noErrors) {
          return (0, Helpers_1.bool)(false);
        }
        throw new Err.InError(results);
      }
      try {
        const nextExpression = args.shift();
        const next = evaluate(nextExpression, mapping);
        const isEqual = _1.regularFunctions[C.RegularOperator.EQUAL];
        if (isEqual.apply([needle, next], context).typedValue) {
          return (0, Helpers_1.bool)(true);
        }
        return inRecursiveSync(needle, context, [...results, false]);
      } catch (error2) {
        return inRecursiveSync(needle, context, [...results, error2]);
      }
    }
    var notInSPARQL = {
      arity: Number.POSITIVE_INFINITY,
      checkArity(args) {
        return args.length > 0;
      },
      async applyAsync(context) {
        const _in = _1.specialFunctions[C.SpecialOperator.IN];
        const isIn = await _in.applyAsync(context);
        return (0, Helpers_1.bool)(!isIn.typedValue);
      },
      applySynchronously(context) {
        const _in = _1.specialFunctions[C.SpecialOperator.IN];
        const isIn = _in.applySynchronously(context);
        return (0, Helpers_1.bool)(!isIn.typedValue);
      }
    };
    var concatTree = (0, Helpers_1.declare)(C.SpecialOperator.CONCAT).onStringly1(() => (expr) => expr).collect();
    var concat = {
      arity: Number.POSITIVE_INFINITY,
      async applyAsync(context) {
        const { args, mapping, evaluate, functionArgumentsCache, superTypeProvider } = context;
        const pLits = args.map(async (expr) => evaluate(expr, mapping)).map(async (pTerm) => {
          const operation = concatTree.search([await pTerm], superTypeProvider, functionArgumentsCache);
          if (!operation) {
            throw new Err.InvalidArgumentTypes(args, C.SpecialOperator.CONCAT);
          }
          return operation(context)([await pTerm]);
        });
        const lits = await Promise.all(pLits);
        const strings = lits.map((lit) => lit.typedValue);
        const joined = strings.join("");
        const lang = langAllEqual(lits) ? lits[0].language : void 0;
        return lang ? (0, Helpers_1.langString)(joined, lang) : (0, Helpers_1.string)(joined);
      },
      applySynchronously(context) {
        const { args, mapping, evaluate, superTypeProvider, functionArgumentsCache } = context;
        const lits = args.map((expr) => evaluate(expr, mapping)).map((pTerm) => {
          const operation = concatTree.search([pTerm], superTypeProvider, functionArgumentsCache);
          if (!operation) {
            throw new Err.InvalidArgumentTypes(args, C.SpecialOperator.CONCAT);
          }
          return operation(context)([pTerm]);
        });
        const strings = lits.map((lit) => lit.typedValue);
        const joined = strings.join("");
        const lang = langAllEqual(lits) ? lits[0].language : void 0;
        return lang ? (0, Helpers_1.langString)(joined, lang) : (0, Helpers_1.string)(joined);
      }
    };
    function langAllEqual(lits) {
      return lits.length > 0 && lits.every((lit) => lit.language === lits[0].language);
    }
    var bnodeTree = (0, Helpers_1.declare)(C.SpecialOperator.BNODE).onString1(() => (arg) => arg).collect();
    var BNODE = {
      arity: Number.POSITIVE_INFINITY,
      checkArity(args) {
        return args.length === 0 || args.length === 1;
      },
      async applyAsync(context) {
        const { args, mapping, evaluate, superTypeProvider, functionArgumentsCache } = context;
        const input = args.length === 1 ? await evaluate(args[0], mapping) : void 0;
        let strInput;
        if (input) {
          const operation = bnodeTree.search([input], superTypeProvider, functionArgumentsCache);
          if (!operation) {
            throw new Err.InvalidArgumentTypes(args, C.SpecialOperator.BNODE);
          }
          strInput = operation(context)([input]).str();
        }
        if (context.bnode) {
          const bnode = await context.bnode(strInput);
          return new E.BlankNode(bnode);
        }
        return BNODE_(strInput);
      },
      applySynchronously(context) {
        const { args, mapping, evaluate, superTypeProvider, functionArgumentsCache } = context;
        const input = args.length === 1 ? evaluate(args[0], mapping) : void 0;
        let strInput;
        if (input) {
          const operation = bnodeTree.search([input], superTypeProvider, functionArgumentsCache);
          if (!operation) {
            throw new Err.InvalidArgumentTypes(args, C.SpecialOperator.BNODE);
          }
          strInput = operation(context)([input]).str();
        }
        if (context.bnode) {
          const bnode = context.bnode(strInput);
          return new E.BlankNode(bnode);
        }
        return BNODE_(strInput);
      }
    };
    function BNODE_(input) {
      return new E.BlankNode(input || uuid.v4());
    }
    exports.specialDefinitions = {
      // --------------------------------------------------------------------------
      // Functional Forms
      // https://www.w3.org/TR/sparql11-query/#func-forms
      // --------------------------------------------------------------------------
      bound,
      if: ifSPARQL,
      coalesce,
      "&&": logicalAnd,
      "||": logicalOr,
      sameterm: sameTerm,
      in: inSPARQL,
      notin: notInSPARQL,
      // Annoying functions
      concat,
      // Context dependent functions
      bnode: BNODE
    };
  }
});

// node_modules/@comunica/expression-evaluator/lib/functions/index.js
var require_functions = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/functions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OverloadTree = exports.namedFunctions = exports.specialFunctions = exports.regularFunctions = void 0;
    var Core_1 = require_Core();
    var NamedFunctions_1 = require_NamedFunctions();
    var RegularFunctions_1 = require_RegularFunctions();
    var SpecialFunctions_1 = require_SpecialFunctions();
    __exportStar(require_Core(), exports);
    exports.regularFunctions = Object.fromEntries(Object.entries(RegularFunctions_1.definitions).map(([key, val]) => [key, new Core_1.RegularFunction(key, val)]));
    exports.specialFunctions = Object.fromEntries(Object.entries(SpecialFunctions_1.specialDefinitions).map(([key, val]) => [key, new Core_1.SpecialFunction(key, val)]));
    exports.namedFunctions = Object.fromEntries(Object.entries(NamedFunctions_1.namedDefinitions).map(([key, val]) => [key, new Core_1.NamedFunction(key, val)]));
    var OverloadTree_1 = require_OverloadTree();
    Object.defineProperty(exports, "OverloadTree", { enumerable: true, get: function() {
      return OverloadTree_1.OverloadTree;
    } });
  }
});

// node_modules/@comunica/expression-evaluator/lib/transformers/AlgebraTransformer.js
var require_AlgebraTransformer = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/transformers/AlgebraTransformer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AlgebraTransformer = void 0;
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var E = require_expressions();
    var functions_1 = require_functions();
    var C = require_Consts();
    var Err = require_Errors();
    var Errors_1 = require_Errors();
    var TermTransformer_1 = require_TermTransformer();
    var AlgebraTransformer = class _AlgebraTransformer extends TermTransformer_1.TermTransformer {
      constructor(algebraConfig) {
        super(algebraConfig.superTypeProvider);
        this.algebraConfig = algebraConfig;
        this.creatorConfig = { type: algebraConfig.type, creator: algebraConfig.creator };
      }
      transformAlgebra(expr) {
        const types = sparqlalgebrajs_1.Algebra.expressionTypes;
        switch (expr.expressionType) {
          case types.TERM:
            return this.transformTerm(expr);
          case types.OPERATOR:
            return this.transformOperator(expr);
          case types.NAMED:
            return this.transformNamed(expr);
          case types.EXISTENCE:
            return _AlgebraTransformer.transformExistence(expr);
          case types.AGGREGATE:
            return _AlgebraTransformer.transformAggregate(expr);
          case types.WILDCARD:
            return _AlgebraTransformer.transformWildcard(expr);
        }
      }
      static transformWildcard(term) {
        return new E.NamedNode(term.wildcard.value);
      }
      transformOperator(expr) {
        const operator = expr.operator.toLowerCase();
        if (C.SpecialOperators.has(operator)) {
          const specialOp = operator;
          const specialArgs = expr.args.map((arg) => this.transformAlgebra(arg));
          const specialFunc = functions_1.specialFunctions[specialOp];
          if (!specialFunc.checkArity(specialArgs)) {
            throw new Err.InvalidArity(specialArgs, specialOp);
          }
          return new E.SpecialOperator(specialArgs, specialFunc.applyAsync, specialFunc.applySynchronously);
        }
        if (!C.Operators.has(operator)) {
          throw new Err.UnknownOperator(expr.operator);
        }
        const regularOp = operator;
        const regularArgs = expr.args.map((arg) => this.transformAlgebra(arg));
        const regularFunc = functions_1.regularFunctions[regularOp];
        if (!_AlgebraTransformer.hasCorrectArity(regularArgs, regularFunc.arity)) {
          throw new Err.InvalidArity(regularArgs, regularOp);
        }
        return new E.Operator(regularArgs, (args) => regularFunc.apply(args, this.algebraConfig));
      }
      wrapSyncFunction(func, name) {
        return (args) => {
          try {
            const res = func(args.map((arg) => arg.toRDF()));
            return this.transformRDFTermUnsafe(res);
          } catch (error2) {
            throw new Errors_1.ExtensionFunctionError(name, error2);
          }
        };
      }
      wrapAsyncFunction(func, name) {
        return async (args) => {
          try {
            const res = await func(args.map((arg) => arg.toRDF()));
            return this.transformRDFTermUnsafe(res);
          } catch (error2) {
            throw new Errors_1.ExtensionFunctionError(name, error2);
          }
        };
      }
      // TODO: Support passing functions to override default behaviour;
      transformNamed(expr) {
        const funcName = expr.name.value;
        const namedArgs = expr.args.map((arg) => this.transformAlgebra(arg));
        if (C.NamedOperators.has(funcName)) {
          const op = expr.name.value;
          const namedFunc = functions_1.namedFunctions[op];
          return new E.Named(expr.name, namedArgs, (args) => namedFunc.apply(args, this.algebraConfig));
        }
        if (this.creatorConfig.type === "sync") {
          const syncExtensionFunc = this.creatorConfig.creator(expr.name);
          if (syncExtensionFunc) {
            const simpleAppl = this.wrapSyncFunction(syncExtensionFunc, expr.name.value);
            return new E.SyncExtension(expr.name, namedArgs, simpleAppl);
          }
        } else {
          const asyncExtensionFunc = this.creatorConfig.creator(expr.name);
          if (asyncExtensionFunc) {
            const asyncAppl = this.wrapAsyncFunction(asyncExtensionFunc, expr.name.value);
            return new E.AsyncExtension(expr.name, namedArgs, asyncAppl);
          }
        }
        throw new Err.UnknownNamedOperator(expr.name.value);
      }
      static hasCorrectArity(args, arity) {
        if (Array.isArray(arity)) {
          return arity.includes(args.length);
        }
        return args.length === arity;
      }
      static transformAggregate(expr) {
        const name = expr.aggregator;
        return new E.Aggregate(name, expr);
      }
      static transformExistence(expr) {
        return new E.Existence(expr);
      }
    };
    exports.AlgebraTransformer = AlgebraTransformer;
  }
});

// node_modules/@comunica/expression-evaluator/lib/evaluators/evaluatorHelpers/BaseExpressionEvaluator.js
var require_BaseExpressionEvaluator = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/evaluators/evaluatorHelpers/BaseExpressionEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseExpressionEvaluator = void 0;
    var Helpers_1 = require_Helpers();
    var Err = require_Errors();
    var BaseExpressionEvaluator = class {
      constructor(termTransformer) {
        this.termTransformer = termTransformer;
      }
      term(expr, _) {
        return expr;
      }
      variable(expr, mapping) {
        const term = mapping.get((0, Helpers_1.expressionToVar)(expr));
        if (!term) {
          throw new Err.UnboundVariableError(expr.name, mapping);
        }
        return this.termTransformer.transformRDFTermUnsafe(term);
      }
    };
    exports.BaseExpressionEvaluator = BaseExpressionEvaluator;
  }
});

// node_modules/@comunica/expression-evaluator/lib/evaluators/evaluatorHelpers/AsyncRecursiveEvaluator.js
var require_AsyncRecursiveEvaluator = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/evaluators/evaluatorHelpers/AsyncRecursiveEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncRecursiveEvaluator = void 0;
    var E = require_expressions();
    var TermTransformer_1 = require_TermTransformer();
    var Err = require_Errors();
    var BaseExpressionEvaluator_1 = require_BaseExpressionEvaluator();
    var AsyncRecursiveEvaluator = class extends BaseExpressionEvaluator_1.BaseExpressionEvaluator {
      constructor(context, termTransformer) {
        super(termTransformer || new TermTransformer_1.TermTransformer(context.superTypeProvider));
        this.context = context;
        this.subEvaluators = {
          // Shared
          [E.ExpressionType.Term]: this.term.bind(this),
          [E.ExpressionType.Variable]: this.variable.bind(this),
          // Async
          [E.ExpressionType.Operator]: this.evalOperator.bind(this),
          [E.ExpressionType.SpecialOperator]: this.evalSpecialOperator.bind(this),
          [E.ExpressionType.Named]: this.evalNamed.bind(this),
          [E.ExpressionType.Existence]: this.evalExistence.bind(this),
          [E.ExpressionType.Aggregate]: this.evalAggregate.bind(this),
          [E.ExpressionType.AsyncExtension]: this.evalAsyncExtension.bind(this)
        };
      }
      async evaluate(expr, mapping) {
        const evaluator = this.subEvaluators[expr.expressionType];
        if (!evaluator) {
          throw new Err.InvalidExpressionType(expr);
        }
        return evaluator.bind(this)(expr, mapping);
      }
      async evalOperator(expr, mapping) {
        const argPromises = expr.args.map((arg) => this.evaluate(arg, mapping));
        const argResults = await Promise.all(argPromises);
        return expr.apply(argResults);
      }
      async evalSpecialOperator(expr, mapping) {
        const evaluate = this.evaluate.bind(this);
        const context = {
          args: expr.args,
          mapping,
          superTypeProvider: this.context.superTypeProvider,
          now: this.context.now,
          baseIRI: this.context.baseIRI,
          functionArgumentsCache: this.context.functionArgumentsCache,
          evaluate,
          bnode: this.context.bnode,
          defaultTimeZone: this.context.defaultTimeZone
        };
        return expr.applyAsync(context);
      }
      async _evalAsyncArgs(args, mapping) {
        const argPromises = args.map((arg) => this.evaluate(arg, mapping));
        return await Promise.all(argPromises);
      }
      async evalNamed(expr, mapping) {
        return expr.apply(await this._evalAsyncArgs(expr.args, mapping));
      }
      async evalAsyncExtension(expr, mapping) {
        return await expr.apply(await this._evalAsyncArgs(expr.args, mapping));
      }
      async evalExistence(expr, mapping) {
        if (!this.context.exists) {
          throw new Err.NoExistenceHook();
        }
        return new E.BooleanLiteral(await this.context.exists(expr.expression, mapping));
      }
      // TODO: Remove?
      async evalAggregate(expr, _mapping) {
        if (!this.context.aggregate) {
          throw new Err.NoAggregator();
        }
        return this.termTransformer.transformRDFTermUnsafe(await this.context.aggregate(expr.expression));
      }
    };
    exports.AsyncRecursiveEvaluator = AsyncRecursiveEvaluator;
  }
});

// node_modules/@comunica/expression-evaluator/lib/evaluators/AsyncEvaluator.js
var require_AsyncEvaluator = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/evaluators/AsyncEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncEvaluator = void 0;
    var lru_cache_1 = require_commonjs();
    var AlgebraTransformer_1 = require_AlgebraTransformer();
    var DateTimeHelpers_1 = require_DateTimeHelpers();
    var AsyncRecursiveEvaluator_1 = require_AsyncRecursiveEvaluator();
    var AsyncEvaluator = class _AsyncEvaluator {
      static completeContext(context) {
        const now = context.now || new Date(Date.now());
        return {
          now,
          baseIRI: context.baseIRI || void 0,
          functionArgumentsCache: context.functionArgumentsCache || {},
          superTypeProvider: {
            cache: context.typeCache || new lru_cache_1.LRUCache({ max: 1e3 }),
            discoverer: context.getSuperType || (() => "term")
          },
          extensionFunctionCreator: context.extensionFunctionCreator,
          exists: context.exists,
          aggregate: context.aggregate,
          bnode: context.bnode,
          defaultTimeZone: context.defaultTimeZone || (0, DateTimeHelpers_1.extractTimeZone)(now)
        };
      }
      constructor(algExpr, context = {}) {
        this.algExpr = algExpr;
        const creator = context.extensionFunctionCreator || (() => void 0);
        const baseContext = _AsyncEvaluator.completeContext(context);
        const transformer = new AlgebraTransformer_1.AlgebraTransformer({
          type: "async",
          creator,
          ...baseContext
        });
        this.expr = transformer.transformAlgebra(algExpr);
        this.evaluator = new AsyncRecursiveEvaluator_1.AsyncRecursiveEvaluator(baseContext, transformer);
      }
      async evaluate(mapping) {
        const result = await this.evaluator.evaluate(this.expr, mapping);
        return result.toRDF();
      }
      async evaluateAsEBV(mapping) {
        const result = await this.evaluator.evaluate(this.expr, mapping);
        return result.coerceEBV();
      }
      async evaluateAsInternal(mapping) {
        return await this.evaluator.evaluate(this.expr, mapping);
      }
    };
    exports.AsyncEvaluator = AsyncEvaluator;
  }
});

// node_modules/@comunica/expression-evaluator/lib/evaluators/evaluatorHelpers/SyncRecursiveEvaluator.js
var require_SyncRecursiveEvaluator = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/evaluators/evaluatorHelpers/SyncRecursiveEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SyncRecursiveEvaluator = void 0;
    var E = require_expressions();
    var TermTransformer_1 = require_TermTransformer();
    var Err = require_Errors();
    var BaseExpressionEvaluator_1 = require_BaseExpressionEvaluator();
    var SyncRecursiveEvaluator = class extends BaseExpressionEvaluator_1.BaseExpressionEvaluator {
      constructor(context, termTransformer) {
        super(termTransformer || new TermTransformer_1.TermTransformer(context.superTypeProvider));
        this.context = context;
        this.subEvaluators = {
          // Shared
          [E.ExpressionType.Term]: this.term.bind(this),
          [E.ExpressionType.Variable]: this.variable.bind(this),
          // Sync
          [E.ExpressionType.Operator]: this.evalOperator.bind(this),
          [E.ExpressionType.SpecialOperator]: this.evalSpecialOperator.bind(this),
          [E.ExpressionType.Named]: this.evalNamed.bind(this),
          [E.ExpressionType.Existence]: this.evalExistence.bind(this),
          [E.ExpressionType.Aggregate]: this.evalAggregate.bind(this),
          [E.ExpressionType.SyncExtension]: this.evalSyncExtension.bind(this)
        };
      }
      evaluate(expr, mapping) {
        const evaluator = this.subEvaluators[expr.expressionType];
        if (!evaluator) {
          throw new Err.InvalidExpressionType(expr);
        }
        return evaluator.bind(this)(expr, mapping);
      }
      evalOperator(expr, mapping) {
        const args = expr.args.map((arg) => this.evaluate(arg, mapping));
        return expr.apply(args);
      }
      evalSpecialOperator(expr, mapping) {
        const evaluate = this.evaluate.bind(this);
        const context = {
          args: expr.args,
          mapping,
          superTypeProvider: this.context.superTypeProvider,
          now: this.context.now,
          baseIRI: this.context.baseIRI,
          functionArgumentsCache: this.context.functionArgumentsCache,
          evaluate,
          bnode: this.context.bnode,
          defaultTimeZone: this.context.defaultTimeZone
        };
        return expr.applySynchronously(context);
      }
      evalNamed(expr, mapping) {
        const args = expr.args.map((arg) => this.evaluate(arg, mapping));
        return expr.apply(args);
      }
      evalSyncExtension(expr, mapping) {
        const args = expr.args.map((arg) => this.evaluate(arg, mapping));
        return expr.apply(args);
      }
      evalExistence(expr, mapping) {
        if (!this.context.exists) {
          throw new Err.NoExistenceHook();
        }
        return new E.BooleanLiteral(this.context.exists(expr.expression, mapping));
      }
      evalAggregate(expr, _) {
        if (!this.context.aggregate) {
          throw new Err.NoAggregator();
        }
        return this.termTransformer.transformRDFTermUnsafe(this.context.aggregate(expr.expression));
      }
    };
    exports.SyncRecursiveEvaluator = SyncRecursiveEvaluator;
  }
});

// node_modules/@comunica/expression-evaluator/lib/evaluators/SyncEvaluator.js
var require_SyncEvaluator = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/evaluators/SyncEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SyncEvaluator = void 0;
    var lru_cache_1 = require_commonjs();
    var AlgebraTransformer_1 = require_AlgebraTransformer();
    var DateTimeHelpers_1 = require_DateTimeHelpers();
    var SyncRecursiveEvaluator_1 = require_SyncRecursiveEvaluator();
    var SyncEvaluator = class _SyncEvaluator {
      static completeContext(context) {
        const now = context.now || new Date(Date.now());
        return {
          now,
          baseIRI: context.baseIRI || void 0,
          functionArgumentsCache: context.functionArgumentsCache || {},
          superTypeProvider: {
            cache: context.typeCache || new lru_cache_1.LRUCache({ max: 1e3 }),
            discoverer: context.getSuperType || (() => "term")
          },
          extensionFunctionCreator: context.extensionFunctionCreator,
          exists: context.exists,
          aggregate: context.aggregate,
          bnode: context.bnode,
          defaultTimeZone: context.defaultTimeZone || (0, DateTimeHelpers_1.extractTimeZone)(now)
        };
      }
      constructor(algExpr, context = {}) {
        this.algExpr = algExpr;
        this.context = context;
        const creator = context.extensionFunctionCreator || (() => void 0);
        const baseContext = _SyncEvaluator.completeContext(context);
        const transformer = new AlgebraTransformer_1.AlgebraTransformer({
          type: "sync",
          creator,
          ...baseContext
        });
        this.expr = transformer.transformAlgebra(algExpr);
        this.evaluator = new SyncRecursiveEvaluator_1.SyncRecursiveEvaluator(baseContext, transformer);
      }
      evaluate(mapping) {
        const result = this.evaluator.evaluate(this.expr, mapping);
        return result.toRDF();
      }
      evaluateAsEBV(mapping) {
        const result = this.evaluator.evaluate(this.expr, mapping);
        return result.coerceEBV();
      }
      evaluateAsInternal(mapping) {
        return this.evaluator.evaluate(this.expr, mapping);
      }
    };
    exports.SyncEvaluator = SyncEvaluator;
  }
});

// node_modules/@comunica/expression-evaluator/lib/aggregators/Aggregator.js
var require_Aggregator = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/aggregators/Aggregator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Aggregator = exports.AggregatorComponent = void 0;
    var RdfString = require_rdf_string();
    var TermTransformer_1 = require_TermTransformer();
    var Consts_1 = require_Consts();
    var TypeHandling_1 = require_TypeHandling();
    var AggregatorComponent = class {
      static emptyValue() {
        return void 0;
      }
      constructor(expr, sharedContext) {
        this.sharedContext = sharedContext;
        this.separator = expr.separator || " ";
        this.termTransformer = new TermTransformer_1.TermTransformer(sharedContext.superTypeProvider);
      }
      termToNumericOrError(term) {
        if (term.termType !== "Literal") {
          throw new Error(`Term with value ${term.value} has type ${term.termType} and is not a numeric literal`);
        } else if (!(0, TypeHandling_1.isSubTypeOf)(term.datatype.value, Consts_1.TypeAlias.SPARQL_NUMERIC, this.sharedContext.superTypeProvider)) {
          throw new Error(`Term datatype ${term.datatype.value} with value ${term.value} has type ${term.termType} and is not a numeric literal`);
        }
        return this.termTransformer.transformLiteral(term);
      }
    };
    exports.AggregatorComponent = AggregatorComponent;
    var Aggregator = class {
      constructor(expr, aggregatorComponent) {
        this.aggregatorComponent = aggregatorComponent;
        this.variableValues = /* @__PURE__ */ new Map();
        this.distinct = expr.distinct;
      }
      static emptyValue(component) {
        return component.emptyValue();
      }
      result() {
        return this.aggregatorComponent.result();
      }
      put(bindings, variable = "") {
        if (!this.canSkip(bindings, variable)) {
          this.aggregatorComponent.put(bindings);
          this.addSeen(bindings, variable);
        }
      }
      canSkip(term, variable) {
        const set = this.variableValues.get(variable);
        return this.distinct && set !== void 0 && set.has(RdfString.termToString(term));
      }
      addSeen(term, variable) {
        if (this.distinct) {
          if (!this.variableValues.has(variable)) {
            this.variableValues.set(variable, /* @__PURE__ */ new Set());
          }
          this.variableValues.get(variable).add(RdfString.termToString(term));
        }
      }
    };
    exports.Aggregator = Aggregator;
  }
});

// node_modules/@comunica/expression-evaluator/lib/aggregators/Average.js
var require_Average = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/aggregators/Average.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Average = void 0;
    var E = require_expressions();
    var functions_1 = require_functions();
    var Helpers_1 = require_Helpers();
    var C = require_Consts();
    var Aggregator_1 = require_Aggregator();
    var Average = class _Average extends Aggregator_1.AggregatorComponent {
      constructor() {
        super(...arguments);
        this.summer = functions_1.regularFunctions[C.RegularOperator.ADDITION];
        this.divider = functions_1.regularFunctions[C.RegularOperator.DIVISION];
        this.state = void 0;
      }
      static emptyValue() {
        return (0, Helpers_1.integer)(0).toRDF();
      }
      put(term) {
        if (this.state === void 0) {
          const sum = this.termToNumericOrError(term);
          this.state = { sum, count: 1 };
        } else {
          const internalTerm = this.termToNumericOrError(term);
          this.state.sum = this.summer.apply([this.state.sum, internalTerm], this.sharedContext);
          this.state.count++;
        }
      }
      result() {
        if (this.state === void 0) {
          return _Average.emptyValue();
        }
        const count = new E.IntegerLiteral(this.state.count);
        const result = this.divider.apply([this.state.sum, count], this.sharedContext);
        return result.toRDF();
      }
    };
    exports.Average = Average;
  }
});

// node_modules/@comunica/expression-evaluator/lib/aggregators/Count.js
var require_Count = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/aggregators/Count.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Count = void 0;
    var Helpers_1 = require_Helpers();
    var Aggregator_1 = require_Aggregator();
    var Count = class _Count extends Aggregator_1.AggregatorComponent {
      constructor() {
        super(...arguments);
        this.state = void 0;
      }
      static emptyValue() {
        return (0, Helpers_1.integer)(0).toRDF();
      }
      put(_) {
        if (this.state === void 0) {
          this.state = 0;
        }
        this.state++;
      }
      result() {
        if (this.state === void 0) {
          return _Count.emptyValue();
        }
        return (0, Helpers_1.integer)(this.state).toRDF();
      }
    };
    exports.Count = Count;
  }
});

// node_modules/@comunica/expression-evaluator/lib/aggregators/GroupConcat.js
var require_GroupConcat = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/aggregators/GroupConcat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GroupConcat = void 0;
    var Helpers_1 = require_Helpers();
    var Aggregator_1 = require_Aggregator();
    var GroupConcat = class _GroupConcat extends Aggregator_1.AggregatorComponent {
      constructor() {
        super(...arguments);
        this.state = void 0;
      }
      static emptyValue() {
        return (0, Helpers_1.string)("").toRDF();
      }
      put(term) {
        if (this.state === void 0) {
          this.state = term.value;
        } else {
          this.state += this.separator + term.value;
        }
      }
      result() {
        if (this.state === void 0) {
          return _GroupConcat.emptyValue();
        }
        return (0, Helpers_1.string)(this.state).toRDF();
      }
    };
    exports.GroupConcat = GroupConcat;
  }
});

// node_modules/@comunica/expression-evaluator/lib/aggregators/Max.js
var require_Max = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/aggregators/Max.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Max = void 0;
    var Ordering_1 = require_Ordering();
    var Aggregator_1 = require_Aggregator();
    var Max = class _Max extends Aggregator_1.AggregatorComponent {
      constructor() {
        super(...arguments);
        this.state = void 0;
      }
      put(term) {
        if (term.termType !== "Literal") {
          throw new Error(`Term with value ${term.value} has type ${term.termType} and is not a literal`);
        }
        if (this.state === void 0) {
          this.state = term;
        } else if ((0, Ordering_1.orderTypes)(this.state, term) === -1) {
          this.state = term;
        }
      }
      result() {
        if (this.state === void 0) {
          return _Max.emptyValue();
        }
        return this.state;
      }
    };
    exports.Max = Max;
  }
});

// node_modules/@comunica/expression-evaluator/lib/aggregators/Min.js
var require_Min = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/aggregators/Min.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Min = void 0;
    var Ordering_1 = require_Ordering();
    var Aggregator_1 = require_Aggregator();
    var Min = class _Min extends Aggregator_1.AggregatorComponent {
      constructor() {
        super(...arguments);
        this.state = void 0;
      }
      put(term) {
        if (term.termType !== "Literal") {
          throw new Error(`Term with value ${term.value} has type ${term.termType} and is not a literal`);
        }
        if (this.state === void 0) {
          this.state = term;
        } else if ((0, Ordering_1.orderTypes)(this.state, term) === 1) {
          this.state = term;
        }
      }
      result() {
        if (this.state === void 0) {
          return _Min.emptyValue();
        }
        return this.state;
      }
    };
    exports.Min = Min;
  }
});

// node_modules/@comunica/expression-evaluator/lib/aggregators/Sample.js
var require_Sample = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/aggregators/Sample.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sample = void 0;
    var Aggregator_1 = require_Aggregator();
    var Sample = class _Sample extends Aggregator_1.AggregatorComponent {
      constructor() {
        super(...arguments);
        this.state = void 0;
      }
      put(term) {
        if (this.state === void 0) {
          this.state = term;
        }
      }
      result() {
        if (this.state === void 0) {
          return _Sample.emptyValue();
        }
        return this.state;
      }
    };
    exports.Sample = Sample;
  }
});

// node_modules/@comunica/expression-evaluator/lib/aggregators/Sum.js
var require_Sum = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/aggregators/Sum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sum = void 0;
    var functions_1 = require_functions();
    var Helpers_1 = require_Helpers();
    var C = require_Consts();
    var Aggregator_1 = require_Aggregator();
    var Sum = class _Sum extends Aggregator_1.AggregatorComponent {
      constructor() {
        super(...arguments);
        this.state = void 0;
        this.summer = functions_1.regularFunctions[C.RegularOperator.ADDITION];
      }
      static emptyValue() {
        return (0, Helpers_1.integer)(0).toRDF();
      }
      put(term) {
        if (this.state === void 0) {
          this.state = this.termToNumericOrError(term);
        } else {
          const internalTerm = this.termToNumericOrError(term);
          this.state = this.summer.apply([this.state, internalTerm], this.sharedContext);
        }
      }
      result() {
        if (this.state === void 0) {
          return _Sum.emptyValue();
        }
        return this.state.toRDF();
      }
    };
    exports.Sum = Sum;
  }
});

// node_modules/@comunica/expression-evaluator/lib/aggregators/index.js
var require_aggregators = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/aggregators/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aggregators = void 0;
    var Average_1 = require_Average();
    var Count_1 = require_Count();
    var GroupConcat_1 = require_GroupConcat();
    var Max_1 = require_Max();
    var Min_1 = require_Min();
    var Sample_1 = require_Sample();
    var Sum_1 = require_Sum();
    exports.aggregators = {
      count: Count_1.Count,
      sum: Sum_1.Sum,
      min: Min_1.Min,
      max: Max_1.Max,
      avg: Average_1.Average,
      group_concat: GroupConcat_1.GroupConcat,
      sample: Sample_1.Sample
    };
  }
});

// node_modules/@comunica/expression-evaluator/lib/aggregators/WildcardCountAggregator.js
var require_WildcardCountAggregator = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/aggregators/WildcardCountAggregator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WildcardCountAggregator = void 0;
    var RdfString = require_rdf_string();
    var Helpers_1 = require_Helpers();
    var WildcardCountAggregator = class {
      constructor(expr) {
        this.bindingValues = /* @__PURE__ */ new Map();
        this.counter = 0;
        this.distinct = expr.distinct;
      }
      putBindings(bindings) {
        if (!this.handleDistinct(bindings)) {
          this.counter += 1;
        }
      }
      static emptyValue() {
        return (0, Helpers_1.integer)(0).toRDF();
      }
      result() {
        return (0, Helpers_1.integer)(this.counter).toRDF();
      }
      /**
       * Returns true if the given bindings should be skipped.
       * @param bindings
       * @private
       */
      handleDistinct(bindings) {
        if (this.distinct) {
          const bindingList = [...bindings];
          bindingList.sort((first, snd) => first[0].value.localeCompare(snd[0].value));
          const variables = bindingList.map(([variable]) => variable.value).join(",");
          const terms = bindingList.map(([, term]) => RdfString.termToString(term)).join(",");
          const set = this.bindingValues.get(variables);
          const result = set !== void 0 && set.has(terms);
          if (!set) {
            this.bindingValues.set(variables, /* @__PURE__ */ new Set());
          }
          this.bindingValues.get(variables).add(terms);
          return result;
        }
        return false;
      }
    };
    exports.WildcardCountAggregator = WildcardCountAggregator;
  }
});

// node_modules/@comunica/expression-evaluator/lib/evaluators/evaluatorHelpers/BaseAggregateEvaluator.js
var require_BaseAggregateEvaluator = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/evaluators/evaluatorHelpers/BaseAggregateEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseAggregateEvaluator = void 0;
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var aggregators_1 = require_aggregators();
    var Aggregator_1 = require_Aggregator();
    var WildcardCountAggregator_1 = require_WildcardCountAggregator();
    var Err = require_Errors();
    var BaseAggregateEvaluator = class {
      constructor(expr, sharedContext, throwError) {
        this.throwError = false;
        this.isWildcard = false;
        this.errorOccurred = false;
        this.expression = expr;
        this.aggregator = new Aggregator_1.Aggregator(expr, new aggregators_1.aggregators[expr.aggregator](expr, sharedContext));
        this.throwError = throwError || false;
        this.isWildcard = expr.expression.expressionType === sparqlalgebrajs_1.Algebra.expressionTypes.WILDCARD;
        if (this.isWildcard) {
          this.wildcardAggregator = new WildcardCountAggregator_1.WildcardCountAggregator(expr);
        }
      }
      /**
       * The spec says to throw an error when a set function is called on an empty
       * set (unless explicitly mentioned otherwise like COUNT).
       * However, aggregate error handling says to not bind the result in case of an
       * error. So to simplify logic in the caller, we return undefined by default.
       *
       * @param expr the aggregate expression
       * @param throwError whether this function should respect the spec and throw an error if no empty value is defined
       */
      static emptyValue(expr, throwError = false) {
        let val;
        if (expr.expression.expressionType === sparqlalgebrajs_1.Algebra.expressionTypes.WILDCARD) {
          val = WildcardCountAggregator_1.WildcardCountAggregator.emptyValue();
        } else {
          val = Aggregator_1.Aggregator.emptyValue(aggregators_1.aggregators[expr.aggregator]);
        }
        if (val === void 0 && throwError) {
          throw new Err.EmptyAggregateError();
        }
        return val;
      }
      result() {
        if (this.errorOccurred) {
          return void 0;
        }
        if (this.isWildcard) {
          return this.wildcardAggregator.result();
        }
        return this.aggregator.result();
      }
    };
    exports.BaseAggregateEvaluator = BaseAggregateEvaluator;
  }
});

// node_modules/@comunica/expression-evaluator/lib/evaluators/AggregateEvaluator.js
var require_AggregateEvaluator = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/evaluators/AggregateEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AggregateEvaluator = void 0;
    var BaseAggregateEvaluator_1 = require_BaseAggregateEvaluator();
    var SyncEvaluator_1 = require_SyncEvaluator();
    var AggregateEvaluator = class extends BaseAggregateEvaluator_1.BaseAggregateEvaluator {
      constructor(expr, context, throwError) {
        super(expr, SyncEvaluator_1.SyncEvaluator.completeContext(context || {}), throwError);
        this.evaluator = new SyncEvaluator_1.SyncEvaluator(expr.expression, context);
      }
      put(bindings) {
        if (this.errorOccurred) {
          return;
        }
        if (this.isWildcard) {
          this.wildcardAggregator.putBindings(bindings);
        } else {
          try {
            const startTerm = this.evaluator.evaluate(bindings);
            this.aggregator.put(startTerm);
          } catch (error2) {
            this.safeThrow(error2);
          }
        }
      }
      safeThrow(err) {
        if (this.throwError) {
          throw err;
        } else {
          this.errorOccurred = true;
        }
      }
    };
    exports.AggregateEvaluator = AggregateEvaluator;
  }
});

// node_modules/@comunica/expression-evaluator/lib/evaluators/AsyncAggregateEvaluator.js
var require_AsyncAggregateEvaluator = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/evaluators/AsyncAggregateEvaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncAggregateEvaluator = void 0;
    var AsyncEvaluator_1 = require_AsyncEvaluator();
    var BaseAggregateEvaluator_1 = require_BaseAggregateEvaluator();
    var AsyncAggregateEvaluator = class extends BaseAggregateEvaluator_1.BaseAggregateEvaluator {
      constructor(expr, context, throwError) {
        super(expr, AsyncEvaluator_1.AsyncEvaluator.completeContext(context || {}), throwError);
        this.evaluator = new AsyncEvaluator_1.AsyncEvaluator(expr.expression, context);
        this.errorOccurred = false;
      }
      async put(bindings) {
        if (this.errorOccurred) {
          return;
        }
        if (this.isWildcard) {
          this.wildcardAggregator.putBindings(bindings);
        } else {
          try {
            const startTerm = await this.evaluator.evaluate(bindings);
            if (!startTerm || this.errorOccurred) {
              return;
            }
            this.aggregator.put(startTerm);
          } catch (error2) {
            this.safeThrow(error2);
          }
        }
      }
      safeThrow(err) {
        if (this.throwError) {
          throw err;
        } else {
          this.errorOccurred = true;
        }
      }
    };
    exports.AsyncAggregateEvaluator = AsyncAggregateEvaluator;
  }
});

// node_modules/@comunica/expression-evaluator/lib/index.js
var require_lib76 = __commonJS({
  "node_modules/@comunica/expression-evaluator/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncAggregateEvaluator = exports.orderTypes = exports.isExpressionError = exports.ExpressionError = exports.AggregateEvaluator = exports.SyncEvaluator = exports.AsyncEvaluator = void 0;
    var AsyncEvaluator_1 = require_AsyncEvaluator();
    Object.defineProperty(exports, "AsyncEvaluator", { enumerable: true, get: function() {
      return AsyncEvaluator_1.AsyncEvaluator;
    } });
    var SyncEvaluator_1 = require_SyncEvaluator();
    Object.defineProperty(exports, "SyncEvaluator", { enumerable: true, get: function() {
      return SyncEvaluator_1.SyncEvaluator;
    } });
    var AggregateEvaluator_1 = require_AggregateEvaluator();
    Object.defineProperty(exports, "AggregateEvaluator", { enumerable: true, get: function() {
      return AggregateEvaluator_1.AggregateEvaluator;
    } });
    var Errors_1 = require_Errors();
    Object.defineProperty(exports, "ExpressionError", { enumerable: true, get: function() {
      return Errors_1.ExpressionError;
    } });
    Object.defineProperty(exports, "isExpressionError", { enumerable: true, get: function() {
      return Errors_1.isExpressionError;
    } });
    var Ordering_1 = require_Ordering();
    Object.defineProperty(exports, "orderTypes", { enumerable: true, get: function() {
      return Ordering_1.orderTypes;
    } });
    var AsyncAggregateEvaluator_1 = require_AsyncAggregateEvaluator();
    Object.defineProperty(exports, "AsyncAggregateEvaluator", { enumerable: true, get: function() {
      return AsyncAggregateEvaluator_1.AsyncAggregateEvaluator;
    } });
  }
});

// node_modules/@comunica/actor-query-operation-filter-sparqlee/lib/ActorQueryOperationFilterSparqlee.js
var require_ActorQueryOperationFilterSparqlee = __commonJS({
  "node_modules/@comunica/actor-query-operation-filter-sparqlee/lib/ActorQueryOperationFilterSparqlee.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationFilterSparqlee = void 0;
    var bindings_factory_1 = require_lib6();
    var bus_query_operation_1 = require_lib7();
    var expression_evaluator_1 = require_lib76();
    var ActorQueryOperationFilterSparqlee = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "filter");
      }
      async testOperation(operation, context) {
        const config = { ...bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation) };
        const _ = new expression_evaluator_1.AsyncEvaluator(operation.expression, config);
        return true;
      }
      async runOperation(operation, context) {
        const outputRaw = await this.mediatorQueryOperation.mediate({ operation: operation.input, context });
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(outputRaw);
        bus_query_operation_1.ActorQueryOperation.validateQueryOutput(output, "bindings");
        const config = { ...bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation) };
        const evaluator = new expression_evaluator_1.AsyncEvaluator(operation.expression, config);
        const transform = async (item, next, push) => {
          try {
            const result = await evaluator.evaluateAsEBV(item);
            if (result) {
              push(item);
            }
          } catch (error2) {
            if ((0, expression_evaluator_1.isExpressionError)(error2)) {
              this.logWarn(context, "Error occurred while filtering.", () => ({ error: error2, bindings: (0, bindings_factory_1.bindingsToString)(item) }));
            } else {
              bindingsStream.emit("error", error2);
            }
          }
          next();
        };
        const bindingsStream = output.bindingsStream.transform({ transform, autoStart: false });
        return { type: "bindings", bindingsStream, metadata: output.metadata };
      }
    };
    exports.ActorQueryOperationFilterSparqlee = ActorQueryOperationFilterSparqlee;
  }
});

// node_modules/@comunica/actor-query-operation-filter-sparqlee/lib/index.js
var require_lib77 = __commonJS({
  "node_modules/@comunica/actor-query-operation-filter-sparqlee/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationFilterSparqlee(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-extend/lib/ActorQueryOperationExtend.js
var require_ActorQueryOperationExtend = __commonJS({
  "node_modules/@comunica/actor-query-operation-extend/lib/ActorQueryOperationExtend.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationExtend = void 0;
    var bindings_factory_1 = require_lib6();
    var bus_query_operation_1 = require_lib7();
    var expression_evaluator_1 = require_lib76();
    var ActorQueryOperationExtend = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "extend");
      }
      async testOperation(operation, context) {
        const _ = Boolean(new expression_evaluator_1.AsyncEvaluator(operation.expression, bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation)));
        return true;
      }
      async runOperation(operation, context) {
        const { expression, input, variable } = operation;
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: input, context }));
        if ((await output.metadata()).variables.some((innerVariable) => innerVariable.equals(variable))) {
          throw new Error(`Illegal binding to variable '${variable.value}' that has already been bound`);
        }
        const config = { ...bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation) };
        const evaluator = new expression_evaluator_1.AsyncEvaluator(expression, config);
        const transform = async (bindings, next, push) => {
          try {
            const result = await evaluator.evaluate(bindings);
            const extended = bindings.set(variable, result);
            push(extended);
          } catch (error2) {
            if ((0, expression_evaluator_1.isExpressionError)(error2)) {
              push(bindings);
              this.logWarn(context, `Expression error for extend operation (${error2.message})with bindings '${(0, bindings_factory_1.bindingsToString)(bindings)}'`);
            } else {
              bindingsStream.emit("error", error2);
            }
          }
          next();
        };
        const bindingsStream = output.bindingsStream.transform({ autoStart: false, transform });
        return {
          type: "bindings",
          bindingsStream,
          async metadata() {
            const outputMetadata = await output.metadata();
            return { ...outputMetadata, variables: [...outputMetadata.variables, variable] };
          }
        };
      }
    };
    exports.ActorQueryOperationExtend = ActorQueryOperationExtend;
  }
});

// node_modules/@comunica/actor-query-operation-extend/lib/index.js
var require_lib78 = __commonJS({
  "node_modules/@comunica/actor-query-operation-extend/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationExtend(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-from-quad/lib/ActorQueryOperationFromQuad.js
var require_ActorQueryOperationFromQuad = __commonJS({
  "node_modules/@comunica/actor-query-operation-from-quad/lib/ActorQueryOperationFromQuad.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationFromQuad = void 0;
    var bus_query_operation_1 = require_lib7();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationFromQuad = class _ActorQueryOperationFromQuad extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "from");
      }
      /**
       * Create a deep copy of the given operation.
       * @param {Operation} operation An operation.
       * @param {(subOperation: Operation) => Operation} recursiveCb A callback for recursive operation calls.
       * @return {Operation} The copied operation.
       */
      static copyOperation(operation, recursiveCb) {
        const copiedOperation = {};
        for (const key of Object.keys(operation)) {
          if (Array.isArray(operation[key]) && key !== "template") {
            if (key === "variables") {
              copiedOperation[key] = operation[key];
            } else {
              copiedOperation[key] = operation[key].map(recursiveCb);
            }
          } else if (_ActorQueryOperationFromQuad.ALGEBRA_TYPES.includes(operation[key].type)) {
            copiedOperation[key] = recursiveCb(operation[key]);
          } else {
            copiedOperation[key] = operation[key];
          }
        }
        return copiedOperation;
      }
      /**
       * Recursively transform the given operation to use the given graphs as default graph
       * This will (possibly) create a new operation and not modify the given operation.
       * @param {Operation} operation An operation.
       * @param {RDF.Term[]} defaultGraphs Graph terms.
       * @return {Operation} A new operation.
       */
      static applyOperationDefaultGraph(operation, defaultGraphs) {
        if (operation.type === "bgp" && operation.patterns.length > 0 || operation.type === "path" || operation.type === "pattern") {
          if (operation.type === "bgp") {
            return _ActorQueryOperationFromQuad.joinOperations(operation.patterns.map((pattern) => {
              if (pattern.graph.termType !== "DefaultGraph") {
                return _ActorQueryOperationFromQuad.FACTORY.createBgp([pattern]);
              }
              const bgps = defaultGraphs.map((graph) => _ActorQueryOperationFromQuad.FACTORY.createBgp([_ActorQueryOperationFromQuad.FACTORY.createPattern(pattern.subject, pattern.predicate, pattern.object, graph)]));
              return _ActorQueryOperationFromQuad.unionOperations(bgps);
            }));
          }
          if (operation.graph.termType !== "DefaultGraph") {
            return operation;
          }
          const paths = defaultGraphs.map((graph) => {
            if (operation.type === "path") {
              return _ActorQueryOperationFromQuad.FACTORY.createPath(operation.subject, operation.predicate, operation.object, graph);
            }
            return _ActorQueryOperationFromQuad.FACTORY.createPattern(operation.subject, operation.predicate, operation.object, graph);
          });
          return _ActorQueryOperationFromQuad.unionOperations(paths);
        }
        return _ActorQueryOperationFromQuad.copyOperation(operation, (subOperation) => this.applyOperationDefaultGraph(subOperation, defaultGraphs));
      }
      /**
       * Recursively transform the given operation to use the given graphs as named graph
       * This will (possibly) create a new operation and not modify the given operation.
       * @param {Operation} operation An operation.
       * @param {RDF.Term[]} namedGraphs Graph terms.
       * @param {RDF.Term[]} defaultGraphs Default graph terms.
       * @return {Operation} A new operation.
       */
      static applyOperationNamedGraph(operation, namedGraphs, defaultGraphs) {
        if (operation.type === "bgp" && operation.patterns.length > 0 || operation.type === "path" || operation.type === "pattern") {
          const patternGraph = operation.type === "bgp" ? operation.patterns[0].graph : operation.graph;
          if (patternGraph.termType === "DefaultGraph") {
            return { type: sparqlalgebrajs_1.Algebra.types.BGP, patterns: [] };
          }
          if (patternGraph.termType === "Variable") {
            if (namedGraphs.length === 1) {
              const graph = namedGraphs[0];
              const bindings = {};
              bindings[`?${patternGraph.value}`] = graph;
              const values = _ActorQueryOperationFromQuad.FACTORY.createValues([patternGraph], [bindings]);
              let pattern;
              if (operation.type === "bgp") {
                pattern = _ActorQueryOperationFromQuad.FACTORY.createBgp(operation.patterns.map((pat) => _ActorQueryOperationFromQuad.FACTORY.createPattern(pat.subject, pat.predicate, pat.object, graph)));
              } else if (operation.type === "path") {
                pattern = _ActorQueryOperationFromQuad.FACTORY.createPath(operation.subject, operation.predicate, operation.object, graph);
              } else {
                pattern = _ActorQueryOperationFromQuad.FACTORY.createPattern(operation.subject, operation.predicate, operation.object, graph);
              }
              return _ActorQueryOperationFromQuad.FACTORY.createJoin([values, pattern]);
            }
            return _ActorQueryOperationFromQuad.unionOperations(namedGraphs.map((graph) => _ActorQueryOperationFromQuad.applyOperationNamedGraph(operation, [graph], defaultGraphs)));
          }
          const isNamedGraphAvailable = [...namedGraphs, ...defaultGraphs].some((namedGraph) => namedGraph.equals(patternGraph));
          if (isNamedGraphAvailable) {
            return operation;
          }
          return { type: sparqlalgebrajs_1.Algebra.types.BGP, patterns: [] };
        }
        return _ActorQueryOperationFromQuad.copyOperation(operation, (subOperation) => this.applyOperationNamedGraph(subOperation, namedGraphs, defaultGraphs));
      }
      /**
       * Transform the given array of operations into a join operation.
       * @param {Operation[]} operations An array of operations, must contain at least one operation.
       * @return {Join} A join operation.
       */
      static joinOperations(operations) {
        if (operations.length === 1) {
          return operations[0];
        }
        if (operations.length > 1) {
          return _ActorQueryOperationFromQuad.FACTORY.createJoin(operations);
        }
        throw new Error("A join can only be applied on at least one operation");
      }
      /**
       * Transform the given array of operations into a union operation.
       * @param {Operation[]} operations An array of operations, must contain at least one operation.
       * @return {Union} A union operation.
       */
      static unionOperations(operations) {
        if (operations.length === 1) {
          return operations[0];
        }
        if (operations.length > 1) {
          return _ActorQueryOperationFromQuad.FACTORY.createUnion(operations);
        }
        throw new Error("A union can only be applied on at least one operation");
      }
      /**
       * Transform an operation based on the default and named graphs in the pattern.
       *
       * FROM sets the default graph.
       * If multiple are available, take the union of the operation for all of them at quad-pattern level.
       *
       * FROM NAMED indicates which named graphs are available.
       * This will rewrite the query so that only triples from the given named graphs can be selected.
       *
       * @param {From} pattern A from operation.
       * @return {Operation} The transformed operation.
       */
      static createOperation(pattern) {
        let operation = pattern.input;
        if (pattern.default.length > 0) {
          operation = _ActorQueryOperationFromQuad.applyOperationDefaultGraph(operation, pattern.default);
        }
        if (pattern.named.length > 0 || pattern.default.length > 0) {
          operation = _ActorQueryOperationFromQuad.applyOperationNamedGraph(operation, pattern.named, pattern.default);
        }
        return operation;
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operationOriginal, context) {
        const operation = _ActorQueryOperationFromQuad.createOperation(operationOriginal);
        return this.mediatorQueryOperation.mediate({ operation, context });
      }
    };
    exports.ActorQueryOperationFromQuad = ActorQueryOperationFromQuad;
    ActorQueryOperationFromQuad.FACTORY = new sparqlalgebrajs_1.Factory();
    ActorQueryOperationFromQuad.ALGEBRA_TYPES = Object.keys(sparqlalgebrajs_1.Algebra.types).map((key) => sparqlalgebrajs_1.Algebra.types[key]);
  }
});

// node_modules/@comunica/actor-query-operation-from-quad/lib/index.js
var require_lib79 = __commonJS({
  "node_modules/@comunica/actor-query-operation-from-quad/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationFromQuad(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-group/lib/GroupsState.js
var require_GroupsState = __commonJS({
  "node_modules/@comunica/actor-query-operation-group/lib/GroupsState.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GroupsState = void 0;
    var bindings_factory_1 = require_lib6();
    var expression_evaluator_1 = require_lib76();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var DF = new rdf_data_factory_1.DataFactory();
    var BF = new bindings_factory_1.BindingsFactory();
    var GroupsState = class {
      constructor(hashFunction, pattern, sparqleeConfig) {
        this.hashFunction = hashFunction;
        this.pattern = pattern;
        this.sparqleeConfig = sparqleeConfig;
        this.groups = /* @__PURE__ */ new Map();
        this.groupsInitializer = /* @__PURE__ */ new Map();
        this.groupVariables = new Set(this.pattern.variables.map((x) => x.value));
        this.distinctHashes = pattern.aggregates.some(({ distinct }) => distinct) ? /* @__PURE__ */ new Map() : null;
        this.waitCounter = 1;
        this.resultHasBeenCalled = false;
      }
      /**
       * - Consumes a stream binding
       * - Find the corresponding group and create one if need be
       * - Feeds the binding to the group's aggregators
       *
       * @param {Bindings} bindings - The Bindings to consume
       */
      consumeBindings(bindings) {
        const check = this.resultCheck();
        if (check) {
          return check;
        }
        this.waitCounter++;
        const grouper = bindings.filter((_, variable) => this.groupVariables.has(variable.value));
        const groupHash = this.hashBindings(grouper);
        let groupInitializer = this.groupsInitializer.get(groupHash);
        let res;
        if (!groupInitializer) {
          groupInitializer = (async () => {
            const aggregators = {};
            await Promise.all(this.pattern.aggregates.map(async (aggregate) => {
              const key = aggregate.variable.value;
              aggregators[key] = new expression_evaluator_1.AsyncAggregateEvaluator(aggregate, this.sparqleeConfig);
              await aggregators[key].put(bindings);
            }));
            if (this.distinctHashes) {
              const bindingsHash = this.hashBindings(bindings);
              this.distinctHashes.set(groupHash, /* @__PURE__ */ new Set([bindingsHash]));
            }
            const group = { aggregators, bindings: grouper };
            this.groups.set(groupHash, group);
            this.subtractWaitCounterAndCollect();
            return group;
          })();
          this.groupsInitializer.set(groupHash, groupInitializer);
          res = groupInitializer;
        } else {
          const groupInitializerDefined = groupInitializer;
          res = (async () => {
            const group = await groupInitializerDefined;
            await Promise.all(this.pattern.aggregates.map(async (aggregate) => {
              if (aggregate.distinct) {
                const hash = this.hashBindings(bindings);
                if (this.distinctHashes.get(groupHash).has(hash)) {
                  return;
                }
                this.distinctHashes.get(groupHash).add(hash);
              }
              const variable = aggregate.variable.value;
              await group.aggregators[variable].put(bindings);
            }));
          })().then(() => {
            this.subtractWaitCounterAndCollect();
          });
        }
        return res;
      }
      subtractWaitCounterAndCollect() {
        if (--this.waitCounter === 0) {
          this.handleResultCollection();
        }
      }
      handleResultCollection() {
        let rows = [...this.groups].map(([_, group]) => {
          const { bindings: groupBindings, aggregators } = group;
          let returnBindings = groupBindings;
          for (const variable in aggregators) {
            const value = aggregators[variable].result();
            if (value) {
              returnBindings = returnBindings.set(DF.variable(variable), value);
            }
          }
          return returnBindings;
        });
        if (rows.length === 0 && this.groupVariables.size === 0) {
          const single = [];
          for (const aggregate of this.pattern.aggregates) {
            const key = aggregate.variable;
            const value = expression_evaluator_1.AsyncAggregateEvaluator.emptyValue(aggregate);
            if (value !== void 0) {
              single.push([key, value]);
            }
          }
          rows = [BF.bindings(single)];
        }
        this.waitResolver(rows);
      }
      resultCheck() {
        if (this.resultHasBeenCalled) {
          return Promise.reject(new Error("Calling any function after calling collectResult is invalid."));
        }
      }
      /**
       * Collect the result of the final state. This returns a Bindings per group,
       * and a (possibly empty) Bindings in case no Bindings have been consumed yet.
       * You can only call this method once, after calling this method,
       * calling any function on this will result in an error being thrown.
       */
      collectResults() {
        const check = this.resultCheck();
        if (check) {
          return check;
        }
        this.resultHasBeenCalled = true;
        const res = new Promise((resolve) => {
          this.waitResolver = resolve;
        });
        this.subtractWaitCounterAndCollect();
        return res;
      }
      /**
       * @param {Bindings} bindings - Bindings to hash
       */
      hashBindings(bindings) {
        return this.hashFunction(bindings);
      }
    };
    exports.GroupsState = GroupsState;
  }
});

// node_modules/@comunica/actor-query-operation-group/lib/ActorQueryOperationGroup.js
var require_ActorQueryOperationGroup = __commonJS({
  "node_modules/@comunica/actor-query-operation-group/lib/ActorQueryOperationGroup.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationGroup = void 0;
    var bus_query_operation_1 = require_lib7();
    var expression_evaluator_1 = require_lib76();
    var asynciterator_1 = require_asynciterator();
    var GroupsState_1 = require_GroupsState();
    var ActorQueryOperationGroup = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "group");
      }
      async testOperation(operation, context) {
        for (const aggregate of operation.aggregates) {
          const _ = new expression_evaluator_1.AsyncEvaluator(aggregate.expression, bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation));
        }
        return true;
      }
      async runOperation(operation, context) {
        const { hashFunction } = await this.mediatorHashBindings.mediate({ allowHashCollisions: true, context });
        const { input, aggregates } = operation;
        const outputRaw = await this.mediatorQueryOperation.mediate({ operation: input, context });
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(outputRaw);
        const variables = [
          ...operation.variables,
          ...aggregates.map((agg) => agg.variable)
        ];
        const sparqleeConfig = bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation);
        const bindingsStream = new asynciterator_1.TransformIterator(() => new Promise((resolve, reject) => {
          const groups = new GroupsState_1.GroupsState(hashFunction, operation, sparqleeConfig);
          output.bindingsStream.on("end", async () => {
            try {
              const bindingsStreamInner = new asynciterator_1.ArrayIterator(await groups.collectResults(), { autoStart: false });
              resolve(bindingsStreamInner);
            } catch (error2) {
              reject(error2);
            }
          });
          output.bindingsStream.on("error", reject);
          output.bindingsStream.on("data", (bindings) => {
            groups.consumeBindings(bindings).catch(reject);
          });
        }), { autoStart: false });
        return {
          type: "bindings",
          bindingsStream,
          metadata: async () => ({ ...await output.metadata(), variables })
        };
      }
    };
    exports.ActorQueryOperationGroup = ActorQueryOperationGroup;
  }
});

// node_modules/@comunica/actor-query-operation-group/lib/index.js
var require_lib80 = __commonJS({
  "node_modules/@comunica/actor-query-operation-group/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationGroup(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-nop/lib/ActorQueryOperationNop.js
var require_ActorQueryOperationNop = __commonJS({
  "node_modules/@comunica/actor-query-operation-nop/lib/ActorQueryOperationNop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationNop = void 0;
    var bindings_factory_1 = require_lib6();
    var bus_query_operation_1 = require_lib7();
    var metadata_1 = require_lib48();
    var asynciterator_1 = require_asynciterator();
    var BF = new bindings_factory_1.BindingsFactory();
    var ActorQueryOperationNop = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "nop");
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operation, context) {
        return {
          bindingsStream: new asynciterator_1.SingletonIterator(BF.bindings()),
          metadata: () => Promise.resolve({
            state: new metadata_1.MetadataValidationState(),
            cardinality: { type: "exact", value: 1 },
            canContainUndefs: false,
            variables: []
          }),
          type: "bindings"
        };
      }
    };
    exports.ActorQueryOperationNop = ActorQueryOperationNop;
  }
});

// node_modules/@comunica/actor-query-operation-nop/lib/index.js
var require_lib81 = __commonJS({
  "node_modules/@comunica/actor-query-operation-nop/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationNop(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-orderby-sparqlee/lib/SortIterator.js
var require_SortIterator = __commonJS({
  "node_modules/@comunica/actor-query-operation-orderby-sparqlee/lib/SortIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SortIterator = void 0;
    var asynciterator_1 = require_asynciterator();
    var SortIterator = class extends asynciterator_1.TransformIterator {
      constructor(source, sort, options) {
        super(source, options);
        const window2 = options && options.window;
        this.windowLength = Number.isFinite(window2) && window2 > 0 ? window2 : Number.POSITIVE_INFINITY;
        this.sort = sort;
        this.sorted = [];
      }
      // Reads the smallest item in the current sorting window
      _read(count, done) {
        let item;
        let { length } = this.sorted;
        while (length !== this.windowLength) {
          item = this.source.read();
          if (item === null) {
            break;
          }
          let left = 0;
          let right = length - 1;
          let mid;
          let order;
          while (left <= right) {
            mid = Math.trunc((left + right) / 2);
            order = this.sort(item, this.sorted[mid]);
            if (order < 0) {
              left = mid + 1;
            } else if (order > 0) {
              right = mid - 1;
            } else {
              left = mid;
              right = -1;
            }
          }
          this.sorted.splice(left, 0, item);
          length++;
        }
        if (length === this.windowLength) {
          this._push(this.sorted.pop());
        }
        done();
      }
      // Flushes remaining data after the source has ended
      _flush(done) {
        let { length } = this.sorted;
        while (length--) {
          this._push(this.sorted.pop());
        }
        done();
      }
    };
    exports.SortIterator = SortIterator;
  }
});

// node_modules/@comunica/actor-query-operation-orderby-sparqlee/lib/ActorQueryOperationOrderBySparqlee.js
var require_ActorQueryOperationOrderBySparqlee = __commonJS({
  "node_modules/@comunica/actor-query-operation-orderby-sparqlee/lib/ActorQueryOperationOrderBySparqlee.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationOrderBySparqlee = void 0;
    var bus_query_operation_1 = require_lib7();
    var expression_evaluator_1 = require_lib76();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var SortIterator_1 = require_SortIterator();
    var ActorQueryOperationOrderBySparqlee = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "orderby");
        this.window = args.window ?? Number.POSITIVE_INFINITY;
      }
      async testOperation(operation, context) {
        for (let expr of operation.expressions) {
          expr = this.extractSortExpression(expr);
          const _ = new expression_evaluator_1.AsyncEvaluator(expr, bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation));
        }
        return true;
      }
      async runOperation(operation, context) {
        const outputRaw = await this.mediatorQueryOperation.mediate({ operation: operation.input, context });
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(outputRaw);
        const options = { window: this.window };
        const sparqleeConfig = { ...bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation) };
        let { bindingsStream } = output;
        for (let i2 = operation.expressions.length - 1; i2 >= 0; i2--) {
          let expr = operation.expressions[i2];
          const isAscending = this.isAscending(expr);
          expr = this.extractSortExpression(expr);
          const evaluator = new expression_evaluator_1.AsyncEvaluator(expr, sparqleeConfig);
          const transform = async (bindings, next, push) => {
            try {
              const result = await evaluator.evaluate(bindings);
              push({ bindings, result });
            } catch (error2) {
              if (!(0, expression_evaluator_1.isExpressionError)(error2)) {
                bindingsStream.emit("error", error2);
              }
              push({ bindings, result: void 0 });
            }
            next();
          };
          const transformedStream = bindingsStream.transform({ transform });
          const sortedStream = new SortIterator_1.SortIterator(transformedStream, (left, right) => {
            let compare = (0, expression_evaluator_1.orderTypes)(left.result, right.result);
            if (!isAscending) {
              compare *= -1;
            }
            return compare;
          }, options);
          bindingsStream = sortedStream.map(({ bindings, result }) => bindings);
        }
        return {
          type: "bindings",
          bindingsStream,
          metadata: output.metadata
        };
      }
      // Remove descending operator if necessary
      extractSortExpression(expr) {
        const { expressionType, operator } = expr;
        if (expressionType !== sparqlalgebrajs_1.Algebra.expressionTypes.OPERATOR) {
          return expr;
        }
        return operator === "desc" ? expr.args[0] : expr;
      }
      isAscending(expr) {
        const { expressionType, operator } = expr;
        if (expressionType !== sparqlalgebrajs_1.Algebra.expressionTypes.OPERATOR) {
          return true;
        }
        return operator !== "desc";
      }
    };
    exports.ActorQueryOperationOrderBySparqlee = ActorQueryOperationOrderBySparqlee;
  }
});

// node_modules/@comunica/actor-query-operation-orderby-sparqlee/lib/index.js
var require_lib82 = __commonJS({
  "node_modules/@comunica/actor-query-operation-orderby-sparqlee/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationOrderBySparqlee(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-project/lib/ActorQueryOperationProject.js
var require_ActorQueryOperationProject = __commonJS({
  "node_modules/@comunica/actor-query-operation-project/lib/ActorQueryOperationProject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationProject = void 0;
    var bus_query_operation_1 = require_lib7();
    var data_factory_1 = require_lib5();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var DF = new rdf_data_factory_1.DataFactory();
    var ActorQueryOperationProject = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "project");
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operation, context) {
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: operation.input, context }));
        const outputMetadata = await output.metadata();
        const variables = operation.variables;
        const deleteVariables = outputMetadata.variables.filter((variable) => !variables.some((subVariable) => variable.value === subVariable.value));
        const missingVariables = variables.filter((variable) => !outputMetadata.variables.some((subVariable) => variable.value === subVariable.value));
        if (missingVariables.length > 0) {
          throw new Error(`Variables '${missingVariables.map((variable) => `?${variable.value}`)}' are used in the projection result, but are not assigned.`);
        }
        let bindingsStream = deleteVariables.length === 0 ? output.bindingsStream : output.bindingsStream.transform({
          map(bindings) {
            for (const deleteVariable of deleteVariables) {
              bindings = bindings.delete(deleteVariable);
            }
            return bindings;
          },
          autoStart: false
        });
        let blankNodeCounter = 0;
        bindingsStream = bindingsStream.transform({
          map(bindings) {
            blankNodeCounter++;
            const scopedBlankNodesCache = /* @__PURE__ */ new Map();
            return bindings.map((term) => {
              if (term instanceof data_factory_1.BlankNodeBindingsScoped) {
                let scopedBlankNode = scopedBlankNodesCache.get(term.value);
                if (!scopedBlankNode) {
                  scopedBlankNode = DF.blankNode(`${term.value}${blankNodeCounter}`);
                  scopedBlankNodesCache.set(term.value, scopedBlankNode);
                }
                return scopedBlankNode;
              }
              return term;
            });
          },
          autoStart: false
        });
        return {
          type: "bindings",
          bindingsStream,
          metadata: async () => ({ ...outputMetadata, variables })
        };
      }
    };
    exports.ActorQueryOperationProject = ActorQueryOperationProject;
  }
});

// node_modules/@comunica/actor-query-operation-project/lib/index.js
var require_lib83 = __commonJS({
  "node_modules/@comunica/actor-query-operation-project/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationProject(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-reduced-hash/lib/ActorQueryOperationReducedHash.js
var require_ActorQueryOperationReducedHash = __commonJS({
  "node_modules/@comunica/actor-query-operation-reduced-hash/lib/ActorQueryOperationReducedHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationReducedHash = void 0;
    var bus_query_operation_1 = require_lib7();
    var lru_cache_1 = require_commonjs();
    var ActorQueryOperationReducedHash = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "reduced");
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operation, context) {
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: operation.input, context }));
        const bindingsStream = output.bindingsStream.filter(await this.newHashFilter(context));
        return {
          type: "bindings",
          bindingsStream,
          metadata: output.metadata
        };
      }
      /**
       * Create a new distinct filter function.
       * This will maintain an internal hash datastructure so that every bindings object only returns true once.
       * @param context The action context.
       * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.
       */
      async newHashFilter(context) {
        const { hashFunction } = await this.mediatorHashBindings.mediate({ allowHashCollisions: true, context });
        const hashes = new lru_cache_1.LRUCache({ max: this.cacheSize });
        return (bindings) => {
          const hash = hashFunction(bindings);
          if (hashes.has(hash)) {
            return false;
          }
          hashes.set(hash, true);
          return true;
        };
      }
    };
    exports.ActorQueryOperationReducedHash = ActorQueryOperationReducedHash;
  }
});

// node_modules/@comunica/actor-query-operation-reduced-hash/lib/index.js
var require_lib84 = __commonJS({
  "node_modules/@comunica/actor-query-operation-reduced-hash/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationReducedHash(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-slice/lib/ActorQueryOperationSlice.js
var require_ActorQueryOperationSlice = __commonJS({
  "node_modules/@comunica/actor-query-operation-slice/lib/ActorQueryOperationSlice.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationSlice = void 0;
    var bus_query_operation_1 = require_lib7();
    var context_entries_1 = require_lib4();
    var ActorQueryOperationSlice = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "slice");
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operation, context) {
        if (operation.length) {
          context = context.set(context_entries_1.KeysQueryOperation.limitIndicator, operation.length);
        }
        const output = await this.mediatorQueryOperation.mediate({ operation: operation.input, context });
        if (output.type === "bindings") {
          const bindingsStream = this.sliceStream(output.bindingsStream, operation);
          return {
            type: "bindings",
            bindingsStream,
            metadata: this.sliceMetadata(output, operation)
          };
        }
        if (output.type === "quads") {
          const quadStream = this.sliceStream(output.quadStream, operation);
          return {
            type: "quads",
            quadStream,
            metadata: this.sliceMetadata(output, operation)
          };
        }
        throw new Error(`Invalid query output type: Expected 'bindings' or 'quads' but got '${output.type}'`);
      }
      // Slice the stream based on the pattern values
      sliceStream(stream, pattern) {
        const hasLength = Boolean(pattern.length) || pattern.length === 0;
        const { start } = pattern;
        const end = hasLength ? pattern.start + pattern.length - 1 : Number.POSITIVE_INFINITY;
        return stream.transform({ offset: start, limit: Math.max(end - start + 1, 0), autoStart: false });
      }
      // If we find metadata, apply slicing on the total number of items
      sliceMetadata(output, pattern) {
        const hasLength = Boolean(pattern.length) || pattern.length === 0;
        return () => output.metadata().then((subMetadata) => {
          const cardinality = { ...subMetadata.cardinality };
          if (Number.isFinite(cardinality.value)) {
            cardinality.value = Math.max(0, cardinality.value - pattern.start);
            if (hasLength) {
              cardinality.value = Math.min(cardinality.value, pattern.length);
            }
          }
          return { ...subMetadata, cardinality };
        });
      }
    };
    exports.ActorQueryOperationSlice = ActorQueryOperationSlice;
  }
});

// node_modules/@comunica/actor-query-operation-slice/lib/index.js
var require_lib85 = __commonJS({
  "node_modules/@comunica/actor-query-operation-slice/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationSlice(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-service/lib/ActorQueryOperationService.js
var require_ActorQueryOperationService = __commonJS({
  "node_modules/@comunica/actor-query-operation-service/lib/ActorQueryOperationService.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationService = void 0;
    var bindings_factory_1 = require_lib6();
    var bus_query_operation_1 = require_lib7();
    var context_entries_1 = require_lib4();
    var metadata_1 = require_lib48();
    var asynciterator_1 = require_asynciterator();
    var BF = new bindings_factory_1.BindingsFactory();
    var ActorQueryOperationService = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "service");
      }
      async testOperation(operation, context) {
        if (operation.name.termType !== "NamedNode") {
          throw new Error(`${this.name} can only query services by IRI, while a ${operation.name.termType} was given.`);
        }
        return true;
      }
      async runOperation(operation, context) {
        const endpoint = operation.name.value;
        let subContext = context.delete(context_entries_1.KeysRdfResolveQuadPattern.source).delete(context_entries_1.KeysRdfResolveQuadPattern.sources).delete(context_entries_1.KeysInitQuery.queryString);
        const sourceType = this.forceSparqlEndpoint ? "sparql" : void 0;
        subContext = subContext.set(context_entries_1.KeysRdfResolveQuadPattern.sources, [{ type: sourceType, value: endpoint }]);
        let output;
        try {
          output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: operation.input, context: subContext }));
        } catch (error2) {
          if (operation.silent) {
            output = {
              bindingsStream: new asynciterator_1.SingletonIterator(BF.bindings()),
              type: "bindings",
              metadata: async () => ({
                state: new metadata_1.MetadataValidationState(),
                cardinality: { type: "exact", value: 1 },
                canContainUndefs: false,
                variables: []
              })
            };
          } else {
            throw error2;
          }
        }
        return output;
      }
    };
    exports.ActorQueryOperationService = ActorQueryOperationService;
  }
});

// node_modules/@comunica/actor-query-operation-service/lib/index.js
var require_lib86 = __commonJS({
  "node_modules/@comunica/actor-query-operation-service/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationService(), exports);
  }
});

// node_modules/@comunica/actor-abstract-path/lib/PathVariableObjectIterator.js
var require_PathVariableObjectIterator = __commonJS({
  "node_modules/@comunica/actor-abstract-path/lib/PathVariableObjectIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PathVariableObjectIterator = void 0;
    var bus_query_operation_1 = require_lib7();
    var asynciterator_1 = require_asynciterator();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var rdf_string_1 = require_rdf_string();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var DF = new rdf_data_factory_1.DataFactory();
    var FACTORY = new sparqlalgebrajs_1.Factory();
    var PathVariableObjectIterator = class extends asynciterator_1.BufferedIterator {
      constructor(subject, predicate, graph, context, mediatorQueryOperation, emitFirstSubject, maxRunningOperations = 16) {
        super({ autoStart: true });
        this.subject = subject;
        this.predicate = predicate;
        this.graph = graph;
        this.context = context;
        this.mediatorQueryOperation = mediatorQueryOperation;
        this.maxRunningOperations = maxRunningOperations;
        this.termHashes = /* @__PURE__ */ new Map();
        this.runningOperations = [];
        this.pendingOperations = [];
        this._push(this.subject, emitFirstSubject);
      }
      _end(destroy) {
        for (const it of this.runningOperations) {
          it.destroy();
        }
        super._end(destroy);
      }
      _push(item, pushAsResult = true) {
        let termString;
        if (pushAsResult) {
          termString = (0, rdf_string_1.termToString)(item);
          if (this.termHashes.has(termString)) {
            return;
          }
        }
        const variable = DF.variable("b");
        this.pendingOperations.push({
          variable,
          operation: FACTORY.createPath(item, this.predicate, variable, this.graph)
        });
        if (termString) {
          this.termHashes.set(termString, item);
          super._push(item);
        }
      }
      _read(count, done) {
        const self2 = this;
        (async function() {
          while (self2.runningOperations.length < self2.maxRunningOperations) {
            if (self2.pendingOperations.length === 0) {
              break;
            }
            const pendingOperation = self2.pendingOperations.pop();
            const results = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await self2.mediatorQueryOperation.mediate({ operation: pendingOperation.operation, context: self2.context }));
            const runningOperation = results.bindingsStream.transform({
              autoStart: false,
              transform(bindings, next, push) {
                const newTerm = bindings.get(pendingOperation.variable);
                push(newTerm);
                next();
              }
            });
            if (!runningOperation.done) {
              self2.runningOperations.push(runningOperation);
              runningOperation.on("error", (error2) => self2.destroy(error2));
              runningOperation.on("readable", () => {
                self2.readable = true;
                self2._fillBufferAsync();
              });
              runningOperation.on("end", () => {
                self2.runningOperations.splice(self2.runningOperations.indexOf(runningOperation), 1);
                self2.readable = true;
                self2._fillBufferAsync();
              });
            }
            self2.setProperty("metadata", results.metadata);
          }
          let lastCount = 0;
          let item;
          while (lastCount !== (lastCount = count)) {
            for (let i2 = 0; i2 < self2.runningOperations.length && count > 0; i2++) {
              if ((item = self2.runningOperations[i2].read()) !== null) {
                count--;
                self2._push(item);
              }
            }
          }
          if (self2.runningOperations.length === 0 && self2.pendingOperations.length === 0) {
            self2.close();
          }
        })().then(() => {
          done();
        }, (error2) => this.destroy(error2));
      }
    };
    exports.PathVariableObjectIterator = PathVariableObjectIterator;
  }
});

// node_modules/@comunica/actor-abstract-path/lib/ActorAbstractPath.js
var require_ActorAbstractPath = __commonJS({
  "node_modules/@comunica/actor-abstract-path/lib/ActorAbstractPath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorAbstractPath = void 0;
    var bindings_factory_1 = require_lib6();
    var bus_query_operation_1 = require_lib7();
    var context_entries_1 = require_lib4();
    var asynciterator_1 = require_asynciterator();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var rdf_string_1 = require_rdf_string();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var PathVariableObjectIterator_1 = require_PathVariableObjectIterator();
    var DF = new rdf_data_factory_1.DataFactory();
    var BF = new bindings_factory_1.BindingsFactory();
    var ActorAbstractPath = class _ActorAbstractPath extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args, predicateType) {
        super(args, "path");
        this.predicateType = predicateType;
      }
      async testOperation(operation, context) {
        if (operation.predicate.type !== this.predicateType) {
          throw new Error(`This Actor only supports ${this.predicateType} Path operations.`);
        }
        return true;
      }
      // Generates a variable that does not yet occur in the path
      generateVariable(path, name) {
        if (!name) {
          return this.generateVariable(path, "b");
        }
        if (path && (path.subject.value === name || path.object.value === name)) {
          return this.generateVariable(path, `${name}b`);
        }
        return DF.variable(name);
      }
      // Such connectivity matching does not introduce duplicates (it does not incorporate any count of the number
      // of ways the connection can be made) even if the repeated path itself would otherwise result in duplicates.
      // https://www.w3.org/TR/sparql11-query/#propertypaths
      async isPathArbitraryLengthDistinct(context, path) {
        if (!context.get(context_entries_1.KeysQueryOperation.isPathArbitraryLengthDistinctKey)) {
          context = context.set(context_entries_1.KeysQueryOperation.isPathArbitraryLengthDistinctKey, true);
          return {
            context,
            operation: bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({
              operation: _ActorAbstractPath.FACTORY.createDistinct(path),
              context
            }))
          };
        }
        context = context.set(context_entries_1.KeysQueryOperation.isPathArbitraryLengthDistinctKey, false);
        return { context, operation: void 0 };
      }
      async predicateStarGraphVariable(subject, object, predicate, graph, context) {
        const predVar = this.generateVariable(_ActorAbstractPath.FACTORY.createPath(subject, predicate, object, graph));
        const findGraphs = _ActorAbstractPath.FACTORY.createUnion([
          _ActorAbstractPath.FACTORY.createPattern(subject, predVar, object, graph),
          _ActorAbstractPath.FACTORY.createPattern(object, predVar, subject, graph)
        ]);
        const results = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ context, operation: findGraphs }));
        const passedGraphs = /* @__PURE__ */ new Set();
        const bindingsStream = new asynciterator_1.MultiTransformIterator(results.bindingsStream, {
          multiTransform: (bindings) => {
            const graphValue = bindings.get(graph);
            if (passedGraphs.has(graphValue.value)) {
              return new asynciterator_1.EmptyIterator();
            }
            passedGraphs.add(graphValue.value);
            return new asynciterator_1.TransformIterator(async () => {
              const it = new asynciterator_1.BufferedIterator();
              await this.getObjectsPredicateStar(subject, predicate, graphValue, context, {}, it, { count: 0 });
              return it.transform({
                transform(item, next, push) {
                  push(BF.bindings([
                    [object, item],
                    [graph, graphValue]
                  ]));
                  next();
                }
              });
            }, { maxBufferSize: 128 });
          },
          autoStart: false
        });
        return {
          bindingsStream,
          metadata: results.metadata
        };
      }
      /**
       * Returns an iterator with Bindings of the query subject predicate* ?o or subject predicate+ ?o
       * If graph is a variable, it will also be in those bindings
       * @param {Term} subject Term of where we start the predicate* search.
       * @param {Algebra.PropertyPathSymbol} predicate Predicate of the *-path.
       * @param {Variable} object Variable of the zeroOrMore-query.
       * @param {Term} graph The graph in which we search for the pattern. (Possibly a variable)
       * @param {ActionContext} context The context to pass to sub-opertations
       * @param emitFirstSubject If the path operation is predicate*, otherwise it is predicate+.
       * @return {Promise<AsyncIterator<Bindings>} Iterator to where all bindings of query should have been pushed.
       */
      async getObjectsPredicateStarEval(subject, predicate, object, graph, context, emitFirstSubject) {
        if (graph.termType === "Variable") {
          return this.predicateStarGraphVariable(subject, object, predicate, graph, context);
        }
        const it = new PathVariableObjectIterator_1.PathVariableObjectIterator(subject, predicate, graph, context, this.mediatorQueryOperation, emitFirstSubject);
        const bindingsStream = it.transform({
          autoStart: false,
          transform(item, next, push) {
            push(BF.bindings([[object, item]]));
            next();
          }
        });
        return {
          bindingsStream,
          async metadata() {
            const metadata = await new Promise((resolve) => {
              it.getProperty("metadata", (metadataInner) => resolve(metadataInner()));
            });
            metadata.cardinality.value++;
            return metadata;
          }
        };
      }
      /**
         * Pushes all terms to iterator `it` that are a solution of object predicate* ?o.
         * @param {Term} object Term of where we start the predicate* search.
         * @param {Algebra.PropertyPathSymbol} predicate Predicate of the *-path.
         * @param {Term} graph The graph in which we search for the pattern.
         * @param {ActionContext} context
         * @param {Record<string, Term>} termHashes Remembers the objects we've already searched for.
         * @param {BufferedIterator<Term>} it Iterator to push terms to.
         * @param {any} counter Counts how many searches are in progress to close it when needed (when counter == 0).
         * @return {Promise<IPathResultStream['metadata']>} The results metadata.
         */
      async getObjectsPredicateStar(object, predicate, graph, context, termHashes, it, counter) {
        const termString = (0, rdf_string_1.termToString)(object);
        if (termHashes[termString]) {
          return;
        }
        it._push(object);
        termHashes[termString] = object;
        counter.count++;
        const thisVariable = this.generateVariable();
        const path = _ActorAbstractPath.FACTORY.createPath(object, predicate, thisVariable, graph);
        const results = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: path, context }));
        results.bindingsStream.on("data", async (bindings) => {
          const result = bindings.get(thisVariable);
          await this.getObjectsPredicateStar(result, predicate, graph, context, termHashes, it, counter);
        });
        results.bindingsStream.on("end", () => {
          if (--counter.count === 0) {
            it.close();
          }
        });
        return results.metadata;
      }
      /**
         * Pushes all terms to iterator `it` that are a solution of ?s predicate* ?o.
         * @param {string} subjectVar String representation of subjectVariable
         * @param {string} objectVar String representation of objectVariable
         * @param {Term} subjectVal Term of where we start the predicate* search.
         * @param {Term} objectVal Found solution for an object, start for the new step.
         * @param {Algebra.PropertyPathSymbol} predicate Predicate of the *-path.
         * @param {Term} graph The graph in which we search for the pattern.
         * @param {ActionContext} context
         * @param {{[id: string]: Promise<Term[]>}} termHashesGlobal
         * Remembers solutions for when objectVal is already been calculated, can be reused when same objectVal occurs
         * @param {{[id: string]: Term}} termHashesCurrentSubject
         * Remembers the pairs we've already searched for, can stop searching if so.
         * @param {BufferedIterator<Bindings>} it Iterator to push terms to.
         * @param {any} counter Counts how many searches are in progress to close it when needed (when counter == 0).
         * @return {Promise<void>} All solutions of query should have been pushed to it by then.
         */
      // Let the iterator `it` emit all bindings of size 2, with subjectStringVariable as value subjectVal
      // and objectStringVariable as value all nodes reachable through predicate* beginning at objectVal
      async getSubjectAndObjectBindingsPredicateStar(subjectVar, objectVar, subjectVal, objectVal, predicate, graph, context, termHashesGlobal, termHashesCurrentSubject, it, counter) {
        const termString = (0, rdf_string_1.termToString)(objectVal) + (0, rdf_string_1.termToString)(graph);
        if (termHashesCurrentSubject[termString]) {
          return;
        }
        counter.count++;
        termHashesCurrentSubject[termString] = true;
        it._push(BF.bindings([
          [subjectVar, subjectVal],
          [objectVar, objectVal]
        ]));
        if (termString in termHashesGlobal) {
          const objects = await termHashesGlobal[termString];
          for (const object of objects) {
            await this.getSubjectAndObjectBindingsPredicateStar(subjectVar, objectVar, subjectVal, object, predicate, graph, context, termHashesGlobal, termHashesCurrentSubject, it, counter);
          }
          if (--counter.count === 0) {
            it.close();
          }
          return;
        }
        const promise = new Promise(async (resolve, reject) => {
          const objectsArray = [];
          const thisVariable = this.generateVariable();
          const path = _ActorAbstractPath.FACTORY.createPath(objectVal, predicate, thisVariable, graph);
          const results = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: path, context }));
          results.bindingsStream.on("data", async (bindings) => {
            const result = bindings.get(thisVariable);
            objectsArray.push(result);
            await this.getSubjectAndObjectBindingsPredicateStar(subjectVar, objectVar, subjectVal, result, predicate, graph, context, termHashesGlobal, termHashesCurrentSubject, it, counter);
          });
          results.bindingsStream.on("error", reject);
          results.bindingsStream.on("end", () => {
            if (--counter.count === 0) {
              it.close();
            }
            resolve(objectsArray);
          });
        });
        termHashesGlobal[termString] = promise;
      }
    };
    exports.ActorAbstractPath = ActorAbstractPath;
    ActorAbstractPath.FACTORY = new sparqlalgebrajs_1.Factory();
  }
});

// node_modules/@comunica/actor-abstract-path/lib/index.js
var require_lib87 = __commonJS({
  "node_modules/@comunica/actor-abstract-path/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorAbstractPath(), exports);
    __exportStar(require_PathVariableObjectIterator(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-path-alt/lib/ActorQueryOperationPathAlt.js
var require_ActorQueryOperationPathAlt = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-alt/lib/ActorQueryOperationPathAlt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathAlt = void 0;
    var actor_abstract_path_1 = require_lib87();
    var actor_query_operation_union_1 = require_lib71();
    var bus_query_operation_1 = require_lib7();
    var asynciterator_1 = require_asynciterator();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathAlt = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.ALT);
      }
      async runOperation(operation, context) {
        const predicate = operation.predicate;
        const subOperations = (await Promise.all(predicate.input.map((subPredicate) => this.mediatorQueryOperation.mediate({
          context,
          operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(operation.subject, subPredicate, operation.object, operation.graph)
        })))).map(bus_query_operation_1.ActorQueryOperation.getSafeBindings);
        const bindingsStream = new asynciterator_1.UnionIterator(subOperations.map((op) => op.bindingsStream), { autoStart: false });
        const metadata = () => Promise.all(subOperations.map((output) => output.metadata())).then((subMeta) => actor_query_operation_union_1.ActorQueryOperationUnion.unionMetadata(subMeta, true));
        return {
          type: "bindings",
          bindingsStream,
          metadata
        };
      }
    };
    exports.ActorQueryOperationPathAlt = ActorQueryOperationPathAlt;
  }
});

// node_modules/@comunica/actor-query-operation-path-alt/lib/index.js
var require_lib88 = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-alt/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathAlt(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-path-inv/lib/ActorQueryOperationPathInv.js
var require_ActorQueryOperationPathInv = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-inv/lib/ActorQueryOperationPathInv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathInv = void 0;
    var actor_abstract_path_1 = require_lib87();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathInv = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.INV);
      }
      async runOperation(operation, context) {
        const predicate = operation.predicate;
        const invPath = actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(operation.object, predicate.path, operation.subject, operation.graph);
        return this.mediatorQueryOperation.mediate({ operation: invPath, context });
      }
    };
    exports.ActorQueryOperationPathInv = ActorQueryOperationPathInv;
  }
});

// node_modules/@comunica/actor-query-operation-path-inv/lib/index.js
var require_lib89 = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-inv/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathInv(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-path-nps/lib/ActorQueryOperationPathNps.js
var require_ActorQueryOperationPathNps = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-nps/lib/ActorQueryOperationPathNps.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathNps = void 0;
    var actor_abstract_path_1 = require_lib87();
    var bus_query_operation_1 = require_lib7();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathNps = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.NPS);
      }
      async runOperation(operation, context) {
        const predicate = operation.predicate;
        const blank = this.generateVariable(operation);
        const pattern = actor_abstract_path_1.ActorAbstractPath.FACTORY.createPattern(operation.subject, blank, operation.object, operation.graph);
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: pattern, context }));
        const bindingsStream = output.bindingsStream.transform({
          filter(bindings) {
            return !predicate.iris.some((iri) => iri.equals(bindings.get(blank)));
          },
          transform(item, next, push) {
            push(item.delete(blank));
            next();
          }
        });
        return {
          type: "bindings",
          bindingsStream,
          metadata: output.metadata
        };
      }
    };
    exports.ActorQueryOperationPathNps = ActorQueryOperationPathNps;
  }
});

// node_modules/@comunica/actor-query-operation-path-nps/lib/index.js
var require_lib90 = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-nps/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathNps(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-path-link/lib/ActorQueryOperationPathLink.js
var require_ActorQueryOperationPathLink = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-link/lib/ActorQueryOperationPathLink.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathLink = void 0;
    var actor_abstract_path_1 = require_lib87();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathLink = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.LINK);
      }
      async runOperation(operationOriginal, context) {
        const predicate = operationOriginal.predicate;
        const operation = actor_abstract_path_1.ActorAbstractPath.FACTORY.createPattern(operationOriginal.subject, predicate.iri, operationOriginal.object, operationOriginal.graph);
        return this.mediatorQueryOperation.mediate({ operation, context });
      }
    };
    exports.ActorQueryOperationPathLink = ActorQueryOperationPathLink;
  }
});

// node_modules/@comunica/actor-query-operation-path-link/lib/index.js
var require_lib91 = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-link/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathLink(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-path-one-or-more/lib/ActorQueryOperationPathOneOrMore.js
var require_ActorQueryOperationPathOneOrMore = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-one-or-more/lib/ActorQueryOperationPathOneOrMore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathOneOrMore = void 0;
    var actor_abstract_path_1 = require_lib87();
    var bindings_factory_1 = require_lib6();
    var bus_query_operation_1 = require_lib7();
    var asynciterator_1 = require_asynciterator();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var BF = new bindings_factory_1.BindingsFactory();
    var ActorQueryOperationPathOneOrMore = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.ONE_OR_MORE_PATH);
      }
      async runOperation(operation, context) {
        const distinct = await this.isPathArbitraryLengthDistinct(context, operation);
        if (distinct.operation) {
          return distinct.operation;
        }
        context = distinct.context;
        const predicate = operation.predicate;
        if (operation.subject.termType !== "Variable" && operation.object.termType === "Variable") {
          const objectVar = operation.object;
          const starEval = await this.getObjectsPredicateStarEval(operation.subject, predicate.path, objectVar, operation.graph, context, false);
          const variables = operation.graph.termType === "Variable" ? [objectVar, operation.graph] : [objectVar];
          return {
            type: "bindings",
            bindingsStream: starEval.bindingsStream,
            metadata: async () => ({ ...await starEval.metadata(), variables })
          };
        }
        if (operation.subject.termType === "Variable" && operation.object.termType === "Variable") {
          const single = actor_abstract_path_1.ActorAbstractPath.FACTORY.createDistinct(actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(operation.subject, operation.predicate.path, operation.object, operation.graph));
          const results2 = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ context, operation: single }));
          const subjectVar = operation.subject;
          const objectVar = operation.object;
          const termHashes = {};
          const bindingsStream2 = new asynciterator_1.MultiTransformIterator(results2.bindingsStream, {
            multiTransform: (bindings) => {
              const subject = bindings.get(subjectVar);
              const object = bindings.get(objectVar);
              const graph = operation.graph.termType === "Variable" ? bindings.get(operation.graph) : operation.graph;
              return new asynciterator_1.TransformIterator(async () => {
                const it = new asynciterator_1.BufferedIterator();
                await this.getSubjectAndObjectBindingsPredicateStar(subjectVar, objectVar, subject, object, predicate.path, graph, context, termHashes, {}, it, { count: 0 });
                return it.transform({
                  transform(item, next, push) {
                    if (operation.graph.termType === "Variable") {
                      item = item.set(operation.graph, graph);
                    }
                    push(item);
                    next();
                  }
                });
              }, { maxBufferSize: 128 });
            },
            autoStart: false
          });
          const variables = operation.graph.termType === "Variable" ? [subjectVar, objectVar, operation.graph] : [subjectVar, objectVar];
          return {
            type: "bindings",
            bindingsStream: bindingsStream2,
            metadata: async () => ({ ...await results2.metadata(), variables })
          };
        }
        if (operation.subject.termType === "Variable" && operation.object.termType !== "Variable") {
          return this.mediatorQueryOperation.mediate({
            context,
            operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(operation.object, actor_abstract_path_1.ActorAbstractPath.FACTORY.createOneOrMorePath(actor_abstract_path_1.ActorAbstractPath.FACTORY.createInv(predicate.path)), operation.subject, operation.graph)
          });
        }
        const variable = this.generateVariable();
        const results = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({
          context,
          operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(operation.subject, predicate, variable, operation.graph)
        }));
        const bindingsStream = results.bindingsStream.transform({
          filter: (item) => operation.object.equals(item.get(variable)),
          transform(item, next, push) {
            const binding = operation.graph.termType === "Variable" ? BF.bindings([[operation.graph, item.get(operation.graph)]]) : BF.bindings();
            push(binding);
            next();
          }
        });
        return {
          type: "bindings",
          bindingsStream,
          metadata: async () => ({
            ...await results.metadata(),
            variables: operation.graph.termType === "Variable" ? [operation.graph] : []
          })
        };
      }
    };
    exports.ActorQueryOperationPathOneOrMore = ActorQueryOperationPathOneOrMore;
  }
});

// node_modules/@comunica/actor-query-operation-path-one-or-more/lib/index.js
var require_lib92 = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-one-or-more/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathOneOrMore(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-path-zero-or-more/lib/ActorQueryOperationPathZeroOrMore.js
var require_ActorQueryOperationPathZeroOrMore = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-zero-or-more/lib/ActorQueryOperationPathZeroOrMore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathZeroOrMore = void 0;
    var actor_abstract_path_1 = require_lib87();
    var bindings_factory_1 = require_lib6();
    var bus_query_operation_1 = require_lib7();
    var asynciterator_1 = require_asynciterator();
    var rdf_string_1 = require_rdf_string();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var BF = new bindings_factory_1.BindingsFactory();
    var ActorQueryOperationPathZeroOrMore = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.ZERO_OR_MORE_PATH);
      }
      async runOperation(operation, context) {
        const distinct = await this.isPathArbitraryLengthDistinct(context, operation);
        if (distinct.operation) {
          return distinct.operation;
        }
        context = distinct.context;
        const predicate = operation.predicate;
        const sVar = operation.subject.termType === "Variable";
        const oVar = operation.object.termType === "Variable";
        if (operation.subject.termType === "Variable" && operation.object.termType === "Variable") {
          const predVar = this.generateVariable(operation);
          const single = actor_abstract_path_1.ActorAbstractPath.FACTORY.createPattern(operation.subject, predVar, operation.object, operation.graph);
          const results = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ context, operation: single }));
          const subjectVar = operation.subject;
          const objectVar = operation.object;
          const entities = /* @__PURE__ */ new Set();
          const termHashes = {};
          const bindingsStream = new asynciterator_1.MultiTransformIterator(results.bindingsStream, {
            multiTransform: (bindings) => {
              const subject2 = bindings.get(subjectVar);
              const object = bindings.get(objectVar);
              const graph = operation.graph.termType === "Variable" ? bindings.get(operation.graph) : operation.graph;
              const subjectGraphHash = (0, rdf_string_1.termToString)(subject2) + (0, rdf_string_1.termToString)(graph);
              const objectGraphHash = (0, rdf_string_1.termToString)(object) + (0, rdf_string_1.termToString)(graph);
              return new asynciterator_1.TransformIterator(async () => {
                if (entities.has(subjectGraphHash) && entities.has(objectGraphHash)) {
                  return new asynciterator_1.EmptyIterator();
                }
                const it = new asynciterator_1.BufferedIterator();
                const counter = { count: 0 };
                if (!entities.has(subjectGraphHash)) {
                  entities.add(subjectGraphHash);
                  await this.getSubjectAndObjectBindingsPredicateStar(subjectVar, objectVar, subject2, subject2, predicate.path, graph, context, termHashes, {}, it, counter);
                }
                if (!entities.has(objectGraphHash)) {
                  entities.add(objectGraphHash);
                  await this.getSubjectAndObjectBindingsPredicateStar(subjectVar, objectVar, object, object, predicate.path, graph, context, termHashes, {}, it, counter);
                }
                return it.transform({
                  transform(item, next, push) {
                    if (operation.graph.termType === "Variable") {
                      item = item.set(operation.graph, graph);
                    }
                    push(item);
                    next();
                  }
                });
              });
            }
          });
          const variables2 = operation.graph.termType === "Variable" ? [subjectVar, operation.object, operation.graph] : [subjectVar, operation.object];
          return {
            type: "bindings",
            bindingsStream,
            metadata: async () => ({ ...await results.metadata(), variables: variables2 })
          };
        }
        if (!sVar && !oVar) {
          const variable = this.generateVariable();
          const starEval2 = await this.getObjectsPredicateStarEval(operation.subject, predicate.path, variable, operation.graph, context, true);
          const bindingsStream = starEval2.bindingsStream.transform({
            filter: (item) => operation.object.equals(item.get(variable)),
            transform(item, next, push) {
              const binding = operation.graph.termType === "Variable" ? BF.bindings([[operation.graph, item.get(operation.graph)]]) : BF.bindings();
              push(binding);
              next();
            }
          });
          return {
            type: "bindings",
            bindingsStream,
            metadata: async () => ({
              ...await starEval2.metadata(),
              variables: operation.graph.termType === "Variable" ? [operation.graph] : []
            })
          };
        }
        const subject = sVar ? operation.object : operation.subject;
        const value = sVar ? operation.subject : operation.object;
        const pred = sVar ? actor_abstract_path_1.ActorAbstractPath.FACTORY.createInv(predicate.path) : predicate.path;
        const starEval = await this.getObjectsPredicateStarEval(subject, pred, value, operation.graph, context, true);
        const variables = operation.graph.termType === "Variable" ? [value, operation.graph] : [value];
        return {
          type: "bindings",
          bindingsStream: starEval.bindingsStream,
          metadata: async () => ({ ...await starEval.metadata(), variables })
        };
      }
    };
    exports.ActorQueryOperationPathZeroOrMore = ActorQueryOperationPathZeroOrMore;
  }
});

// node_modules/@comunica/actor-query-operation-path-zero-or-more/lib/index.js
var require_lib93 = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-zero-or-more/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathZeroOrMore(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-path-zero-or-one/lib/ActorQueryOperationPathZeroOrOne.js
var require_ActorQueryOperationPathZeroOrOne = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-zero-or-one/lib/ActorQueryOperationPathZeroOrOne.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathZeroOrOne = void 0;
    var actor_abstract_path_1 = require_lib87();
    var bindings_factory_1 = require_lib6();
    var bus_query_operation_1 = require_lib7();
    var metadata_1 = require_lib48();
    var asynciterator_1 = require_asynciterator();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var BF = new bindings_factory_1.BindingsFactory();
    var ActorQueryOperationPathZeroOrOne = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.ZERO_OR_ONE_PATH);
      }
      async runOperation(operation, context) {
        const predicate = operation.predicate;
        const extra = [];
        if (operation.subject.termType !== "Variable" && operation.object.termType !== "Variable" && operation.subject.equals(operation.object)) {
          return {
            type: "bindings",
            bindingsStream: new asynciterator_1.SingletonIterator(BF.bindings()),
            metadata: () => Promise.resolve({
              state: new metadata_1.MetadataValidationState(),
              cardinality: { type: "exact", value: 1 },
              canContainUndefs: false,
              variables: []
            })
          };
        }
        const distinct = await this.isPathArbitraryLengthDistinct(context, operation);
        if (distinct.operation) {
          return distinct.operation;
        }
        context = distinct.context;
        const bindingsOne = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({
          context,
          operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(operation.subject, predicate.path, operation.object, operation.graph)
        }));
        let bindingsStream;
        if (operation.subject.termType === "Variable" && operation.object.termType === "Variable") {
          const varP = this.generateVariable(operation);
          const bindingsZero = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({
            context,
            operation: actor_abstract_path_1.ActorAbstractPath.FACTORY.createFilter(actor_abstract_path_1.ActorAbstractPath.FACTORY.createPattern(operation.subject, varP, operation.object, operation.graph), actor_abstract_path_1.ActorAbstractPath.FACTORY.createOperatorExpression("=", [
              actor_abstract_path_1.ActorAbstractPath.FACTORY.createTermExpression(operation.subject),
              actor_abstract_path_1.ActorAbstractPath.FACTORY.createTermExpression(operation.object)
            ]))
          })).bindingsStream.transform({
            map(bindings) {
              return bindings.delete(varP);
            },
            autoStart: false
          });
          bindingsStream = new asynciterator_1.UnionIterator([
            bindingsZero,
            bindingsOne.bindingsStream
          ], { autoStart: false });
        } else {
          if (operation.subject.termType === "Variable") {
            extra.push(BF.bindings([[operation.subject, operation.object]]));
          }
          if (operation.object.termType === "Variable") {
            extra.push(BF.bindings([[operation.object, operation.subject]]));
          }
          bindingsStream = bindingsOne.bindingsStream.prepend(extra);
        }
        return {
          type: "bindings",
          bindingsStream,
          metadata: bindingsOne.metadata
        };
      }
    };
    exports.ActorQueryOperationPathZeroOrOne = ActorQueryOperationPathZeroOrOne;
  }
});

// node_modules/@comunica/actor-query-operation-path-zero-or-one/lib/index.js
var require_lib94 = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-zero-or-one/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathZeroOrOne(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-update-add-rewrite/lib/ActorQueryOperationAddRewrite.js
var require_ActorQueryOperationAddRewrite = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-add-rewrite/lib/ActorQueryOperationAddRewrite.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationAddRewrite = void 0;
    var bus_query_operation_1 = require_lib7();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var DF = new rdf_data_factory_1.DataFactory();
    var ActorQueryOperationAddRewrite = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "add");
        this.factory = new sparqlalgebrajs_1.Factory();
      }
      async testOperation(operation, context) {
        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);
        return true;
      }
      runOperation(operationOriginal, context) {
        const destination = operationOriginal.destination === "DEFAULT" ? DF.defaultGraph() : operationOriginal.destination;
        const source = operationOriginal.source === "DEFAULT" ? DF.defaultGraph() : operationOriginal.source;
        const operation = this.factory.createDeleteInsert(void 0, [
          this.factory.createPattern(DF.variable("s"), DF.variable("p"), DF.variable("o"), destination)
        ], this.factory.createPattern(DF.variable("s"), DF.variable("p"), DF.variable("o"), source));
        return this.mediatorQueryOperation.mediate({ operation, context });
      }
    };
    exports.ActorQueryOperationAddRewrite = ActorQueryOperationAddRewrite;
  }
});

// node_modules/@comunica/actor-query-operation-update-add-rewrite/lib/index.js
var require_lib95 = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-add-rewrite/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationAddRewrite(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-update-copy-rewrite/lib/ActorQueryOperationCopyRewrite.js
var require_ActorQueryOperationCopyRewrite = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-copy-rewrite/lib/ActorQueryOperationCopyRewrite.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationCopyRewrite = void 0;
    var bus_query_operation_1 = require_lib7();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationCopyRewrite = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "copy");
        this.factory = new sparqlalgebrajs_1.Factory();
      }
      async testOperation(operation, context) {
        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);
        return true;
      }
      runOperation(operationOriginal, context) {
        if (typeof operationOriginal.destination === "string" && typeof operationOriginal.source === "string" && operationOriginal.destination === operationOriginal.source || typeof operationOriginal.destination !== "string" && typeof operationOriginal.source !== "string" && operationOriginal.destination.equals(operationOriginal.source)) {
          return Promise.resolve({
            type: "void",
            execute: () => Promise.resolve()
          });
        }
        const operation = this.factory.createCompositeUpdate([
          this.factory.createDrop(operationOriginal.destination, true),
          this.factory.createAdd(operationOriginal.source, operationOriginal.destination, operationOriginal.silent)
        ]);
        return this.mediatorQueryOperation.mediate({ operation, context });
      }
    };
    exports.ActorQueryOperationCopyRewrite = ActorQueryOperationCopyRewrite;
  }
});

// node_modules/@comunica/actor-query-operation-update-copy-rewrite/lib/index.js
var require_lib96 = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-copy-rewrite/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationCopyRewrite(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-update-clear/lib/ActorQueryOperationClear.js
var require_ActorQueryOperationClear = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-clear/lib/ActorQueryOperationClear.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationClear = void 0;
    var bus_query_operation_1 = require_lib7();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var DF = new rdf_data_factory_1.DataFactory();
    var ActorQueryOperationClear = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "clear");
      }
      async testOperation(operation, context) {
        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);
        return true;
      }
      async runOperation(operation, context) {
        let graphs;
        if (operation.source === "DEFAULT") {
          graphs = DF.defaultGraph();
        } else if (typeof operation.source === "string") {
          graphs = operation.source;
        } else {
          graphs = [operation.source];
        }
        const { execute } = await this.mediatorUpdateQuads.mediate({
          deleteGraphs: {
            graphs,
            requireExistence: !operation.silent,
            dropGraphs: false
          },
          context
        });
        return {
          type: "void",
          execute
        };
      }
    };
    exports.ActorQueryOperationClear = ActorQueryOperationClear;
  }
});

// node_modules/@comunica/actor-query-operation-update-clear/lib/index.js
var require_lib97 = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-clear/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationClear(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-update-compositeupdate/lib/ActorQueryOperationUpdateCompositeUpdate.js
var require_ActorQueryOperationUpdateCompositeUpdate = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-compositeupdate/lib/ActorQueryOperationUpdateCompositeUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationUpdateCompositeUpdate = void 0;
    var bus_query_operation_1 = require_lib7();
    var ActorQueryOperationUpdateCompositeUpdate = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "compositeupdate");
      }
      async testOperation(operation, context) {
        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);
        return true;
      }
      async runOperation(operationOriginal, context) {
        const execute = () => (async () => {
          for (const operation of operationOriginal.updates) {
            const subResult = bus_query_operation_1.ActorQueryOperation.getSafeVoid(await this.mediatorQueryOperation.mediate({ operation, context }));
            await subResult.execute();
          }
        })();
        return {
          type: "void",
          execute
        };
      }
    };
    exports.ActorQueryOperationUpdateCompositeUpdate = ActorQueryOperationUpdateCompositeUpdate;
  }
});

// node_modules/@comunica/actor-query-operation-update-compositeupdate/lib/index.js
var require_lib98 = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-compositeupdate/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationUpdateCompositeUpdate(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-update-create/lib/ActorQueryOperationCreate.js
var require_ActorQueryOperationCreate = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-create/lib/ActorQueryOperationCreate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationCreate = void 0;
    var bus_query_operation_1 = require_lib7();
    var ActorQueryOperationCreate = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "create");
      }
      async testOperation(operation, context) {
        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);
        return true;
      }
      async runOperation(operation, context) {
        const { execute } = await this.mediatorUpdateQuads.mediate({
          createGraphs: {
            graphs: [operation.source],
            requireNonExistence: !operation.silent
          },
          context
        });
        return {
          type: "void",
          execute
        };
      }
    };
    exports.ActorQueryOperationCreate = ActorQueryOperationCreate;
  }
});

// node_modules/@comunica/actor-query-operation-update-create/lib/index.js
var require_lib99 = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-create/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationCreate(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-update-drop/lib/ActorQueryOperationDrop.js
var require_ActorQueryOperationDrop = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-drop/lib/ActorQueryOperationDrop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationDrop = void 0;
    var bus_query_operation_1 = require_lib7();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var DF = new rdf_data_factory_1.DataFactory();
    var ActorQueryOperationDrop = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "drop");
      }
      async testOperation(operation, context) {
        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);
        return true;
      }
      async runOperation(operation, context) {
        let graphs;
        if (operation.source === "DEFAULT") {
          graphs = DF.defaultGraph();
        } else if (typeof operation.source === "string") {
          graphs = operation.source;
        } else {
          graphs = [operation.source];
        }
        const { execute } = await this.mediatorUpdateQuads.mediate({
          deleteGraphs: {
            graphs,
            requireExistence: !operation.silent,
            dropGraphs: true
          },
          context
        });
        return {
          type: "void",
          execute
        };
      }
    };
    exports.ActorQueryOperationDrop = ActorQueryOperationDrop;
  }
});

// node_modules/@comunica/actor-query-operation-update-drop/lib/index.js
var require_lib100 = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-drop/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationDrop(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-update-deleteinsert/lib/ActorQueryOperationUpdateDeleteInsert.js
var require_ActorQueryOperationUpdateDeleteInsert = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-deleteinsert/lib/ActorQueryOperationUpdateDeleteInsert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationUpdateDeleteInsert = void 0;
    var actor_query_operation_construct_1 = require_lib73();
    var bindings_factory_1 = require_lib6();
    var bus_query_operation_1 = require_lib7();
    var asynciterator_1 = require_asynciterator();
    var BF = new bindings_factory_1.BindingsFactory();
    var ActorQueryOperationUpdateDeleteInsert = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "deleteinsert");
        this.blankNodeCounter = 0;
      }
      async testOperation(operation, context) {
        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);
        return true;
      }
      async runOperation(operation, context) {
        const whereBindings = operation.where ? bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: operation.where, context })).bindingsStream : new asynciterator_1.ArrayIterator([BF.bindings()], { autoStart: false });
        let quadStreamInsert;
        let quadStreamDelete;
        if (operation.insert) {
          quadStreamInsert = new actor_query_operation_construct_1.BindingsToQuadsIterator(operation.insert.map(actor_query_operation_construct_1.BindingsToQuadsIterator.localizeQuad.bind(null, this.blankNodeCounter)), whereBindings.clone());
          this.blankNodeCounter++;
        }
        if (operation.delete) {
          quadStreamDelete = new actor_query_operation_construct_1.BindingsToQuadsIterator(operation.delete.map(actor_query_operation_construct_1.BindingsToQuadsIterator.localizeQuad.bind(null, this.blankNodeCounter)), whereBindings.clone());
          this.blankNodeCounter++;
        }
        const { execute } = await this.mediatorUpdateQuads.mediate({
          quadStreamInsert,
          quadStreamDelete,
          context
        });
        return {
          type: "void",
          execute
        };
      }
    };
    exports.ActorQueryOperationUpdateDeleteInsert = ActorQueryOperationUpdateDeleteInsert;
  }
});

// node_modules/@comunica/actor-query-operation-update-deleteinsert/lib/index.js
var require_lib101 = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-deleteinsert/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationUpdateDeleteInsert(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-update-load/lib/ActorQueryOperationLoad.js
var require_ActorQueryOperationLoad = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-load/lib/ActorQueryOperationLoad.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationLoad = void 0;
    var bus_query_operation_1 = require_lib7();
    var context_entries_1 = require_lib4();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var DF = new rdf_data_factory_1.DataFactory();
    var ActorQueryOperationLoad = class _ActorQueryOperationLoad extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "load");
        this.factory = new sparqlalgebrajs_1.Factory();
        this.constructOperation = this.factory.createConstruct(this.factory.createPattern(DF.variable("s"), DF.variable("p"), DF.variable("o")), [this.factory.createPattern(DF.variable("s"), DF.variable("p"), DF.variable("o"))]);
      }
      async testOperation(operation, context) {
        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);
        return true;
      }
      async runOperation(operation, context) {
        let subContext = context.set(context_entries_1.KeysRdfResolveQuadPattern.sources, [operation.source.value]);
        if (operation.silent) {
          subContext = subContext.set(context_entries_1.KeysInitQuery.lenient, true);
        }
        const output = _ActorQueryOperationLoad.getSafeQuads(await this.mediatorQueryOperation.mediate({
          operation: this.constructOperation,
          context: subContext
        }));
        let quadStream = output.quadStream;
        if (operation.destination) {
          quadStream = quadStream.map((quad) => DF.quad(quad.subject, quad.predicate, quad.object, operation.destination));
        }
        const { execute } = await this.mediatorUpdateQuads.mediate({
          quadStreamInsert: quadStream,
          context
        });
        return {
          type: "void",
          execute
        };
      }
    };
    exports.ActorQueryOperationLoad = ActorQueryOperationLoad;
  }
});

// node_modules/@comunica/actor-query-operation-update-load/lib/index.js
var require_lib102 = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-load/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationLoad(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-update-move-rewrite/lib/ActorQueryOperationMoveRewrite.js
var require_ActorQueryOperationMoveRewrite = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-move-rewrite/lib/ActorQueryOperationMoveRewrite.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationMoveRewrite = void 0;
    var bus_query_operation_1 = require_lib7();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationMoveRewrite = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "move");
        this.factory = new sparqlalgebrajs_1.Factory();
      }
      async testOperation(operation, context) {
        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);
        return true;
      }
      runOperation(operationOriginal, context) {
        if (typeof operationOriginal.destination === "string" && typeof operationOriginal.source === "string" && operationOriginal.destination === operationOriginal.source || typeof operationOriginal.destination !== "string" && typeof operationOriginal.source !== "string" && operationOriginal.destination.equals(operationOriginal.source)) {
          return Promise.resolve({
            type: "void",
            execute: () => Promise.resolve()
          });
        }
        const updates = [
          this.factory.createDrop(operationOriginal.destination, true),
          this.factory.createAdd(operationOriginal.source, operationOriginal.destination, operationOriginal.silent),
          this.factory.createDrop(operationOriginal.source)
        ];
        const operation = this.factory.createCompositeUpdate(updates);
        return this.mediatorQueryOperation.mediate({ operation, context });
      }
    };
    exports.ActorQueryOperationMoveRewrite = ActorQueryOperationMoveRewrite;
  }
});

// node_modules/@comunica/actor-query-operation-update-move-rewrite/lib/index.js
var require_lib103 = __commonJS({
  "node_modules/@comunica/actor-query-operation-update-move-rewrite/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationMoveRewrite(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-inner-multi-bind/lib/ActorRdfJoinMultiBind.js
var require_ActorRdfJoinMultiBind = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-multi-bind/lib/ActorRdfJoinMultiBind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinMultiBind = void 0;
    var bus_query_operation_1 = require_lib7();
    var bus_rdf_join_1 = require_lib59();
    var context_entries_1 = require_lib4();
    var asynciterator_1 = require_asynciterator();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorRdfJoinMultiBind = class _ActorRdfJoinMultiBind extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "bind",
          canHandleUndefs: true
        });
      }
      /**
       * Create a new bindings stream that takes every binding of the base stream
       * and binds it to the remaining patterns, evaluates those patterns, and emits all their bindings.
       *
       * @param bindOrder The order in which elements should be bound.
       * @param baseStream The base stream.
       * @param operations The operations to bind with each binding of the base stream.
       * @param operationBinder A callback to retrieve the bindings stream of bound operations.
       * @param optional If the original bindings should be emitted when the resulting bindings stream is empty.
       * @return {BindingsStream}
       */
      static createBindStream(bindOrder, baseStream, operations, operationBinder, optional) {
        const binder = (bindings) => {
          const subOperations = operations.map((operation) => (0, bus_query_operation_1.materializeOperation)(operation, bindings, { bindFilter: false }));
          const bindingsMerger = (subBindings) => subBindings.merge(bindings);
          return new asynciterator_1.TransformIterator(async () => (await operationBinder(subOperations, bindings)).transform({ map: bindingsMerger }), { maxBufferSize: 128, autoStart: false });
        };
        switch (bindOrder) {
          case "depth-first":
            return new asynciterator_1.MultiTransformIterator(baseStream, { autoStart: false, multiTransform: binder, optional });
          case "breadth-first":
            return new asynciterator_1.UnionIterator(baseStream.transform({
              map: binder,
              optional
            }), { autoStart: false });
          default:
            throw new Error(`Received request for unknown bind order: ${bindOrder}`);
        }
      }
      /**
       * Order the given join entries using the join-entries-sort bus.
       * @param {IJoinEntryWithMetadata[]} entries An array of join entries.
       * @param context The action context.
       * @return {IJoinEntryWithMetadata[]} The sorted join entries.
       */
      async sortJoinEntries(entries, context) {
        const canContainUndefs = entries.some((entry) => entry.metadata.canContainUndefs);
        if (canContainUndefs) {
          return entries;
        }
        const variableOccurrences = {};
        for (const entry of entries) {
          for (const variable of entry.metadata.variables) {
            let counter = variableOccurrences[variable.value];
            if (!counter) {
              counter = 0;
            }
            variableOccurrences[variable.value] = ++counter;
          }
        }
        const multiOccurrenceVariables = [];
        for (const [variable, count] of Object.entries(variableOccurrences)) {
          if (count >= 2) {
            multiOccurrenceVariables.push(variable);
          }
        }
        if (multiOccurrenceVariables.length === 0) {
          throw new Error(`Bind join can only join entries with at least one common variable`);
        }
        const entriesWithoutCommonVariables = [];
        for (const entry of entries) {
          let hasCommon = false;
          for (const variable of entry.metadata.variables) {
            if (multiOccurrenceVariables.includes(variable.value)) {
              hasCommon = true;
              break;
            }
          }
          if (!hasCommon) {
            entriesWithoutCommonVariables.push(entry);
          }
        }
        return (await this.mediatorJoinEntriesSort.mediate({ entries, context })).entries.sort((entryLeft, entryRight) => {
          const leftWithoutCommonVariables = entriesWithoutCommonVariables.includes(entryLeft);
          const rightWithoutCommonVariables = entriesWithoutCommonVariables.includes(entryRight);
          if (leftWithoutCommonVariables === rightWithoutCommonVariables) {
            return 0;
          }
          return leftWithoutCommonVariables ? 1 : -1;
        });
      }
      async getOutput(action) {
        const entriesUnsorted = await bus_rdf_join_1.ActorRdfJoin.getEntriesWithMetadatas(action.entries);
        const entries = await this.sortJoinEntries(entriesUnsorted, action.context);
        this.logDebug(action.context, "First entry for Bind Join: ", () => ({ entry: entries[0].operation, metadata: entries[0].metadata }));
        for (const [i2, element] of entries.entries()) {
          if (i2 !== 0) {
            element.output.bindingsStream.close();
          }
        }
        const smallestStream = entries[0].output;
        const remainingEntries = [...entries];
        remainingEntries.splice(0, 1);
        const subContext = action.context.set(context_entries_1.KeysQueryOperation.joinLeftMetadata, entries[0].metadata).set(context_entries_1.KeysQueryOperation.joinRightMetadatas, remainingEntries.map((entry) => entry.metadata));
        const bindingsStream = _ActorRdfJoinMultiBind.createBindStream(this.bindOrder, smallestStream.bindingsStream, remainingEntries.map((entry) => entry.operation), async (operations, operationBindings) => {
          const operation = operations.length === 1 ? operations[0] : _ActorRdfJoinMultiBind.FACTORY.createJoin(operations);
          const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation, context: subContext?.set(context_entries_1.KeysQueryOperation.joinBindings, operationBindings) }));
          return output.bindingsStream;
        }, false);
        return {
          result: {
            type: "bindings",
            bindingsStream,
            metadata: () => this.constructResultMetadata(entries, entries.map((entry) => entry.metadata), action.context)
          },
          physicalPlanMetadata: {
            bindIndex: entriesUnsorted.indexOf(entries[0]),
            bindOrder: this.bindOrder
          }
        };
      }
      canBindWithOperation(operation) {
        let valid = true;
        sparqlalgebrajs_1.Util.recurseOperation(operation, {
          [sparqlalgebrajs_1.Algebra.types.EXTEND]() {
            valid = false;
            return false;
          },
          [sparqlalgebrajs_1.Algebra.types.GROUP]() {
            valid = false;
            return false;
          },
          [sparqlalgebrajs_1.Algebra.types.FILTER]() {
            valid = false;
            return false;
          }
        });
        return valid;
      }
      async getJoinCoefficients(action, metadatas) {
        const entries = await this.sortJoinEntries(action.entries.map((entry, i2) => ({ ...entry, metadata: metadatas[i2] })), action.context);
        metadatas = entries.map((entry) => entry.metadata);
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        const remainingEntries = [...entries];
        const remainingRequestInitialTimes = [...requestInitialTimes];
        const remainingRequestItemTimes = [...requestItemTimes];
        remainingEntries.splice(0, 1);
        remainingRequestInitialTimes.splice(0, 1);
        remainingRequestItemTimes.splice(0, 1);
        if (remainingEntries.some((entry) => !this.canBindWithOperation(entry.operation))) {
          throw new Error(`Actor ${this.name} can not bind on Extend, Group, and Filter operations`);
        }
        const selectivities = await Promise.all(remainingEntries.map(async (entry) => (await this.mediatorJoinSelectivity.mediate({
          entries: [entries[0], entry],
          context: action.context
        })).selectivity * this.selectivityModifier));
        const cardinalityRemaining = remainingEntries.map((entry, i2) => entry.metadata.cardinality.value * selectivities[i2]).reduce((sum, element) => sum + element, 0);
        const receiveInitialCostRemaining = remainingRequestInitialTimes.reduce((sum, element, i2) => sum + element * selectivities[i2], 0);
        const receiveItemCostRemaining = remainingRequestItemTimes.reduce((sum, element, i2) => sum + element * selectivities[i2], 0);
        return {
          iterations: metadatas[0].cardinality.value * cardinalityRemaining,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * (requestItemTimes[0] + receiveInitialCostRemaining + cardinalityRemaining * receiveItemCostRemaining)
        };
      }
    };
    exports.ActorRdfJoinMultiBind = ActorRdfJoinMultiBind;
    ActorRdfJoinMultiBind.FACTORY = new sparqlalgebrajs_1.Factory();
  }
});

// node_modules/@comunica/actor-rdf-join-inner-multi-bind/lib/index.js
var require_lib104 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-multi-bind/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinMultiBind(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-optional-bind/lib/ActorRdfJoinOptionalBind.js
var require_ActorRdfJoinOptionalBind = __commonJS({
  "node_modules/@comunica/actor-rdf-join-optional-bind/lib/ActorRdfJoinOptionalBind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinOptionalBind = void 0;
    var actor_rdf_join_inner_multi_bind_1 = require_lib104();
    var bus_query_operation_1 = require_lib7();
    var bus_rdf_join_1 = require_lib59();
    var context_entries_1 = require_lib4();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorRdfJoinOptionalBind = class extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "optional",
          physicalName: "bind",
          limitEntries: 2,
          canHandleUndefs: true
        });
      }
      async getOutput(action) {
        action.entries[1].output.bindingsStream.close();
        const subContext = action.context.set(context_entries_1.KeysQueryOperation.joinLeftMetadata, await action.entries[0].output.metadata()).set(context_entries_1.KeysQueryOperation.joinRightMetadatas, [await action.entries[1].output.metadata()]);
        const bindingsStream = actor_rdf_join_inner_multi_bind_1.ActorRdfJoinMultiBind.createBindStream(this.bindOrder, action.entries[0].output.bindingsStream, [action.entries[1].operation], async (operations, operationBindings) => {
          const operation = operations[0];
          const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation, context: subContext?.set(context_entries_1.KeysQueryOperation.joinBindings, operationBindings) }));
          return output.bindingsStream;
        }, true);
        return {
          result: {
            type: "bindings",
            bindingsStream,
            metadata: async () => await this.constructResultMetadata(action.entries, await bus_rdf_join_1.ActorRdfJoin.getMetadatas(action.entries), action.context, { canContainUndefs: true })
          }
        };
      }
      async getJoinCoefficients(action, metadatas) {
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        if (action.entries[1].operation.type === sparqlalgebrajs_1.Algebra.types.EXTEND || action.entries[1].operation.type === sparqlalgebrajs_1.Algebra.types.GROUP) {
          throw new Error(`Actor ${this.name} can not bind on Extend and Group operations`);
        }
        const selectivity = (await this.mediatorJoinSelectivity.mediate({
          entries: action.entries,
          context: action.context
        })).selectivity * this.selectivityModifier;
        return {
          iterations: metadatas[0].cardinality.value * metadatas[1].cardinality.value * selectivity,
          persistedItems: 0,
          blockingItems: 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * selectivity * (requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1])
        };
      }
    };
    exports.ActorRdfJoinOptionalBind = ActorRdfJoinOptionalBind;
  }
});

// node_modules/@comunica/actor-rdf-join-optional-bind/lib/index.js
var require_lib105 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-optional-bind/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinOptionalBind(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-leftjoin/lib/ActorQueryOperationLeftJoin.js
var require_ActorQueryOperationLeftJoin = __commonJS({
  "node_modules/@comunica/actor-query-operation-leftjoin/lib/ActorQueryOperationLeftJoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationLeftJoin = void 0;
    var bus_query_operation_1 = require_lib7();
    var expression_evaluator_1 = require_lib76();
    var ActorQueryOperationLeftJoin = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "leftjoin");
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operationOriginal, context) {
        const entries = (await Promise.all(operationOriginal.input.map(async (subOperation) => ({
          output: await this.mediatorQueryOperation.mediate({ operation: subOperation, context }),
          operation: subOperation
        })))).map(({ output, operation }) => ({
          output: bus_query_operation_1.ActorQueryOperation.getSafeBindings(output),
          operation
        }));
        const joined = await this.mediatorJoin.mediate({ type: "optional", entries, context });
        if (operationOriginal.expression) {
          const rightMetadata = await entries[1].output.metadata();
          const expressionVariables = rightMetadata.variables;
          const config = { ...bus_query_operation_1.ActorQueryOperation.getAsyncExpressionContext(context, this.mediatorQueryOperation) };
          const evaluator = new expression_evaluator_1.AsyncEvaluator(operationOriginal.expression, config);
          const bindingsStream = joined.bindingsStream.transform({
            autoStart: false,
            transform: async (bindings, done, push) => {
              if (!expressionVariables.every((variable) => bindings.has(variable.value))) {
                push(bindings);
                return done();
              }
              try {
                const result = await evaluator.evaluateAsEBV(bindings);
                if (result) {
                  push(bindings);
                }
              } catch (error2) {
                if ((0, expression_evaluator_1.isExpressionError)(error2)) {
                  this.logWarn(context, "Error occurred while filtering.", () => ({ error: error2, bindings }));
                } else {
                  bindingsStream.emit("error", error2);
                }
              }
              done();
            }
          });
          joined.bindingsStream = bindingsStream;
        }
        return joined;
      }
    };
    exports.ActorQueryOperationLeftJoin = ActorQueryOperationLeftJoin;
  }
});

// node_modules/@comunica/actor-query-operation-leftjoin/lib/index.js
var require_lib106 = __commonJS({
  "node_modules/@comunica/actor-query-operation-leftjoin/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationLeftJoin(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-join/lib/ActorQueryOperationJoin.js
var require_ActorQueryOperationJoin = __commonJS({
  "node_modules/@comunica/actor-query-operation-join/lib/ActorQueryOperationJoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationJoin = void 0;
    var bus_query_operation_1 = require_lib7();
    var ActorQueryOperationJoin = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "join");
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operationOriginal, context) {
        const entries = (await Promise.all(operationOriginal.input.map(async (subOperation) => ({
          output: await this.mediatorQueryOperation.mediate({ operation: subOperation, context }),
          operation: subOperation
        })))).map(({ output, operation }) => ({
          output: bus_query_operation_1.ActorQueryOperation.getSafeBindings(output),
          operation
        }));
        return this.mediatorJoin.mediate({ type: "inner", entries, context });
      }
    };
    exports.ActorQueryOperationJoin = ActorQueryOperationJoin;
  }
});

// node_modules/@comunica/actor-query-operation-join/lib/index.js
var require_lib107 = __commonJS({
  "node_modules/@comunica/actor-query-operation-join/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationJoin(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-minus/lib/ActorQueryOperationMinus.js
var require_ActorQueryOperationMinus = __commonJS({
  "node_modules/@comunica/actor-query-operation-minus/lib/ActorQueryOperationMinus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationMinus = void 0;
    var bus_query_operation_1 = require_lib7();
    var ActorQueryOperationMinus = class extends bus_query_operation_1.ActorQueryOperationTypedMediated {
      constructor(args) {
        super(args, "minus");
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(operationOriginal, context) {
        const entries = (await Promise.all(operationOriginal.input.map(async (subOperation) => ({
          output: await this.mediatorQueryOperation.mediate({ operation: subOperation, context }),
          operation: subOperation
        })))).map(({ output, operation }) => ({
          output: bus_query_operation_1.ActorQueryOperation.getSafeBindings(output),
          operation
        }));
        return this.mediatorJoin.mediate({ type: "minus", entries, context });
      }
    };
    exports.ActorQueryOperationMinus = ActorQueryOperationMinus;
  }
});

// node_modules/@comunica/actor-query-operation-minus/lib/index.js
var require_lib108 = __commonJS({
  "node_modules/@comunica/actor-query-operation-minus/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationMinus(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-path-seq/lib/ActorQueryOperationPathSeq.js
var require_ActorQueryOperationPathSeq = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-seq/lib/ActorQueryOperationPathSeq.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationPathSeq = void 0;
    var actor_abstract_path_1 = require_lib87();
    var bus_query_operation_1 = require_lib7();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorQueryOperationPathSeq = class extends actor_abstract_path_1.ActorAbstractPath {
      constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.SEQ);
      }
      async runOperation(operationOriginal, context) {
        const predicate = operationOriginal.predicate;
        let joiner = operationOriginal.subject;
        const generatedVariableNames = [];
        const entries = await Promise.all(predicate.input.map((subPredicate, i2) => {
          const nextJoiner = i2 === predicate.input.length - 1 ? operationOriginal.object : this.generateVariable(operationOriginal, `b${i2}`);
          const operation = actor_abstract_path_1.ActorAbstractPath.FACTORY.createPath(joiner, subPredicate, nextJoiner, operationOriginal.graph);
          const output = this.mediatorQueryOperation.mediate({
            context,
            operation
          });
          joiner = nextJoiner;
          if (i2 < predicate.input.length - 1) {
            generatedVariableNames.push(nextJoiner);
          }
          return { output, operation };
        }).map(async ({ output, operation }) => ({
          output: bus_query_operation_1.ActorQueryOperation.getSafeBindings(await output),
          operation
        })));
        const join = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorJoin.mediate({ type: "inner", entries, context }));
        const bindingsStream = join.bindingsStream.transform({
          transform(item, next, push) {
            for (const generatedVariableName of generatedVariableNames) {
              item = item.delete(generatedVariableName);
            }
            push(item);
            next();
          }
        });
        return {
          type: "bindings",
          bindingsStream,
          async metadata() {
            const joinMetadata = await join.metadata();
            const variables = joinMetadata.variables.filter((variable) => !generatedVariableNames.some((generatedVariableName) => generatedVariableName.value === variable.value));
            return { ...joinMetadata, variables };
          }
        };
      }
    };
    exports.ActorQueryOperationPathSeq = ActorQueryOperationPathSeq;
  }
});

// node_modules/@comunica/actor-query-operation-path-seq/lib/index.js
var require_lib109 = __commonJS({
  "node_modules/@comunica/actor-query-operation-path-seq/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationPathSeq(), exports);
  }
});

// node_modules/@comunica/actor-rdf-join-inner-multi-smallest/lib/ActorRdfJoinMultiSmallest.js
var require_ActorRdfJoinMultiSmallest = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-multi-smallest/lib/ActorRdfJoinMultiSmallest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorRdfJoinMultiSmallest = void 0;
    var bus_query_operation_1 = require_lib7();
    var bus_rdf_join_1 = require_lib59();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var ActorRdfJoinMultiSmallest = class _ActorRdfJoinMultiSmallest extends bus_rdf_join_1.ActorRdfJoin {
      constructor(args) {
        super(args, {
          logicalType: "inner",
          physicalName: "multi-smallest",
          limitEntries: 3,
          limitEntriesMin: true,
          canHandleUndefs: true
        });
      }
      /**
       * Order the given join entries using the join-entries-sort bus.
       * @param {IJoinEntryWithMetadata[]} entries An array of join entries.
       * @param context The action context.
       * @return {IJoinEntryWithMetadata[]} The sorted join entries.
       */
      async sortJoinEntries(entries, context) {
        return (await this.mediatorJoinEntriesSort.mediate({ entries, context })).entries;
      }
      async getOutput(action) {
        const entries = await this.sortJoinEntries(await bus_rdf_join_1.ActorRdfJoin.getEntriesWithMetadatas([...action.entries]), action.context);
        const smallestEntry1 = entries[0];
        const smallestEntry2 = entries[1];
        entries.splice(0, 2);
        const firstEntry = {
          output: bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorJoin.mediate({ type: action.type, entries: [smallestEntry1, smallestEntry2], context: action.context })),
          operation: _ActorRdfJoinMultiSmallest.FACTORY.createJoin([smallestEntry1.operation, smallestEntry2.operation], false)
        };
        entries.push(firstEntry);
        return {
          result: await this.mediatorJoin.mediate({
            type: action.type,
            entries,
            context: action.context
          })
        };
      }
      async getJoinCoefficients(action, metadatas) {
        metadatas = [...metadatas];
        const entriesWithMetadata = await this.sortJoinEntries(action.entries.map((entry, i2) => ({ ...entry, metadata: metadatas[i2] })), action.context);
        metadatas = entriesWithMetadata.map((entry) => entry.metadata);
        const requestInitialTimes = bus_rdf_join_1.ActorRdfJoin.getRequestInitialTimes(metadatas);
        const requestItemTimes = bus_rdf_join_1.ActorRdfJoin.getRequestItemTimes(metadatas);
        return {
          iterations: metadatas[0].cardinality.value * metadatas[1].cardinality.value * metadatas.slice(2).reduce((acc, metadata) => acc * metadata.cardinality.value, 1),
          persistedItems: 0,
          blockingItems: 0,
          requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] + requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1] + metadatas.slice(2).reduce((sum, metadata, i2) => sum + requestInitialTimes.slice(2)[i2] + metadata.cardinality.value * requestItemTimes.slice(2)[i2], 0)
        };
      }
    };
    exports.ActorRdfJoinMultiSmallest = ActorRdfJoinMultiSmallest;
    ActorRdfJoinMultiSmallest.FACTORY = new sparqlalgebrajs_1.Factory();
  }
});

// node_modules/@comunica/actor-rdf-join-inner-multi-smallest/lib/index.js
var require_lib110 = __commonJS({
  "node_modules/@comunica/actor-rdf-join-inner-multi-smallest/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorRdfJoinMultiSmallest(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-quadpattern/lib/ActorQueryOperationQuadpattern.js
var require_ActorQueryOperationQuadpattern = __commonJS({
  "node_modules/@comunica/actor-query-operation-quadpattern/lib/ActorQueryOperationQuadpattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationQuadpattern = void 0;
    var bindings_factory_1 = require_lib6();
    var bus_query_operation_1 = require_lib7();
    var context_entries_1 = require_lib4();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var rdf_string_1 = require_rdf_string();
    var rdf_terms_1 = require_rdf_terms();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var BF = new bindings_factory_1.BindingsFactory();
    var DF = new rdf_data_factory_1.DataFactory();
    var AF = new sparqlalgebrajs_1.Factory();
    var ActorQueryOperationQuadpattern = class _ActorQueryOperationQuadpattern extends bus_query_operation_1.ActorQueryOperationTyped {
      constructor(args) {
        super(args, "pattern");
      }
      /**
       * Check if a term is a variable.
       * @param {RDF.Term} term An RDF term.
       * @return {any} If the term is a variable or blank node.
       */
      static isTermVariable(term) {
        return term.termType === "Variable";
      }
      /**
       * Get all variables in the given pattern.
       * No duplicates are returned.
       * @param {RDF.BaseQuad} pattern A quad pattern.
       */
      static getVariables(pattern) {
        return (0, rdf_terms_1.uniqTerms)((0, rdf_terms_1.getTermsNested)(pattern).filter(_ActorQueryOperationQuadpattern.isTermVariable));
      }
      /**
       * A helper function to find a hash with quad elements that have duplicate variables.
       *
       * @param {RDF.Quad} pattern A quad pattern.
       *
       * @return {{[p: string]: string[]}} If no equal variable names are present in the four terms, this returns undefined.
       *                                   Otherwise, this maps quad elements paths (['subject'], ['predicate'], ['object'],
       *                                   ['graph'])
       *                                   to the list of quad elements it shares a variable name with.
       *                                   For quoted triples, paths such as ['subject', 'object'] may occur.
       *                                   If no links for a certain element exist, this element will
       *                                   not be included in the hash.
       *                                   Note 1: Quad elements will never have a link to themselves.
       *                                           So this can never occur: { subject: [[ 'subject']] },
       *                                           instead 'null' would be returned.
       *                                   Note 2: Links only exist in one direction,
       *                                           this means that { subject: [[ 'predicate']], predicate: [[ 'subject' ]] }
       *                                           will not occur, instead only { subject: [[ 'predicate']] }
       *                                           will be returned.
       *                                   Note 3: Keys can also be paths, but they are delimited by '_', such as:
       *                                           { subject_object_subject: [[ 'predicate']] }
       */
      static getDuplicateElementLinks(pattern) {
        const variableElements = {};
        let duplicateVariables = false;
        (0, rdf_terms_1.forEachTermsNested)(pattern, (value, keys) => {
          if (value.termType === "Variable") {
            const val = (0, rdf_string_1.termToString)(value);
            const length = (variableElements[val] || (variableElements[val] = [])).push(keys);
            duplicateVariables = duplicateVariables || length > 1;
          }
        });
        if (!duplicateVariables) {
          return;
        }
        const duplicateElementLinks = {};
        for (const variable in variableElements) {
          const elements = variableElements[variable];
          const remainingElements = elements.slice(1);
          if (remainingElements.length > 0) {
            duplicateElementLinks[elements[0].join("_")] = remainingElements;
          }
        }
        return duplicateElementLinks;
      }
      /**
       * Ensure that the given raw metadata object contains all required metadata entries.
       * @param metadataRaw A raw metadata object.
       */
      static validateMetadata(metadataRaw) {
        for (const key of ["cardinality", "canContainUndefs"]) {
          if (!(key in metadataRaw)) {
            throw new Error(`Invalid metadata: missing ${key} in ${JSON.stringify(metadataRaw)}`);
          }
        }
        return metadataRaw;
      }
      /**
       * Get the metadata of the given action on a quad stream.
       *
       * @param {AsyncIterator<Quad>} data The data stream that is guaranteed to emit the metadata property.
       * @param elementVariables Mapping of quad term name to variable name.
       * @param variables Variables to include in the metadata
       * @return {() => Promise<{[p: string]: any}>} A lazy promise behind a callback resolving to a metadata object.
       */
      static getMetadata(data, elementVariables, variables) {
        return () => new Promise((resolve, reject) => {
          data.getProperty("metadata", (metadata) => resolve(metadata));
          data.on("error", reject);
        }).then((metadataRaw) => {
          if (!("canContainUndefs" in metadataRaw)) {
            metadataRaw.canContainUndefs = false;
          }
          return _ActorQueryOperationQuadpattern.quadsMetadataToBindingsMetadata(_ActorQueryOperationQuadpattern.validateMetadata(metadataRaw), elementVariables, variables);
        });
      }
      static quadsMetadataToBindingsMetadata(metadataQuads, elementVariables, variables) {
        return {
          ...metadataQuads,
          order: metadataQuads.order ? _ActorQueryOperationQuadpattern.quadsOrderToBindingsOrder(metadataQuads.order, elementVariables) : void 0,
          availableOrders: metadataQuads.availableOrders ? metadataQuads.availableOrders.map((orderDef) => ({
            cost: orderDef.cost,
            terms: _ActorQueryOperationQuadpattern.quadsOrderToBindingsOrder(orderDef.terms, elementVariables)
          })) : void 0,
          variables
        };
      }
      static quadsOrderToBindingsOrder(quadsOrder, elementVariables) {
        const mappedVariables = {};
        return quadsOrder.map((entry) => {
          const variableName = elementVariables[entry.term];
          if (!variableName) {
            return;
          }
          if (mappedVariables[variableName]) {
            return;
          }
          mappedVariables[variableName] = true;
          return {
            term: DF.variable(variableName),
            direction: entry.direction
          };
        }).filter((entry) => Boolean(entry));
      }
      async testOperation(operation, context) {
        return true;
      }
      async runOperation(pattern, context) {
        if (pattern.context) {
          context = context.merge(pattern.context);
        }
        let patternInner = pattern;
        const unionDefaultGraph = this.unionDefaultGraph || context.get(context_entries_1.KeysQueryOperation.unionDefaultGraph);
        if (pattern.graph.termType === "DefaultGraph" && unionDefaultGraph) {
          patternInner = AF.createPattern(pattern.subject, pattern.predicate, pattern.object, DF.variable("__comunica:defaultGraph"));
        }
        const result = await this.mediatorResolveQuadPattern.mediate({ pattern: patternInner, context });
        const variables = _ActorQueryOperationQuadpattern.getVariables(pattern);
        const elementVariables = (0, rdf_terms_1.reduceTermsNested)(pattern, (acc, term, keys) => {
          if (term.termType === "Variable") {
            acc[keys.join("_")] = term.value;
          }
          return acc;
        }, {});
        const metadata = _ActorQueryOperationQuadpattern.getMetadata(result.data, elementVariables, variables);
        const bindingsStream = new bus_query_operation_1.ClosableTransformIterator(async () => {
          let filteredOutput = result.data;
          const duplicateElementLinks = _ActorQueryOperationQuadpattern.getDuplicateElementLinks(pattern);
          if (pattern.graph.termType === "Variable" && !unionDefaultGraph) {
            filteredOutput = filteredOutput.filter((quad) => quad.graph.termType !== "DefaultGraph");
          }
          if (duplicateElementLinks) {
            filteredOutput = filteredOutput.filter((quad) => {
              for (const keyLeft in duplicateElementLinks) {
                const keysLeft = keyLeft.split("_");
                const valueLeft = (0, rdf_terms_1.getValueNestedPath)(quad, keysLeft);
                for (const keysRight of duplicateElementLinks[keyLeft]) {
                  if (!valueLeft.equals((0, rdf_terms_1.getValueNestedPath)(quad, keysRight))) {
                    return false;
                  }
                }
              }
              return true;
            });
          }
          return filteredOutput.map((quad) => BF.bindings(Object.keys(elementVariables).map((key) => {
            const keys = key.split("_");
            const variable = elementVariables[key];
            const term = (0, rdf_terms_1.getValueNestedPath)(quad, keys);
            return [DF.variable(variable), term];
          })));
        }, {
          autoStart: false,
          onClose: () => result.data.destroy()
        });
        return { type: "bindings", bindingsStream, metadata };
      }
    };
    exports.ActorQueryOperationQuadpattern = ActorQueryOperationQuadpattern;
  }
});

// node_modules/@comunica/actor-query-operation-quadpattern/lib/index.js
var require_lib111 = __commonJS({
  "node_modules/@comunica/actor-query-operation-quadpattern/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationQuadpattern(), exports);
  }
});

// node_modules/@comunica/actor-query-result-serialize-sparql-json/lib/ActionObserverHttp.js
var require_ActionObserverHttp = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-sparql-json/lib/ActionObserverHttp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionObserverHttp = void 0;
    var core_1 = require_lib2();
    var ActionObserverHttp = class extends core_1.ActionObserver {
      /* eslint-disable max-len */
      /**
       * @param args - @defaultNested {<npmd:@comunica/bus-http/^2.0.0/components/ActorHttp.jsonld#ActorHttp_default_bus>} bus
       */
      constructor(args) {
        super(args);
        this.requests = 0;
        this.bus.subscribeObserver(this);
        this.httpInvalidator.addInvalidateListener(() => {
          this.requests = 0;
        });
      }
      /* eslint-enable max-len */
      onRun(actor, action, output) {
        this.requests++;
      }
    };
    exports.ActionObserverHttp = ActionObserverHttp;
  }
});

// node_modules/@comunica/actor-query-result-serialize-sparql-json/lib/ActorQueryResultSerializeSparqlJson.js
var require_ActorQueryResultSerializeSparqlJson = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-sparql-json/lib/ActorQueryResultSerializeSparqlJson.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeSparqlJson = void 0;
    var bus_query_result_serialize_1 = require_lib23();
    var readable_stream_1 = require_browser3();
    var ActorQueryResultSerializeSparqlJson = class _ActorQueryResultSerializeSparqlJson extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {{
       *       "application/sparql-results+json": 0.8
       *     }} mediaTypePriorities
       *   \ @defaultNested {{
       *       "application/sparql-results+json": "http://www.w3.org/ns/formats/SPARQL_Results_JSON"
       *     }} mediaTypeFormats
       *   \ @defaultNested {true} emitMetadata
       *   \ @defaultNested {<default_observer> a <caqrssj:components/ActionObserverHttp.jsonld#ActionObserverHttp>} httpObserver
       */
      constructor(args) {
        super(args);
      }
      /* eslint-enable max-len */
      /**
       * Converts an RDF term to its JSON representation.
       * @param {RDF.Term} value An RDF term.
       * @return {any} A JSON object.
       */
      static bindingToJsonBindings(value) {
        if (value.termType === "Literal") {
          const literal = value;
          const jsonValue = { value: literal.value, type: "literal" };
          const { language } = literal;
          const { datatype } = literal;
          if (language) {
            jsonValue["xml:lang"] = language;
          } else if (datatype && datatype.value !== "http://www.w3.org/2001/XMLSchema#string") {
            jsonValue.datatype = datatype.value;
          }
          return jsonValue;
        }
        if (value.termType === "BlankNode") {
          return { value: value.value, type: "bnode" };
        }
        if (value.termType === "Quad") {
          return {
            value: {
              subject: _ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value.subject),
              predicate: _ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value.predicate),
              object: _ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value.object)
            },
            type: "triple"
          };
        }
        return { value: value.value, type: "uri" };
      }
      async testHandleChecked(action, context) {
        if (!["bindings", "boolean"].includes(action.type)) {
          throw new Error("This actor can only handle bindings streams or booleans.");
        }
        return true;
      }
      async runHandle(action, mediaType, context) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        const head = {};
        if (action.type === "bindings") {
          const metadata = await action.metadata();
          if (metadata.variables.length > 0) {
            head.vars = metadata.variables.map((variable) => variable.value);
          }
        }
        data.push(`{"head": ${JSON.stringify(head)},
`);
        let empty = true;
        if (action.type === "bindings") {
          const resultStream = action.bindingsStream;
          resultStream.on("error", (error2) => {
            data.emit("error", error2);
          });
          resultStream.on("data", (bindings) => {
            if (empty) {
              data.push('"results": { "bindings": [\n');
            } else {
              data.push(",\n");
            }
            const bindingsJson = Object.fromEntries([...bindings].map(([key, value]) => [key.value, _ActorQueryResultSerializeSparqlJson.bindingToJsonBindings(value)]));
            data.push(JSON.stringify(bindingsJson));
            empty = false;
          });
          resultStream.on("end", () => {
            if (empty) {
              data.push('"results": { "bindings": [\n');
            }
            data.push("\n]}");
            if (this.emitMetadata) {
              data.push(`,
"metadata": { "httpRequests": ${this.httpObserver.requests} }`);
            }
            data.push("}\n");
            data.push(null);
          });
        } else {
          try {
            data.push(`"boolean":${await action.execute()}
}
`);
            data.push(null);
          } catch (error2) {
            data.once("newListener", () => data.emit("error", error2));
          }
        }
        return { data };
      }
    };
    exports.ActorQueryResultSerializeSparqlJson = ActorQueryResultSerializeSparqlJson;
  }
});

// node_modules/@comunica/actor-query-result-serialize-sparql-json/lib/index.js
var require_lib112 = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-sparql-json/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActionObserverHttp(), exports);
    __exportStar(require_ActorQueryResultSerializeSparqlJson(), exports);
  }
});

// node_modules/@comunica/actor-query-result-serialize-stats/lib/ActionObserverHttp.js
var require_ActionObserverHttp2 = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-stats/lib/ActionObserverHttp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionObserverHttp = void 0;
    var core_1 = require_lib2();
    var ActionObserverHttp = class extends core_1.ActionObserver {
      /* eslint-disable max-len */
      /**
       * @param args - @defaultNested {<npmd:@comunica/bus-http/^2.0.0/components/ActorHttp.jsonld#ActorHttp_default_bus>} bus
       */
      constructor(args) {
        super(args);
        this.requests = 0;
        this.bus.subscribeObserver(this);
        this.httpInvalidator.addInvalidateListener(() => {
          this.requests = 0;
        });
      }
      /* eslint-enable max-len */
      onRun(actor, action, output) {
        this.requests++;
      }
    };
    exports.ActionObserverHttp = ActionObserverHttp;
  }
});

// node_modules/@comunica/actor-query-result-serialize-stats/lib/ActorQueryResultSerializeStats.js
var require_ActorQueryResultSerializeStats = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-stats/lib/ActorQueryResultSerializeStats.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryResultSerializeStats = void 0;
    var bus_query_result_serialize_1 = require_lib23();
    var readable_stream_1 = require_browser3();
    var process2 = require_browser();
    var ActorQueryResultSerializeStats = class extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
      /* eslint-disable max-len */
      /**
       * @param args -
       *   \ @defaultNested {{ "stats": 0.5 }} mediaTypePriorities
       *   \ @defaultNested {{ "stats": "https://comunica.linkeddatafragments.org/#results_stats" }} mediaTypeFormats
       *   \ @defaultNested {<default_observer> a <caqrsst:components/ActionObserverHttp.jsonld#ActionObserverHttp>} httpObserver
       */
      constructor(args) {
        super(args);
      }
      /* eslint-enable max-len */
      async testHandleChecked(action, context) {
        if (!["bindings", "quads"].includes(action.type)) {
          throw new Error("This actor can only handle bindings streams or quad streams.");
        }
        return true;
      }
      pushHeader(data) {
        const header = [
          "Result",
          "Delay (ms)",
          "HTTP requests"
        ].join(",");
        data.push(`${header}
`);
      }
      pushStat(data, startTime, result) {
        const row = [
          result,
          this.delay(startTime),
          this.httpObserver.requests
        ].join(",");
        data.push(`${row}
`);
      }
      pushFooter(data, startTime) {
        const footer = [
          "TOTAL",
          this.delay(startTime),
          this.httpObserver.requests
        ].join(",");
        data.push(`${footer}
`);
        data.push(null);
      }
      async runHandle(action, mediaType, context) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
        };
        const resultStream = action.type === "bindings" ? action.bindingsStream : action.quadStream;
        const startTime = this.now();
        let result = 1;
        this.pushHeader(data);
        resultStream.on("error", (error2) => data.emit("error", error2));
        resultStream.on("data", () => this.pushStat(data, startTime, result++));
        resultStream.on("end", () => this.pushFooter(data, startTime));
        return { data };
      }
      /* istanbul ignore next */
      now() {
        if (typeof performance === "undefined") {
          const time = process2.hrtime();
          return time[0] * 1e3 + time[1] / 1e6;
        }
        return performance.now();
      }
      delay(startTime) {
        return this.now() - startTime;
      }
    };
    exports.ActorQueryResultSerializeStats = ActorQueryResultSerializeStats;
  }
});

// node_modules/@comunica/actor-query-result-serialize-stats/lib/index.js
var require_lib113 = __commonJS({
  "node_modules/@comunica/actor-query-result-serialize-stats/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActionObserverHttp2(), exports);
    __exportStar(require_ActorQueryResultSerializeStats(), exports);
  }
});

// node_modules/xmlchars/xml/1.0/ed5.js
var require_ed5 = __commonJS({
  "node_modules/xmlchars/xml/1.0/ed5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CHAR = "	\n\r -\uD7FF\uE000-\uFFFD\u{10000}-\u{10FFFF}";
    exports.S = " 	\r\n";
    exports.NAME_START_CHAR = ":A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}";
    exports.NAME_CHAR = "-" + exports.NAME_START_CHAR + ".0-9\xB7\u0300-\u036F\u203F-\u2040";
    exports.CHAR_RE = new RegExp("^[" + exports.CHAR + "]$", "u");
    exports.S_RE = new RegExp("^[" + exports.S + "]+$", "u");
    exports.NAME_START_CHAR_RE = new RegExp("^[" + exports.NAME_START_CHAR + "]$", "u");
    exports.NAME_CHAR_RE = new RegExp("^[" + exports.NAME_CHAR + "]$", "u");
    exports.NAME_RE = new RegExp("^[" + exports.NAME_START_CHAR + "][" + exports.NAME_CHAR + "]*$", "u");
    exports.NMTOKEN_RE = new RegExp("^[" + exports.NAME_CHAR + "]+$", "u");
    var TAB = 9;
    var NL = 10;
    var CR = 13;
    var SPACE = 32;
    exports.S_LIST = [SPACE, NL, CR, TAB];
    function isChar(c) {
      return c >= SPACE && c <= 55295 || c === NL || c === CR || c === TAB || c >= 57344 && c <= 65533 || c >= 65536 && c <= 1114111;
    }
    exports.isChar = isChar;
    function isS(c) {
      return c === SPACE || c === NL || c === CR || c === TAB;
    }
    exports.isS = isS;
    function isNameStartChar(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122 || c === 58 || c === 95 || c === 8204 || c === 8205 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 767 || c >= 880 && c <= 893 || c >= 895 && c <= 8191 || c >= 8304 && c <= 8591 || c >= 11264 && c <= 12271 || c >= 12289 && c <= 55295 || c >= 63744 && c <= 64975 || c >= 65008 && c <= 65533 || c >= 65536 && c <= 983039;
    }
    exports.isNameStartChar = isNameStartChar;
    function isNameChar(c) {
      return isNameStartChar(c) || c >= 48 && c <= 57 || c === 45 || c === 46 || c === 183 || c >= 768 && c <= 879 || c >= 8255 && c <= 8256;
    }
    exports.isNameChar = isNameChar;
  }
});

// node_modules/xmlchars/xml/1.1/ed2.js
var require_ed2 = __commonJS({
  "node_modules/xmlchars/xml/1.1/ed2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CHAR = "-\uD7FF\uE000-\uFFFD\u{10000}-\u{10FFFF}";
    exports.RESTRICTED_CHAR = "-\b\v\f-\x7F-\x84\x86-\x9F";
    exports.S = " 	\r\n";
    exports.NAME_START_CHAR = ":A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}";
    exports.NAME_CHAR = "-" + exports.NAME_START_CHAR + ".0-9\xB7\u0300-\u036F\u203F-\u2040";
    exports.CHAR_RE = new RegExp("^[" + exports.CHAR + "]$", "u");
    exports.RESTRICTED_CHAR_RE = new RegExp("^[" + exports.RESTRICTED_CHAR + "]$", "u");
    exports.S_RE = new RegExp("^[" + exports.S + "]+$", "u");
    exports.NAME_START_CHAR_RE = new RegExp("^[" + exports.NAME_START_CHAR + "]$", "u");
    exports.NAME_CHAR_RE = new RegExp("^[" + exports.NAME_CHAR + "]$", "u");
    exports.NAME_RE = new RegExp("^[" + exports.NAME_START_CHAR + "][" + exports.NAME_CHAR + "]*$", "u");
    exports.NMTOKEN_RE = new RegExp("^[" + exports.NAME_CHAR + "]+$", "u");
    var TAB = 9;
    var NL = 10;
    var CR = 13;
    var SPACE = 32;
    exports.S_LIST = [SPACE, NL, CR, TAB];
    function isChar(c) {
      return c >= 1 && c <= 55295 || c >= 57344 && c <= 65533 || c >= 65536 && c <= 1114111;
    }
    exports.isChar = isChar;
    function isRestrictedChar(c) {
      return c >= 1 && c <= 8 || c === 11 || c === 12 || c >= 14 && c <= 31 || c >= 127 && c <= 132 || c >= 134 && c <= 159;
    }
    exports.isRestrictedChar = isRestrictedChar;
    function isCharAndNotRestricted(c) {
      return c === 9 || c === 10 || c === 13 || c > 31 && c < 127 || c === 133 || c > 159 && c <= 55295 || c >= 57344 && c <= 65533 || c >= 65536 && c <= 1114111;
    }
    exports.isCharAndNotRestricted = isCharAndNotRestricted;
    function isS(c) {
      return c === SPACE || c === NL || c === CR || c === TAB;
    }
    exports.isS = isS;
    function isNameStartChar(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122 || c === 58 || c === 95 || c === 8204 || c === 8205 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 767 || c >= 880 && c <= 893 || c >= 895 && c <= 8191 || c >= 8304 && c <= 8591 || c >= 11264 && c <= 12271 || c >= 12289 && c <= 55295 || c >= 63744 && c <= 64975 || c >= 65008 && c <= 65533 || c >= 65536 && c <= 983039;
    }
    exports.isNameStartChar = isNameStartChar;
    function isNameChar(c) {
      return isNameStartChar(c) || c >= 48 && c <= 57 || c === 45 || c === 46 || c === 183 || c >= 768 && c <= 879 || c >= 8255 && c <= 8256;
    }
    exports.isNameChar = isNameChar;
  }
});

// node_modules/xmlchars/xmlns/1.0/ed3.js
var require_ed3 = __commonJS({
  "node_modules/xmlchars/xmlns/1.0/ed3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NC_NAME_START_CHAR = "A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}";
    exports.NC_NAME_CHAR = "-" + exports.NC_NAME_START_CHAR + ".0-9\xB7\u0300-\u036F\u203F-\u2040";
    exports.NC_NAME_START_CHAR_RE = new RegExp("^[" + exports.NC_NAME_START_CHAR + "]$", "u");
    exports.NC_NAME_CHAR_RE = new RegExp("^[" + exports.NC_NAME_CHAR + "]$", "u");
    exports.NC_NAME_RE = new RegExp("^[" + exports.NC_NAME_START_CHAR + "][" + exports.NC_NAME_CHAR + "]*$", "u");
    function isNCNameStartChar(c) {
      return c >= 65 && c <= 90 || c === 95 || c >= 97 && c <= 122 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 767 || c >= 880 && c <= 893 || c >= 895 && c <= 8191 || c >= 8204 && c <= 8205 || c >= 8304 && c <= 8591 || c >= 11264 && c <= 12271 || c >= 12289 && c <= 55295 || c >= 63744 && c <= 64975 || c >= 65008 && c <= 65533 || c >= 65536 && c <= 983039;
    }
    exports.isNCNameStartChar = isNCNameStartChar;
    function isNCNameChar(c) {
      return isNCNameStartChar(c) || (c === 45 || c === 46 || c >= 48 && c <= 57 || c === 183 || c >= 768 && c <= 879 || c >= 8255 && c <= 8256);
    }
    exports.isNCNameChar = isNCNameChar;
  }
});

// node_modules/@rubensworks/saxes/saxes.js
var require_saxes = __commonJS({
  "node_modules/@rubensworks/saxes/saxes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SaxesParser = exports.EVENTS = void 0;
    var ed5 = require_ed5();
    var ed2 = require_ed2();
    var NSed3 = require_ed3();
    var isS = ed5.isS;
    var isChar10 = ed5.isChar;
    var isNameStartChar = ed5.isNameStartChar;
    var isNameChar = ed5.isNameChar;
    var S_LIST = ed5.S_LIST;
    var NAME_RE = ed5.NAME_RE;
    var isChar11 = ed2.isChar;
    var isNCNameStartChar = NSed3.isNCNameStartChar;
    var isNCNameChar = NSed3.isNCNameChar;
    var NC_NAME_RE = NSed3.NC_NAME_RE;
    var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
    var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
    var rootNS = {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment
      __proto__: null,
      xml: XML_NAMESPACE,
      xmlns: XMLNS_NAMESPACE
    };
    var XML_ENTITIES = {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment
      __proto__: null,
      amp: "&",
      gt: ">",
      lt: "<",
      quot: '"',
      apos: "'"
    };
    var EOC = -1;
    var NL_LIKE = -2;
    var S_BEGIN = 0;
    var S_BEGIN_WHITESPACE = 1;
    var S_DOCTYPE = 2;
    var S_DOCTYPE_QUOTE = 3;
    var S_DTD = 4;
    var S_DTD_QUOTED = 5;
    var S_DTD_OPEN_WAKA = 6;
    var S_DTD_OPEN_WAKA_BANG = 7;
    var S_DTD_COMMENT = 8;
    var S_DTD_COMMENT_ENDING = 9;
    var S_DTD_COMMENT_ENDED = 10;
    var S_DTD_PI = 11;
    var S_DTD_PI_ENDING = 12;
    var S_TEXT = 13;
    var S_ENTITY = 14;
    var S_OPEN_WAKA = 15;
    var S_OPEN_WAKA_BANG = 16;
    var S_COMMENT = 17;
    var S_COMMENT_ENDING = 18;
    var S_COMMENT_ENDED = 19;
    var S_CDATA = 20;
    var S_CDATA_ENDING = 21;
    var S_CDATA_ENDING_2 = 22;
    var S_PI_FIRST_CHAR = 23;
    var S_PI_REST = 24;
    var S_PI_BODY = 25;
    var S_PI_ENDING = 26;
    var S_XML_DECL_NAME_START = 27;
    var S_XML_DECL_NAME = 28;
    var S_XML_DECL_EQ = 29;
    var S_XML_DECL_VALUE_START = 30;
    var S_XML_DECL_VALUE = 31;
    var S_XML_DECL_SEPARATOR = 32;
    var S_XML_DECL_ENDING = 33;
    var S_OPEN_TAG = 34;
    var S_OPEN_TAG_SLASH = 35;
    var S_ATTRIB = 36;
    var S_ATTRIB_NAME = 37;
    var S_ATTRIB_NAME_SAW_WHITE = 38;
    var S_ATTRIB_VALUE = 39;
    var S_ATTRIB_VALUE_QUOTED = 40;
    var S_ATTRIB_VALUE_CLOSED = 41;
    var S_ATTRIB_VALUE_UNQUOTED = 42;
    var S_CLOSE_TAG = 43;
    var S_CLOSE_TAG_SAW_WHITE = 44;
    var TAB = 9;
    var NL = 10;
    var CR = 13;
    var SPACE = 32;
    var BANG = 33;
    var DQUOTE = 34;
    var AMP = 38;
    var SQUOTE = 39;
    var MINUS = 45;
    var FORWARD_SLASH = 47;
    var SEMICOLON = 59;
    var LESS = 60;
    var EQUAL = 61;
    var GREATER = 62;
    var QUESTION = 63;
    var OPEN_BRACKET = 91;
    var CLOSE_BRACKET = 93;
    var NEL = 133;
    var LS = 8232;
    var isQuote = (c) => c === DQUOTE || c === SQUOTE;
    var QUOTES = [DQUOTE, SQUOTE];
    var DOCTYPE_TERMINATOR = [...QUOTES, OPEN_BRACKET, GREATER];
    var DTD_TERMINATOR = [...QUOTES, LESS, CLOSE_BRACKET];
    var XML_DECL_NAME_TERMINATOR = [EQUAL, QUESTION, ...S_LIST];
    var ATTRIB_VALUE_UNQUOTED_TERMINATOR = [...S_LIST, GREATER, AMP, LESS];
    function nsPairCheck(parser, prefix, uri) {
      switch (prefix) {
        case "xml":
          if (uri !== XML_NAMESPACE) {
            parser.fail(`xml prefix must be bound to ${XML_NAMESPACE}.`);
          }
          break;
        case "xmlns":
          if (uri !== XMLNS_NAMESPACE) {
            parser.fail(`xmlns prefix must be bound to ${XMLNS_NAMESPACE}.`);
          }
          break;
        default:
      }
      switch (uri) {
        case XMLNS_NAMESPACE:
          parser.fail(prefix === "" ? `the default namespace may not be set to ${uri}.` : `may not assign a prefix (even "xmlns") to the URI ${XMLNS_NAMESPACE}.`);
          break;
        case XML_NAMESPACE:
          switch (prefix) {
            case "xml":
              break;
            case "":
              parser.fail(`the default namespace may not be set to ${uri}.`);
              break;
            default:
              parser.fail("may not assign the xml namespace to another prefix.");
          }
          break;
        default:
      }
    }
    function nsMappingCheck(parser, mapping) {
      for (const local of Object.keys(mapping)) {
        nsPairCheck(parser, local, mapping[local]);
      }
    }
    var isNCName = (name) => NC_NAME_RE.test(name);
    var isName = (name) => NAME_RE.test(name);
    var FORBIDDEN_START = 0;
    var FORBIDDEN_BRACKET = 1;
    var FORBIDDEN_BRACKET_BRACKET = 2;
    exports.EVENTS = [
      "xmldecl",
      "text",
      "processinginstruction",
      "doctype",
      "comment",
      "opentagstart",
      "attribute",
      "opentag",
      "closetag",
      "cdata",
      "error",
      "end",
      "ready"
    ];
    var EVENT_NAME_TO_HANDLER_NAME = {
      xmldecl: "xmldeclHandler",
      text: "textHandler",
      processinginstruction: "piHandler",
      doctype: "doctypeHandler",
      comment: "commentHandler",
      opentagstart: "openTagStartHandler",
      attribute: "attributeHandler",
      opentag: "openTagHandler",
      closetag: "closeTagHandler",
      cdata: "cdataHandler",
      error: "errorHandler",
      end: "endHandler",
      ready: "readyHandler"
    };
    var SaxesParser = class {
      /**
       * Indicates whether or not the parser is closed. If ``true``, wait for
       * the ``ready`` event to write again.
       */
      get closed() {
        return this._closed;
      }
      /**
       * @param opt The parser options.
       */
      constructor(opt) {
        this.opt = opt !== null && opt !== void 0 ? opt : {};
        this.fragmentOpt = !!this.opt.fragment;
        const xmlnsOpt = this.xmlnsOpt = !!this.opt.xmlns;
        this.trackPosition = this.opt.position !== false;
        this.fileName = this.opt.fileName;
        if (xmlnsOpt) {
          this.nameStartCheck = isNCNameStartChar;
          this.nameCheck = isNCNameChar;
          this.isName = isNCName;
          this.processAttribs = this.processAttribsNS;
          this.pushAttrib = this.pushAttribNS;
          this.ns = Object.assign({ __proto__: null }, rootNS);
          const additional = this.opt.additionalNamespaces;
          if (additional != null) {
            nsMappingCheck(this, additional);
            Object.assign(this.ns, additional);
          }
        } else {
          this.nameStartCheck = isNameStartChar;
          this.nameCheck = isNameChar;
          this.isName = isName;
          this.processAttribs = this.processAttribsPlain;
          this.pushAttrib = this.pushAttribPlain;
        }
        this.stateTable = [
          /* eslint-disable @typescript-eslint/unbound-method */
          this.sBegin,
          this.sBeginWhitespace,
          this.sDoctype,
          this.sDoctypeQuote,
          this.sDTD,
          this.sDTDQuoted,
          this.sDTDOpenWaka,
          this.sDTDOpenWakaBang,
          this.sDTDComment,
          this.sDTDCommentEnding,
          this.sDTDCommentEnded,
          this.sDTDPI,
          this.sDTDPIEnding,
          this.sText,
          this.sEntity,
          this.sOpenWaka,
          this.sOpenWakaBang,
          this.sComment,
          this.sCommentEnding,
          this.sCommentEnded,
          this.sCData,
          this.sCDataEnding,
          this.sCDataEnding2,
          this.sPIFirstChar,
          this.sPIRest,
          this.sPIBody,
          this.sPIEnding,
          this.sXMLDeclNameStart,
          this.sXMLDeclName,
          this.sXMLDeclEq,
          this.sXMLDeclValueStart,
          this.sXMLDeclValue,
          this.sXMLDeclSeparator,
          this.sXMLDeclEnding,
          this.sOpenTag,
          this.sOpenTagSlash,
          this.sAttrib,
          this.sAttribName,
          this.sAttribNameSawWhite,
          this.sAttribValue,
          this.sAttribValueQuoted,
          this.sAttribValueClosed,
          this.sAttribValueUnquoted,
          this.sCloseTag,
          this.sCloseTagSawWhite
          /* eslint-enable @typescript-eslint/unbound-method */
        ];
        this._init();
      }
      _init() {
        var _a;
        this.openWakaBang = "";
        this.text = "";
        this.name = "";
        this.piTarget = "";
        this.entity = "";
        this.q = null;
        this.tags = [];
        this.tag = null;
        this.topNS = null;
        this.chunk = "";
        this.chunkPosition = 0;
        this.i = 0;
        this.prevI = 0;
        this.carriedFromPrevious = void 0;
        this.forbiddenState = FORBIDDEN_START;
        this.attribList = [];
        const { fragmentOpt } = this;
        this.state = fragmentOpt ? S_TEXT : S_BEGIN;
        this.reportedTextBeforeRoot = this.reportedTextAfterRoot = this.closedRoot = this.sawRoot = fragmentOpt;
        this.xmlDeclPossible = !fragmentOpt;
        this.xmlDeclExpects = ["version"];
        this.entityReturnState = void 0;
        let { defaultXMLVersion } = this.opt;
        if (defaultXMLVersion === void 0) {
          if (this.opt.forceXMLVersion === true) {
            throw new Error("forceXMLVersion set but defaultXMLVersion is not set");
          }
          defaultXMLVersion = "1.0";
        }
        this.setXMLVersion(defaultXMLVersion);
        this.positionAtNewLine = 0;
        this.doctype = false;
        this._closed = false;
        this.xmlDecl = {
          version: void 0,
          encoding: void 0,
          standalone: void 0
        };
        this.line = 1;
        this.column = 0;
        this.ENTITIES = Object.create(XML_ENTITIES);
        (_a = this.readyHandler) === null || _a === void 0 ? void 0 : _a.call(this);
      }
      /**
       * The stream position the parser is currently looking at. This field is
       * zero-based.
       *
       * This field is not based on counting Unicode characters but is to be
       * interpreted as a plain index into a JavaScript string.
       */
      get position() {
        return this.chunkPosition + this.i;
      }
      /**
       * The column number of the next character to be read by the parser.  *
       * This field is zero-based. (The first column in a line is 0.)
       *
       * This field reports the index at which the next character would be in the
       * line if the line were represented as a JavaScript string.  Note that this
       * *can* be different to a count based on the number of *Unicode characters*
       * due to how JavaScript handles astral plane characters.
       *
       * See [[column]] for a number that corresponds to a count of Unicode
       * characters.
       */
      get columnIndex() {
        return this.position - this.positionAtNewLine;
      }
      /**
       * Set an event listener on an event. The parser supports one handler per
       * event type. If you try to set an event handler over an existing handler,
       * the old handler is silently overwritten.
       *
       * @param name The event to listen to.
       *
       * @param handler The handler to set.
       */
      on(name, handler) {
        this[EVENT_NAME_TO_HANDLER_NAME[name]] = handler;
      }
      /**
       * Unset an event handler.
       *
       * @parma name The event to stop listening to.
       */
      off(name) {
        this[EVENT_NAME_TO_HANDLER_NAME[name]] = void 0;
      }
      /**
       * Make an error object. The error object will have a message that contains
       * the ``fileName`` option passed at the creation of the parser. If position
       * tracking was turned on, it will also have line and column number
       * information.
       *
       * @param message The message describing the error to report.
       *
       * @returns An error object with a properly formatted message.
       */
      makeError(message) {
        var _a;
        let msg = (_a = this.fileName) !== null && _a !== void 0 ? _a : "";
        if (this.trackPosition) {
          if (msg.length > 0) {
            msg += ":";
          }
          msg += `${this.line}:${this.column}`;
        }
        if (msg.length > 0) {
          msg += ": ";
        }
        return new Error(msg + message);
      }
      /**
       * Report a parsing error. This method is made public so that client code may
       * check for issues that are outside the scope of this project and can report
       * errors.
       *
       * @param message The error to report.
       *
       * @returns this
       */
      fail(message) {
        const err = this.makeError(message);
        const handler = this.errorHandler;
        if (handler === void 0) {
          throw err;
        } else {
          handler(err);
        }
        return this;
      }
      /**
       * Write a XML data to the parser.
       *
       * @param chunk The XML data to write.
       *
       * @returns this
       */
      // We do need object for the type here. Yes, it often causes problems
      // but not in this case.
      write(chunk) {
        if (this.closed) {
          return this.fail("cannot write after close; assign an onready handler.");
        }
        let end = false;
        if (chunk === null) {
          end = true;
          chunk = "";
        } else if (typeof chunk === "object") {
          chunk = chunk.toString();
        }
        if (this.carriedFromPrevious !== void 0) {
          chunk = `${this.carriedFromPrevious}${chunk}`;
          this.carriedFromPrevious = void 0;
        }
        let limit = chunk.length;
        const lastCode = chunk.charCodeAt(limit - 1);
        if (!end && // A trailing CR or surrogate must be carried over to the next
        // chunk.
        (lastCode === CR || lastCode >= 55296 && lastCode <= 56319)) {
          this.carriedFromPrevious = chunk[limit - 1];
          limit--;
          chunk = chunk.slice(0, limit);
        }
        const { stateTable } = this;
        this.chunk = chunk;
        this.i = 0;
        while (this.i < limit) {
          stateTable[this.state].call(this);
        }
        this.chunkPosition += limit;
        return end ? this.end() : this;
      }
      /**
       * Close the current stream. Perform final well-formedness checks and reset
       * the parser tstate.
       *
       * @returns this
       */
      close() {
        return this.write(null);
      }
      /**
       * Get a single code point out of the current chunk. This updates the current
       * position if we do position tracking.
       *
       * This is the algorithm to use for XML 1.0.
       *
       * @returns The character read.
       */
      getCode10() {
        const { chunk, i: i2 } = this;
        this.prevI = i2;
        this.i = i2 + 1;
        if (i2 >= chunk.length) {
          return EOC;
        }
        const code = chunk.charCodeAt(i2);
        this.column++;
        if (code < 55296) {
          if (code >= SPACE || code === TAB) {
            return code;
          }
          switch (code) {
            case NL:
              this.line++;
              this.column = 0;
              this.positionAtNewLine = this.position;
              return NL;
            case CR:
              if (chunk.charCodeAt(i2 + 1) === NL) {
                this.i = i2 + 2;
              }
              this.line++;
              this.column = 0;
              this.positionAtNewLine = this.position;
              return NL_LIKE;
            default:
              this.fail("disallowed character.");
              return code;
          }
        }
        if (code > 56319) {
          if (!(code >= 57344 && code <= 65533)) {
            this.fail("disallowed character.");
          }
          return code;
        }
        const final = 65536 + (code - 55296) * 1024 + (chunk.charCodeAt(i2 + 1) - 56320);
        this.i = i2 + 2;
        if (final > 1114111) {
          this.fail("disallowed character.");
        }
        return final;
      }
      /**
       * Get a single code point out of the current chunk. This updates the current
       * position if we do position tracking.
       *
       * This is the algorithm to use for XML 1.1.
       *
       * @returns {number} The character read.
       */
      getCode11() {
        const { chunk, i: i2 } = this;
        this.prevI = i2;
        this.i = i2 + 1;
        if (i2 >= chunk.length) {
          return EOC;
        }
        const code = chunk.charCodeAt(i2);
        this.column++;
        if (code < 55296) {
          if (code > 31 && code < 127 || code > 159 && code !== LS || code === TAB) {
            return code;
          }
          switch (code) {
            case NL:
              this.line++;
              this.column = 0;
              this.positionAtNewLine = this.position;
              return NL;
            case CR: {
              const next = chunk.charCodeAt(i2 + 1);
              if (next === NL || next === NEL) {
                this.i = i2 + 2;
              }
            }
            case NEL:
            case LS:
              this.line++;
              this.column = 0;
              this.positionAtNewLine = this.position;
              return NL_LIKE;
            default:
              this.fail("disallowed character.");
              return code;
          }
        }
        if (code > 56319) {
          if (!(code >= 57344 && code <= 65533)) {
            this.fail("disallowed character.");
          }
          return code;
        }
        const final = 65536 + (code - 55296) * 1024 + (chunk.charCodeAt(i2 + 1) - 56320);
        this.i = i2 + 2;
        if (final > 1114111) {
          this.fail("disallowed character.");
        }
        return final;
      }
      /**
       * Like ``getCode`` but with the return value normalized so that ``NL`` is
       * returned for ``NL_LIKE``.
       */
      getCodeNorm() {
        const c = this.getCode();
        return c === NL_LIKE ? NL : c;
      }
      unget() {
        this.i = this.prevI;
        this.column--;
      }
      /**
       * Capture characters into a buffer until encountering one of a set of
       * characters.
       *
       * @param chars An array of codepoints. Encountering a character in the array
       * ends the capture. (``chars`` may safely contain ``NL``.)
       *
       * @return The character code that made the capture end, or ``EOC`` if we hit
       * the end of the chunk. The return value cannot be NL_LIKE: NL is returned
       * instead.
       */
      captureTo(chars) {
        let { i: start } = this;
        const { chunk } = this;
        while (true) {
          const c = this.getCode();
          const isNLLike = c === NL_LIKE;
          const final = isNLLike ? NL : c;
          if (final === EOC || chars.includes(final)) {
            this.text += chunk.slice(start, this.prevI);
            return final;
          }
          if (isNLLike) {
            this.text += `${chunk.slice(start, this.prevI)}
`;
            start = this.i;
          }
        }
      }
      /**
       * Capture characters into a buffer until encountering a character.
       *
       * @param char The codepoint that ends the capture. **NOTE ``char`` MAY NOT
       * CONTAIN ``NL``.** Passing ``NL`` will result in buggy behavior.
       *
       * @return ``true`` if we ran into the character. Otherwise, we ran into the
       * end of the current chunk.
       */
      captureToChar(char) {
        let { i: start } = this;
        const { chunk } = this;
        while (true) {
          let c = this.getCode();
          switch (c) {
            case NL_LIKE:
              this.text += `${chunk.slice(start, this.prevI)}
`;
              start = this.i;
              c = NL;
              break;
            case EOC:
              this.text += chunk.slice(start);
              return false;
            default:
          }
          if (c === char) {
            this.text += chunk.slice(start, this.prevI);
            return true;
          }
        }
      }
      /**
       * Capture characters that satisfy ``isNameChar`` into the ``name`` field of
       * this parser.
       *
       * @return The character code that made the test fail, or ``EOC`` if we hit
       * the end of the chunk. The return value cannot be NL_LIKE: NL is returned
       * instead.
       */
      captureNameChars() {
        const { chunk, i: start } = this;
        while (true) {
          const c = this.getCode();
          if (c === EOC) {
            this.name += chunk.slice(start);
            return EOC;
          }
          if (!isNameChar(c)) {
            this.name += chunk.slice(start, this.prevI);
            return c === NL_LIKE ? NL : c;
          }
        }
      }
      /**
       * Skip white spaces.
       *
       * @return The character that ended the skip, or ``EOC`` if we hit
       * the end of the chunk. The return value cannot be NL_LIKE: NL is returned
       * instead.
       */
      skipSpaces() {
        while (true) {
          const c = this.getCodeNorm();
          if (c === EOC || !isS(c)) {
            return c;
          }
        }
      }
      setXMLVersion(version) {
        this.currentXMLVersion = version;
        if (version === "1.0") {
          this.isChar = isChar10;
          this.getCode = this.getCode10;
        } else {
          this.isChar = isChar11;
          this.getCode = this.getCode11;
        }
      }
      // STATE ENGINE METHODS
      // This needs to be a state separate from S_BEGIN_WHITESPACE because we want
      // to be sure never to come back to this state later.
      sBegin() {
        if (this.chunk.charCodeAt(0) === 65279) {
          this.i++;
          this.column++;
        }
        this.state = S_BEGIN_WHITESPACE;
      }
      sBeginWhitespace() {
        const iBefore = this.i;
        const c = this.skipSpaces();
        if (this.prevI !== iBefore) {
          this.xmlDeclPossible = false;
        }
        switch (c) {
          case LESS:
            this.state = S_OPEN_WAKA;
            if (this.text.length !== 0) {
              throw new Error("no-empty text at start");
            }
            break;
          case EOC:
            break;
          default:
            this.unget();
            this.state = S_TEXT;
            this.xmlDeclPossible = false;
        }
      }
      sDoctype() {
        var _a;
        const c = this.captureTo(DOCTYPE_TERMINATOR);
        switch (c) {
          case GREATER: {
            (_a = this.doctypeHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.text);
            this.text = "";
            this.state = S_TEXT;
            this.doctype = true;
            break;
          }
          case EOC:
            break;
          default:
            this.text += String.fromCodePoint(c);
            if (c === OPEN_BRACKET) {
              this.state = S_DTD;
            } else if (isQuote(c)) {
              this.state = S_DOCTYPE_QUOTE;
              this.q = c;
            }
        }
      }
      sDoctypeQuote() {
        const q = this.q;
        if (this.captureToChar(q)) {
          this.text += String.fromCodePoint(q);
          this.q = null;
          this.state = S_DOCTYPE;
        }
      }
      sDTD() {
        const c = this.captureTo(DTD_TERMINATOR);
        if (c === EOC) {
          return;
        }
        this.text += String.fromCodePoint(c);
        if (c === CLOSE_BRACKET) {
          this.state = S_DOCTYPE;
        } else if (c === LESS) {
          this.state = S_DTD_OPEN_WAKA;
        } else if (isQuote(c)) {
          this.state = S_DTD_QUOTED;
          this.q = c;
        }
      }
      sDTDQuoted() {
        const q = this.q;
        if (this.captureToChar(q)) {
          this.text += String.fromCodePoint(q);
          this.state = S_DTD;
          this.q = null;
        }
      }
      sDTDOpenWaka() {
        const c = this.getCodeNorm();
        this.text += String.fromCodePoint(c);
        switch (c) {
          case BANG:
            this.state = S_DTD_OPEN_WAKA_BANG;
            this.openWakaBang = "";
            break;
          case QUESTION:
            this.state = S_DTD_PI;
            break;
          default:
            this.state = S_DTD;
        }
      }
      sDTDOpenWakaBang() {
        const char = String.fromCodePoint(this.getCodeNorm());
        const owb = this.openWakaBang += char;
        this.text += char;
        if (owb !== "-") {
          this.state = owb === "--" ? S_DTD_COMMENT : S_DTD;
          this.openWakaBang = "";
        }
      }
      sDTDComment() {
        if (this.captureToChar(MINUS)) {
          this.text += "-";
          this.state = S_DTD_COMMENT_ENDING;
        }
      }
      sDTDCommentEnding() {
        const c = this.getCodeNorm();
        this.text += String.fromCodePoint(c);
        this.state = c === MINUS ? S_DTD_COMMENT_ENDED : S_DTD_COMMENT;
      }
      sDTDCommentEnded() {
        const c = this.getCodeNorm();
        this.text += String.fromCodePoint(c);
        if (c === GREATER) {
          this.state = S_DTD;
        } else {
          this.fail("malformed comment.");
          this.state = S_DTD_COMMENT;
        }
      }
      sDTDPI() {
        if (this.captureToChar(QUESTION)) {
          this.text += "?";
          this.state = S_DTD_PI_ENDING;
        }
      }
      sDTDPIEnding() {
        const c = this.getCodeNorm();
        this.text += String.fromCodePoint(c);
        if (c === GREATER) {
          this.state = S_DTD;
        }
      }
      sText() {
        if (this.tags.length !== 0) {
          this.handleTextInRoot();
        } else {
          this.handleTextOutsideRoot();
        }
      }
      sEntity() {
        let { i: start } = this;
        const { chunk } = this;
        loop:
          while (true) {
            switch (this.getCode()) {
              case NL_LIKE:
                this.entity += `${chunk.slice(start, this.prevI)}
`;
                start = this.i;
                break;
              case SEMICOLON: {
                const { entityReturnState } = this;
                const entity = this.entity + chunk.slice(start, this.prevI);
                this.state = entityReturnState;
                let parsed;
                if (entity === "") {
                  this.fail("empty entity name.");
                  parsed = "&;";
                } else {
                  parsed = this.parseEntity(entity);
                  this.entity = "";
                }
                if (entityReturnState !== S_TEXT || this.textHandler !== void 0) {
                  this.text += parsed;
                }
                break loop;
              }
              case EOC:
                this.entity += chunk.slice(start);
                break loop;
              default:
            }
          }
      }
      sOpenWaka() {
        const c = this.getCode();
        if (isNameStartChar(c)) {
          this.state = S_OPEN_TAG;
          this.unget();
          this.xmlDeclPossible = false;
        } else {
          switch (c) {
            case FORWARD_SLASH:
              this.state = S_CLOSE_TAG;
              this.xmlDeclPossible = false;
              break;
            case BANG:
              this.state = S_OPEN_WAKA_BANG;
              this.openWakaBang = "";
              this.xmlDeclPossible = false;
              break;
            case QUESTION:
              this.state = S_PI_FIRST_CHAR;
              break;
            default:
              this.fail("disallowed character in tag name");
              this.state = S_TEXT;
              this.xmlDeclPossible = false;
          }
        }
      }
      sOpenWakaBang() {
        this.openWakaBang += String.fromCodePoint(this.getCodeNorm());
        switch (this.openWakaBang) {
          case "[CDATA[":
            if (!this.sawRoot && !this.reportedTextBeforeRoot) {
              this.fail("text data outside of root node.");
              this.reportedTextBeforeRoot = true;
            }
            if (this.closedRoot && !this.reportedTextAfterRoot) {
              this.fail("text data outside of root node.");
              this.reportedTextAfterRoot = true;
            }
            this.state = S_CDATA;
            this.openWakaBang = "";
            break;
          case "--":
            this.state = S_COMMENT;
            this.openWakaBang = "";
            break;
          case "DOCTYPE":
            this.state = S_DOCTYPE;
            if (this.doctype || this.sawRoot) {
              this.fail("inappropriately located doctype declaration.");
            }
            this.openWakaBang = "";
            break;
          default:
            if (this.openWakaBang.length >= 7) {
              this.fail("incorrect syntax.");
            }
        }
      }
      sComment() {
        if (this.captureToChar(MINUS)) {
          this.state = S_COMMENT_ENDING;
        }
      }
      sCommentEnding() {
        var _a;
        const c = this.getCodeNorm();
        if (c === MINUS) {
          this.state = S_COMMENT_ENDED;
          (_a = this.commentHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.text);
          this.text = "";
        } else {
          this.text += `-${String.fromCodePoint(c)}`;
          this.state = S_COMMENT;
        }
      }
      sCommentEnded() {
        const c = this.getCodeNorm();
        if (c !== GREATER) {
          this.fail("malformed comment.");
          this.text += `--${String.fromCodePoint(c)}`;
          this.state = S_COMMENT;
        } else {
          this.state = S_TEXT;
        }
      }
      sCData() {
        if (this.captureToChar(CLOSE_BRACKET)) {
          this.state = S_CDATA_ENDING;
        }
      }
      sCDataEnding() {
        const c = this.getCodeNorm();
        if (c === CLOSE_BRACKET) {
          this.state = S_CDATA_ENDING_2;
        } else {
          this.text += `]${String.fromCodePoint(c)}`;
          this.state = S_CDATA;
        }
      }
      sCDataEnding2() {
        var _a;
        const c = this.getCodeNorm();
        switch (c) {
          case GREATER: {
            (_a = this.cdataHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.text);
            this.text = "";
            this.state = S_TEXT;
            break;
          }
          case CLOSE_BRACKET:
            this.text += "]";
            break;
          default:
            this.text += `]]${String.fromCodePoint(c)}`;
            this.state = S_CDATA;
        }
      }
      // We need this separate state to check the first character fo the pi target
      // with this.nameStartCheck which allows less characters than this.nameCheck.
      sPIFirstChar() {
        const c = this.getCodeNorm();
        if (this.nameStartCheck(c)) {
          this.piTarget += String.fromCodePoint(c);
          this.state = S_PI_REST;
        } else if (c === QUESTION || isS(c)) {
          this.fail("processing instruction without a target.");
          this.state = c === QUESTION ? S_PI_ENDING : S_PI_BODY;
        } else {
          this.fail("disallowed character in processing instruction name.");
          this.piTarget += String.fromCodePoint(c);
          this.state = S_PI_REST;
        }
      }
      sPIRest() {
        const { chunk, i: start } = this;
        while (true) {
          const c = this.getCodeNorm();
          if (c === EOC) {
            this.piTarget += chunk.slice(start);
            return;
          }
          if (!this.nameCheck(c)) {
            this.piTarget += chunk.slice(start, this.prevI);
            const isQuestion = c === QUESTION;
            if (isQuestion || isS(c)) {
              if (this.piTarget === "xml") {
                if (!this.xmlDeclPossible) {
                  this.fail("an XML declaration must be at the start of the document.");
                }
                this.state = isQuestion ? S_XML_DECL_ENDING : S_XML_DECL_NAME_START;
              } else {
                this.state = isQuestion ? S_PI_ENDING : S_PI_BODY;
              }
            } else {
              this.fail("disallowed character in processing instruction name.");
              this.piTarget += String.fromCodePoint(c);
            }
            break;
          }
        }
      }
      sPIBody() {
        if (this.text.length === 0) {
          const c = this.getCodeNorm();
          if (c === QUESTION) {
            this.state = S_PI_ENDING;
          } else if (!isS(c)) {
            this.text = String.fromCodePoint(c);
          }
        } else if (this.captureToChar(QUESTION)) {
          this.state = S_PI_ENDING;
        }
      }
      sPIEnding() {
        var _a;
        const c = this.getCodeNorm();
        if (c === GREATER) {
          const { piTarget } = this;
          if (piTarget.toLowerCase() === "xml") {
            this.fail("the XML declaration must appear at the start of the document.");
          }
          (_a = this.piHandler) === null || _a === void 0 ? void 0 : _a.call(this, {
            target: piTarget,
            body: this.text
          });
          this.piTarget = this.text = "";
          this.state = S_TEXT;
        } else if (c === QUESTION) {
          this.text += "?";
        } else {
          this.text += `?${String.fromCodePoint(c)}`;
          this.state = S_PI_BODY;
        }
        this.xmlDeclPossible = false;
      }
      sXMLDeclNameStart() {
        const c = this.skipSpaces();
        if (c === QUESTION) {
          this.state = S_XML_DECL_ENDING;
          return;
        }
        if (c !== EOC) {
          this.state = S_XML_DECL_NAME;
          this.name = String.fromCodePoint(c);
        }
      }
      sXMLDeclName() {
        const c = this.captureTo(XML_DECL_NAME_TERMINATOR);
        if (c === QUESTION) {
          this.state = S_XML_DECL_ENDING;
          this.name += this.text;
          this.text = "";
          this.fail("XML declaration is incomplete.");
          return;
        }
        if (!(isS(c) || c === EQUAL)) {
          return;
        }
        this.name += this.text;
        this.text = "";
        if (!this.xmlDeclExpects.includes(this.name)) {
          switch (this.name.length) {
            case 0:
              this.fail("did not expect any more name/value pairs.");
              break;
            case 1:
              this.fail(`expected the name ${this.xmlDeclExpects[0]}.`);
              break;
            default:
              this.fail(`expected one of ${this.xmlDeclExpects.join(", ")}`);
          }
        }
        this.state = c === EQUAL ? S_XML_DECL_VALUE_START : S_XML_DECL_EQ;
      }
      sXMLDeclEq() {
        const c = this.getCodeNorm();
        if (c === QUESTION) {
          this.state = S_XML_DECL_ENDING;
          this.fail("XML declaration is incomplete.");
          return;
        }
        if (isS(c)) {
          return;
        }
        if (c !== EQUAL) {
          this.fail("value required.");
        }
        this.state = S_XML_DECL_VALUE_START;
      }
      sXMLDeclValueStart() {
        const c = this.getCodeNorm();
        if (c === QUESTION) {
          this.state = S_XML_DECL_ENDING;
          this.fail("XML declaration is incomplete.");
          return;
        }
        if (isS(c)) {
          return;
        }
        if (!isQuote(c)) {
          this.fail("value must be quoted.");
          this.q = SPACE;
        } else {
          this.q = c;
        }
        this.state = S_XML_DECL_VALUE;
      }
      sXMLDeclValue() {
        const c = this.captureTo([this.q, QUESTION]);
        if (c === QUESTION) {
          this.state = S_XML_DECL_ENDING;
          this.text = "";
          this.fail("XML declaration is incomplete.");
          return;
        }
        if (c === EOC) {
          return;
        }
        const value = this.text;
        this.text = "";
        switch (this.name) {
          case "version": {
            this.xmlDeclExpects = ["encoding", "standalone"];
            const version = value;
            this.xmlDecl.version = version;
            if (!/^1\.[0-9]+$/.test(version)) {
              this.fail("version number must match /^1\\.[0-9]+$/.");
            } else if (!this.opt.forceXMLVersion) {
              this.setXMLVersion(version);
            }
            break;
          }
          case "encoding":
            if (!/^[A-Za-z][A-Za-z0-9._-]*$/.test(value)) {
              this.fail("encoding value must match /^[A-Za-z0-9][A-Za-z0-9._-]*$/.");
            }
            this.xmlDeclExpects = ["standalone"];
            this.xmlDecl.encoding = value;
            break;
          case "standalone":
            if (value !== "yes" && value !== "no") {
              this.fail('standalone value must match "yes" or "no".');
            }
            this.xmlDeclExpects = [];
            this.xmlDecl.standalone = value;
            break;
          default:
        }
        this.name = "";
        this.state = S_XML_DECL_SEPARATOR;
      }
      sXMLDeclSeparator() {
        const c = this.getCodeNorm();
        if (c === QUESTION) {
          this.state = S_XML_DECL_ENDING;
          return;
        }
        if (!isS(c)) {
          this.fail("whitespace required.");
          this.unget();
        }
        this.state = S_XML_DECL_NAME_START;
      }
      sXMLDeclEnding() {
        var _a;
        const c = this.getCodeNorm();
        if (c === GREATER) {
          if (this.piTarget !== "xml") {
            this.fail("processing instructions are not allowed before root.");
          } else if (this.name !== "version" && this.xmlDeclExpects.includes("version")) {
            this.fail("XML declaration must contain a version.");
          }
          (_a = this.xmldeclHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.xmlDecl);
          this.name = "";
          this.piTarget = this.text = "";
          this.state = S_TEXT;
        } else {
          this.fail("The character ? is disallowed anywhere in XML declarations.");
        }
        this.xmlDeclPossible = false;
      }
      sOpenTag() {
        var _a;
        const c = this.captureNameChars();
        if (c === EOC) {
          return;
        }
        const tag = this.tag = {
          name: this.name,
          attributes: /* @__PURE__ */ Object.create(null)
        };
        this.name = "";
        if (this.xmlnsOpt) {
          this.topNS = tag.ns = /* @__PURE__ */ Object.create(null);
        }
        (_a = this.openTagStartHandler) === null || _a === void 0 ? void 0 : _a.call(this, tag);
        this.sawRoot = true;
        if (!this.fragmentOpt && this.closedRoot) {
          this.fail("documents may contain only one root.");
        }
        switch (c) {
          case GREATER:
            this.openTag();
            break;
          case FORWARD_SLASH:
            this.state = S_OPEN_TAG_SLASH;
            break;
          default:
            if (!isS(c)) {
              this.fail("disallowed character in tag name.");
            }
            this.state = S_ATTRIB;
        }
      }
      sOpenTagSlash() {
        if (this.getCode() === GREATER) {
          this.openSelfClosingTag();
        } else {
          this.fail("forward-slash in opening tag not followed by >.");
          this.state = S_ATTRIB;
        }
      }
      sAttrib() {
        const c = this.skipSpaces();
        if (c === EOC) {
          return;
        }
        if (isNameStartChar(c)) {
          this.unget();
          this.state = S_ATTRIB_NAME;
        } else if (c === GREATER) {
          this.openTag();
        } else if (c === FORWARD_SLASH) {
          this.state = S_OPEN_TAG_SLASH;
        } else {
          this.fail("disallowed character in attribute name.");
        }
      }
      sAttribName() {
        const c = this.captureNameChars();
        if (c === EQUAL) {
          this.state = S_ATTRIB_VALUE;
        } else if (isS(c)) {
          this.state = S_ATTRIB_NAME_SAW_WHITE;
        } else if (c === GREATER) {
          this.fail("attribute without value.");
          this.pushAttrib(this.name, this.name);
          this.name = this.text = "";
          this.openTag();
        } else if (c !== EOC) {
          this.fail("disallowed character in attribute name.");
        }
      }
      sAttribNameSawWhite() {
        const c = this.skipSpaces();
        switch (c) {
          case EOC:
            return;
          case EQUAL:
            this.state = S_ATTRIB_VALUE;
            break;
          default:
            this.fail("attribute without value.");
            this.text = "";
            this.name = "";
            if (c === GREATER) {
              this.openTag();
            } else if (isNameStartChar(c)) {
              this.unget();
              this.state = S_ATTRIB_NAME;
            } else {
              this.fail("disallowed character in attribute name.");
              this.state = S_ATTRIB;
            }
        }
      }
      sAttribValue() {
        const c = this.getCodeNorm();
        if (isQuote(c)) {
          this.q = c;
          this.state = S_ATTRIB_VALUE_QUOTED;
        } else if (!isS(c)) {
          this.fail("unquoted attribute value.");
          this.state = S_ATTRIB_VALUE_UNQUOTED;
          this.unget();
        }
      }
      sAttribValueQuoted() {
        const { q, chunk } = this;
        let { i: start } = this;
        while (true) {
          switch (this.getCode()) {
            case q:
              this.pushAttrib(this.name, this.text + chunk.slice(start, this.prevI));
              this.name = this.text = "";
              this.q = null;
              this.state = S_ATTRIB_VALUE_CLOSED;
              return;
            case AMP:
              this.text += chunk.slice(start, this.prevI);
              this.state = S_ENTITY;
              this.entityReturnState = S_ATTRIB_VALUE_QUOTED;
              return;
            case NL:
            case NL_LIKE:
            case TAB:
              this.text += `${chunk.slice(start, this.prevI)} `;
              start = this.i;
              break;
            case LESS:
              this.text += chunk.slice(start, this.prevI);
              this.fail("disallowed character.");
              return;
            case EOC:
              this.text += chunk.slice(start);
              return;
            default:
          }
        }
      }
      sAttribValueClosed() {
        const c = this.getCodeNorm();
        if (isS(c)) {
          this.state = S_ATTRIB;
        } else if (c === GREATER) {
          this.openTag();
        } else if (c === FORWARD_SLASH) {
          this.state = S_OPEN_TAG_SLASH;
        } else if (isNameStartChar(c)) {
          this.fail("no whitespace between attributes.");
          this.unget();
          this.state = S_ATTRIB_NAME;
        } else {
          this.fail("disallowed character in attribute name.");
        }
      }
      sAttribValueUnquoted() {
        const c = this.captureTo(ATTRIB_VALUE_UNQUOTED_TERMINATOR);
        switch (c) {
          case AMP:
            this.state = S_ENTITY;
            this.entityReturnState = S_ATTRIB_VALUE_UNQUOTED;
            break;
          case LESS:
            this.fail("disallowed character.");
            break;
          case EOC:
            break;
          default:
            if (this.text.includes("]]>")) {
              this.fail('the string "]]>" is disallowed in char data.');
            }
            this.pushAttrib(this.name, this.text);
            this.name = this.text = "";
            if (c === GREATER) {
              this.openTag();
            } else {
              this.state = S_ATTRIB;
            }
        }
      }
      sCloseTag() {
        const c = this.captureNameChars();
        if (c === GREATER) {
          this.closeTag();
        } else if (isS(c)) {
          this.state = S_CLOSE_TAG_SAW_WHITE;
        } else if (c !== EOC) {
          this.fail("disallowed character in closing tag.");
        }
      }
      sCloseTagSawWhite() {
        switch (this.skipSpaces()) {
          case GREATER:
            this.closeTag();
            break;
          case EOC:
            break;
          default:
            this.fail("disallowed character in closing tag.");
        }
      }
      // END OF STATE ENGINE METHODS
      handleTextInRoot() {
        let { i: start, forbiddenState } = this;
        const { chunk, textHandler: handler } = this;
        scanLoop:
          while (true) {
            switch (this.getCode()) {
              case LESS: {
                this.state = S_OPEN_WAKA;
                if (handler !== void 0) {
                  const { text } = this;
                  const slice = chunk.slice(start, this.prevI);
                  if (text.length !== 0) {
                    handler(text + slice);
                    this.text = "";
                  } else if (slice.length !== 0) {
                    handler(slice);
                  }
                }
                forbiddenState = FORBIDDEN_START;
                break scanLoop;
              }
              case AMP:
                this.state = S_ENTITY;
                this.entityReturnState = S_TEXT;
                if (handler !== void 0) {
                  this.text += chunk.slice(start, this.prevI);
                }
                forbiddenState = FORBIDDEN_START;
                break scanLoop;
              case CLOSE_BRACKET:
                switch (forbiddenState) {
                  case FORBIDDEN_START:
                    forbiddenState = FORBIDDEN_BRACKET;
                    break;
                  case FORBIDDEN_BRACKET:
                    forbiddenState = FORBIDDEN_BRACKET_BRACKET;
                    break;
                  case FORBIDDEN_BRACKET_BRACKET:
                    break;
                  default:
                    throw new Error("impossible state");
                }
                break;
              case GREATER:
                if (forbiddenState === FORBIDDEN_BRACKET_BRACKET) {
                  this.fail('the string "]]>" is disallowed in char data.');
                }
                forbiddenState = FORBIDDEN_START;
                break;
              case NL_LIKE:
                if (handler !== void 0) {
                  this.text += `${chunk.slice(start, this.prevI)}
`;
                }
                start = this.i;
                forbiddenState = FORBIDDEN_START;
                break;
              case EOC:
                if (handler !== void 0) {
                  this.text += chunk.slice(start);
                }
                break scanLoop;
              default:
                forbiddenState = FORBIDDEN_START;
            }
          }
        this.forbiddenState = forbiddenState;
      }
      handleTextOutsideRoot() {
        let { i: start } = this;
        const { chunk, textHandler: handler } = this;
        let nonSpace = false;
        outRootLoop:
          while (true) {
            const code = this.getCode();
            switch (code) {
              case LESS: {
                this.state = S_OPEN_WAKA;
                if (handler !== void 0) {
                  const { text } = this;
                  const slice = chunk.slice(start, this.prevI);
                  if (text.length !== 0) {
                    handler(text + slice);
                    this.text = "";
                  } else if (slice.length !== 0) {
                    handler(slice);
                  }
                }
                break outRootLoop;
              }
              case AMP:
                this.state = S_ENTITY;
                this.entityReturnState = S_TEXT;
                if (handler !== void 0) {
                  this.text += chunk.slice(start, this.prevI);
                }
                nonSpace = true;
                break outRootLoop;
              case NL_LIKE:
                if (handler !== void 0) {
                  this.text += `${chunk.slice(start, this.prevI)}
`;
                }
                start = this.i;
                break;
              case EOC:
                if (handler !== void 0) {
                  this.text += chunk.slice(start);
                }
                break outRootLoop;
              default:
                if (!isS(code)) {
                  nonSpace = true;
                }
            }
          }
        if (!nonSpace) {
          return;
        }
        if (!this.sawRoot && !this.reportedTextBeforeRoot) {
          this.fail("text data outside of root node.");
          this.reportedTextBeforeRoot = true;
        }
        if (this.closedRoot && !this.reportedTextAfterRoot) {
          this.fail("text data outside of root node.");
          this.reportedTextAfterRoot = true;
        }
      }
      pushAttribNS(name, value) {
        var _a;
        const { prefix, local } = this.qname(name);
        const attr = { name, prefix, local, value };
        this.attribList.push(attr);
        (_a = this.attributeHandler) === null || _a === void 0 ? void 0 : _a.call(this, attr);
        if (prefix === "xmlns") {
          const trimmed = value.trim();
          if (this.currentXMLVersion === "1.0" && trimmed === "") {
            this.fail("invalid attempt to undefine prefix in XML 1.0");
          }
          this.topNS[local] = trimmed;
          nsPairCheck(this, local, trimmed);
        } else if (name === "xmlns") {
          const trimmed = value.trim();
          this.topNS[""] = trimmed;
          nsPairCheck(this, "", trimmed);
        }
      }
      pushAttribPlain(name, value) {
        var _a;
        const attr = { name, value };
        this.attribList.push(attr);
        (_a = this.attributeHandler) === null || _a === void 0 ? void 0 : _a.call(this, attr);
      }
      /**
       * End parsing. This performs final well-formedness checks and resets the
       * parser to a clean state.
       *
       * @returns this
       */
      end() {
        var _a, _b;
        if (!this.sawRoot) {
          this.fail("document must contain a root element.");
        }
        const { tags } = this;
        while (tags.length > 0) {
          const tag = tags.pop();
          this.fail(`unclosed tag: ${tag.name}`);
        }
        if (this.state !== S_BEGIN && this.state !== S_TEXT) {
          this.fail("unexpected end.");
        }
        const { text } = this;
        if (text.length !== 0) {
          (_a = this.textHandler) === null || _a === void 0 ? void 0 : _a.call(this, text);
          this.text = "";
        }
        this._closed = true;
        (_b = this.endHandler) === null || _b === void 0 ? void 0 : _b.call(this);
        this._init();
        return this;
      }
      /**
       * Resolve a namespace prefix.
       *
       * @param prefix The prefix to resolve.
       *
       * @returns The namespace URI or ``undefined`` if the prefix is not defined.
       */
      resolve(prefix) {
        var _a, _b;
        let uri = this.topNS[prefix];
        if (uri !== void 0) {
          return uri;
        }
        const { tags } = this;
        for (let index = tags.length - 1; index >= 0; index--) {
          uri = tags[index].ns[prefix];
          if (uri !== void 0) {
            return uri;
          }
        }
        uri = this.ns[prefix];
        if (uri !== void 0) {
          return uri;
        }
        return (_b = (_a = this.opt).resolvePrefix) === null || _b === void 0 ? void 0 : _b.call(_a, prefix);
      }
      /**
       * Parse a qname into its prefix and local name parts.
       *
       * @param name The name to parse
       *
       * @returns
       */
      qname(name) {
        const colon = name.indexOf(":");
        if (colon === -1) {
          return { prefix: "", local: name };
        }
        const local = name.slice(colon + 1);
        const prefix = name.slice(0, colon);
        if (prefix === "" || local === "" || local.includes(":")) {
          this.fail(`malformed name: ${name}.`);
        }
        return { prefix, local };
      }
      processAttribsNS() {
        var _a;
        const { attribList } = this;
        const tag = this.tag;
        {
          const { prefix, local } = this.qname(tag.name);
          tag.prefix = prefix;
          tag.local = local;
          const uri = tag.uri = (_a = this.resolve(prefix)) !== null && _a !== void 0 ? _a : "";
          if (prefix !== "") {
            if (prefix === "xmlns") {
              this.fail('tags may not have "xmlns" as prefix.');
            }
            if (uri === "") {
              this.fail(`unbound namespace prefix: ${JSON.stringify(prefix)}.`);
              tag.uri = prefix;
            }
          }
        }
        if (attribList.length === 0) {
          return;
        }
        const { attributes } = tag;
        const seen = /* @__PURE__ */ new Set();
        for (const attr of attribList) {
          const { name, prefix, local } = attr;
          let uri;
          let eqname;
          if (prefix === "") {
            uri = name === "xmlns" ? XMLNS_NAMESPACE : "";
            eqname = name;
          } else {
            uri = this.resolve(prefix);
            if (uri === void 0) {
              this.fail(`unbound namespace prefix: ${JSON.stringify(prefix)}.`);
              uri = prefix;
            }
            eqname = `{${uri}}${local}`;
          }
          if (seen.has(eqname)) {
            this.fail(`duplicate attribute: ${eqname}.`);
          }
          seen.add(eqname);
          attr.uri = uri;
          attributes[name] = attr;
        }
        this.attribList = [];
      }
      processAttribsPlain() {
        const { attribList } = this;
        const attributes = this.tag.attributes;
        for (const { name, value } of attribList) {
          if (attributes[name] !== void 0) {
            this.fail(`duplicate attribute: ${name}.`);
          }
          attributes[name] = value;
        }
        this.attribList = [];
      }
      /**
       * Handle a complete open tag. This parser code calls this once it has seen
       * the whole tag. This method checks for well-formeness and then emits
       * ``onopentag``.
       */
      openTag() {
        var _a;
        this.processAttribs();
        const { tags } = this;
        const tag = this.tag;
        tag.isSelfClosing = false;
        (_a = this.openTagHandler) === null || _a === void 0 ? void 0 : _a.call(this, tag);
        tags.push(tag);
        this.state = S_TEXT;
        this.name = "";
      }
      /**
       * Handle a complete self-closing tag. This parser code calls this once it has
       * seen the whole tag. This method checks for well-formeness and then emits
       * ``onopentag`` and ``onclosetag``.
       */
      openSelfClosingTag() {
        var _a, _b, _c;
        this.processAttribs();
        const { tags } = this;
        const tag = this.tag;
        tag.isSelfClosing = true;
        (_a = this.openTagHandler) === null || _a === void 0 ? void 0 : _a.call(this, tag);
        (_b = this.closeTagHandler) === null || _b === void 0 ? void 0 : _b.call(this, tag);
        const top = this.tag = (_c = tags[tags.length - 1]) !== null && _c !== void 0 ? _c : null;
        if (top === null) {
          this.closedRoot = true;
        }
        this.state = S_TEXT;
        this.name = "";
      }
      /**
       * Handle a complete close tag. This parser code calls this once it has seen
       * the whole tag. This method checks for well-formeness and then emits
       * ``onclosetag``.
       */
      closeTag() {
        const { tags, name } = this;
        this.state = S_TEXT;
        this.name = "";
        if (name === "") {
          this.fail("weird empty close tag.");
          this.text += "</>";
          return;
        }
        const handler = this.closeTagHandler;
        let l = tags.length;
        while (l-- > 0) {
          const tag = this.tag = tags.pop();
          this.topNS = tag.ns;
          handler === null || handler === void 0 ? void 0 : handler(tag);
          if (tag.name === name) {
            break;
          }
          this.fail("unexpected close tag.");
        }
        if (l === 0) {
          this.closedRoot = true;
        } else if (l < 0) {
          this.fail(`unmatched closing tag: ${name}.`);
          this.text += `</${name}>`;
        }
      }
      /**
       * Resolves an entity. Makes any necessary well-formedness checks.
       *
       * @param entity The entity to resolve.
       *
       * @returns The parsed entity.
       */
      parseEntity(entity) {
        if (entity[0] !== "#") {
          const defined = this.ENTITIES[entity];
          if (defined !== void 0) {
            return defined;
          }
          this.fail(this.isName(entity) ? "undefined entity." : "disallowed character in entity name.");
          return `&${entity};`;
        }
        let num = NaN;
        if (entity[1] === "x" && /^#x[0-9a-f]+$/i.test(entity)) {
          num = parseInt(entity.slice(2), 16);
        } else if (/^#[0-9]+$/.test(entity)) {
          num = parseInt(entity.slice(1), 10);
        }
        if (!this.isChar(num)) {
          this.fail("malformed character entity.");
          return `&${entity};`;
        }
        return String.fromCodePoint(num);
      }
    };
    exports.SaxesParser = SaxesParser;
  }
});

// node_modules/sparqlxml-parse/lib/SparqlXmlParser.js
var require_SparqlXmlParser = __commonJS({
  "node_modules/sparqlxml-parse/lib/SparqlXmlParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SparqlXmlParser = void 0;
    var rdf_data_factory_1 = require_rdf_data_factory();
    var saxes_1 = require_saxes();
    var readable_stream_1 = require_browser3();
    var SparqlXmlParser = class {
      constructor(settings) {
        settings = settings || {};
        this.dataFactory = settings.dataFactory || new rdf_data_factory_1.DataFactory();
        this.prefixVariableQuestionMark = !!settings.prefixVariableQuestionMark;
      }
      /**
       * Convert a SPARQL XML bindings response stream to a stream of bindings objects.
       *
       * The bindings stream will emit a 'variables' event that will contain
       * the array of variables (as RDF.Variable[]), as defined in the response head.
       *
       * @param {NodeJS.ReadableStream} sparqlResponseStream A SPARQL XML response stream.
       * @return {NodeJS.ReadableStream} A stream of bindings.
       */
      parseXmlResultsStream(sparqlResponseStream) {
        const errorListener = (error2) => resultStream.emit("error", error2);
        sparqlResponseStream.on("error", errorListener);
        const parser = new saxes_1.SaxesParser();
        const stack = [];
        let variablesFound = false;
        let resultsFound = false;
        const variables = [];
        let currentBindings = {};
        let currentBindingName = "";
        let currentBindingType = "";
        let currentBindingAnnotation;
        let currentText = "";
        let currentQuotedTriples = [];
        parser.on("error", errorListener);
        parser.on("opentag", (tag) => {
          if (tag.name === "variable" && this.stackEquals(stack, ["sparql", "head"])) {
            variables.push(this.dataFactory.variable(tag.attributes.name));
          } else if (tag.name === "results" && this.stackEquals(stack, ["sparql"])) {
            resultsFound = true;
          } else if (tag.name === "result" && this.stackEquals(stack, ["sparql", "results"])) {
            currentBindings = {};
          } else if (tag.name === "binding" && this.stackEquals(stack, ["sparql", "results", "result"])) {
            currentBindingName = tag.attributes.name || "";
            currentBindingType = "";
            currentBindingAnnotation = "";
            currentText = "";
            currentQuotedTriples = [];
          } else if (tag.name === "triple" && this.stackBeginsWith(stack, ["sparql", "results", "result"])) {
            currentQuotedTriples.push({ components: {} });
          } else if (stack[stack.length - 1] === "triple" && this.stackBeginsWith(stack, ["sparql", "results", "result", "binding"])) {
            currentBindingType = "";
            currentBindingAnnotation = "";
            currentText = "";
            if (!["subject", "predicate", "object"].includes(tag.name)) {
              errorListener(new Error(`Illegal quoted triple component '${tag.name}' found on line ${parser.line + 1}`));
            } else {
              currentQuotedTriples[currentQuotedTriples.length - 1].currentComponent = tag.name;
            }
          } else if (this.stackBeginsWith(stack, ["sparql", "results", "result", "binding"])) {
            currentBindingType = tag.name;
            if ("xml:lang" in tag.attributes) {
              currentBindingAnnotation = tag.attributes["xml:lang"];
            } else if ("datatype" in tag.attributes) {
              currentBindingAnnotation = this.dataFactory.namedNode(tag.attributes.datatype);
            } else {
              currentBindingAnnotation = void 0;
            }
          }
          stack.push(tag.name);
        });
        parser.on("closetag", (tag) => {
          if (this.stackEquals(stack, ["sparql", "head"])) {
            resultStream.emit("variables", variables);
            variablesFound = true;
          }
          if (this.stackEquals(stack, ["sparql", "results", "result"])) {
            resultStream.push(currentBindings);
          }
          if (this.stackBeginsWith(stack, ["sparql", "results", "result", "binding"])) {
            let term;
            if (!currentBindingName && currentBindingType) {
              errorListener(new Error(`Terms should have a name on line ${parser.line + 1}`));
            } else if (currentBindingType === "uri") {
              term = this.dataFactory.namedNode(currentText);
            } else if (currentBindingType === "bnode") {
              term = this.dataFactory.blankNode(currentText);
            } else if (currentBindingType === "literal") {
              term = this.dataFactory.literal(currentText, currentBindingAnnotation);
            } else if (stack[stack.length - 1] === "triple") {
              const currentQuotedTriple = currentQuotedTriples.pop();
              if (currentQuotedTriple && currentQuotedTriple.components.subject && currentQuotedTriple.components.predicate && currentQuotedTriple.components.object) {
                term = this.dataFactory.quad(currentQuotedTriple.components.subject, currentQuotedTriple.components.predicate, currentQuotedTriple.components.object);
              } else {
                errorListener(new Error(`Incomplete quoted triple on line ${parser.line + 1}`));
              }
            } else if (currentBindingType) {
              errorListener(new Error(`Invalid term type '${currentBindingType}' on line ${parser.line + 1}`));
            }
            if (term) {
              if (currentQuotedTriples.length > 0) {
                const currentQuotedTriple = currentQuotedTriples[currentQuotedTriples.length - 1];
                if (currentQuotedTriple.components[currentQuotedTriple.currentComponent]) {
                  errorListener(new Error(`The ${currentQuotedTriple.currentComponent} in a quoted triple on line ${parser.line + 1} was already defined before`));
                }
                currentQuotedTriple.components[currentQuotedTriple.currentComponent] = term;
              } else {
                const key = this.prefixVariableQuestionMark ? "?" + currentBindingName : currentBindingName;
                currentBindings[key] = term;
              }
            }
            currentBindingType = void 0;
          }
          stack.pop();
        });
        parser.on("text", (text) => {
          if (this.stackBeginsWith(stack, ["sparql", "results", "result", "binding"]) && stack[stack.length - 1] === currentBindingType) {
            currentText = text;
          }
        });
        const resultStream = sparqlResponseStream.on("end", (_) => {
          if (!resultsFound) {
            resultStream.emit("error", new Error("No valid SPARQL query results were found."));
          } else if (!variablesFound) {
            resultStream.emit("variables", []);
          }
        }).pipe(new readable_stream_1.Transform({
          objectMode: true,
          transform(chunk, encoding, callback) {
            parser.write(chunk);
            callback();
          }
        }));
        return resultStream;
      }
      /**
       * Convert a SPARQL XML boolean response stream to a promise resolving to a boolean.
       * This will reject if the given response was not a valid boolean response.
       * @param {NodeJS.ReadableStream} sparqlResponseStream A SPARQL XML response stream.
       * @return {Promise<boolean>} The response boolean.
       */
      parseXmlBooleanStream(sparqlResponseStream) {
        return new Promise((resolve, reject) => {
          const parser = new saxes_1.SaxesParser();
          const stack = [];
          parser.on("error", reject);
          parser.on("opentag", (tag) => {
            stack.push(tag.name);
          });
          parser.on("closetag", (_) => {
            stack.pop();
          });
          parser.on("text", (text) => {
            if (this.stackEquals(stack, ["sparql", "boolean"])) {
              resolve(text === "true");
            }
          });
          sparqlResponseStream.on("error", reject).on("data", (d) => parser.write(d)).on("end", () => reject(new Error("No valid ASK response was found.")));
        });
      }
      stackEquals(a, b) {
        return a.length === b.length && a.every((v, i2) => b[i2] === v);
      }
      stackBeginsWith(a, b) {
        return a.length >= b.length && b.every((v, i2) => a[i2] === v);
      }
    };
    exports.SparqlXmlParser = SparqlXmlParser;
  }
});

// node_modules/sparqlxml-parse/index.js
var require_sparqlxml_parse = __commonJS({
  "node_modules/sparqlxml-parse/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_SparqlXmlParser(), exports);
  }
});

// node_modules/fetch-sparql-endpoint/lib/SparqlEndpointFetcher.js
var require_SparqlEndpointFetcher = __commonJS({
  "node_modules/fetch-sparql-endpoint/lib/SparqlEndpointFetcher.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SparqlEndpointFetcher = void 0;
    require_browser_polyfill();
    var abort_controller_1 = require_browser2();
    var sparqljs_1 = require_sparql();
    var sparqljson_parse_1 = require_sparqljson_parse();
    var sparqlxml_parse_1 = require_sparqlxml_parse();
    var stringifyStream = require_stream_to_string();
    var readable_web_to_node_stream_1 = require_lib50();
    var n3 = require_lib43();
    var isStream2 = require_is_stream();
    var SparqlEndpointFetcher = class _SparqlEndpointFetcher {
      constructor(args) {
        args = args || {};
        this.method = args.method || "POST";
        this.additionalUrlParams = args.additionalUrlParams || new URLSearchParams();
        this.defaultHeaders = args.defaultHeaders || new Headers();
        this.fetchCb = args.fetch;
        this.sparqlJsonParser = new sparqljson_parse_1.SparqlJsonParser(args);
        this.sparqlXmlParser = new sparqlxml_parse_1.SparqlXmlParser(args);
        this.sparqlParsers = {
          [_SparqlEndpointFetcher.CONTENTTYPE_SPARQL_JSON]: {
            parseBooleanStream: (sparqlResponseStream) => this.sparqlJsonParser.parseJsonBooleanStream(sparqlResponseStream),
            parseResultsStream: (sparqlResponseStream) => this.sparqlJsonParser.parseJsonResultsStream(sparqlResponseStream)
          },
          [_SparqlEndpointFetcher.CONTENTTYPE_SPARQL_XML]: {
            parseBooleanStream: (sparqlResponseStream) => this.sparqlXmlParser.parseXmlBooleanStream(sparqlResponseStream),
            parseResultsStream: (sparqlResponseStream) => this.sparqlXmlParser.parseXmlResultsStream(sparqlResponseStream)
          }
        };
        this.timeout = args.timeout;
      }
      /**
       * Get the query type of the given query.
       *
       * This will parse the query and thrown an exception on syntax errors.
       *
       * @param {string} query A query.
       * @return {"SELECT" | "ASK" | "CONSTRUCT" | "UNKNOWN"} The query type.
       */
      getQueryType(query) {
        const parsedQuery = new sparqljs_1.Parser({ sparqlStar: true }).parse(query);
        return parsedQuery.type === "query" ? parsedQuery.queryType === "DESCRIBE" ? "CONSTRUCT" : parsedQuery.queryType : "UNKNOWN";
      }
      /**
       * Get the query type of the given update query.
       *
       * This will parse the update query and thrown an exception on syntax errors.
       *
       * @param {string} query An update query.
       * @return {'UNKNOWN' | UpdateTypes} The included update operations.
       */
      getUpdateTypes(query) {
        const parsedQuery = new sparqljs_1.Parser({ sparqlStar: true }).parse(query);
        if (parsedQuery.type === "update") {
          const operations = {};
          for (const update of parsedQuery.updates) {
            if ("type" in update) {
              operations[update.type] = true;
            } else {
              operations[update.updateType] = true;
            }
          }
          return operations;
        } else {
          return "UNKNOWN";
        }
        ;
      }
      /**
       * Send a SELECT query to the given endpoint URL and return the resulting bindings stream.
       * @see IBindings
       * @param {string} endpoint A SPARQL endpoint URL. (without the `?query=` suffix).
       * @param {string} query    A SPARQL query string.
       * @return {Promise<NodeJS.ReadableStream>} A stream of {@link IBindings}.
       */
      async fetchBindings(endpoint, query) {
        const [contentType, responseStream] = await this.fetchRawStream(endpoint, query, _SparqlEndpointFetcher.CONTENTTYPE_SPARQL);
        const parser = this.sparqlParsers[contentType];
        if (!parser) {
          throw new Error("Unknown SPARQL results content type: " + contentType);
        }
        return parser.parseResultsStream(responseStream);
      }
      /**
       * Send an ASK query to the given endpoint URL and return a promise resolving to the boolean answer.
       * @param {string} endpoint A SPARQL endpoint URL. (without the `?query=` suffix).
       * @param {string} query    A SPARQL query string.
       * @return {Promise<boolean>} A boolean resolving to the answer.
       */
      async fetchAsk(endpoint, query) {
        const [contentType, responseStream] = await this.fetchRawStream(endpoint, query, _SparqlEndpointFetcher.CONTENTTYPE_SPARQL);
        const parser = this.sparqlParsers[contentType];
        if (!parser) {
          throw new Error("Unknown SPARQL results content type: " + contentType);
        }
        return parser.parseBooleanStream(responseStream);
      }
      /**
       * Send a CONSTRUCT/DESCRIBE query to the given endpoint URL and return the resulting triple stream.
       * @param {string} endpoint A SPARQL endpoint URL. (without the `?query=` suffix).
       * @param {string} query    A SPARQL query string.
       * @return {Promise<Stream>} A stream of triples.
       */
      async fetchTriples(endpoint, query) {
        const rawStream = (await this.fetchRawStream(endpoint, query, _SparqlEndpointFetcher.CONTENTTYPE_TURTLE))[1];
        return rawStream.pipe(new n3.StreamParser({ format: _SparqlEndpointFetcher.CONTENTTYPE_TURTLE }));
      }
      /**
       * Send an update query to the given endpoint URL using POST.
       *
       * @param {string} endpoint     A SPARQL endpoint URL. (without the `?query=` suffix).
       * @param {string} query        A SPARQL query string.
       */
      async fetchUpdate(endpoint, query) {
        const abortController = new abort_controller_1.default();
        const defaultHeadersRaw = {};
        this.defaultHeaders.forEach((value, key) => {
          defaultHeadersRaw[key] = value;
        });
        const init = {
          method: "POST",
          headers: Object.assign(Object.assign({}, defaultHeadersRaw), { "content-type": "application/sparql-update" }),
          body: query,
          signal: abortController.signal
        };
        await this.handleFetchCall(endpoint, init, { ignoreBody: true });
        abortController.abort();
      }
      /**
       * Send a query to the given endpoint URL and return the resulting stream.
       *
       * This will only accept responses with the application/sparql-results+json content type.
       *
       * @param {string} endpoint     A SPARQL endpoint URL. (without the `?query=` suffix).
       * @param {string} query        A SPARQL query string.
       * @param {string} acceptHeader The HTTP accept to use.
       * @return {Promise<[string, NodeJS.ReadableStream]>} The content type and SPARQL endpoint response stream.
       */
      async fetchRawStream(endpoint, query, acceptHeader) {
        let url = this.method === "POST" ? endpoint : endpoint + "?query=" + encodeURIComponent(query);
        const headers = new Headers(this.defaultHeaders);
        let body;
        headers.append("Accept", acceptHeader);
        if (this.method === "POST") {
          headers.append("Content-Type", "application/x-www-form-urlencoded");
          body = new URLSearchParams();
          body.set("query", query);
          this.additionalUrlParams.forEach((value, key) => {
            body.set(key, value);
          });
          headers.append("Content-Length", body.toString().length.toString());
        } else if (this.additionalUrlParams.toString() !== "") {
          url += `&${this.additionalUrlParams.toString()}`;
        }
        return this.handleFetchCall(url, { headers, method: this.method, body });
      }
      /**
       * Helper function to generalize internal fetch calls.
       *
       * @param {string}      url     The URL to call.
       * @param {RequestInit} init    Options to pass along to the fetch call.
       * @param {any}         options Other specific fetch options.
       * @return {Promise<[string, NodeJS.ReadableStream]>} The content type and SPARQL endpoint response stream.
       */
      async handleFetchCall(url, init, options = {}) {
        let timeoutId;
        if (this.timeout) {
          const controller = new abort_controller_1.default();
          init.signal = controller.signal;
          timeoutId = setTimeout(() => controller.abort(), this.timeout);
        }
        const httpResponse = await (this.fetchCb || fetch)(url, init);
        clearTimeout(timeoutId);
        let responseStream;
        if (!options.ignoreBody) {
          responseStream = isStream2(httpResponse.body) ? httpResponse.body : new readable_web_to_node_stream_1.ReadableWebToNodeStream(httpResponse.body);
        }
        let contentType = httpResponse.headers.get("Content-Type") || "";
        if (contentType.indexOf(";") > 0) {
          contentType = contentType.substr(0, contentType.indexOf(";"));
        }
        if (!httpResponse.ok) {
          const simpleUrl = /^[^?]*/u.exec(url)[0];
          let bodyString = "empty response";
          if (responseStream) {
            bodyString = await stringifyStream(responseStream);
          }
          throw new Error(`Invalid SPARQL endpoint response from ${simpleUrl} (HTTP status ${httpResponse.status}):
${bodyString}`);
        }
        return [contentType, responseStream];
      }
    };
    SparqlEndpointFetcher.CONTENTTYPE_SPARQL_JSON = "application/sparql-results+json";
    SparqlEndpointFetcher.CONTENTTYPE_SPARQL_XML = "application/sparql-results+xml";
    SparqlEndpointFetcher.CONTENTTYPE_SPARQL = `${SparqlEndpointFetcher.CONTENTTYPE_SPARQL_JSON};q=1.0,${SparqlEndpointFetcher.CONTENTTYPE_SPARQL_XML};q=0.7`;
    SparqlEndpointFetcher.CONTENTTYPE_TURTLE = "text/turtle";
    exports.SparqlEndpointFetcher = SparqlEndpointFetcher;
  }
});

// node_modules/fetch-sparql-endpoint/index.js
var require_fetch_sparql_endpoint = __commonJS({
  "node_modules/fetch-sparql-endpoint/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_SparqlEndpointFetcher(), exports);
  }
});

// node_modules/@comunica/actor-query-operation-sparql-endpoint/lib/LazyCardinalityIterator.js
var require_LazyCardinalityIterator = __commonJS({
  "node_modules/@comunica/actor-query-operation-sparql-endpoint/lib/LazyCardinalityIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LazyCardinalityIterator = void 0;
    var asynciterator_1 = require_asynciterator();
    var LazyCardinalityIterator = class extends asynciterator_1.AsyncIterator {
      constructor(_source) {
        super();
        this._source = _source;
        this._count = 0;
        this._buffering = true;
        _source[asynciterator_1.DESTINATION] = this;
        _source.on("readable", destinationSetReadable);
        _source.on("end", destinationSetReadable);
        _source.on("error", destinationEmitError);
        this.readable = _source.readable;
      }
      read() {
        if (this._buffer) {
          if (!this._buffer.empty) {
            return this._buffer.shift();
          }
          if (!this._buffering) {
            this.close();
          }
          this.readable = false;
          return null;
        }
        let item = null;
        if (this._source.readable && (item = this._source.read()) !== null) {
          this._count += 1;
        } else {
          this.readable = false;
          if (this._source.done) {
            this.close();
          }
        }
        return item;
      }
      getCardinality() {
        if (this._cardinality) {
          return this._cardinality;
        }
        if (this._error) {
          return Promise.reject(this._error);
        }
        if (this._source.done) {
          this.close();
        }
        if (this.done) {
          this._cardinality = Promise.resolve(this._count);
        } else {
          this._buffer = new asynciterator_1.LinkedList();
          this._cardinality = new Promise((resolve, reject) => {
            this._source.removeListener("readable", destinationSetReadable);
            this._source.removeListener("end", destinationSetReadable);
            const clean = () => {
              this._source.removeListener("data", onData);
              this._source.removeListener("end", onEnd);
              this._source.removeListener("error", onError);
            };
            const onData = (data) => {
              this._buffer.push(data);
              this._count += 1;
              this.readable = true;
            };
            const onEnd = () => {
              this._buffering = false;
              clean();
              resolve(this._count);
            };
            const onError = (err) => {
              this._buffering = false;
              clean();
              reject(err);
            };
            this._source.on("data", onData);
            this._source.on("end", onEnd);
            this._source.on("error", onError);
          });
        }
        return this._cardinality;
      }
      close() {
        this._source.removeListener("readable", destinationSetReadable);
        this._source.removeListener("end", destinationSetReadable);
        this._source.removeListener("error", destinationEmitError);
        delete this._source[asynciterator_1.DESTINATION];
        this._source.destroy();
        super.close();
      }
    };
    exports.LazyCardinalityIterator = LazyCardinalityIterator;
    function destinationSetReadable() {
      this[asynciterator_1.DESTINATION].readable = true;
    }
    function destinationEmitError(error2) {
      this[asynciterator_1.DESTINATION]._error = error2;
      this[asynciterator_1.DESTINATION].emit("error", error2);
    }
  }
});

// node_modules/@comunica/actor-query-operation-sparql-endpoint/lib/ActorQueryOperationSparqlEndpoint.js
var require_ActorQueryOperationSparqlEndpoint = __commonJS({
  "node_modules/@comunica/actor-query-operation-sparql-endpoint/lib/ActorQueryOperationSparqlEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorQueryOperationSparqlEndpoint = void 0;
    var bindings_factory_1 = require_lib6();
    var bus_query_operation_1 = require_lib7();
    var bus_rdf_resolve_quad_pattern_1 = require_lib47();
    var bus_rdf_update_quads_1 = require_lib52();
    var context_entries_1 = require_lib4();
    var metadata_1 = require_lib48();
    var asynciterator_1 = require_asynciterator();
    var fetch_sparql_endpoint_1 = require_fetch_sparql_endpoint();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var sparqlalgebrajs_1 = require_sparqlalgebrajs();
    var LazyCardinalityIterator_1 = require_LazyCardinalityIterator();
    var BF = new bindings_factory_1.BindingsFactory();
    var DF = new rdf_data_factory_1.DataFactory();
    var ActorQueryOperationSparqlEndpoint = class _ActorQueryOperationSparqlEndpoint extends bus_query_operation_1.ActorQueryOperation {
      constructor(args) {
        super(args);
        this.endpointFetcher = new fetch_sparql_endpoint_1.SparqlEndpointFetcher({
          method: args.forceHttpGet ? "GET" : "POST",
          fetch: (input, init) => this.mediatorHttp.mediate({ input, init, context: this.lastContext }),
          prefixVariableQuestionMark: true
        });
      }
      async test(action) {
        if (!action.operation) {
          throw new Error("Missing field 'operation' in a query operation action.");
        }
        const source = (0, bus_rdf_resolve_quad_pattern_1.getContextSourceFirst)(action.context);
        const destination = (0, bus_rdf_update_quads_1.getContextDestinationFirst)(action.context);
        const sourceType = source ? (0, bus_rdf_resolve_quad_pattern_1.getDataSourceType)(source) : void 0;
        const destinationType = destination ? (0, bus_rdf_update_quads_1.getDataDestinationType)(destination) : void 0;
        const sourceValue = source ? (0, bus_rdf_resolve_quad_pattern_1.getDataSourceValue)(source) : void 0;
        const destinationValue = destination ? (0, bus_rdf_update_quads_1.getDataDestinationValue)(destination) : void 0;
        if (source && sourceType === "sparql" && (!destination || destinationType === "sparql" && destinationValue === sourceValue) || source && !sourceType && (!destination || !destinationType && destinationValue === sourceValue) && typeof sourceValue === "string" && (this.checkUrlSuffixSparql && sourceValue.endsWith("/sparql") || this.checkUrlSuffixUpdate && sourceValue.endsWith("/update"))) {
          return { httpRequests: 1 };
        }
        throw new Error(`${this.name} requires a single source with a 'sparql' endpoint to be present in the context or URL ending on /sparql or /update.`);
      }
      async run(action) {
        const source = (0, bus_rdf_resolve_quad_pattern_1.getContextSourceFirst)(action.context);
        if (!source) {
          throw new Error("Illegal state: undefined sparql endpoint source.");
        }
        const endpoint = (0, bus_rdf_resolve_quad_pattern_1.getDataSourceValue)(source);
        this.lastContext = action.context;
        let query;
        let type;
        let variables;
        try {
          query = action.context.get(context_entries_1.KeysInitQuery.queryString) ?? (0, sparqlalgebrajs_1.toSparql)(action.operation, { sparqlStar: true });
          type = this.endpointFetcher.getQueryType(query);
          if (type === "UNKNOWN") {
            type = this.endpointFetcher.getUpdateTypes(query);
          }
        } catch {
        }
        if (!type || type === "UNKNOWN") {
          variables = sparqlalgebrajs_1.Util.inScopeVariables(action.operation);
          query = (0, sparqlalgebrajs_1.toSparql)(_ActorQueryOperationSparqlEndpoint.FACTORY.createProject(action.operation, variables));
          type = "SELECT";
        }
        const canContainUndefs = this.canOperationContainUndefs(action.operation);
        switch (type) {
          case "SELECT":
            if (!variables) {
              variables = sparqlalgebrajs_1.Util.inScopeVariables(action.operation);
            }
            return this.executeQuery(endpoint, query, false, variables, canContainUndefs);
          case "CONSTRUCT":
            return this.executeQuery(endpoint, query, true, void 0, false);
          case "ASK":
            return {
              type: "boolean",
              execute: () => this.endpointFetcher.fetchAsk(endpoint, query)
            };
          default:
            return {
              type: "void",
              execute: () => this.endpointFetcher.fetchUpdate(endpoint, query)
            };
        }
      }
      /**
       * Execute the given SELECT or CONSTRUCT query against the given endpoint.
       * @param endpoint A SPARQL endpoint URL.
       * @param query A SELECT or CONSTRUCT query.
       * @param quads If the query returns quads, i.e., if it is a CONSTRUCT query.
       * @param variables Variables for SELECT queries.
       * @param canContainUndefs If the operation can contain undefined binding values.
       */
      executeQuery(endpoint, query, quads, variables, canContainUndefs) {
        const inputStream = quads ? this.endpointFetcher.fetchTriples(endpoint, query) : this.endpointFetcher.fetchBindings(endpoint, query);
        const stream = (0, asynciterator_1.wrap)(inputStream, { autoStart: false }).map((rawData) => quads ? rawData : BF.bindings(Object.entries(rawData).map(([key, value]) => [DF.variable(key.slice(1)), value])));
        const resultStream = new LazyCardinalityIterator_1.LazyCardinalityIterator(stream);
        const metadata = _ActorQueryOperationSparqlEndpoint.cachifyMetadata(async () => ({
          state: new metadata_1.MetadataValidationState(),
          cardinality: { type: "exact", value: await resultStream.getCardinality() },
          canContainUndefs,
          variables
        }));
        if (quads) {
          return {
            type: "quads",
            quadStream: resultStream,
            metadata
          };
        }
        return {
          type: "bindings",
          bindingsStream: resultStream,
          metadata
        };
      }
      /**
       * Inspect the query to determine if the query could produce undefined bindings values.
       * @param operation A query operation.
       */
      canOperationContainUndefs(operation) {
        let canContainUndefs = false;
        sparqlalgebrajs_1.Util.recurseOperation(operation, {
          [sparqlalgebrajs_1.Algebra.types.LEFT_JOIN]() {
            canContainUndefs = true;
            return false;
          },
          [sparqlalgebrajs_1.Algebra.types.VALUES](op) {
            for (const bindings of op.bindings) {
              const bindingsKeys = Object.keys(bindings);
              if (!op.variables.every((variable) => bindingsKeys.includes(`?${variable.value}`))) {
                canContainUndefs = true;
              }
            }
            return false;
          }
        });
        return canContainUndefs;
      }
    };
    exports.ActorQueryOperationSparqlEndpoint = ActorQueryOperationSparqlEndpoint;
    ActorQueryOperationSparqlEndpoint.FACTORY = new sparqlalgebrajs_1.Factory();
  }
});

// node_modules/@comunica/actor-query-operation-sparql-endpoint/lib/index.js
var require_lib114 = __commonJS({
  "node_modules/@comunica/actor-query-operation-sparql-endpoint/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActorQueryOperationSparqlEndpoint(), exports);
  }
});

// node_modules/@comunica/query-sparql-rdfjs/engine-default.js
var require_engine_default = __commonJS({
  "node_modules/@comunica/query-sparql-rdfjs/engine-default.js"(exports, module) {
    var df_383_2 = new (require_lib8()).LoggerVoid();
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_init__2_0_0_components_ActorInit_jsonld_ActorInit_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-init/^2.0.0/components/ActorInit.jsonld#ActorInit_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_context_preprocess__2_0_0_components_ActorContextPreprocess_jsonld_ActorContextPreprocess_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-context-preprocess/^2.0.0/components/ActorContextPreprocess.jsonld#ActorContextPreprocess_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_hash_bindings__2_0_0_components_ActorHashBindings_jsonld_ActorHashBindings_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-hash-bindings/^2.0.0/components/ActorHashBindings.jsonld#ActorHashBindings_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__2_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-optimize-query-operation/^2.0.0/components/ActorOptimizeQueryOperation.jsonld#ActorOptimizeQueryOperation_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_parse__2_0_0_components_ActorQueryParse_jsonld_ActorQueryParse_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-parse/^2.0.0/components/ActorQueryParse.jsonld#ActorQueryParse_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-result-serialize/^2.0.0/components/ActorQueryResultSerialize.jsonld#ActorQueryResultSerialize_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_entries_sort__2_0_0_components_ActorRdfJoinEntriesSort_jsonld_ActorRdfJoinEntriesSort_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-join-entries-sort/^2.0.0/components/ActorRdfJoinEntriesSort.jsonld#ActorRdfJoinEntriesSort_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_selectivity__2_0_0_components_ActorRdfJoinSelectivity_jsonld_ActorRdfJoinSelectivity_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-join-selectivity/^2.0.0/components/ActorRdfJoinSelectivity.jsonld#ActorRdfJoinSelectivity_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_accumulate__2_0_0_components_ActorRdfMetadataAccumulate_jsonld_ActorRdfMetadataAccumulate_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-metadata-accumulate/^2.0.0/components/ActorRdfMetadataAccumulate.jsonld#ActorRdfMetadataAccumulate_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__2_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-serialize/^2.0.0/components/ActorRdfSerialize.jsonld#ActorRdfSerialize_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_update_quads__2_0_0_components_ActorRdfUpdateQuads_jsonld_ActorRdfUpdateQuads_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-update-quads/^2.0.0/components/ActorRdfUpdateQuads.jsonld#ActorRdfUpdateQuads_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus = new (require_lib7()).BusQueryOperation({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-query-operation/^2.0.0/components/ActorQueryOperation.jsonld#ActorQueryOperation_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-join/^2.0.0/components/ActorRdfJoin.jsonld#ActorRdfJoin_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_resolve_quad_pattern__2_0_0_components_ActorRdfResolveQuadPattern_jsonld_ActorRdfResolveQuadPattern_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-resolve-quad-pattern/^2.0.0/components/ActorRdfResolveQuadPattern.jsonld#ActorRdfResolveQuadPattern_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http_invalidate__2_0_0_components_ActorHttpInvalidate_jsonld_ActorHttpInvalidate_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-http-invalidate/^2.0.0/components/ActorHttpInvalidate.jsonld#ActorHttpInvalidate_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__2_0_0_components_ActorHttp_jsonld_ActorHttp_default_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-http/^2.0.0/components/ActorHttp.jsonld#ActorHttp_default_bus"
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__2_0_0_components_ActorHttp_jsonld_ActorHttp_fallback_bus = new (require_lib2()).Bus({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-http/^2.0.0/components/ActorHttp.jsonld#ActorHttp_fallback_bus"
    });
    var urn_comunica_default_context_preprocess_actors_source_to_destination = new (require_lib10()).ActorContextPreprocessSourceToDestination({
      "name": "urn:comunica:default:context-preprocess/actors#source-to-destination",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_context_preprocess__2_0_0_components_ActorContextPreprocess_jsonld_ActorContextPreprocess_default_bus
    });
    var urn_comunica_default_context_preprocess_mediators_main = new (require_lib11()).MediatorCombinePipeline({
      "name": "urn:comunica:default:context-preprocess/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_context_preprocess__2_0_0_components_ActorContextPreprocess_jsonld_ActorContextPreprocess_default_bus
    });
    var urn_comunica_default_hash_bindings_actors_sha1 = new (require_lib13()).ActorHashBindingsSha1({
      "name": "urn:comunica:default:hash-bindings/actors#sha1",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_hash_bindings__2_0_0_components_ActorHashBindings_jsonld_ActorHashBindings_default_bus
    });
    var urn_comunica_default_hash_bindings_mediators_main = new (require_lib14()).MediatorRace({
      "name": "urn:comunica:default:hash-bindings/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_hash_bindings__2_0_0_components_ActorHashBindings_jsonld_ActorHashBindings_default_bus
    });
    var urn_comunica_default_optimize_query_operation_actors_join_bgp = new (require_lib16()).ActorOptimizeQueryOperationJoinBgp({
      "name": "urn:comunica:default:optimize-query-operation/actors#join-bgp",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__2_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus
    });
    var urn_comunica_default_optimize_query_operation_actors_bgp_to_join = new (require_lib17()).ActorOptimizeQueryOperationBgpToJoin({
      "name": "urn:comunica:default:optimize-query-operation/actors#bgp-to-join",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__2_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus
    });
    var urn_comunica_default_optimize_query_operation_actors_join_connected = new (require_lib18()).ActorOptimizeQueryOperationJoinConnected({
      "name": "urn:comunica:default:optimize-query-operation/actors#join-connected",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__2_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus
    });
    var urn_comunica_default_optimize_query_operation_mediators_main = new (require_lib11()).MediatorCombinePipeline({
      "name": "urn:comunica:default:optimize-query-operation/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_optimize_query_operation__2_0_0_components_ActorOptimizeQueryOperation_jsonld_ActorOptimizeQueryOperation_default_bus
    });
    var urn_comunica_default_query_parse_actors_sparql = new (require_lib20()).ActorQueryParseSparql({
      "prefixes": { "dbpedia": "http://dbpedia.org/resource/", "dbpedia-owl": "http://dbpedia.org/ontology/", "dbpprop": "http://dbpedia.org/property/", "dc": "http://purl.org/dc/terms/", "dc11": "http://purl.org/dc/elements/1.1/", "dcterms": "http://purl.org/dc/terms/", "foaf": "http://xmlns.com/foaf/0.1/", "geo": "http://www.w3.org/2003/01/geo/wgs84_pos#", "owl": "http://www.w3.org/2002/07/owl#", "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#", "rdfs": "http://www.w3.org/2000/01/rdf-schema#", "schema": "http://schema.org/", "skos": "http://www.w3.org/2008/05/skos#", "xsd": "http://www.w3.org/2001/XMLSchema#" },
      "name": "urn:comunica:default:query-parse/actors#sparql",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_parse__2_0_0_components_ActorQueryParse_jsonld_ActorQueryParse_default_bus
    });
    var urn_comunica_default_query_parse_actors_graphql = new (require_lib21()).ActorQueryParseGraphql({
      "name": "urn:comunica:default:query-parse/actors#graphql",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_parse__2_0_0_components_ActorQueryParse_jsonld_ActorQueryParse_default_bus
    });
    var urn_comunica_default_query_parse_mediators_main = new (require_lib14()).MediatorRace({
      "name": "urn:comunica:default:query-parse/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_parse__2_0_0_components_ActorQueryParse_jsonld_ActorQueryParse_default_bus
    });
    var urn_comunica_default_query_result_serialize_actors_json = new (require_lib24()).ActorQueryResultSerializeJson({
      "mediaTypePriorities": { "application/json": 1 },
      "mediaTypeFormats": { "application/json": "https://comunica.linkeddatafragments.org/#results_JSON" },
      "name": "urn:comunica:default:query-result-serialize/actors#json",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    var urn_comunica_default_query_result_serialize_actors_simple = new (require_lib25()).ActorQueryResultSerializeSimple({
      "mediaTypePriorities": { "simple": 0.9 },
      "mediaTypeFormats": { "simple": "https://comunica.linkeddatafragments.org/#results_simple" },
      "name": "urn:comunica:default:query-result-serialize/actors#simple",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    var urn_comunica_default_query_result_serialize_actors_csv = new (require_lib26()).ActorQueryResultSerializeSparqlCsv({
      "mediaTypePriorities": { "text/csv": 0.75 },
      "mediaTypeFormats": { "text/csv": "http://www.w3.org/ns/formats/SPARQL_Results_CSV" },
      "name": "urn:comunica:default:query-result-serialize/actors#csv",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    var urn_comunica_default_query_result_serialize_actors_sparql_tsv = new (require_lib27()).ActorQueryResultSerializeSparqlTsv({
      "mediaTypePriorities": { "text/tab-separated-values": 0.75 },
      "mediaTypeFormats": { "text/tab-separated-values": "http://www.w3.org/ns/formats/SPARQL_Results_TSV" },
      "name": "urn:comunica:default:query-result-serialize/actors#sparql-tsv",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    var urn_comunica_default_query_result_serialize_actors_sparql_xml = new (require_lib28()).ActorQueryResultSerializeSparqlXml({
      "mediaTypePriorities": { "application/sparql-results+xml": 0.8 },
      "mediaTypeFormats": { "application/sparql-results+xml": "http://www.w3.org/ns/formats/SPARQL_Results_XML" },
      "name": "urn:comunica:default:query-result-serialize/actors#sparql-xml",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    var urn_comunica_default_query_result_serialize_actors_table = new (require_lib29()).ActorQueryResultSerializeTable({
      "columnWidth": 50,
      "mediaTypePriorities": { "table": 0.6 },
      "mediaTypeFormats": { "table": "https://comunica.linkeddatafragments.org/#results_table" },
      "name": "urn:comunica:default:query-result-serialize/actors#table",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    var urn_comunica_default_query_result_serialize_actors_tree = new (require_lib30()).ActorQueryResultSerializeTree({
      "mediaTypePriorities": { "tree": 0.5 },
      "mediaTypeFormats": { "tree": "https://comunica.linkeddatafragments.org/#results_tree" },
      "name": "urn:comunica:default:query-result-serialize/actors#tree",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    var urn_comunica_default_query_result_serialize_mediators_serialize = new (require_lib14()).MediatorRace({
      "name": "urn:comunica:default:query-result-serialize/mediators#serialize",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    var urn_comunica_default_query_result_serialize_mediators_mediaType = new (require_lib31()).MediatorCombineUnion({
      "field": "mediaTypes",
      "name": "urn:comunica:default:query-result-serialize/mediators#mediaType",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    var urn_comunica_default_query_result_serialize_mediators_mediaTypeFormat = new (require_lib31()).MediatorCombineUnion({
      "field": "mediaTypeFormats",
      "name": "urn:comunica:default:query-result-serialize/mediators#mediaTypeFormat",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    var urn_comunica_default_rdf_join_entries_sort_actors_cardinality = new (require_lib33()).ActorRdfJoinEntriesSortCardinality({
      "name": "urn:comunica:default:rdf-join-entries-sort/actors#cardinality",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_entries_sort__2_0_0_components_ActorRdfJoinEntriesSort_jsonld_ActorRdfJoinEntriesSort_default_bus
    });
    var urn_comunica_default_rdf_join_entries_sort_mediators_main = new (require_lib14()).MediatorRace({
      "name": "urn:comunica:default:rdf-join-entries-sort/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_entries_sort__2_0_0_components_ActorRdfJoinEntriesSort_jsonld_ActorRdfJoinEntriesSort_default_bus
    });
    var urn_comunica_default_rdf_join_selectivity_actors_variable_counting = new (require_lib35()).ActorRdfJoinSelectivityVariableCounting({
      "name": "urn:comunica:default:rdf-join-selectivity/actors#variable-counting",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_selectivity__2_0_0_components_ActorRdfJoinSelectivity_jsonld_ActorRdfJoinSelectivity_default_bus
    });
    var urn_comunica_default_rdf_join_selectivity_mediators_main = new (require_lib36()).MediatorNumber({
      "field": "accuracy",
      "type": "max",
      "ignoreErrors": true,
      "name": "urn:comunica:default:rdf-join-selectivity/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join_selectivity__2_0_0_components_ActorRdfJoinSelectivity_jsonld_ActorRdfJoinSelectivity_default_bus
    });
    var urn_comunica_default_rdf_metadata_accumulate_actors_cancontainundefs = new (require_lib38()).ActorRdfMetadataAccumulateCanContainUndefs({
      "name": "urn:comunica:default:rdf-metadata-accumulate/actors#cancontainundefs",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_accumulate__2_0_0_components_ActorRdfMetadataAccumulate_jsonld_ActorRdfMetadataAccumulate_default_bus
    });
    var urn_comunica_default_rdf_metadata_accumulate_actors_cardinality = new (require_lib39()).ActorRdfMetadataAccumulateCardinality({
      "name": "urn:comunica:default:rdf-metadata-accumulate/actors#cardinality",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_accumulate__2_0_0_components_ActorRdfMetadataAccumulate_jsonld_ActorRdfMetadataAccumulate_default_bus
    });
    var urn_comunica_default_rdf_metadata_accumulate_actors_pagesize = new (require_lib40()).ActorRdfMetadataAccumulatePageSize({
      "name": "urn:comunica:default:rdf-metadata-accumulate/actors#pagesize",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_accumulate__2_0_0_components_ActorRdfMetadataAccumulate_jsonld_ActorRdfMetadataAccumulate_default_bus
    });
    var urn_comunica_default_rdf_metadata_accumulate_actors_requesttime = new (require_lib41()).ActorRdfMetadataAccumulateRequestTime({
      "name": "urn:comunica:default:rdf-metadata-accumulate/actors#requesttime",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_accumulate__2_0_0_components_ActorRdfMetadataAccumulate_jsonld_ActorRdfMetadataAccumulate_default_bus
    });
    var urn_comunica_default_rdf_metadata_accumulate_mediators_main = new (require_lib31()).MediatorCombineUnion({
      "field": "metadata",
      "name": "urn:comunica:default:rdf-metadata-accumulate/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_metadata_accumulate__2_0_0_components_ActorRdfMetadataAccumulate_jsonld_ActorRdfMetadataAccumulate_default_bus
    });
    var urn_comunica_default_rdf_serialize_actors_n3 = new (require_lib44()).ActorRdfSerializeN3({
      "mediaTypePriorities": { "application/n-quads": 1, "application/n-triples": 0.8, "application/trig": 0.95, "text/n3": 0.35, "text/turtle": 0.6 },
      "mediaTypeFormats": { "application/n-quads": "http://www.w3.org/ns/formats/N-Quads", "application/n-triples": "http://www.w3.org/ns/formats/N-Triples", "application/trig": "http://www.w3.org/ns/formats/TriG", "text/n3": "http://www.w3.org/ns/formats/N3", "text/turtle": "http://www.w3.org/ns/formats/Turtle" },
      "name": "urn:comunica:default:rdf-serialize/actors#n3",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__2_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus
    });
    var urn_comunica_default_rdf_serialize_actors_jsonld = new (require_lib45()).ActorRdfSerializeJsonLd({
      "jsonStringifyIndentSpaces": 2,
      "mediaTypePriorities": { "application/ld+json": 1 },
      "mediaTypeFormats": { "application/ld+json": "http://www.w3.org/ns/formats/JSON-LD" },
      "priorityScale": 0.9,
      "name": "urn:comunica:default:rdf-serialize/actors#jsonld",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__2_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus
    });
    var urn_comunica_default_rdf_serialize_actors_shaclc = new (require_lib46()).ActorRdfSerializeShaclc({
      "mediaTypePriorities": { "text/shaclc": 1, "text/shaclc-ext": 0.5 },
      "mediaTypeFormats": { "text/shaclc": "http://www.w3.org/ns/formats/Shaclc", "text/shaclc-ext": "http://www.w3.org/ns/formats/ShaclcExtended" },
      "priorityScale": 0.1,
      "name": "urn:comunica:default:rdf-serialize/actors#shaclc",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__2_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus
    });
    var urn_comunica_default_rdf_serialize_mediators_serialize = new (require_lib14()).MediatorRace({
      "name": "urn:comunica:default:rdf-serialize/mediators#serialize",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__2_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus
    });
    var urn_comunica_default_rdf_serialize_mediators_mediaType = new (require_lib31()).MediatorCombineUnion({
      "field": "mediaTypes",
      "name": "urn:comunica:default:rdf-serialize/mediators#mediaType",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__2_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus
    });
    var urn_comunica_default_rdf_serialize_mediators_mediaTypeFormat = new (require_lib31()).MediatorCombineUnion({
      "field": "mediaTypeFormats",
      "name": "urn:comunica:default:rdf-serialize/mediators#mediaTypeFormat",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_serialize__2_0_0_components_ActorRdfSerialize_jsonld_ActorRdfSerialize_default_bus
    });
    var urn_comunica_default_rdf_update_quads_actors_rdfjs_store = new (require_lib53()).ActorRdfUpdateQuadsRdfJsStore({
      "name": "urn:comunica:default:rdf-update-quads/actors#rdfjs-store",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_update_quads__2_0_0_components_ActorRdfUpdateQuads_jsonld_ActorRdfUpdateQuads_default_bus
    });
    var urn_comunica_default_rdf_update_quads_mediators_main = new (require_lib14()).MediatorRace({
      "name": "urn:comunica:default:rdf-update-quads/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_update_quads__2_0_0_components_ActorRdfUpdateQuads_jsonld_ActorRdfUpdateQuads_default_bus
    });
    var urn_comunica_default_query_operation_actors_values = new (require_lib54()).ActorQueryOperationValues({
      "name": "urn:comunica:default:query-operation/actors#values",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_mediators_main = new (require_lib36()).MediatorNumber({
      "field": "httpRequests",
      "type": "min",
      "ignoreErrors": true,
      "name": "urn:comunica:default:query-operation/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_rdf_join_mediators_main = new (require_lib55()).MediatorJoinCoefficientsFixed({
      "cpuWeight": 1,
      "memoryWeight": 1,
      "timeWeight": 10,
      "ioWeight": 100,
      "name": "urn:comunica:default:rdf-join/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_rdf_resolve_quad_pattern_actors_rdfjs_source = new (require_lib56()).ActorRdfResolveQuadPatternRdfJsSource({
      "name": "urn:comunica:default:rdf-resolve-quad-pattern/actors#rdfjs-source",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_resolve_quad_pattern__2_0_0_components_ActorRdfResolveQuadPattern_jsonld_ActorRdfResolveQuadPattern_default_bus
    });
    var urn_comunica_default_rdf_resolve_quad_pattern_mediators_main = new (require_lib14()).MediatorRace({
      "name": "urn:comunica:default:rdf-resolve-quad-pattern/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_resolve_quad_pattern__2_0_0_components_ActorRdfResolveQuadPattern_jsonld_ActorRdfResolveQuadPattern_default_bus
    });
    var urn_comunica_default_http_invalidate_mediators_main = new (require_lib57()).MediatorAll({
      "name": "urn:comunica:default:http-invalidate/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http_invalidate__2_0_0_components_ActorHttpInvalidate_jsonld_ActorHttpInvalidate_default_bus
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_sparql_json__2_0_0_components_ActionObserverHttp_jsonld_IActionObserverHttpArgs_default_invalidator = new (require_lib58()).ActorHttpInvalidateListenable({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-result-serialize-sparql-json/^2.0.0/components/ActionObserverHttp.jsonld#IActionObserverHttpArgs_default_invalidator",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http_invalidate__2_0_0_components_ActorHttpInvalidate_jsonld_ActorHttpInvalidate_default_bus
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_stats__2_0_0_components_ActionObserverHttp_jsonld_IActionObserverHttpArgs_default_invalidator = new (require_lib58()).ActorHttpInvalidateListenable({
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-result-serialize-stats/^2.0.0/components/ActionObserverHttp.jsonld#IActionObserverHttpArgs_default_invalidator",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http_invalidate__2_0_0_components_ActorHttpInvalidate_jsonld_ActorHttpInvalidate_default_bus
    });
    var urn_comunica_default_http_mediators_main = new (require_lib36()).MediatorNumber({
      "field": "time",
      "type": "min",
      "ignoreErrors": true,
      "name": "urn:comunica:default:http/mediators#main",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__2_0_0_components_ActorHttp_jsonld_ActorHttp_fallback_bus
    });
    var urn_comunica_default_rdf_join_actors_inner_none = new (require_lib60()).ActorRdfJoinNone({
      "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
      "name": "urn:comunica:default:rdf-join/actors#inner-none",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_rdf_join_actors_inner_single = new (require_lib61()).ActorRdfJoinSingle({
      "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
      "name": "urn:comunica:default:rdf-join/actors#inner-single",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_rdf_join_actors_inner_multi_empty = new (require_lib62()).ActorRdfJoinMultiEmpty({
      "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
      "name": "urn:comunica:default:rdf-join/actors#inner-multi-empty",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_rdf_join_actors_inner_hash = new (require_lib63()).ActorRdfJoinHash({
      "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
      "name": "urn:comunica:default:rdf-join/actors#inner-hash",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_rdf_join_actors_inner_symmetric_hash = new (require_lib64()).ActorRdfJoinSymmetricHash({
      "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
      "name": "urn:comunica:default:rdf-join/actors#inner-symmetric-hash",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_rdf_join_actors_inner_nested_loop = new (require_lib65()).ActorRdfJoinNestedLoop({
      "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
      "name": "urn:comunica:default:rdf-join/actors#inner-nested-loop",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_rdf_join_actors_minus_hash = new (require_lib66()).ActorRdfJoinMinusHash({
      "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
      "name": "urn:comunica:default:rdf-join/actors#minus-hash",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_rdf_join_actors_minus_hash_undef = new (require_lib67()).ActorRdfJoinMinusHashUndef({
      "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
      "name": "urn:comunica:default:rdf-join/actors#minus-hash-undef",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_rdf_join_actors_optional_nested_loop = new (require_lib68()).ActorRdfJoinOptionalNestedLoop({
      "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
      "name": "urn:comunica:default:rdf-join/actors#optional-nested-loop",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_query_result_serialize_actors_rdf = new (require_lib69()).ActorQueryResultSerializeRdf({
      "mediatorRdfSerialize": urn_comunica_default_rdf_serialize_mediators_serialize,
      "mediatorMediaTypeCombiner": urn_comunica_default_rdf_serialize_mediators_mediaType,
      "mediatorMediaTypeFormatCombiner": urn_comunica_default_rdf_serialize_mediators_mediaTypeFormat,
      "name": "urn:comunica:default:query-result-serialize/actors#rdf",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    var urn_comunica_default_query_operation_actors_ask = new (require_lib70()).ActorQueryOperationAsk({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#ask",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_describe = new (require_lib72()).ActorQueryOperationDescribeSubject({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#describe",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_construct = new (require_lib73()).ActorQueryOperationConstruct({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#construct",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_bgp = new (require_lib74()).ActorQueryOperationBgpJoin({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#bgp",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_distinct = new (require_lib75()).ActorQueryOperationDistinctHash({
      "mediatorHashBindings": urn_comunica_default_hash_bindings_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#distinct",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_filter = new (require_lib77()).ActorQueryOperationFilterSparqlee({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#filter",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_extend = new (require_lib78()).ActorQueryOperationExtend({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#extend",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_from = new (require_lib79()).ActorQueryOperationFromQuad({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#from",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_group = new (require_lib80()).ActorQueryOperationGroup({
      "mediatorHashBindings": urn_comunica_default_hash_bindings_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#group",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_nop = new (require_lib81()).ActorQueryOperationNop({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#nop",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_orderby = new (require_lib82()).ActorQueryOperationOrderBySparqlee({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#orderby",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_project = new (require_lib83()).ActorQueryOperationProject({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#project",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_reduced = new (require_lib84()).ActorQueryOperationReducedHash({
      "mediatorHashBindings": urn_comunica_default_hash_bindings_mediators_main,
      "cacheSize": 100,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#reduced",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_slice = new (require_lib85()).ActorQueryOperationSlice({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#slice",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_service = new (require_lib86()).ActorQueryOperationService({
      "forceSparqlEndpoint": false,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#service",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_union = new (require_lib71()).ActorQueryOperationUnion({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#union",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_path_alt = new (require_lib88()).ActorQueryOperationPathAlt({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#path-alt",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_path_inv = new (require_lib89()).ActorQueryOperationPathInv({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#path-inv",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_path_nps = new (require_lib90()).ActorQueryOperationPathNps({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#path-nps",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_path_link = new (require_lib91()).ActorQueryOperationPathLink({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#path-link",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_path_one_or_more = new (require_lib92()).ActorQueryOperationPathOneOrMore({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#path-one-or-more",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_path_zero_or_more = new (require_lib93()).ActorQueryOperationPathZeroOrMore({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#path-zero-or-more",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_path_zero_or_one = new (require_lib94()).ActorQueryOperationPathZeroOrOne({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#path-zero-or-one",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_update_add = new (require_lib95()).ActorQueryOperationAddRewrite({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#update-add",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_update_copy = new (require_lib96()).ActorQueryOperationCopyRewrite({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#update-copy",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_update_clear = new (require_lib97()).ActorQueryOperationClear({
      "mediatorUpdateQuads": urn_comunica_default_rdf_update_quads_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#update-clear",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_update_composite = new (require_lib98()).ActorQueryOperationUpdateCompositeUpdate({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#update-composite",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_update_create = new (require_lib99()).ActorQueryOperationCreate({
      "mediatorUpdateQuads": urn_comunica_default_rdf_update_quads_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#update-create",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_update_drop = new (require_lib100()).ActorQueryOperationDrop({
      "mediatorUpdateQuads": urn_comunica_default_rdf_update_quads_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#update-drop",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_update_delete_insert = new (require_lib101()).ActorQueryOperationUpdateDeleteInsert({
      "mediatorUpdateQuads": urn_comunica_default_rdf_update_quads_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#update-delete-insert",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_update_load = new (require_lib102()).ActorQueryOperationLoad({
      "mediatorUpdateQuads": urn_comunica_default_rdf_update_quads_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#update-load",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_update_move = new (require_lib103()).ActorQueryOperationMoveRewrite({
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#update-move",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_rdf_join_actors_inner_multi_bind = new (require_lib104()).ActorRdfJoinMultiBind({
      "bindOrder": "depth-first",
      "selectivityModifier": 1e-4,
      "mediatorJoinEntriesSort": urn_comunica_default_rdf_join_entries_sort_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
      "name": "urn:comunica:default:rdf-join/actors#inner-multi-bind",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_rdf_join_actors_optional_bind = new (require_lib105()).ActorRdfJoinOptionalBind({
      "bindOrder": "depth-first",
      "selectivityModifier": 1e-4,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
      "name": "urn:comunica:default:rdf-join/actors#optional-bind",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_query_operation_actors_leftjoin = new (require_lib106()).ActorQueryOperationLeftJoin({
      "mediatorJoin": urn_comunica_default_rdf_join_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#leftjoin",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_join = new (require_lib107()).ActorQueryOperationJoin({
      "mediatorJoin": urn_comunica_default_rdf_join_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#join",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_minus = new (require_lib108()).ActorQueryOperationMinus({
      "mediatorJoin": urn_comunica_default_rdf_join_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#minus",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_operation_actors_path_seq = new (require_lib109()).ActorQueryOperationPathSeq({
      "mediatorJoin": urn_comunica_default_rdf_join_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "name": "urn:comunica:default:query-operation/actors#path-seq",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_rdf_join_actors_inner_multi_smallest = new (require_lib110()).ActorRdfJoinMultiSmallest({
      "mediatorJoinEntriesSort": urn_comunica_default_rdf_join_entries_sort_mediators_main,
      "mediatorJoin": urn_comunica_default_rdf_join_mediators_main,
      "mediatorJoinSelectivity": urn_comunica_default_rdf_join_selectivity_mediators_main,
      "name": "urn:comunica:default:rdf-join/actors#inner-multi-smallest",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_join__2_0_0_components_ActorRdfJoin_jsonld_ActorRdfJoin_default_bus
    });
    var urn_comunica_default_query_operation_actors_quadpattern = new (require_lib111()).ActorQueryOperationQuadpattern({
      "mediatorResolveQuadPattern": urn_comunica_default_rdf_resolve_quad_pattern_mediators_main,
      "unionDefaultGraph": false,
      "name": "urn:comunica:default:query-operation/actors#quadpattern",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_rdf_resolve_quad_pattern_actors_federated = new (require_lib49()).ActorRdfResolveQuadPatternFederated({
      "mediatorResolveQuadPattern": urn_comunica_default_rdf_resolve_quad_pattern_mediators_main,
      "mediatorRdfMetadataAccumulate": urn_comunica_default_rdf_metadata_accumulate_mediators_main,
      "skipEmptyPatterns": false,
      "name": "urn:comunica:default:rdf-resolve-quad-pattern/actors#federated",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_rdf_resolve_quad_pattern__2_0_0_components_ActorRdfResolveQuadPattern_jsonld_ActorRdfResolveQuadPattern_default_bus
    });
    var urn_comunica_default_init_actors_query = new (require_index_browser()).ActorInitQuery({
      "mediatorOptimizeQueryOperation": urn_comunica_default_optimize_query_operation_mediators_main,
      "mediatorQueryOperation": urn_comunica_default_query_operation_mediators_main,
      "mediatorQueryParse": urn_comunica_default_query_parse_mediators_main,
      "mediatorQueryResultSerialize": urn_comunica_default_query_result_serialize_mediators_serialize,
      "mediatorQueryResultSerializeMediaTypeCombiner": urn_comunica_default_query_result_serialize_mediators_mediaType,
      "mediatorQueryResultSerializeMediaTypeFormatCombiner": urn_comunica_default_query_result_serialize_mediators_mediaTypeFormat,
      "mediatorContextPreprocess": urn_comunica_default_context_preprocess_mediators_main,
      "mediatorHttpInvalidate": urn_comunica_default_http_invalidate_mediators_main,
      "logger": df_383_2,
      "defaultQueryInputFormat": "sparql",
      "allowNoSources": false,
      "contextKeyShortcuts": { "baseIRI": "@comunica/actor-init-query:baseIRI", "datetime": "@comunica/actor-http-memento:datetime", "destination": "@comunica/bus-rdf-update-quads:destination", "explain": "@comunica/actor-init-query:explain", "extensionFunctionCreator": "@comunica/actor-init-query:extensionFunctionCreator", "extensionFunctions": "@comunica/actor-init-query:extensionFunctions", "fetch": "@comunica/bus-http:fetch", "functionArgumentsCache": "@comunica/actor-init-query:functionArgumentsCache", "httpAuth": "@comunica/bus-http:auth", "httpBodyTimeout": "@comunica/bus-http:http-body-timeout", "httpIncludeCredentials": "@comunica/bus-http:include-credentials", "httpProxyHandler": "@comunica/actor-http-proxy:httpProxyHandler", "httpRetryCount": "@comunica/bus-http:http-retry-count", "httpRetryDelay": "@comunica/bus-http:http-retry-delay", "httpRetryOnServerError": "@comunica/bus-http:http-retry-on-server-error", "httpTimeout": "@comunica/bus-http:http-timeout", "initialBindings": "@comunica/actor-init-query:initialBindings", "lenient": "@comunica/actor-init-query:lenient", "log": "@comunica/core:log", "queryFormat": "@comunica/actor-init-query:queryFormat", "queryTimestamp": "@comunica/actor-init-query:queryTimestamp", "readOnly": "@comunica/bus-query-operation:readOnly", "recoverBrokenLinks": "@comunica/bus-http-wayback:recover-broken-links", "source": "@comunica/bus-rdf-resolve-quad-pattern:source", "sources": "@comunica/bus-rdf-resolve-quad-pattern:sources", "unionDefaultGraph": "@comunica/bus-query-operation:unionDefaultGraph" },
      "name": "urn:comunica:default:init/actors#query",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_init__2_0_0_components_ActorInit_jsonld_ActorInit_default_bus
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_sparql_json__2_0_0_components_ActorQueryResultSerializeSparqlJson_jsonld_ActorQueryResultSerializeSparqlJson_default_observer = new (require_lib112()).ActionObserverHttp({
      "httpInvalidator": https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_sparql_json__2_0_0_components_ActionObserverHttp_jsonld_IActionObserverHttpArgs_default_invalidator,
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-result-serialize-sparql-json/^2.0.0/components/ActorQueryResultSerializeSparqlJson.jsonld#ActorQueryResultSerializeSparqlJson_default_observer",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__2_0_0_components_ActorHttp_jsonld_ActorHttp_default_bus
    });
    var https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_stats__2_0_0_components_ActorQueryResultSerializeStats_jsonld_ActorQueryResultSerializeStats_default_observer = new (require_lib113()).ActionObserverHttp({
      "httpInvalidator": https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_stats__2_0_0_components_ActionObserverHttp_jsonld_IActionObserverHttpArgs_default_invalidator,
      "name": "https://linkedsoftwaredependencies.org/bundles/npm/@comunica/actor-query-result-serialize-stats/^2.0.0/components/ActorQueryResultSerializeStats.jsonld#ActorQueryResultSerializeStats_default_observer",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_http__2_0_0_components_ActorHttp_jsonld_ActorHttp_default_bus
    });
    var urn_comunica_default_query_operation_actors_sparql_endpoint = new (require_lib114()).ActorQueryOperationSparqlEndpoint({
      "mediatorHttp": urn_comunica_default_http_mediators_main,
      "checkUrlSuffixSparql": true,
      "checkUrlSuffixUpdate": true,
      "forceHttpGet": false,
      "name": "urn:comunica:default:query-operation/actors#sparql-endpoint",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_operation__2_0_0_components_ActorQueryOperation_jsonld_ActorQueryOperation_default_bus
    });
    var urn_comunica_default_query_result_serialize_actors_sparql_json = new (require_lib112()).ActorQueryResultSerializeSparqlJson({
      "emitMetadata": true,
      "httpObserver": https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_sparql_json__2_0_0_components_ActorQueryResultSerializeSparqlJson_jsonld_ActorQueryResultSerializeSparqlJson_default_observer,
      "mediaTypePriorities": { "application/sparql-results+json": 0.8 },
      "mediaTypeFormats": { "application/sparql-results+json": "http://www.w3.org/ns/formats/SPARQL_Results_JSON" },
      "name": "urn:comunica:default:query-result-serialize/actors#sparql-json",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    var urn_comunica_default_query_result_serialize_actors_stats = new (require_lib113()).ActorQueryResultSerializeStats({
      "httpObserver": https___linkedsoftwaredependencies_org_bundles_npm__comunica_actor_query_result_serialize_stats__2_0_0_components_ActorQueryResultSerializeStats_jsonld_ActorQueryResultSerializeStats_default_observer,
      "mediaTypePriorities": { "stats": 0.5 },
      "mediaTypeFormats": { "stats": "https://comunica.linkeddatafragments.org/#results_stats" },
      "name": "urn:comunica:default:query-result-serialize/actors#stats",
      "bus": https___linkedsoftwaredependencies_org_bundles_npm__comunica_bus_query_result_serialize__2_0_0_components_ActorQueryResultSerialize_jsonld_ActorQueryResultSerialize_default_bus
    });
    module.exports = urn_comunica_default_init_actors_query;
  }
});

// node_modules/@comunica/query-sparql-rdfjs/lib/QueryEngine.js
var require_QueryEngine = __commonJS({
  "node_modules/@comunica/query-sparql-rdfjs/lib/QueryEngine.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryEngine = void 0;
    var actor_init_query_1 = require_index_browser();
    var engineDefault = require_engine_default();
    var QueryEngine2 = class extends actor_init_query_1.QueryEngineBase {
      constructor(engine = engineDefault) {
        super(engine);
      }
    };
    exports.QueryEngine = QueryEngine2;
  }
});

// node_modules/@comunica/query-sparql-rdfjs/lib/index-browser.js
var require_index_browser2 = __commonJS({
  "node_modules/@comunica/query-sparql-rdfjs/lib/index-browser.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_QueryEngine(), exports);
  }
});

// node_modules/lodash/_trimmedEndIndex.js
var require_trimmedEndIndex = __commonJS({
  "node_modules/lodash/_trimmedEndIndex.js"(exports, module) {
    var reWhitespace = /\s/;
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    module.exports = trimmedEndIndex;
  }
});

// node_modules/lodash/_baseTrim.js
var require_baseTrim = __commonJS({
  "node_modules/lodash/_baseTrim.js"(exports, module) {
    var trimmedEndIndex = require_trimmedEndIndex();
    var reTrimStart = /^\s+/;
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    module.exports = baseTrim;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike2 = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike2();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/toNumber.js
var require_toNumber = __commonJS({
  "node_modules/lodash/toNumber.js"(exports, module) {
    var baseTrim = require_baseTrim();
    var isObject = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = toNumber;
  }
});

// node_modules/lodash/toFinite.js
var require_toFinite = __commonJS({
  "node_modules/lodash/toFinite.js"(exports, module) {
    var toNumber = require_toNumber();
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    module.exports = toFinite;
  }
});

// node_modules/lodash/toInteger.js
var require_toInteger = __commonJS({
  "node_modules/lodash/toInteger.js"(exports, module) {
    var toFinite = require_toFinite();
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    module.exports = toInteger;
  }
});

// node_modules/lodash/before.js
var require_before = __commonJS({
  "node_modules/lodash/before.js"(exports, module) {
    var toInteger = require_toInteger();
    var FUNC_ERROR_TEXT = "Expected a function";
    function before(n, func) {
      var result;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = void 0;
        }
        return result;
      };
    }
    module.exports = before;
  }
});

// node_modules/lodash/once.js
var require_once = __commonJS({
  "node_modules/lodash/once.js"(exports, module) {
    var before = require_before();
    function once2(func) {
      return before(2, func);
    }
    module.exports = once2;
  }
});

// node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIdentifier.js
var require_ContainerHandlerIdentifier = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIdentifier.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContainerHandlerIdentifier = void 0;
    var ContainerHandlerIdentifier = class {
      canCombineWithGraph() {
        return true;
      }
      async handle(containers, parsingContext, util, keys, value, depth) {
        let id;
        if (parsingContext.emittedStack[depth + 1] && parsingContext.idStack[depth + 1]) {
          id = parsingContext.idStack[depth + 1][0];
        } else {
          const keyUnaliased = await util.getContainerKey(keys[depth], keys, depth);
          const maybeId = keyUnaliased !== null ? await util.resourceToTerm(await parsingContext.getContext(keys), keys[depth]) : util.dataFactory.blankNode();
          if (!maybeId) {
            parsingContext.emittedStack[depth] = false;
            return;
          }
          id = maybeId;
          parsingContext.idStack[depth + 1] = [id];
        }
        let ids = parsingContext.idStack[depth];
        if (!ids) {
          ids = parsingContext.idStack[depth] = [];
        }
        if (!ids.some((term) => term.equals(id))) {
          ids.push(id);
        }
        if (!await parsingContext.handlePendingContainerFlushBuffers()) {
          parsingContext.emittedStack[depth] = false;
        }
      }
    };
    exports.ContainerHandlerIdentifier = ContainerHandlerIdentifier;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerPredicate.js
var require_EntryHandlerPredicate = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerPredicate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerPredicate = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var Util_1 = require_Util4();
    var EntryHandlerPredicate = class _EntryHandlerPredicate {
      /**
       * Handle the given predicate-object by either emitting it,
       * or by placing it in the appropriate stack for later emission when no @graph and/or @id has been defined.
       * @param {ParsingContext} parsingContext A parsing context.
       * @param {Util} util A utility instance.
       * @param {any[]} keys A stack of keys.
       * @param {number} depth The current depth.
       * @param {Term} predicate The predicate.
       * @param {Term} object The object.
       * @param {boolean} reverse If the property is reversed.
       * @param {boolean} isEmbedded If the property exists in an embedded node as direct child.
       * @param {boolean} isAnnotation If the property exists in an annotation object.
       * @return {Promise<void>} A promise resolving when handling is done.
       */
      static async handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse, isEmbedded, isAnnotation) {
        const depthProperties = await util.getPropertiesDepth(keys, depth);
        const depthOffsetGraph = await util.getDepthOffsetGraph(depth, keys);
        const depthPropertiesGraph = depth - depthOffsetGraph;
        const subjects = parsingContext.idStack[depthProperties];
        if (subjects && !isAnnotation) {
          for (const subject of subjects) {
            const atGraph = depthOffsetGraph >= 0;
            if (atGraph) {
              const graphs = parsingContext.idStack[depthPropertiesGraph - 1];
              if (graphs) {
                for (const graph of graphs) {
                  util.emitQuadChecked(depth, subject, predicate, object, graph, reverse, isEmbedded);
                }
              } else {
                if (reverse) {
                  util.validateReverseSubject(object);
                  parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1).push({ subject: object, predicate, object: subject, isEmbedded });
                } else {
                  parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1).push({ subject, predicate, object, isEmbedded });
                }
              }
            } else {
              const graph = await util.getGraphContainerValue(keys, depthProperties);
              util.emitQuadChecked(depth, subject, predicate, object, graph, reverse, isEmbedded);
            }
          }
        } else {
          if (reverse) {
            util.validateReverseSubject(object);
          }
          if (isAnnotation) {
            if (parsingContext.rdfstar) {
              if (parsingContext.idStack[depth]) {
                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @id inside an annotation: ${parsingContext.idStack[depth][0].value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));
              }
              for (let i2 = 0; i2 < depth; i2++) {
                if (await util.unaliasKeyword(keys[i2], keys, i2) === "@id") {
                  parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal annotation inside an embedded node`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));
                }
              }
              const annotationsBuffer = parsingContext.getAnnotationsBufferSafe(depthProperties);
              const newAnnotation = { predicate, object, reverse, nestedAnnotations: [], depth: depthProperties };
              annotationsBuffer.push(newAnnotation);
              for (let i2 = annotationsBuffer.length - 2; i2 >= 0; i2--) {
                const existingAnnotation = annotationsBuffer[i2];
                if (existingAnnotation.depth > depthProperties) {
                  newAnnotation.nestedAnnotations.push(existingAnnotation);
                  annotationsBuffer.splice(i2, 1);
                }
              }
            }
          } else {
            parsingContext.getUnidentifiedValueBufferSafe(depthProperties).push({ predicate, object, reverse, isEmbedded });
          }
        }
      }
      isPropertyHandler() {
        return true;
      }
      isStackProcessor() {
        return true;
      }
      async validate(parsingContext, util, keys, depth, inProperty) {
        const key = keys[depth];
        if (key) {
          const context = await parsingContext.getContext(keys);
          if (!parsingContext.jsonLiteralStack[depth] && await util.predicateToTerm(context, keys[depth])) {
            if (Util_1.Util.getContextValueType(context, key) === "@json") {
              parsingContext.jsonLiteralStack[depth + 1] = true;
            }
            return true;
          }
        }
        return false;
      }
      async test(parsingContext, util, key, keys, depth) {
        return keys[depth];
      }
      async handle(parsingContext, util, key, keys, value, depth, testResult) {
        const keyOriginal = keys[depth];
        const context = await parsingContext.getContext(keys);
        const predicate = await util.predicateToTerm(context, key);
        if (predicate) {
          const objects = await util.valueToTerm(context, key, value, depth, keys);
          if (objects.length) {
            for (let object of objects) {
              let parentKey = await util.unaliasKeywordParent(keys, depth);
              const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, parentKey);
              let parentDepthOffset = 0;
              while (parentKey === "@reverse" || typeof parentKey === "number") {
                if (typeof parentKey === "number") {
                  parentDepthOffset++;
                } else {
                  depth--;
                }
                parentKey = await util.unaliasKeywordParent(keys, depth - parentDepthOffset);
              }
              const isEmbedded = Util_1.Util.isPropertyInEmbeddedNode(parentKey);
              util.validateReverseInEmbeddedNode(key, reverse, isEmbedded);
              const isAnnotation = Util_1.Util.isPropertyInAnnotationObject(parentKey);
              if (value) {
                const listValueContainer = "@list" in Util_1.Util.getContextValueContainer(context, key);
                if (listValueContainer || value["@list"]) {
                  if ((listValueContainer && !Array.isArray(value) && !value["@list"] || value["@list"] && !Array.isArray(value["@list"])) && object !== util.rdfNil) {
                    const listPointer = util.dataFactory.blankNode();
                    parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfRest, util.rdfNil, util.getDefaultGraph()));
                    parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfFirst, object, util.getDefaultGraph()));
                    object = listPointer;
                  }
                  if (reverse && !parsingContext.allowSubjectList) {
                    throw new jsonld_context_parser_1.ErrorCoded(`Found illegal list value in subject position at ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);
                  }
                }
              }
              await _EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse, isEmbedded, isAnnotation);
            }
          }
        }
      }
    };
    exports.EntryHandlerPredicate = EntryHandlerPredicate;
  }
});

// node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIndex.js
var require_ContainerHandlerIndex = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIndex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContainerHandlerIndex = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var EntryHandlerPredicate_1 = require_EntryHandlerPredicate();
    var Util_1 = require_Util4();
    var ContainerHandlerIndex = class {
      canCombineWithGraph() {
        return true;
      }
      async handle(containers, parsingContext, util, keys, value, depth) {
        if (!Array.isArray(value)) {
          const graphContainer = "@graph" in containers;
          const context = await parsingContext.getContext(keys);
          const indexKey = keys[depth - 1];
          const indexPropertyRaw = Util_1.Util.getContextValueIndex(context, indexKey);
          if (indexPropertyRaw) {
            if (jsonld_context_parser_1.Util.isPotentialKeyword(indexPropertyRaw)) {
              throw new jsonld_context_parser_1.ErrorCoded(`Keywords can not be used as @index value, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
            if (typeof indexPropertyRaw !== "string") {
              throw new jsonld_context_parser_1.ErrorCoded(`@index values must be strings, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);
            }
            if (typeof value !== "object") {
              if (Util_1.Util.getContextValueType(context, indexKey) !== "@id") {
                throw new jsonld_context_parser_1.ErrorCoded(`Property-based index containers require nodes as values or strings with @type: @id, but got: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);
              }
              const id = util.resourceToTerm(context, value);
              if (id) {
                parsingContext.idStack[depth + 1] = [id];
              }
            }
            const indexProperty = util.createVocabOrBaseTerm(context, indexPropertyRaw);
            if (indexProperty) {
              const indexValues = await util.valueToTerm(context, indexPropertyRaw, await util.getContainerKey(keys[depth], keys, depth), depth, keys);
              if (graphContainer) {
                const graphId = await util.getGraphContainerValue(keys, depth + 1);
                for (const indexValue of indexValues) {
                  parsingContext.emitQuad(depth, util.dataFactory.quad(graphId, indexProperty, indexValue, util.getDefaultGraph()));
                }
              } else {
                for (const indexValue of indexValues) {
                  await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, indexProperty, indexValue, false, false, false);
                }
              }
            }
          }
          const depthOffset = graphContainer ? 2 : 1;
          await parsingContext.newOnValueJob(keys.slice(0, keys.length - depthOffset), value, depth - depthOffset, true);
          await parsingContext.handlePendingContainerFlushBuffers();
        }
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.ContainerHandlerIndex = ContainerHandlerIndex;
  }
});

// node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerLanguage.js
var require_ContainerHandlerLanguage = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerLanguage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContainerHandlerLanguage = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var ContainerHandlerLanguage = class {
      canCombineWithGraph() {
        return false;
      }
      async handle(containers, parsingContext, util, keys, value, depth) {
        const language = await util.getContainerKey(keys[depth], keys, depth);
        if (Array.isArray(value)) {
          value = value.map((subValue) => ({ "@value": subValue, "@language": language }));
        } else {
          if (typeof value !== "string") {
            throw new jsonld_context_parser_1.ErrorCoded(`Got invalid language map value, got '${JSON.stringify(value)}', but expected string`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_MAP_VALUE);
          }
          value = { "@value": value, "@language": language };
        }
        await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.ContainerHandlerLanguage = ContainerHandlerLanguage;
  }
});

// node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerType.js
var require_ContainerHandlerType = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContainerHandlerType = void 0;
    var EntryHandlerPredicate_1 = require_EntryHandlerPredicate();
    var Util_1 = require_Util4();
    var ContainerHandlerType = class {
      canCombineWithGraph() {
        return false;
      }
      async handle(containers, parsingContext, util, keys, value, depth) {
        if (!Array.isArray(value)) {
          if (typeof value === "string") {
            const context = await parsingContext.getContext(keys);
            const containerTypeType = Util_1.Util.getContextValueType(context, keys[depth - 1]);
            const id = containerTypeType === "@vocab" ? await util.createVocabOrBaseTerm(context, value) : await util.resourceToTerm(context, value);
            if (id) {
              const subValue = { "@id": id.termType === "NamedNode" ? id.value : value };
              await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), subValue, depth - 1, true);
              parsingContext.idStack[depth + 1] = [id];
            }
          } else {
            const entryHasIdentifier = !!parsingContext.idStack[depth + 1];
            if (!entryHasIdentifier) {
              delete parsingContext.idStack[depth];
            }
            await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);
            if (!entryHasIdentifier) {
              parsingContext.idStack[depth + 1] = parsingContext.idStack[depth];
            }
          }
          const keyOriginal = await util.getContainerKey(keys[depth], keys, depth);
          const type = keyOriginal !== null ? util.createVocabOrBaseTerm(await parsingContext.getContext(keys), keyOriginal) : null;
          if (type) {
            await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, util.rdfType, type, false, false, false);
          }
          await parsingContext.handlePendingContainerFlushBuffers();
        }
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.ContainerHandlerType = ContainerHandlerType;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerContainer.js
var require_EntryHandlerContainer = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerContainer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerContainer = void 0;
    var ContainerHandlerIdentifier_1 = require_ContainerHandlerIdentifier();
    var ContainerHandlerIndex_1 = require_ContainerHandlerIndex();
    var ContainerHandlerLanguage_1 = require_ContainerHandlerLanguage();
    var ContainerHandlerType_1 = require_ContainerHandlerType();
    var Util_1 = require_Util4();
    var EntryHandlerContainer = class _EntryHandlerContainer {
      /**
       * Check fit the given container is a simple @graph container.
       * Concretely, it will check if no @index or @id is active as well.
       * @param containers A container hash.
       */
      static isSimpleGraphContainer(containers) {
        return "@graph" in containers && ("@set" in containers && Object.keys(containers).length === 2 || Object.keys(containers).length === 1);
      }
      /**
       * Check fit the given container is a complex @graph container.
       * Concretely, it will check if @index or @id is active as well next to @graph.
       * @param containers A container hash.
       */
      static isComplexGraphContainer(containers) {
        return "@graph" in containers && ("@set" in containers && Object.keys(containers).length > 2 || !("@set" in containers) && Object.keys(containers).length > 1);
      }
      /**
       * Create an graph container index that can be used for identifying a graph term inside the graphContainerTermStack.
       * @param containers The applicable containers.
       * @param depth The container depth.
       * @param keys The array of keys.
       * @return The graph index.
       */
      static getContainerGraphIndex(containers, depth, keys) {
        let isSimpleGraphContainer = _EntryHandlerContainer.isSimpleGraphContainer(containers);
        let index = "";
        for (let i2 = depth; i2 < keys.length; i2++) {
          if (!isSimpleGraphContainer || typeof keys[i2] === "number") {
            index += ":" + keys[i2];
          }
          if (!isSimpleGraphContainer && typeof keys[i2] !== "number") {
            isSimpleGraphContainer = true;
          }
        }
        return index;
      }
      /**
       * Return the applicable container type at the given depth.
       *
       * This will ignore any arrays in the key chain.
       *
       * @param {ParsingContext} parsingContext A parsing context.
       * @param {any[]} keys The array of keys.
       * @param {number} depth The current depth.
       * @return {Promise<{ containers: {[typeName: string]: boolean}, depth: number, fallback: boolean }>}
       *          All applicable containers for the given depth,
       *          the `depth` of the container root (can change when arrays are in the key chain),
       *          and the `fallback` flag that indicates if the default container type was returned
       *            (i.e., no dedicated container type is defined).
       */
      static async getContainerHandler(parsingContext, keys, depth) {
        const fallback = {
          containers: { "@set": true },
          depth,
          fallback: true
        };
        let checkGraphContainer = false;
        const context = await parsingContext.getContext(keys, 2);
        for (let i2 = depth - 1; i2 >= 0; i2--) {
          if (typeof keys[i2] !== "number") {
            const containersSelf = Util_1.Util.getContextValue(context, "@container", keys[i2], false);
            if (containersSelf && _EntryHandlerContainer.isSimpleGraphContainer(containersSelf)) {
              return {
                containers: containersSelf,
                depth: i2 + 1,
                fallback: false
              };
            }
            const containersParent = Util_1.Util.getContextValue(context, "@container", keys[i2 - 1], false);
            if (!containersParent) {
              if (checkGraphContainer) {
                return fallback;
              }
              checkGraphContainer = true;
            } else {
              const graphContainer = "@graph" in containersParent;
              for (const containerHandleName in _EntryHandlerContainer.CONTAINER_HANDLERS) {
                if (containersParent[containerHandleName]) {
                  if (graphContainer) {
                    if (_EntryHandlerContainer.CONTAINER_HANDLERS[containerHandleName].canCombineWithGraph()) {
                      return {
                        containers: containersParent,
                        depth: i2,
                        fallback: false
                      };
                    } else {
                      return fallback;
                    }
                  } else {
                    if (checkGraphContainer) {
                      return fallback;
                    } else {
                      return {
                        containers: containersParent,
                        depth: i2,
                        fallback: false
                      };
                    }
                  }
                }
              }
              return fallback;
            }
          }
        }
        return fallback;
      }
      /**
       * Check if we are handling a value at the given depth
       * that is part of something that should be handled as a container,
       * AND if this container should be buffered, so that it can be handled by a dedicated container handler.
       *
       * For instance, any container with @graph will NOT be buffered.
       *
       * This will ignore any arrays in the key chain.
       *
       * @param {ParsingContext} parsingContext A parsing context.
       * @param {any[]} keys The array of keys.
       * @param {number} depth The current depth.
       * @return {Promise<boolean>} If we are in the scope of a container handler.
       */
      static async isBufferableContainerHandler(parsingContext, keys, depth) {
        const handler = await _EntryHandlerContainer.getContainerHandler(parsingContext, keys, depth);
        return !handler.fallback && !("@graph" in handler.containers);
      }
      isPropertyHandler() {
        return false;
      }
      isStackProcessor() {
        return true;
      }
      async validate(parsingContext, util, keys, depth, inProperty) {
        return !!await this.test(parsingContext, util, null, keys, depth);
      }
      async test(parsingContext, util, key, keys, depth) {
        const containers = Util_1.Util.getContextValueContainer(await parsingContext.getContext(keys, 2), keys[depth - 1]);
        for (const containerName in _EntryHandlerContainer.CONTAINER_HANDLERS) {
          if (containers[containerName]) {
            return {
              containers,
              handler: _EntryHandlerContainer.CONTAINER_HANDLERS[containerName]
            };
          }
        }
        return null;
      }
      async handle(parsingContext, util, key, keys, value, depth, testResult) {
        return testResult.handler.handle(testResult.containers, parsingContext, util, keys, value, depth);
      }
    };
    EntryHandlerContainer.CONTAINER_HANDLERS = {
      "@id": new ContainerHandlerIdentifier_1.ContainerHandlerIdentifier(),
      "@index": new ContainerHandlerIndex_1.ContainerHandlerIndex(),
      "@language": new ContainerHandlerLanguage_1.ContainerHandlerLanguage(),
      "@type": new ContainerHandlerType_1.ContainerHandlerType()
    };
    exports.EntryHandlerContainer = EntryHandlerContainer;
  }
});

// node_modules/jsonld-streaming-parser/node_modules/canonicalize/lib/canonicalize.js
var require_canonicalize2 = __commonJS({
  "node_modules/jsonld-streaming-parser/node_modules/canonicalize/lib/canonicalize.js"(exports, module) {
    "use strict";
    module.exports = function serialize(object) {
      if (object === null || typeof object !== "object" || object.toJSON != null) {
        return JSON.stringify(object);
      }
      if (Array.isArray(object)) {
        return "[" + object.reduce((t, cv, ci) => {
          const comma = ci === 0 ? "" : ",";
          const value = cv === void 0 || typeof cv === "symbol" ? null : cv;
          return t + comma + serialize(value);
        }, "") + "]";
      }
      return "{" + Object.keys(object).sort().reduce((t, cv, ci) => {
        if (object[cv] === void 0 || typeof object[cv] === "symbol") {
          return t;
        }
        const comma = t.length === 0 ? "" : ",";
        return t + comma + serialize(cv) + ":" + serialize(object[cv]);
      }, "") + "}";
    };
  }
});

// node_modules/jsonld-streaming-parser/lib/Util.js
var require_Util4 = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Util = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var EntryHandlerContainer_1 = require_EntryHandlerContainer();
    var canonicalizeJson = require_canonicalize2();
    var Util = class _Util {
      constructor(options) {
        this.parsingContext = options.parsingContext;
        this.dataFactory = options.dataFactory || new rdf_data_factory_1.DataFactory();
        this.rdfFirst = this.dataFactory.namedNode(_Util.RDF + "first");
        this.rdfRest = this.dataFactory.namedNode(_Util.RDF + "rest");
        this.rdfNil = this.dataFactory.namedNode(_Util.RDF + "nil");
        this.rdfType = this.dataFactory.namedNode(_Util.RDF + "type");
        this.rdfJson = this.dataFactory.namedNode(_Util.RDF + "JSON");
      }
      /**
       * Helper function to get the value of a context entry,
       * or fallback to a certain value.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} contextKey A pre-defined JSON-LD key in context entries.
       * @param {string} key A context entry key.
       * @param {string} fallback A fallback value for when the given contextKey
       *                          could not be found in the value with the given key.
       * @return {string} The value of the given contextKey in the entry behind key in the given context,
       *                  or the given fallback value.
       */
      static getContextValue(context, contextKey, key, fallback) {
        const entry = context.getContextRaw()[key];
        if (!entry) {
          return fallback;
        }
        const type = entry[contextKey];
        return type === void 0 ? fallback : type;
      }
      /**
       * Get the container type of the given key in the context.
       *
       * Should any context-scoping bugs should occur related to this in the future,
       * it may be required to increase the offset from the depth at which the context is retrieved by one (to 2).
       * This is because containers act 2 levels deep.
       *
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key A context entry key.
       * @return {string} The container type.
       */
      static getContextValueContainer(context, key) {
        return _Util.getContextValue(context, "@container", key, { "@set": true });
      }
      /**
       * Get the value type of the given key in the context.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key A context entry key.
       * @return {string} The node type.
       */
      static getContextValueType(context, key) {
        const valueType = _Util.getContextValue(context, "@type", key, null);
        if (valueType === "@none") {
          return null;
        }
        return valueType;
      }
      /**
       * Get the language of the given key in the context.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key A context entry key.
       * @return {string} The node type.
       */
      static getContextValueLanguage(context, key) {
        return _Util.getContextValue(context, "@language", key, context.getContextRaw()["@language"] || null);
      }
      /**
       * Get the direction of the given key in the context.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key A context entry key.
       * @return {string} The node type.
       */
      static getContextValueDirection(context, key) {
        return _Util.getContextValue(context, "@direction", key, context.getContextRaw()["@direction"] || null);
      }
      /**
       * Check if the given key in the context is a reversed property.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key A context entry key.
       * @return {boolean} If the context value has a @reverse key.
       */
      static isContextValueReverse(context, key) {
        return !!_Util.getContextValue(context, "@reverse", key, null);
      }
      /**
       * Get the @index of the given key in the context.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key A context entry key.
       * @return {string} The index.
       */
      static getContextValueIndex(context, key) {
        return _Util.getContextValue(context, "@index", key, context.getContextRaw()["@index"] || null);
      }
      /**
       * Check if the given key refers to a reversed property.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key The property key.
       * @param {string} parentKey The parent key.
       * @return {boolean} If the property must be reversed.
       */
      static isPropertyReverse(context, key, parentKey) {
        return parentKey === "@reverse" !== _Util.isContextValueReverse(context, key);
      }
      /**
       * Check if the given key exists inside an embedded node as direct child.
       * @param {string} parentKey The parent key.
       * @return {boolean} If the property is embedded.
       */
      static isPropertyInEmbeddedNode(parentKey) {
        return parentKey === "@id";
      }
      /**
       * Check if the given key exists inside an annotation object as direct child.
       * @param {string} parentKey The parent key.
       * @return {boolean} If the property is an annotation.
       */
      static isPropertyInAnnotationObject(parentKey) {
        return parentKey === "@annotation";
      }
      /**
       * Check if the given IRI is valid.
       * @param {string} iri A potential IRI.
       * @return {boolean} If the given IRI is valid.
       */
      static isValidIri(iri) {
        return iri !== null && jsonld_context_parser_1.Util.isValidIri(iri);
      }
      /**
       * Check if the given first array (needle) is a prefix of the given second array (haystack).
       * @param needle An array to check if it is a prefix.
       * @param haystack An array to look in.
       */
      static isPrefixArray(needle, haystack) {
        if (needle.length > haystack.length) {
          return false;
        }
        for (let i2 = 0; i2 < needle.length; i2++) {
          if (needle[i2] !== haystack[i2]) {
            return false;
          }
        }
        return true;
      }
      /**
       * Make sure that @id-@index pairs are equal over all array values.
       * Reject otherwise.
       * @param {any[]} value An array value.
       * @return {Promise<void>} A promise rejecting if conflicts are present.
       */
      async validateValueIndexes(value) {
        if (this.parsingContext.validateValueIndexes) {
          const indexHashes = {};
          for (const entry of value) {
            if (entry && typeof entry === "object") {
              const id = entry["@id"];
              const index = entry["@index"];
              if (id && index) {
                const existingIndexValue = indexHashes[id];
                if (existingIndexValue && existingIndexValue !== index) {
                  throw new jsonld_context_parser_1.ErrorCoded(`Conflicting @index value for ${id}`, jsonld_context_parser_1.ERROR_CODES.CONFLICTING_INDEXES);
                }
                indexHashes[id] = index;
              }
            }
          }
        }
      }
      /**
       * Convert a given JSON value to an RDF term.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key The current JSON key.
       * @param value A JSON value.
       * @param {number} depth The depth the value is at.
       * @param {string[]} keys The path of keys.
       * @return {Promise<RDF.Term[]>} An RDF term array.
       */
      async valueToTerm(context, key, value, depth, keys) {
        if (_Util.getContextValueType(context, key) === "@json") {
          return [this.dataFactory.literal(this.valueToJsonString(value), this.rdfJson)];
        }
        const type = typeof value;
        switch (type) {
          case "object":
            if (value === null || value === void 0) {
              return [];
            }
            if (Array.isArray(value)) {
              if ("@list" in _Util.getContextValueContainer(context, key)) {
                if (value.length === 0) {
                  return [this.rdfNil];
                } else {
                  return this.parsingContext.idStack[depth + 1] || [];
                }
              }
              await this.validateValueIndexes(value);
              return [];
            }
            context = await this.getContextSelfOrPropertyScoped(context, key);
            if ("@context" in value) {
              context = await this.parsingContext.parseContext(value["@context"], (await this.parsingContext.getContext(keys, 0)).getContextRaw());
            }
            value = await this.unaliasKeywords(value, keys, depth, context);
            if ("@value" in value) {
              let val;
              let valueLanguage;
              let valueDirection;
              let valueType;
              let valueIndex;
              for (key in value) {
                const subValue = value[key];
                switch (key) {
                  case "@value":
                    val = subValue;
                    break;
                  case "@language":
                    valueLanguage = subValue;
                    break;
                  case "@direction":
                    valueDirection = subValue;
                    break;
                  case "@type":
                    valueType = subValue;
                    break;
                  case "@index":
                    valueIndex = subValue;
                    break;
                  case "@annotation":
                    break;
                  default:
                    throw new jsonld_context_parser_1.ErrorCoded(`Unknown value entry '${key}' in @value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);
                }
              }
              if (await this.unaliasKeyword(valueType, keys, depth, true, context) === "@json") {
                return [this.dataFactory.literal(this.valueToJsonString(val), this.rdfJson)];
              }
              if (val === null) {
                return [];
              }
              if (typeof val === "object") {
                throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@value' can not be an object, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT_VALUE);
              }
              if (this.parsingContext.validateValueIndexes && valueIndex && typeof valueIndex !== "string") {
                throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@index' must be a string, got '${JSON.stringify(valueIndex)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE);
              }
              if (valueLanguage) {
                if (typeof val !== "string") {
                  throw new jsonld_context_parser_1.ErrorCoded(`When an '@language' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_VALUE);
                }
                if (!jsonld_context_parser_1.ContextParser.validateLanguage(valueLanguage, this.parsingContext.strictValues, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_STRING)) {
                  return [];
                }
                if (this.parsingContext.normalizeLanguageTags || this.parsingContext.activeProcessingMode === 1) {
                  valueLanguage = valueLanguage.toLowerCase();
                }
              }
              if (valueDirection) {
                if (typeof val !== "string") {
                  throw new Error(`When an '@direction' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`);
                }
                if (!jsonld_context_parser_1.ContextParser.validateDirection(valueDirection, this.parsingContext.strictValues)) {
                  return [];
                }
              }
              if (valueLanguage && valueDirection && this.parsingContext.rdfDirection) {
                if (valueType) {
                  throw new jsonld_context_parser_1.ErrorCoded(`Can not have '@language', '@direction' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);
                }
                return this.nullableTermToArray(this.createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));
              } else if (valueLanguage) {
                if (valueType) {
                  throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@language' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);
                }
                return [this.dataFactory.literal(val, valueLanguage)];
              } else if (valueDirection && this.parsingContext.rdfDirection) {
                if (valueType) {
                  throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@direction' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);
                }
                return this.nullableTermToArray(this.createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));
              } else if (valueType) {
                if (typeof valueType !== "string") {
                  throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);
                }
                const typeTerm = this.createVocabOrBaseTerm(context, valueType);
                if (!typeTerm) {
                  throw new jsonld_context_parser_1.ErrorCoded(`Invalid '@type' value, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);
                }
                if (typeTerm.termType !== "NamedNode") {
                  throw new jsonld_context_parser_1.ErrorCoded(`Illegal value type (${typeTerm.termType}): ${valueType}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);
                }
                return [this.dataFactory.literal(val, typeTerm)];
              }
              return await this.valueToTerm(new jsonld_context_parser_1.JsonLdContextNormalized({}), key, val, depth, keys);
            } else if ("@set" in value) {
              if (Object.keys(value).length > 1) {
                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @set for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);
              }
              return [];
            } else if ("@list" in value) {
              if (Object.keys(value).length > 1) {
                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);
              }
              const listValue = value["@list"];
              if (Array.isArray(listValue)) {
                if (listValue.length === 0) {
                  return [this.rdfNil];
                } else {
                  return this.parsingContext.idStack[depth + 1] || [];
                }
              } else {
                return await this.valueToTerm(await this.parsingContext.getContext(keys), key, listValue, depth - 1, keys.slice(0, -1));
              }
            } else if ("@reverse" in value && typeof value["@reverse"] === "boolean") {
              return [];
            } else if ("@graph" in _Util.getContextValueContainer(await this.parsingContext.getContext(keys), key)) {
              const graphContainerEntries = this.parsingContext.graphContainerTermStack[depth + 1];
              return graphContainerEntries ? Object.values(graphContainerEntries) : [this.dataFactory.blankNode()];
            } else if ("@id" in value) {
              if (Object.keys(value).length > 1) {
                context = await this.parsingContext.getContext(keys, 0);
              }
              if ("@context" in value) {
                context = await this.parsingContext.parseContext(value["@context"], context.getContextRaw());
              }
              if (value["@type"] === "@vocab") {
                return this.nullableTermToArray(this.createVocabOrBaseTerm(context, value["@id"]));
              } else {
                const valueId = value["@id"];
                let valueTerm;
                if (typeof valueId === "object") {
                  if (this.parsingContext.rdfstar) {
                    valueTerm = this.parsingContext.idStack[depth + 1][0];
                  } else {
                    throw new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE);
                  }
                } else {
                  valueTerm = this.resourceToTerm(context, valueId);
                }
                return this.nullableTermToArray(valueTerm);
              }
            } else {
              if (this.parsingContext.emittedStack[depth + 1] || value && typeof value === "object" && Object.keys(value).length === 0) {
                return this.parsingContext.idStack[depth + 1] || (this.parsingContext.idStack[depth + 1] = [this.dataFactory.blankNode()]);
              } else {
                return [];
              }
            }
          case "string":
            return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, null));
          case "boolean":
            return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, Boolean(value).toString(), this.dataFactory.namedNode(_Util.XSD_BOOLEAN)));
          case "number":
            return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, this.dataFactory.namedNode(value % 1 === 0 && value < 1e21 ? _Util.XSD_INTEGER : _Util.XSD_DOUBLE)));
          default:
            this.parsingContext.emitError(new Error(`Could not determine the RDF type of a ${type}`));
            return [];
        }
      }
      /**
       * If the context defines a property-scoped context for the given key,
       * that context will be returned.
       * Otherwise, the given context will be returned as-is.
       *
       * This should be used for valueToTerm cases that are not objects.
       * @param context A context.
       * @param key A JSON key.
       */
      async getContextSelfOrPropertyScoped(context, key) {
        const contextKeyEntry = context.getContextRaw()[key];
        if (contextKeyEntry && typeof contextKeyEntry === "object" && "@context" in contextKeyEntry) {
          context = await this.parsingContext.parseContext(contextKeyEntry, context.getContextRaw(), true);
        }
        return context;
      }
      /**
       * If the given term is null, return an empty array, otherwise return an array with the single given term.
       * @param term A term.
       */
      nullableTermToArray(term) {
        return term ? [term] : [];
      }
      /**
       * Convert a given JSON key to an RDF predicate term,
       * based on @vocab.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param key A JSON key.
       * @return {RDF.NamedNode} An RDF named node.
       */
      predicateToTerm(context, key) {
        const expanded = context.expandTerm(key, true, this.parsingContext.getExpandOptions());
        if (!expanded) {
          return null;
        }
        if (expanded[0] === "_" && expanded[1] === ":") {
          if (this.parsingContext.produceGeneralizedRdf) {
            return this.dataFactory.blankNode(expanded.substr(2));
          } else {
            return null;
          }
        }
        if (_Util.isValidIri(expanded)) {
          return this.dataFactory.namedNode(expanded);
        } else {
          if (expanded && this.parsingContext.strictValues) {
            this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid predicate IRI: ${expanded}`, jsonld_context_parser_1.ERROR_CODES.INVALID_IRI_MAPPING));
          } else {
            return null;
          }
        }
        return null;
      }
      /**
       * Convert a given JSON key to an RDF resource term or blank node,
       * based on @base.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param key A JSON key.
       * @return {RDF.NamedNode} An RDF named node or null.
       */
      resourceToTerm(context, key) {
        if (key.startsWith("_:")) {
          return this.dataFactory.blankNode(key.substr(2));
        }
        const iri = context.expandTerm(key, false, this.parsingContext.getExpandOptions());
        if (!_Util.isValidIri(iri)) {
          if (iri && this.parsingContext.strictValues) {
            this.parsingContext.emitError(new Error(`Invalid resource IRI: ${iri}`));
          } else {
            return null;
          }
        }
        return this.dataFactory.namedNode(iri);
      }
      /**
       * Convert a given JSON key to an RDF resource term.
       * It will do this based on the @vocab,
       * and fallback to @base.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param key A JSON key.
       * @return {RDF.NamedNode} An RDF named node or null.
       */
      createVocabOrBaseTerm(context, key) {
        if (key.startsWith("_:")) {
          return this.dataFactory.blankNode(key.substr(2));
        }
        const expandOptions = this.parsingContext.getExpandOptions();
        let expanded = context.expandTerm(key, true, expandOptions);
        if (expanded === key) {
          expanded = context.expandTerm(key, false, expandOptions);
        }
        if (!_Util.isValidIri(expanded)) {
          if (expanded && this.parsingContext.strictValues && !expanded.startsWith("@")) {
            this.parsingContext.emitError(new Error(`Invalid term IRI: ${expanded}`));
          } else {
            return null;
          }
        }
        return this.dataFactory.namedNode(expanded);
      }
      /**
       * Ensure that the given value becomes a string.
       * @param {string | number} value A string or number.
       * @param {NamedNode} datatype The intended datatype.
       * @return {string} The returned string.
       */
      intToString(value, datatype) {
        if (typeof value === "number") {
          if (Number.isFinite(value)) {
            const isInteger = value % 1 === 0;
            if (isInteger && (!datatype || datatype.value !== _Util.XSD_DOUBLE)) {
              return Number(value).toString();
            } else {
              return value.toExponential(15).replace(/(\d)0*e\+?/, "$1E");
            }
          } else {
            return value > 0 ? "INF" : "-INF";
          }
        } else {
          return value;
        }
      }
      /**
       * Convert a given JSON string value to an RDF term.
       * @param {number} depth The current stack depth.
       * @param {JsonLdContextNormalized} context A JSON-LD context.
       * @param {string} key The current JSON key.
       * @param {string} value A JSON value.
       * @param {NamedNode} defaultDatatype The default datatype for the given value.
       * @return {RDF.Term} An RDF term or null.
       */
      stringValueToTerm(depth, context, key, value, defaultDatatype) {
        const contextType = _Util.getContextValueType(context, key);
        if (contextType) {
          if (contextType === "@id") {
            if (!defaultDatatype) {
              return this.resourceToTerm(context, this.intToString(value, defaultDatatype));
            }
          } else if (contextType === "@vocab") {
            if (!defaultDatatype) {
              return this.createVocabOrBaseTerm(context, this.intToString(value, defaultDatatype));
            }
          } else {
            defaultDatatype = this.dataFactory.namedNode(contextType);
          }
        }
        if (!defaultDatatype) {
          const contextLanguage = _Util.getContextValueLanguage(context, key);
          const contextDirection = _Util.getContextValueDirection(context, key);
          if (contextDirection && this.parsingContext.rdfDirection) {
            return this.createLanguageDirectionLiteral(depth, this.intToString(value, defaultDatatype), contextLanguage, contextDirection);
          } else {
            return this.dataFactory.literal(this.intToString(value, defaultDatatype), contextLanguage);
          }
        }
        return this.dataFactory.literal(this.intToString(value, defaultDatatype), defaultDatatype);
      }
      /**
       * Create a literal for the given value with the given language and direction.
       * Auxiliary quads may be emitted.
       * @param {number} depth The current stack depth.
       * @param {string} value A string value.
       * @param {string} language A language tag.
       * @param {string} direction A direction.
       * @return {Term} An RDF term.
       */
      createLanguageDirectionLiteral(depth, value, language, direction) {
        if (this.parsingContext.rdfDirection === "i18n-datatype") {
          if (!language) {
            language = "";
          }
          return this.dataFactory.literal(value, this.dataFactory.namedNode(`https://www.w3.org/ns/i18n#${language}_${direction}`));
        } else {
          const valueNode = this.dataFactory.blankNode();
          const graph = this.getDefaultGraph();
          this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(_Util.RDF + "value"), this.dataFactory.literal(value), graph));
          if (language) {
            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(_Util.RDF + "language"), this.dataFactory.literal(language), graph));
          }
          this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(_Util.RDF + "direction"), this.dataFactory.literal(direction), graph));
          return valueNode;
        }
      }
      /**
       * Stringify the given JSON object to a canonical JSON string.
       * @param value Any valid JSON value.
       * @return {string} A canonical JSON string.
       */
      valueToJsonString(value) {
        return canonicalizeJson(value);
      }
      /**
       * If the key is not a keyword, try to check if it is an alias for a keyword,
       * and if so, un-alias it.
       * @param {string} key A key, can be falsy.
       * @param {string[]} keys The path of keys.
       * @param {number} depth The depth to
       * @param {boolean} disableCache If the cache should be disabled
       * @param {JsonLdContextNormalized} context A context to unalias with,
       *                                           will fallback to retrieving the context for the given keys.
       * @return {Promise<string>} A promise resolving to the key itself, or another key.
       */
      async unaliasKeyword(key, keys, depth, disableCache, context) {
        if (Number.isInteger(key)) {
          return key;
        }
        if (!disableCache) {
          const cachedUnaliasedKeyword = this.parsingContext.unaliasedKeywordCacheStack[depth];
          if (cachedUnaliasedKeyword) {
            return cachedUnaliasedKeyword;
          }
        }
        if (!jsonld_context_parser_1.Util.isPotentialKeyword(key)) {
          context = context || await this.parsingContext.getContext(keys);
          let unliased = context.getContextRaw()[key];
          if (unliased && typeof unliased === "object") {
            unliased = unliased["@id"];
          }
          if (jsonld_context_parser_1.Util.isValidKeyword(unliased)) {
            key = unliased;
          }
        }
        return disableCache ? key : this.parsingContext.unaliasedKeywordCacheStack[depth] = key;
      }
      /**
       * Unalias the keyword of the parent.
       * This adds a safety check if no parent exist.
       * @param {any[]} keys A stack of keys.
       * @param {number} depth The current depth.
       * @return {Promise<any>} A promise resolving to the parent key, or another key.
       */
      async unaliasKeywordParent(keys, depth) {
        return await this.unaliasKeyword(depth > 0 && keys[depth - 1], keys, depth - 1);
      }
      /**
       * Un-alias all keywords in the given hash.
       * @param {{[p: string]: any}} hash A hash object.
       * @param {string[]} keys The path of keys.
       * @param {number} depth The depth.
       * @param {JsonLdContextNormalized} context A context to unalias with,
       *                                           will fallback to retrieving the context for the given keys.
       * @return {Promise<{[p: string]: any}>} A promise resolving to the new hash.
       */
      async unaliasKeywords(hash, keys, depth, context) {
        const newHash = {};
        for (const key in hash) {
          newHash[await this.unaliasKeyword(key, keys, depth + 1, true, context)] = hash[key];
        }
        return newHash;
      }
      /**
       * Check if we are processing a literal (including JSON literals) at the given depth.
       * This will also check higher levels,
       * because if a parent is a literal,
       * then the deeper levels are definitely a literal as well.
       * @param {any[]} keys The keys.
       * @param {number} depth The depth.
       * @return {boolean} If we are processing a literal.
       */
      async isLiteral(keys, depth) {
        for (let i2 = depth; i2 >= 0; i2--) {
          if (await this.unaliasKeyword(keys[i2], keys, i2) === "@annotation") {
            return false;
          }
          if (this.parsingContext.literalStack[i2] || this.parsingContext.jsonLiteralStack[i2]) {
            return true;
          }
        }
        return false;
      }
      /**
       * Check how many parents should be skipped for checking the @graph for the given node.
       *
       * @param {number} depth The depth of the node.
       * @param {any[]} keys An array of keys.
       * @return {number} The graph depth offset.
       */
      async getDepthOffsetGraph(depth, keys) {
        for (let i2 = depth - 1; i2 > 0; i2--) {
          if (await this.unaliasKeyword(keys[i2], keys, i2) === "@graph") {
            const containers = (await EntryHandlerContainer_1.EntryHandlerContainer.getContainerHandler(this.parsingContext, keys, i2)).containers;
            if (EntryHandlerContainer_1.EntryHandlerContainer.isComplexGraphContainer(containers)) {
              return -1;
            }
            return depth - i2 - 1;
          }
        }
        return -1;
      }
      /**
       * Check if the given subject is of a valid type.
       * This should be called when applying @reverse'd properties.
       * @param {Term} subject A subject.
       */
      validateReverseSubject(subject) {
        if (subject.termType === "Literal") {
          throw new jsonld_context_parser_1.ErrorCoded(`Found illegal literal in subject position: ${subject.value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);
        }
      }
      /**
       * Get the default graph.
       * @return {Term} An RDF term.
       */
      getDefaultGraph() {
        return this.parsingContext.defaultGraph || this.dataFactory.defaultGraph();
      }
      /**
       * Get the current graph, while taking into account a graph that can be defined via @container: @graph.
       * If not within a graph container, the default graph will be returned.
       * @param keys The current keys.
       * @param depth The current depth.
       */
      async getGraphContainerValue(keys, depth) {
        let graph = this.getDefaultGraph();
        const { containers, depth: depthContainer } = await EntryHandlerContainer_1.EntryHandlerContainer.getContainerHandler(this.parsingContext, keys, depth);
        if ("@graph" in containers) {
          const graphContainerIndex = EntryHandlerContainer_1.EntryHandlerContainer.getContainerGraphIndex(containers, depthContainer, keys);
          const entry = this.parsingContext.graphContainerTermStack[depthContainer];
          graph = entry ? entry[graphContainerIndex] : null;
          if (!graph) {
            let graphId = null;
            if ("@id" in containers) {
              const keyUnaliased = await this.getContainerKey(keys[depthContainer], keys, depthContainer);
              if (keyUnaliased !== null) {
                graphId = await this.resourceToTerm(await this.parsingContext.getContext(keys), keyUnaliased);
              }
            }
            if (!graphId) {
              graphId = this.dataFactory.blankNode();
            }
            if (!this.parsingContext.graphContainerTermStack[depthContainer]) {
              this.parsingContext.graphContainerTermStack[depthContainer] = {};
            }
            graph = this.parsingContext.graphContainerTermStack[depthContainer][graphContainerIndex] = graphId;
          }
        }
        return graph;
      }
      /**
       * Get the properties depth for retrieving properties.
       *
       * Typically, the properties depth will be identical to the given depth.
       *
       * The following exceptions apply:
       * * When the parent is @reverse, the depth is decremented by one.
       * * When @nest parents are found, the depth is decremented by the number of @nest parents.
       * If in combination with the exceptions above an intermediary array is discovered,
       * the depth is also decremented by this number of arrays.
       *
       * @param keys The current key chain.
       * @param depth The current depth.
       */
      async getPropertiesDepth(keys, depth) {
        let lastValidDepth = depth;
        for (let i2 = depth - 1; i2 > 0; i2--) {
          if (typeof keys[i2] !== "number") {
            const parentKey = await this.unaliasKeyword(keys[i2], keys, i2);
            if (parentKey === "@reverse") {
              return i2;
            } else if (parentKey === "@nest") {
              lastValidDepth = i2;
            } else {
              return lastValidDepth;
            }
          }
        }
        return lastValidDepth;
      }
      /**
       * Get the key for the current container entry.
       * @param key A key, can be falsy.
       * @param keys The key chain.
       * @param depth The current depth to get the key from.
       * @return Promise resolving to the key.
       *         Null will be returned for @none entries, with aliasing taken into account.
       */
      async getContainerKey(key, keys, depth) {
        const keyUnaliased = await this.unaliasKeyword(key, keys, depth);
        return keyUnaliased === "@none" ? null : keyUnaliased;
      }
      /**
       * Check if no reverse properties are present in embedded nodes.
       * @param key The current key.
       * @param reverse If a reverse property is active.
       * @param isEmbedded If we're in an embedded node.
       */
      validateReverseInEmbeddedNode(key, reverse, isEmbedded) {
        if (isEmbedded && reverse && !this.parsingContext.rdfstarReverseInEmbedded) {
          throw new jsonld_context_parser_1.ErrorCoded(`Illegal reverse property in embedded node in ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_EMBEDDED_NODE);
        }
      }
      /**
       * Emit a quad, with checks.
       * @param depth The current depth.
       * @param subject S
       * @param predicate P
       * @param object O
       * @param graph G
       * @param reverse If a reverse property is active.
       * @param isEmbedded If we're in an embedded node.
       */
      emitQuadChecked(depth, subject, predicate, object, graph, reverse, isEmbedded) {
        let quad;
        if (reverse) {
          this.validateReverseSubject(object);
          quad = this.dataFactory.quad(object, predicate, subject, graph);
        } else {
          quad = this.dataFactory.quad(subject, predicate, object, graph);
        }
        if (isEmbedded) {
          if (quad.graph.termType !== "DefaultGraph") {
            quad = this.dataFactory.quad(quad.subject, quad.predicate, quad.object);
          }
          if (this.parsingContext.idStack[depth - 1]) {
            throw new jsonld_context_parser_1.ErrorCoded(`Illegal multiple properties in an embedded node`, jsonld_context_parser_1.ERROR_CODES.INVALID_EMBEDDED_NODE);
          }
          this.parsingContext.idStack[depth - 1] = [quad];
        } else {
          this.parsingContext.emitQuad(depth, quad);
        }
        const annotationsBuffer = this.parsingContext.annotationsBuffer[depth];
        if (annotationsBuffer) {
          for (const annotation of annotationsBuffer) {
            this.emitAnnotation(depth, quad, annotation);
          }
          delete this.parsingContext.annotationsBuffer[depth];
        }
      }
      // This is a separate function to enable recursion
      emitAnnotation(depth, quad, annotation) {
        let annotationQuad;
        if (annotation.reverse) {
          this.validateReverseSubject(annotation.object);
          annotationQuad = this.dataFactory.quad(annotation.object, annotation.predicate, quad);
        } else {
          annotationQuad = this.dataFactory.quad(quad, annotation.predicate, annotation.object);
        }
        this.parsingContext.emitQuad(depth, annotationQuad);
        for (const nestedAnnotation of annotation.nestedAnnotations) {
          this.emitAnnotation(depth, annotationQuad, nestedAnnotation);
        }
      }
    };
    Util.XSD = "http://www.w3.org/2001/XMLSchema#";
    Util.XSD_BOOLEAN = Util.XSD + "boolean";
    Util.XSD_INTEGER = Util.XSD + "integer";
    Util.XSD_DOUBLE = Util.XSD + "double";
    Util.RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    exports.Util = Util;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerArrayValue.js
var require_EntryHandlerArrayValue = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerArrayValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerArrayValue = void 0;
    var Util_1 = require_Util4();
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var EntryHandlerArrayValue = class {
      isPropertyHandler() {
        return false;
      }
      isStackProcessor() {
        return true;
      }
      async validate(parsingContext, util, keys, depth, inProperty) {
        return this.test(parsingContext, util, null, keys, depth);
      }
      async test(parsingContext, util, key, keys, depth) {
        return typeof keys[depth] === "number";
      }
      async handle(parsingContext, util, key, keys, value, depth) {
        let parentKey = await util.unaliasKeywordParent(keys, depth);
        if (parentKey === "@list") {
          let listRootKey = null;
          let listRootDepth = 0;
          for (let i2 = depth - 2; i2 > 0; i2--) {
            const keyOption = keys[i2];
            if (typeof keyOption === "string" || typeof keyOption === "number") {
              listRootDepth = i2;
              listRootKey = keyOption;
              break;
            }
          }
          if (listRootKey !== null) {
            const values = await util.valueToTerm(await parsingContext.getContext(keys), listRootKey, value, depth, keys);
            for (const object of values) {
              await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, listRootDepth), listRootDepth);
            }
            if (values.length === 0) {
              await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, listRootDepth), listRootDepth);
            }
          }
        } else if (parentKey === "@set") {
          await parsingContext.newOnValueJob(keys.slice(0, -2), value, depth - 2, false);
        } else if (parentKey !== void 0 && parentKey !== "@type") {
          for (let i2 = depth - 1; i2 > 0; i2--) {
            if (typeof keys[i2] !== "number") {
              parentKey = await util.unaliasKeyword(keys[i2], keys, i2);
              break;
            }
          }
          const parentContext = await parsingContext.getContext(keys.slice(0, -1));
          if ("@list" in Util_1.Util.getContextValueContainer(parentContext, parentKey)) {
            parsingContext.emittedStack[depth + 1] = true;
            const values = await util.valueToTerm(await parsingContext.getContext(keys), parentKey, value, depth, keys);
            for (const object of values) {
              await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, -1), depth - 1);
            }
            if (values.length === 0) {
              await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, -1), depth - 1);
            }
          } else {
            parsingContext.shiftStack(depth, 1);
            await parsingContext.newOnValueJob(keys.slice(0, -1), value, depth - 1, false);
            parsingContext.contextTree.removeContext(keys.slice(0, -1));
          }
        }
      }
      async handleListElement(parsingContext, util, value, valueOriginal, depth, listRootKeys, listRootDepth) {
        let listPointer = parsingContext.listPointerStack[depth];
        if (valueOriginal !== null && (await util.unaliasKeywords(valueOriginal, listRootKeys, depth))["@value"] !== null) {
          if (!listPointer || !listPointer.value) {
            const linkTerm = util.dataFactory.blankNode();
            listPointer = { value: linkTerm, listRootDepth, listId: linkTerm };
          } else {
            const newLinkTerm = util.dataFactory.blankNode();
            parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfRest, newLinkTerm, util.getDefaultGraph()));
            listPointer.value = newLinkTerm;
          }
          if (value) {
            parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfFirst, value, util.getDefaultGraph()));
          }
        } else {
          if (!listPointer) {
            listPointer = { listRootDepth, listId: util.rdfNil };
          }
        }
        parsingContext.listPointerStack[depth] = listPointer;
        if (parsingContext.rdfstar && parsingContext.annotationsBuffer[depth]) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal annotation inside a list`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));
        }
      }
    };
    exports.EntryHandlerArrayValue = EntryHandlerArrayValue;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerInvalidFallback.js
var require_EntryHandlerInvalidFallback = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerInvalidFallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerInvalidFallback = void 0;
    var EntryHandlerInvalidFallback = class {
      isPropertyHandler() {
        return false;
      }
      isStackProcessor() {
        return true;
      }
      async validate(parsingContext, util, keys, depth, inProperty) {
        return false;
      }
      async test(parsingContext, util, key, keys, depth) {
        return true;
      }
      async handle(parsingContext, util, key, keys, value, depth) {
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.EntryHandlerInvalidFallback = EntryHandlerInvalidFallback;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeyword.js
var require_EntryHandlerKeyword = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeyword.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeyword = void 0;
    var EntryHandlerKeyword = class {
      constructor(keyword) {
        this.keyword = keyword;
      }
      isPropertyHandler() {
        return false;
      }
      isStackProcessor() {
        return true;
      }
      async validate(parsingContext, util, keys, depth, inProperty) {
        return false;
      }
      async test(parsingContext, util, key, keys, depth) {
        return key === this.keyword;
      }
    };
    exports.EntryHandlerKeyword = EntryHandlerKeyword;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js
var require_EntryHandlerKeywordContext = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordContext = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordContext = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@context");
      }
      isStackProcessor() {
        return false;
      }
      async handle(parsingContext, util, key, keys, value, depth) {
        if (parsingContext.streamingProfile && (parsingContext.processingStack[depth] || parsingContext.processingType[depth] || parsingContext.idStack[depth] !== void 0)) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded("Found an out-of-order context, while streaming is enabled.(disable `streamingProfile`)", jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));
        }
        const parentContext = parsingContext.getContext(keys);
        const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());
        parsingContext.contextTree.setContext(keys.slice(0, -1), context);
        parsingContext.emitContext(value);
        await parsingContext.validateContext(await context);
      }
    };
    exports.EntryHandlerKeywordContext = EntryHandlerKeywordContext;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordGraph.js
var require_EntryHandlerKeywordGraph = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordGraph.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordGraph = void 0;
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordGraph = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@graph");
      }
      async handle(parsingContext, util, key, keys, value, depth) {
        parsingContext.graphStack[depth + 1] = true;
      }
    };
    exports.EntryHandlerKeywordGraph = EntryHandlerKeywordGraph;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js
var require_EntryHandlerKeywordId = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordId = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordId = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@id");
      }
      isStackProcessor() {
        return false;
      }
      async handle(parsingContext, util, key, keys, value, depth) {
        if (typeof value !== "string") {
          if (parsingContext.rdfstar && typeof value === "object") {
            const valueKeys = Object.keys(value);
            if (valueKeys.length === 1 && valueKeys[0] === "@id") {
              parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid embedded node without property with @id ${value["@id"]}`, jsonld_context_parser_1.ERROR_CODES.INVALID_EMBEDDED_NODE));
            }
          } else {
            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE));
          }
          return;
        }
        const depthProperties = await util.getPropertiesDepth(keys, depth);
        if (parsingContext.idStack[depthProperties] !== void 0) {
          if (parsingContext.idStack[depthProperties][0].listHead) {
            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${keys[depth - 1]}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT));
          } else {
            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found duplicate @ids '${parsingContext.idStack[depthProperties][0].value}' and '${value}'`, jsonld_context_parser_1.ERROR_CODES.COLLIDING_KEYWORDS));
          }
        }
        if (parsingContext.rdfstar && parsingContext.annotationsBuffer[depth]) {
          for (const annotation of parsingContext.annotationsBuffer[depth]) {
            if (annotation.depth === depth) {
              parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @id inside an annotation: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));
            }
          }
        }
        parsingContext.idStack[depthProperties] = util.nullableTermToArray(await util.resourceToTerm(await parsingContext.getContext(keys), value));
      }
    };
    exports.EntryHandlerKeywordId = EntryHandlerKeywordId;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js
var require_EntryHandlerKeywordIncluded = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordIncluded = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordIncluded = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@included");
      }
      async handle(parsingContext, util, key, keys, value, depth) {
        if (typeof value !== "object") {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @included '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));
        }
        const valueUnliased = await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys));
        if ("@value" in valueUnliased) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));
        }
        if ("@list" in valueUnliased) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));
        }
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.EntryHandlerKeywordIncluded = EntryHandlerKeywordIncluded;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordNest.js
var require_EntryHandlerKeywordNest = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordNest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordNest = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordNest = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@nest");
      }
      async handle(parsingContext, util, key, keys, value, depth) {
        if (typeof value !== "object") {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found invalid @nest entry for '${key}': '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));
        }
        if ("@value" in await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys))) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an invalid @value node for '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));
        }
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.EntryHandlerKeywordNest = EntryHandlerKeywordNest;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordType.js
var require_EntryHandlerKeywordType = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordType = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var Util_1 = require_Util4();
    var EntryHandlerPredicate_1 = require_EntryHandlerPredicate();
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordType = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@type");
      }
      isStackProcessor() {
        return false;
      }
      async handle(parsingContext, util, key, keys, value, depth) {
        const keyOriginal = keys[depth];
        const context = await parsingContext.getContext(keys);
        const predicate = util.rdfType;
        const parentKey = await util.unaliasKeywordParent(keys, depth);
        const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, parentKey);
        const isEmbedded = Util_1.Util.isPropertyInEmbeddedNode(parentKey);
        util.validateReverseInEmbeddedNode(key, reverse, isEmbedded);
        const isAnnotation = Util_1.Util.isPropertyInAnnotationObject(parentKey);
        const elements = Array.isArray(value) ? value : [value];
        for (const element of elements) {
          if (typeof element !== "string") {
            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @type '${element}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPE_VALUE));
          }
          const type = util.createVocabOrBaseTerm(context, element);
          if (type) {
            await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, type, reverse, isEmbedded, isAnnotation);
          }
        }
        let scopedContext = Promise.resolve(context);
        let hasTypedScopedContext = false;
        for (const element of elements.sort()) {
          const typeContext = Util_1.Util.getContextValue(context, "@context", element, null);
          if (typeContext) {
            hasTypedScopedContext = true;
            scopedContext = scopedContext.then((c) => parsingContext.parseContext(typeContext, c.getContextRaw()));
          }
        }
        if (parsingContext.streamingProfile && (hasTypedScopedContext || !parsingContext.streamingProfileAllowOutOfOrderPlainType) && (parsingContext.processingStack[depth] || parsingContext.idStack[depth])) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded("Found an out-of-order type-scoped context, while streaming is enabled.(disable `streamingProfile`)", jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));
        }
        if (hasTypedScopedContext) {
          scopedContext = scopedContext.then((c) => {
            if (c.getContextRaw()["@propagate"] !== true) {
              return new jsonld_context_parser_1.JsonLdContextNormalized(Object.assign(Object.assign({}, c.getContextRaw()), { "@propagate": false, "@__propagateFallback": context.getContextRaw() }));
            }
            return c;
          });
          parsingContext.contextTree.setContext(keys.slice(0, keys.length - 1), scopedContext);
        }
        parsingContext.processingType[depth] = true;
      }
    };
    exports.EntryHandlerKeywordType = EntryHandlerKeywordType;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js
var require_EntryHandlerKeywordUnknownFallback = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordUnknownFallback = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var EntryHandlerKeywordUnknownFallback = class _EntryHandlerKeywordUnknownFallback {
      isPropertyHandler() {
        return false;
      }
      isStackProcessor() {
        return true;
      }
      async validate(parsingContext, util, keys, depth, inProperty) {
        const key = await util.unaliasKeyword(keys[depth], keys, depth);
        if (jsonld_context_parser_1.Util.isPotentialKeyword(key)) {
          if (!inProperty) {
            if (key === "@list") {
              return false;
            }
          }
          return true;
        }
        return false;
      }
      async test(parsingContext, util, key, keys, depth) {
        return jsonld_context_parser_1.Util.isPotentialKeyword(key);
      }
      async handle(parsingContext, util, key, keys, value, depth) {
        const keywordType = _EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES[key];
        if (keywordType !== void 0) {
          if (keywordType && typeof value !== keywordType.type) {
            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid value type for '${key}' with value '${value}'`, keywordType.errorCode));
          }
        } else if (parsingContext.strictValues) {
          parsingContext.emitError(new Error(`Unknown keyword '${key}' with value '${value}'`));
        }
        parsingContext.emittedStack[depth] = false;
      }
    };
    EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES = {
      "@index": { type: "string", errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE },
      "@list": null,
      "@reverse": { type: "object", errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_VALUE },
      "@set": null,
      "@value": null
    };
    exports.EntryHandlerKeywordUnknownFallback = EntryHandlerKeywordUnknownFallback;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordValue.js
var require_EntryHandlerKeywordValue = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordValue = void 0;
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var EntryHandlerKeywordValue = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@value");
      }
      async validate(parsingContext, util, keys, depth, inProperty) {
        const key = keys[depth];
        if (key && !parsingContext.literalStack[depth] && await this.test(parsingContext, util, key, keys, depth)) {
          parsingContext.literalStack[depth] = true;
        }
        return super.validate(parsingContext, util, keys, depth, inProperty);
      }
      async test(parsingContext, util, key, keys, depth) {
        return await util.unaliasKeyword(keys[depth], keys.slice(0, keys.length - 1), depth - 1, true) === "@value";
      }
      async handle(parsingContext, util, key, keys, value, depth) {
        parsingContext.literalStack[depth] = true;
        delete parsingContext.unidentifiedValuesBuffer[depth];
        delete parsingContext.unidentifiedGraphsBuffer[depth];
        parsingContext.emittedStack[depth] = false;
      }
    };
    exports.EntryHandlerKeywordValue = EntryHandlerKeywordValue;
  }
});

// node_modules/jsonld-streaming-parser/lib/ContextTree.js
var require_ContextTree = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/ContextTree.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContextTree = void 0;
    var ContextTree = class _ContextTree {
      constructor() {
        this.subTrees = {};
      }
      getContext(keys) {
        if (keys.length > 0) {
          const [head, ...tail] = keys;
          const subTree = this.subTrees[head];
          if (subTree) {
            const subContext = subTree.getContext(tail);
            if (subContext) {
              return subContext.then(({ context, depth }) => ({ context, depth: depth + 1 }));
            }
          }
        }
        return this.context ? this.context.then((context) => ({ context, depth: 0 })) : null;
      }
      setContext(keys, context) {
        if (keys.length === 0) {
          this.context = context;
        } else {
          const [head, ...tail] = keys;
          let subTree = this.subTrees[head];
          if (!subTree) {
            subTree = this.subTrees[head] = new _ContextTree();
          }
          subTree.setContext(tail, context);
        }
      }
      removeContext(path) {
        this.setContext(path, null);
      }
    };
    exports.ContextTree = ContextTree;
  }
});

// node_modules/jsonld-streaming-parser/lib/ParsingContext.js
var require_ParsingContext = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/ParsingContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParsingContext = void 0;
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var ErrorCoded_1 = require_ErrorCoded();
    var ContextTree_1 = require_ContextTree();
    var JsonLdParser_1 = require_JsonLdParser();
    var ParsingContext = class _ParsingContext {
      constructor(options) {
        this.contextParser = new jsonld_context_parser_1.ContextParser({ documentLoader: options.documentLoader, skipValidation: options.skipContextValidation });
        this.streamingProfile = !!options.streamingProfile;
        this.baseIRI = options.baseIRI;
        this.produceGeneralizedRdf = !!options.produceGeneralizedRdf;
        this.allowSubjectList = !!options.allowSubjectList;
        this.processingMode = options.processingMode || JsonLdParser_1.JsonLdParser.DEFAULT_PROCESSING_MODE;
        this.strictValues = !!options.strictValues;
        this.validateValueIndexes = !!options.validateValueIndexes;
        this.defaultGraph = options.defaultGraph;
        this.rdfDirection = options.rdfDirection;
        this.normalizeLanguageTags = options.normalizeLanguageTags;
        this.streamingProfileAllowOutOfOrderPlainType = options.streamingProfileAllowOutOfOrderPlainType;
        this.rdfstar = options.rdfstar !== false;
        this.rdfstarReverseInEmbedded = options.rdfstarReverseInEmbedded;
        this.topLevelProperties = false;
        this.activeProcessingMode = parseFloat(this.processingMode);
        this.processingStack = [];
        this.processingType = [];
        this.emittedStack = [];
        this.idStack = [];
        this.graphStack = [];
        this.graphContainerTermStack = [];
        this.listPointerStack = [];
        this.contextTree = new ContextTree_1.ContextTree();
        this.literalStack = [];
        this.validationStack = [];
        this.unaliasedKeywordCacheStack = [];
        this.jsonLiteralStack = [];
        this.unidentifiedValuesBuffer = [];
        this.unidentifiedGraphsBuffer = [];
        this.annotationsBuffer = [];
        this.pendingContainerFlushBuffers = [];
        this.parser = options.parser;
        if (options.context) {
          this.rootContext = this.parseContext(options.context);
          this.rootContext.then((context) => this.validateContext(context));
        } else {
          this.rootContext = Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(this.baseIRI ? { "@base": this.baseIRI, "@__baseDocument": true } : {}));
        }
      }
      /**
       * Parse the given context with the configured options.
       * @param {JsonLdContext} context A context to parse.
       * @param {JsonLdContextNormalized} parentContext An optional parent context.
       * @param {boolean} ignoreProtection If @protected term checks should be ignored.
       * @return {Promise<JsonLdContextNormalized>} A promise resolving to the parsed context.
       */
      async parseContext(context, parentContext, ignoreProtection) {
        return this.contextParser.parse(context, {
          baseIRI: this.baseIRI,
          ignoreProtection,
          normalizeLanguageTags: this.normalizeLanguageTags,
          parentContext,
          processingMode: this.activeProcessingMode
        });
      }
      /**
       * Check if the given context is valid.
       * If not, an error will be thrown.
       * @param {JsonLdContextNormalized} context A context.
       */
      validateContext(context) {
        const activeVersion = context.getContextRaw()["@version"];
        if (activeVersion) {
          if (this.activeProcessingMode && activeVersion > this.activeProcessingMode) {
            throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD version '${activeVersion}' under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.PROCESSING_MODE_CONFLICT);
          } else {
            if (this.activeProcessingMode && activeVersion < this.activeProcessingMode) {
              throw new ErrorCoded_1.ErrorCoded(`Invalid JSON-LD version ${activeVersion} under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);
            }
            this.activeProcessingMode = activeVersion;
          }
        }
      }
      /**
       * Get the context at the given path.
       * @param {keys} keys The path of keys to get the context at.
       * @param {number} offset The path offset, defaults to 1.
       * @return {Promise<JsonLdContextNormalized>} A promise resolving to a context.
       */
      async getContext(keys, offset = 1) {
        const keysOriginal = keys;
        while (typeof keys[keys.length - 1] === "number") {
          keys = keys.slice(0, keys.length - 1);
        }
        if (offset) {
          keys = keys.slice(0, -offset);
        }
        const contextData = await this.getContextPropagationAware(keys);
        const context = contextData.context;
        let contextRaw = context.getContextRaw();
        for (let i2 = contextData.depth; i2 < keysOriginal.length - offset; i2++) {
          const key = keysOriginal[i2];
          const contextKeyEntry = contextRaw[key];
          if (contextKeyEntry && typeof contextKeyEntry === "object" && "@context" in contextKeyEntry) {
            const scopedContext = (await this.parseContext(contextKeyEntry, contextRaw, true)).getContextRaw();
            const propagate = !(key in scopedContext) || scopedContext[key]["@context"]["@propagate"];
            if (propagate !== false || i2 === keysOriginal.length - 1 - offset) {
              contextRaw = Object.assign({}, scopedContext);
              delete contextRaw["@propagate"];
              contextRaw[key] = Object.assign({}, contextRaw[key]);
              if ("@id" in contextKeyEntry) {
                contextRaw[key]["@id"] = contextKeyEntry["@id"];
              }
              delete contextRaw[key]["@context"];
              if (propagate !== false) {
                this.contextTree.setContext(keysOriginal.slice(0, i2 + offset), Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw)));
              }
            }
          }
        }
        return new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw);
      }
      /**
       * Get the context at the given path.
       * Non-propagating contexts will be skipped,
       * unless the context at that exact depth is retrieved.
       *
       * This ONLY takes into account context propagation logic,
       * so this should usually not be called directly,
       * call {@link #getContext} instead.
       *
       * @param keys The path of keys to get the context at.
       * @return {Promise<{ context: JsonLdContextNormalized, depth: number }>} A context and its depth.
       */
      async getContextPropagationAware(keys) {
        const originalDepth = keys.length;
        let contextData = null;
        let hasApplicablePropertyScopedContext;
        do {
          hasApplicablePropertyScopedContext = false;
          if (contextData && "@__propagateFallback" in contextData.context.getContextRaw()) {
            contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized(contextData.context.getContextRaw()["@__propagateFallback"]);
          } else {
            if (contextData) {
              keys = keys.slice(0, contextData.depth - 1);
            }
            contextData = await this.contextTree.getContext(keys) || { context: await this.rootContext, depth: 0 };
          }
          const lastKey = keys[keys.length - 1];
          if (lastKey in contextData.context.getContextRaw()) {
            const lastKeyValue = contextData.context.getContextRaw()[lastKey];
            if (lastKeyValue && typeof lastKeyValue === "object" && "@context" in lastKeyValue) {
              hasApplicablePropertyScopedContext = true;
            }
          }
        } while (contextData.depth > 0 && contextData.context.getContextRaw()["@propagate"] === false && contextData.depth !== originalDepth && !hasApplicablePropertyScopedContext);
        if (contextData.depth === 0 && contextData.context.getContextRaw()["@propagate"] === false && contextData.depth !== originalDepth) {
          contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized({});
        }
        return contextData;
      }
      /**
       * Start a new job for parsing the given value.
       * @param {any[]} keys The stack of keys.
       * @param value The value to parse.
       * @param {number} depth The depth to parse at.
       * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.
       * @return {Promise<void>} A promise resolving when the job is done.
       */
      async newOnValueJob(keys, value, depth, lastDepthCheck) {
        await this.parser.newOnValueJob(keys, value, depth, lastDepthCheck);
      }
      /**
       * Flush the pending container flush buffers
       * @return {boolean} If any pending buffers were flushed.
       */
      async handlePendingContainerFlushBuffers() {
        if (this.pendingContainerFlushBuffers.length > 0) {
          for (const pendingFlushBuffer of this.pendingContainerFlushBuffers) {
            await this.parser.flushBuffer(pendingFlushBuffer.depth, pendingFlushBuffer.keys);
            this.parser.flushStacks(pendingFlushBuffer.depth);
          }
          this.pendingContainerFlushBuffers.splice(0, this.pendingContainerFlushBuffers.length);
          return true;
        } else {
          return false;
        }
      }
      /**
       * Emit the given quad into the output stream.
       * @param {number} depth The depth the quad was generated at.
       * @param {Quad} quad A quad to emit.
       */
      emitQuad(depth, quad) {
        if (depth === 1) {
          this.topLevelProperties = true;
        }
        this.parser.push(quad);
      }
      /**
       * Emit the given error into the output stream.
       * @param {Error} error An error to emit.
       */
      emitError(error2) {
        this.parser.emit("error", error2);
      }
      /**
       * Emit the given context into the output stream under the 'context' event.
       * @param {JsonLdContext} context A context to emit.
       */
      emitContext(context) {
        this.parser.emit("context", context);
      }
      /**
       * Safely get or create the depth value of {@link ParsingContext.unidentifiedValuesBuffer}.
       * @param {number} depth A depth.
       * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of
       *                                                               {@link ParsingContext.unidentifiedValuesBuffer}.
       */
      getUnidentifiedValueBufferSafe(depth) {
        let buffer2 = this.unidentifiedValuesBuffer[depth];
        if (!buffer2) {
          buffer2 = [];
          this.unidentifiedValuesBuffer[depth] = buffer2;
        }
        return buffer2;
      }
      /**
       * Safely get or create the depth value of {@link ParsingContext.unidentifiedGraphsBuffer}.
       * @param {number} depth A depth.
       * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of
       *                                                               {@link ParsingContext.unidentifiedGraphsBuffer}.
       */
      getUnidentifiedGraphBufferSafe(depth) {
        let buffer2 = this.unidentifiedGraphsBuffer[depth];
        if (!buffer2) {
          buffer2 = [];
          this.unidentifiedGraphsBuffer[depth] = buffer2;
        }
        return buffer2;
      }
      /**
       * Safely get or create the depth value of {@link ParsingContext.annotationsBuffer}.
       * @param {number} depth A depth.
       * @return {} An element of {@link ParsingContext.annotationsBuffer}.
       */
      getAnnotationsBufferSafe(depth) {
        let buffer2 = this.annotationsBuffer[depth];
        if (!buffer2) {
          buffer2 = [];
          this.annotationsBuffer[depth] = buffer2;
        }
        return buffer2;
      }
      /**
       * @return IExpandOptions The expand options for the active processing mode.
       */
      getExpandOptions() {
        return _ParsingContext.EXPAND_OPTIONS[this.activeProcessingMode];
      }
      /**
       * Shift the stack at the given offset to the given depth.
       *
       * This will override anything in the stack at `depth`,
       * and this will remove anything at `depth + depthOffset`
       *
       * @param depth The target depth.
       * @param depthOffset The origin depth, relative to `depth`.
       */
      shiftStack(depth, depthOffset) {
        const deeperIdStack = this.idStack[depth + depthOffset];
        if (deeperIdStack) {
          this.idStack[depth] = deeperIdStack;
          this.emittedStack[depth] = true;
          delete this.idStack[depth + depthOffset];
        }
        if (this.pendingContainerFlushBuffers.length) {
          for (const buffer2 of this.pendingContainerFlushBuffers) {
            if (buffer2.depth >= depth + depthOffset) {
              buffer2.depth -= depthOffset;
              buffer2.keys.splice(depth, depthOffset);
            }
          }
        }
        if (this.unidentifiedValuesBuffer[depth + depthOffset]) {
          this.unidentifiedValuesBuffer[depth] = this.unidentifiedValuesBuffer[depth + depthOffset];
          delete this.unidentifiedValuesBuffer[depth + depthOffset];
        }
        if (this.annotationsBuffer[depth + depthOffset - 1]) {
          if (!this.annotationsBuffer[depth - 1]) {
            this.annotationsBuffer[depth - 1] = [];
          }
          this.annotationsBuffer[depth - 1] = [
            ...this.annotationsBuffer[depth - 1],
            ...this.annotationsBuffer[depth + depthOffset - 1]
          ];
          delete this.annotationsBuffer[depth + depthOffset - 1];
        }
      }
    };
    ParsingContext.EXPAND_OPTIONS = {
      1: {
        allowPrefixForcing: false,
        allowPrefixNonGenDelims: false,
        allowVocabRelativeToBase: false
      },
      1.1: {
        allowPrefixForcing: true,
        allowPrefixNonGenDelims: false,
        allowVocabRelativeToBase: true
      }
    };
    exports.ParsingContext = ParsingContext;
  }
});

// node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordAnnotation.js
var require_EntryHandlerKeywordAnnotation = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordAnnotation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryHandlerKeywordAnnotation = void 0;
    var EntryHandlerKeyword_1 = require_EntryHandlerKeyword();
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var EntryHandlerKeywordAnnotation = class extends EntryHandlerKeyword_1.EntryHandlerKeyword {
      constructor() {
        super("@annotation");
      }
      async handle(parsingContext, util, key, keys, value, depth) {
        if (typeof value === "string" || typeof value === "object" && value["@value"]) {
          parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal annotation value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));
        }
      }
    };
    exports.EntryHandlerKeywordAnnotation = EntryHandlerKeywordAnnotation;
  }
});

// node_modules/jsonld-streaming-parser/lib/JsonLdParser.js
var require_JsonLdParser = __commonJS({
  "node_modules/jsonld-streaming-parser/lib/JsonLdParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonLdParser = void 0;
    var Parser4 = require_jsonparse();
    var jsonld_context_parser_1 = require_jsonld_context_parser();
    var readable_stream_1 = require_browser3();
    var EntryHandlerArrayValue_1 = require_EntryHandlerArrayValue();
    var EntryHandlerContainer_1 = require_EntryHandlerContainer();
    var EntryHandlerInvalidFallback_1 = require_EntryHandlerInvalidFallback();
    var EntryHandlerPredicate_1 = require_EntryHandlerPredicate();
    var EntryHandlerKeywordContext_1 = require_EntryHandlerKeywordContext();
    var EntryHandlerKeywordGraph_1 = require_EntryHandlerKeywordGraph();
    var EntryHandlerKeywordId_1 = require_EntryHandlerKeywordId();
    var EntryHandlerKeywordIncluded_1 = require_EntryHandlerKeywordIncluded();
    var EntryHandlerKeywordNest_1 = require_EntryHandlerKeywordNest();
    var EntryHandlerKeywordType_1 = require_EntryHandlerKeywordType();
    var EntryHandlerKeywordUnknownFallback_1 = require_EntryHandlerKeywordUnknownFallback();
    var EntryHandlerKeywordValue_1 = require_EntryHandlerKeywordValue();
    var ParsingContext_1 = require_ParsingContext();
    var Util_1 = require_Util4();
    var http_link_header_1 = require_link();
    var EntryHandlerKeywordAnnotation_1 = require_EntryHandlerKeywordAnnotation();
    var JsonLdParser2 = class _JsonLdParser extends readable_stream_1.Transform {
      constructor(options) {
        super({ readableObjectMode: true });
        options = options || {};
        this.options = options;
        this.parsingContext = new ParsingContext_1.ParsingContext(Object.assign({ parser: this }, options));
        this.util = new Util_1.Util({ dataFactory: options.dataFactory, parsingContext: this.parsingContext });
        this.jsonParser = new Parser4();
        this.contextJobs = [];
        this.typeJobs = [];
        this.contextAwaitingJobs = [];
        this.lastDepth = 0;
        this.lastKeys = [];
        this.lastOnValueJob = Promise.resolve();
        this.attachJsonParserListeners();
        this.on("end", () => {
          if (typeof this.jsonParser.mode !== "undefined") {
            this.emit("error", new Error("Unclosed document"));
          }
        });
      }
      /**
       * Construct a JsonLdParser from the given HTTP response.
       *
       * This will throw an error if no valid JSON response is received
       * (application/ld+json, application/json, or something+json).
       *
       * For raw JSON responses, exactly one link header pointing to a JSON-LD context is required.
       *
       * This method is not responsible for handling redirects.
       *
       * @param baseIRI The URI of the received response.
       * @param mediaType The received content type.
       * @param headers Optional HTTP headers.
       * @param options Optional parser options.
       */
      static fromHttpResponse(baseIRI, mediaType, headers, options) {
        let context;
        if (mediaType !== "application/ld+json") {
          if (mediaType !== "application/json" && !mediaType.endsWith("+json")) {
            throw new jsonld_context_parser_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);
          }
          if (headers && headers.has("Link")) {
            headers.forEach((value, key) => {
              if (key === "link") {
                const linkHeader = (0, http_link_header_1.parse)(value);
                for (const link of linkHeader.get("rel", "http://www.w3.org/ns/json-ld#context")) {
                  if (context) {
                    throw new jsonld_context_parser_1.ErrorCoded("Multiple JSON-LD context link headers were found on " + baseIRI, jsonld_context_parser_1.ERROR_CODES.MULTIPLE_CONTEXT_LINK_HEADERS);
                  }
                  context = link.uri;
                }
              }
            });
          }
          if (!context && !(options === null || options === void 0 ? void 0 : options.ignoreMissingContextLinkHeader)) {
            throw new jsonld_context_parser_1.ErrorCoded(`Missing context link header for media type ${mediaType} on ${baseIRI}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);
          }
        }
        let streamingProfile;
        if (headers && headers.has("Content-Type")) {
          const contentType = headers.get("Content-Type");
          const match = /; *profile=([^"]*)/.exec(contentType);
          if (match && match[1] === "http://www.w3.org/ns/json-ld#streaming") {
            streamingProfile = true;
          }
        }
        return new _JsonLdParser(Object.assign({
          baseIRI,
          context,
          streamingProfile
        }, options ? options : {}));
      }
      /**
       * Parses the given text stream into a quad stream.
       * @param {NodeJS.EventEmitter} stream A text stream.
       * @return {RDF.Stream} A quad stream.
       */
      import(stream) {
        if ("pipe" in stream) {
          stream.on("error", (error2) => parsed.emit("error", error2));
          const parsed = stream.pipe(new _JsonLdParser(this.options));
          return parsed;
        } else {
          const output = new readable_stream_1.PassThrough({ readableObjectMode: true });
          stream.on("error", (error2) => parsed.emit("error", error2));
          stream.on("data", (data) => output.push(data));
          stream.on("end", () => output.push(null));
          const parsed = output.pipe(new _JsonLdParser(this.options));
          return parsed;
        }
      }
      _transform(chunk, encoding, callback) {
        this.jsonParser.write(chunk);
        this.lastOnValueJob.then(() => callback(), (error2) => callback(error2));
      }
      /**
       * Start a new job for parsing the given value.
       *
       * This will let the first valid {@link IEntryHandler} handle the entry.
       *
       * @param {any[]} keys The stack of keys.
       * @param value The value to parse.
       * @param {number} depth The depth to parse at.
       * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.
       * @return {Promise<void>} A promise resolving when the job is done.
       */
      async newOnValueJob(keys, value, depth, lastDepthCheck) {
        let flushStacks = true;
        if (lastDepthCheck && depth < this.lastDepth) {
          const listPointer = this.parsingContext.listPointerStack[this.lastDepth];
          if (listPointer) {
            if (listPointer.value) {
              this.push(this.util.dataFactory.quad(listPointer.value, this.util.rdfRest, this.util.rdfNil, this.util.getDefaultGraph()));
            }
            listPointer.listId.listHead = true;
            this.parsingContext.idStack[listPointer.listRootDepth + 1] = [listPointer.listId];
            this.parsingContext.listPointerStack.splice(this.lastDepth, 1);
          }
          if (await EntryHandlerContainer_1.EntryHandlerContainer.isBufferableContainerHandler(this.parsingContext, this.lastKeys, this.lastDepth)) {
            this.parsingContext.pendingContainerFlushBuffers.push({ depth: this.lastDepth, keys: this.lastKeys.slice(0, this.lastKeys.length) });
            flushStacks = false;
          } else {
            await this.flushBuffer(this.lastDepth, this.lastKeys);
          }
        }
        const key = await this.util.unaliasKeyword(keys[depth], keys, depth);
        const parentKey = await this.util.unaliasKeywordParent(keys, depth);
        this.parsingContext.emittedStack[depth] = true;
        let handleKey = true;
        if (jsonld_context_parser_1.Util.isValidKeyword(key) && parentKey === "@reverse" && key !== "@context") {
          this.emit("error", new jsonld_context_parser_1.ErrorCoded(`Found the @id '${value}' inside an @reverse property`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_MAP));
        }
        let inProperty = false;
        if (this.parsingContext.validationStack.length > 1) {
          inProperty = this.parsingContext.validationStack[this.parsingContext.validationStack.length - 1].property;
        }
        for (let i2 = Math.max(1, this.parsingContext.validationStack.length - 1); i2 < keys.length - 1; i2++) {
          const validationResult = this.parsingContext.validationStack[i2] || (this.parsingContext.validationStack[i2] = await this.validateKey(keys.slice(0, i2 + 1), i2, inProperty));
          if (!validationResult.valid) {
            this.parsingContext.emittedStack[depth] = false;
            handleKey = false;
            break;
          } else if (!inProperty && validationResult.property) {
            inProperty = true;
          }
        }
        if (await this.util.isLiteral(keys, depth)) {
          handleKey = false;
        }
        if (handleKey) {
          for (const entryHandler of _JsonLdParser.ENTRY_HANDLERS) {
            const testResult = await entryHandler.test(this.parsingContext, this.util, key, keys, depth);
            if (testResult) {
              await entryHandler.handle(this.parsingContext, this.util, key, keys, value, depth, testResult);
              if (entryHandler.isStackProcessor()) {
                this.parsingContext.processingStack[depth] = true;
              }
              break;
            }
          }
        }
        if (depth === 0 && Array.isArray(value)) {
          await this.util.validateValueIndexes(value);
        }
        if (flushStacks && depth < this.lastDepth) {
          this.flushStacks(this.lastDepth);
        }
        this.lastDepth = depth;
        this.lastKeys = keys;
        this.parsingContext.unaliasedKeywordCacheStack.splice(depth - 1);
      }
      /**
       * Flush the processing stacks at the given depth.
       * @param {number} depth A depth.
       */
      flushStacks(depth) {
        this.parsingContext.processingStack.splice(depth, 1);
        this.parsingContext.processingType.splice(depth, 1);
        this.parsingContext.emittedStack.splice(depth, 1);
        this.parsingContext.idStack.splice(depth, 1);
        this.parsingContext.graphStack.splice(depth + 1, 1);
        this.parsingContext.graphContainerTermStack.splice(depth, 1);
        this.parsingContext.jsonLiteralStack.splice(depth, 1);
        this.parsingContext.validationStack.splice(depth - 1, 2);
        this.parsingContext.literalStack.splice(depth, this.parsingContext.literalStack.length - depth);
        this.parsingContext.annotationsBuffer.splice(depth, 1);
      }
      /**
       * Flush buffers for the given depth.
       *
       * This should be called after the last entry at a given depth was processed.
       *
       * @param {number} depth A depth.
       * @param {any[]} keys A stack of keys.
       * @return {Promise<void>} A promise resolving if flushing is done.
       */
      async flushBuffer(depth, keys) {
        let subjects = this.parsingContext.idStack[depth];
        const subjectsWasDefined = !!subjects;
        if (!subjectsWasDefined) {
          subjects = this.parsingContext.idStack[depth] = [this.util.dataFactory.blankNode()];
        }
        const valueBuffer = this.parsingContext.unidentifiedValuesBuffer[depth];
        if (valueBuffer) {
          for (const subject of subjects) {
            const depthOffsetGraph = await this.util.getDepthOffsetGraph(depth, keys);
            const graphs = this.parsingContext.graphStack[depth] || depthOffsetGraph >= 0 ? this.parsingContext.idStack[depth - depthOffsetGraph - 1] : [await this.util.getGraphContainerValue(keys, depth)];
            if (graphs) {
              for (const graph of graphs) {
                this.parsingContext.emittedStack[depth] = true;
                for (const bufferedValue of valueBuffer) {
                  this.util.emitQuadChecked(depth, subject, bufferedValue.predicate, bufferedValue.object, graph, bufferedValue.reverse, bufferedValue.isEmbedded);
                }
              }
            } else {
              const subGraphBuffer = this.parsingContext.getUnidentifiedGraphBufferSafe(depth - await this.util.getDepthOffsetGraph(depth, keys) - 1);
              for (const bufferedValue of valueBuffer) {
                if (bufferedValue.reverse) {
                  subGraphBuffer.push({
                    object: subject,
                    predicate: bufferedValue.predicate,
                    subject: bufferedValue.object,
                    isEmbedded: bufferedValue.isEmbedded
                  });
                } else {
                  subGraphBuffer.push({
                    object: bufferedValue.object,
                    predicate: bufferedValue.predicate,
                    subject,
                    isEmbedded: bufferedValue.isEmbedded
                  });
                }
              }
            }
          }
          this.parsingContext.unidentifiedValuesBuffer.splice(depth, 1);
          this.parsingContext.literalStack.splice(depth, 1);
          this.parsingContext.jsonLiteralStack.splice(depth, 1);
        }
        const graphBuffer = this.parsingContext.unidentifiedGraphsBuffer[depth];
        if (graphBuffer) {
          for (const subject of subjects) {
            const graph = depth === 1 && subject.termType === "BlankNode" && !this.parsingContext.topLevelProperties ? this.util.getDefaultGraph() : subject;
            this.parsingContext.emittedStack[depth] = true;
            for (const bufferedValue of graphBuffer) {
              this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.subject, bufferedValue.predicate, bufferedValue.object, graph));
            }
          }
          this.parsingContext.unidentifiedGraphsBuffer.splice(depth, 1);
        }
        const annotationsBuffer = this.parsingContext.annotationsBuffer[depth];
        if (annotationsBuffer) {
          if (annotationsBuffer.length > 0 && depth === 1) {
            this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Annotations can not be made on top-level nodes`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));
          }
          const annotationsBufferParent = this.parsingContext.getAnnotationsBufferSafe(depth - 1);
          for (const annotation of annotationsBuffer) {
            annotationsBufferParent.push(annotation);
          }
          delete this.parsingContext.annotationsBuffer[depth];
        }
      }
      /**
       * Check if at least one {@link IEntryHandler} validates the entry to true.
       * @param {any[]} keys A stack of keys.
       * @param {number} depth A depth.
       * @param {boolean} inProperty If the current depth is part of a valid property node.
       * @return {Promise<{ valid: boolean, property: boolean }>} A promise resolving to true or false.
       */
      async validateKey(keys, depth, inProperty) {
        for (const entryHandler of _JsonLdParser.ENTRY_HANDLERS) {
          if (await entryHandler.validate(this.parsingContext, this.util, keys, depth, inProperty)) {
            return { valid: true, property: inProperty || entryHandler.isPropertyHandler() };
          }
        }
        return { valid: false, property: false };
      }
      /**
       * Attach all required listeners to the JSON parser.
       *
       * This should only be called once.
       */
      attachJsonParserListeners() {
        this.jsonParser.onValue = (value) => {
          const depth = this.jsonParser.stack.length;
          const keys = new Array(depth + 1).fill(0).map((v, i2) => {
            return i2 === depth ? this.jsonParser.key : this.jsonParser.stack[i2].key;
          });
          if (!this.isParsingContextInner(depth)) {
            const valueJobCb = () => this.newOnValueJob(keys, value, depth, true);
            if (!this.parsingContext.streamingProfile && !this.parsingContext.contextTree.getContext(keys.slice(0, -1))) {
              if (keys[depth] === "@context") {
                let jobs = this.contextJobs[depth];
                if (!jobs) {
                  jobs = this.contextJobs[depth] = [];
                }
                jobs.push(valueJobCb);
              } else {
                this.contextAwaitingJobs.push({ job: valueJobCb, keys, depth });
              }
            } else {
              this.lastOnValueJob = this.lastOnValueJob.then(valueJobCb);
            }
            if (!this.parsingContext.streamingProfile && depth === 0) {
              this.lastOnValueJob = this.lastOnValueJob.then(() => this.executeBufferedJobs());
            }
          }
        };
        this.jsonParser.onError = (error2) => {
          this.emit("error", error2);
        };
      }
      /**
       * Check if the parser is currently parsing an element that is part of an @context entry.
       * @param {number} depth A depth.
       * @return {boolean} A boolean.
       */
      isParsingContextInner(depth) {
        for (let i2 = depth; i2 > 0; i2--) {
          if (this.jsonParser.stack[i2 - 1].key === "@context") {
            return true;
          }
        }
        return false;
      }
      /**
       * Execute all buffered jobs.
       * @return {Promise<void>} A promise resolving if all jobs are finished.
       */
      async executeBufferedJobs() {
        for (const jobs of this.contextJobs) {
          if (jobs) {
            for (const job of jobs) {
              await job();
            }
          }
        }
        this.parsingContext.unaliasedKeywordCacheStack.splice(0);
        const contextAwaitingJobs = [];
        for (const job of this.contextAwaitingJobs) {
          if (await this.util.unaliasKeyword(job.keys[job.depth], job.keys, job.depth, true) === "@type" || typeof job.keys[job.depth] === "number" && await this.util.unaliasKeyword(job.keys[job.depth - 1], job.keys, job.depth - 1, true) === "@type") {
            this.typeJobs.push({ job: job.job, keys: job.keys.slice(0, job.keys.length - 1) });
          } else {
            contextAwaitingJobs.push(job);
          }
        }
        for (const job of contextAwaitingJobs) {
          if (this.typeJobs.length > 0) {
            const applicableTypeJobs = [];
            const applicableTypeJobIds = [];
            for (let i2 = 0; i2 < this.typeJobs.length; i2++) {
              const typeJob = this.typeJobs[i2];
              if (Util_1.Util.isPrefixArray(typeJob.keys, job.keys)) {
                applicableTypeJobs.push(typeJob);
                applicableTypeJobIds.push(i2);
              }
            }
            const sortedTypeJobs = applicableTypeJobs.sort((job1, job2) => job1.keys.length - job2.keys.length);
            for (const typeJob of sortedTypeJobs) {
              await typeJob.job();
            }
            const sortedApplicableTypeJobIds = applicableTypeJobIds.sort().reverse();
            for (const jobId of sortedApplicableTypeJobIds) {
              this.typeJobs.splice(jobId, 1);
            }
          }
          await job.job();
        }
      }
    };
    JsonLdParser2.DEFAULT_PROCESSING_MODE = "1.1";
    JsonLdParser2.ENTRY_HANDLERS = [
      new EntryHandlerArrayValue_1.EntryHandlerArrayValue(),
      new EntryHandlerKeywordContext_1.EntryHandlerKeywordContext(),
      new EntryHandlerKeywordId_1.EntryHandlerKeywordId(),
      new EntryHandlerKeywordIncluded_1.EntryHandlerKeywordIncluded(),
      new EntryHandlerKeywordGraph_1.EntryHandlerKeywordGraph(),
      new EntryHandlerKeywordNest_1.EntryHandlerKeywordNest(),
      new EntryHandlerKeywordType_1.EntryHandlerKeywordType(),
      new EntryHandlerKeywordValue_1.EntryHandlerKeywordValue(),
      new EntryHandlerKeywordAnnotation_1.EntryHandlerKeywordAnnotation(),
      new EntryHandlerContainer_1.EntryHandlerContainer(),
      new EntryHandlerKeywordUnknownFallback_1.EntryHandlerKeywordUnknownFallback(),
      new EntryHandlerPredicate_1.EntryHandlerPredicate(),
      new EntryHandlerInvalidFallback_1.EntryHandlerInvalidFallback()
    ];
    exports.JsonLdParser = JsonLdParser2;
  }
});

// node_modules/jsonld-streaming-parser/index.js
var require_jsonld_streaming_parser = __commonJS({
  "node_modules/jsonld-streaming-parser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_JsonLdParser(), exports);
  }
});

// node_modules/@rdfjs/to-ntriples/lib/blankNode.js
var require_blankNode = __commonJS({
  "node_modules/@rdfjs/to-ntriples/lib/blankNode.js"(exports, module) {
    function blankNode(blankNode2) {
      return "_:" + blankNode2.value;
    }
    module.exports = blankNode;
  }
});

// node_modules/@rdfjs/to-ntriples/lib/dataset.js
var require_dataset = __commonJS({
  "node_modules/@rdfjs/to-ntriples/lib/dataset.js"(exports, module) {
    function dataset(dataset2, toNT2) {
      return [...dataset2].map((quad) => toNT2(quad)).join("\n") + "\n";
    }
    module.exports = dataset;
  }
});

// node_modules/@rdfjs/to-ntriples/lib/defaultGraph.js
var require_defaultGraph = __commonJS({
  "node_modules/@rdfjs/to-ntriples/lib/defaultGraph.js"(exports, module) {
    function defaultGraph() {
      return "";
    }
    module.exports = defaultGraph;
  }
});

// node_modules/@rdfjs/to-ntriples/lib/namedNode.js
var require_namedNode = __commonJS({
  "node_modules/@rdfjs/to-ntriples/lib/namedNode.js"(exports, module) {
    function namedNode(namedNode2) {
      return "<" + namedNode2.value + ">";
    }
    module.exports = namedNode;
  }
});

// node_modules/@rdfjs/to-ntriples/lib/literal.js
var require_literal = __commonJS({
  "node_modules/@rdfjs/to-ntriples/lib/literal.js"(exports, module) {
    var namedNode = require_namedNode();
    var echarRegEx = /["\\\\\n\r]/;
    var echarRegExAll = /["\\\\\n\r]/g;
    var echarReplacement = {
      '"': '\\"',
      "\\": "\\\\",
      "\n": "\\n",
      "\r": "\\r"
    };
    function echarReplacer(char) {
      return echarReplacement[char];
    }
    function escapeValue(value) {
      if (echarRegEx.test(value)) {
        return value.replace(echarRegExAll, echarReplacer);
      }
      return value;
    }
    function literal(literal2) {
      const escapedValue = escapeValue(literal2.value);
      if (literal2.datatype.value === "http://www.w3.org/2001/XMLSchema#string") {
        return '"' + escapedValue + '"';
      }
      if (literal2.datatype.value === "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString") {
        return '"' + escapedValue + '"@' + literal2.language;
      }
      return '"' + escapedValue + '"^^' + namedNode(literal2.datatype);
    }
    module.exports = literal;
  }
});

// node_modules/@rdfjs/to-ntriples/lib/quad.js
var require_quad = __commonJS({
  "node_modules/@rdfjs/to-ntriples/lib/quad.js"(exports, module) {
    function quad(quad2, toNT2) {
      const subjectString = toNT2(quad2.subject);
      const predicateString = toNT2(quad2.predicate);
      const objectString = toNT2(quad2.object);
      const graphString = toNT2(quad2.graph);
      return `${subjectString} ${predicateString} ${objectString} ${graphString ? graphString + " " : ""}.`;
    }
    module.exports = quad;
  }
});

// node_modules/@rdfjs/to-ntriples/lib/variable.js
var require_variable = __commonJS({
  "node_modules/@rdfjs/to-ntriples/lib/variable.js"(exports, module) {
    function variable(variable2) {
      return "?" + variable2.value;
    }
    module.exports = variable;
  }
});

// node_modules/@rdfjs/to-ntriples/index.js
var require_to_ntriples = __commonJS({
  "node_modules/@rdfjs/to-ntriples/index.js"(exports, module) {
    var blankNode = require_blankNode();
    var dataset = require_dataset();
    var defaultGraph = require_defaultGraph();
    var literal = require_literal();
    var namedNode = require_namedNode();
    var quad = require_quad();
    var variable = require_variable();
    function toNT2(term) {
      if (!term) {
        return null;
      }
      if (term.termType === "BlankNode") {
        return blankNode(term);
      }
      if (term.termType === "DefaultGraph") {
        return defaultGraph();
      }
      if (term.termType === "Literal") {
        return literal(term);
      }
      if (term.termType === "NamedNode") {
        return namedNode(term);
      }
      if (term.termType === "Quad" || term.subject && term.predicate && term.object && term.graph) {
        return quad(term, toNT2);
      }
      if (term.termType === "Variable") {
        return variable(term);
      }
      if (term[Symbol.iterator]) {
        return dataset(term, toNT2);
      }
      throw new Error(`unknown termType ${term.termType}`);
    }
    module.exports = toNT2;
  }
});

// node_modules/rdfxml-streaming-parser/lib/ParseError.js
var require_ParseError = __commonJS({
  "node_modules/rdfxml-streaming-parser/lib/ParseError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParseError = void 0;
    var ParseError = class extends Error {
      constructor(parser, message) {
        const saxParser = parser.saxParser;
        super(parser.trackPosition ? `Line ${saxParser.line} column ${saxParser.column + 1}: ${message}` : message);
      }
    };
    exports.ParseError = ParseError;
  }
});

// node_modules/validate-iri/lib/Validate.js
var require_Validate = __commonJS({
  "node_modules/validate-iri/lib/Validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateIri = exports.IriValidationStrategy = void 0;
    function buildAbsoluteIriRfc3987Regex() {
      const sub_delims_raw = `!$&'()*+,;=`;
      const sub_delims = `[${sub_delims_raw}]`;
      const pct_encoded = `%[a-fA-F0-9]{2}`;
      const dec_octet = "([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
      const ipv4address = `${dec_octet}\\.${dec_octet}\\.${dec_octet}\\.${dec_octet}`;
      const h16 = `[a-fA-F0-9]{1,4}`;
      const ls32 = `(${h16}:${h16}|${ipv4address})`;
      const ipv6address = `((${h16}:){6}${ls32}|::(${h16}:){5}${ls32}|(${h16})?::(${h16}:){4}${ls32}|((${h16}:){0,1}${h16})?::(${h16}:){3}${ls32}|((${h16}:){0,2}${h16})?::(${h16}:){2}${ls32}|((${h16}:){0,3}${h16})?::${h16}:${ls32}|((${h16}:){0,4}${h16})?::${ls32}|((${h16}:){0,5}${h16})?::${h16}|((${h16}:){0,6}${h16})?::)`;
      const ipvfuture = `v[a-fA-F0-9]+\\.(${sub_delims}|${sub_delims}|":)+`;
      const ip_literal = `\\[(${ipv6address}|${ipvfuture})\\]`;
      const port = `[0-9]*`;
      const scheme = `[a-zA-Z][a-zA-Z0-9+\\-.]*`;
      const iprivate_raw = `\uE000-\uF8FF\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}`;
      const iprivate = `[${iprivate_raw}]`;
      const ucschar_raw = `\xA0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\u{10000}-\u{1FFFD}\u{20000}-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}\u{50000}-\u{5FFFD}\u{60000}-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}\u{90000}-\u{9FFFD}\u{A0000}-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}\u{D0000}-\u{DFFFD}\u{E1000}-\u{EFFFD}`;
      const iunreserved_raw = `a-zA-Z0-9\\-._~${ucschar_raw}`;
      const iunreserved = `[${iunreserved_raw}]`;
      const ipchar = `(${iunreserved}|${pct_encoded}|${sub_delims}|[:@])*`;
      const ifragment = `(${ipchar}|[\\/?])*`;
      const iquery = `(${ipchar}|${iprivate}|[\\/?])*`;
      const isegment_nz = `(${ipchar})+`;
      const isegment = `(${ipchar})*`;
      const ipath_empty = "";
      const ipath_rootless = `${isegment_nz}(\\/${isegment})*`;
      const ipath_absolute = `\\/(${isegment_nz}(\\/${isegment})*)?`;
      const ipath_abempty = `(\\/${isegment})*`;
      const ireg_name = `(${iunreserved}|${pct_encoded}|${sub_delims})*`;
      const ihost = `(${ip_literal}|${ipv4address}|${ireg_name})`;
      const iuserinfo = `(${iunreserved}|${pct_encoded}|${sub_delims}|:)*`;
      const iauthority = `(${iuserinfo}@)?${ihost}(:${port})?`;
      const ihier_part = `(\\/\\/${iauthority}${ipath_abempty}|${ipath_absolute}|${ipath_rootless}|${ipath_empty})`;
      const iri = `^${scheme}:${ihier_part}(\\?${iquery})?(#${ifragment})?$`;
      return new RegExp(iri, "u");
    }
    var STRICT_IRI_REGEX = buildAbsoluteIriRfc3987Regex();
    var PRAGMATIC_IRI_REGEX = /^[A-Za-z][\d+-.A-Za-z]*:[^\u0000-\u0020"<>\\^`{|}]*$/u;
    var IriValidationStrategy;
    (function(IriValidationStrategy2) {
      IriValidationStrategy2["Strict"] = "strict";
      IriValidationStrategy2["Pragmatic"] = "pragmatic";
      IriValidationStrategy2["None"] = "none";
    })(IriValidationStrategy = exports.IriValidationStrategy || (exports.IriValidationStrategy = {}));
    function validateIri(iri, strategy = IriValidationStrategy.Strict) {
      switch (strategy) {
        case IriValidationStrategy.Strict:
          return STRICT_IRI_REGEX.test(iri) ? void 0 : new Error(`Invalid IRI according to RFC 3987: '${iri}'`);
        case IriValidationStrategy.Pragmatic:
          return PRAGMATIC_IRI_REGEX.test(iri) ? void 0 : new Error(`Invalid IRI according to RDF Turtle: '${iri}'`);
        case IriValidationStrategy.None:
          return void 0;
        default:
          return new Error(`Not supported validation strategy "${strategy}"`);
      }
    }
    exports.validateIri = validateIri;
  }
});

// node_modules/validate-iri/index.js
var require_validate_iri = __commonJS({
  "node_modules/validate-iri/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Validate(), exports);
  }
});

// node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js
var require_RdfXmlParser = __commonJS({
  "node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParseType = exports.RdfXmlParser = void 0;
    var relative_to_absolute_iri_1 = require_relative_to_absolute_iri();
    var saxes_1 = require_saxes();
    var readable_stream_1 = require_browser3();
    var ParseError_1 = require_ParseError();
    var rdf_data_factory_1 = require_rdf_data_factory();
    var validate_iri_1 = require_validate_iri();
    var RdfXmlParser2 = class _RdfXmlParser extends readable_stream_1.Transform {
      constructor(args) {
        super({ readableObjectMode: true });
        this.activeTagStack = [];
        this.nodeIds = {};
        if (args) {
          Object.assign(this, args);
          this.options = args;
        }
        if (!this.dataFactory) {
          this.dataFactory = new rdf_data_factory_1.DataFactory();
        }
        if (!this.baseIRI) {
          this.baseIRI = "";
        }
        if (!this.defaultGraph) {
          this.defaultGraph = this.dataFactory.defaultGraph();
        }
        if (this.validateUri !== false) {
          this.validateUri = true;
        }
        if (!this.iriValidationStrategy) {
          this.iriValidationStrategy = this.validateUri ? validate_iri_1.IriValidationStrategy.Pragmatic : validate_iri_1.IriValidationStrategy.None;
        }
        this.saxParser = new saxes_1.SaxesParser({ xmlns: true, position: this.trackPosition });
        this.attachSaxListeners();
      }
      /**
       * Parses the given text stream into a quad stream.
       * @param {NodeJS.EventEmitter} stream A text stream.
       * @return {RDF.Stream} A quad stream.
       */
      import(stream) {
        const output = new readable_stream_1.PassThrough({ readableObjectMode: true });
        stream.on("error", (error2) => parsed.emit("error", error2));
        stream.on("data", (data) => output.push(data));
        stream.on("end", () => output.push(null));
        const parsed = output.pipe(new _RdfXmlParser(this.options));
        return parsed;
      }
      _transform(chunk, encoding, callback) {
        try {
          this.saxParser.write(chunk);
        } catch (e) {
          return callback(e);
        }
        callback();
      }
      /**
       * Create a new parse error instance.
       * @param {string} message An error message.
       * @return {Error} An error instance.
       */
      newParseError(message) {
        return new ParseError_1.ParseError(this, message);
      }
      /**
       * Convert the given value to a IRI by taking into account the baseIRI.
       *
       * This will follow the RDF/XML spec for converting values with baseIRIs to a IRI.
       *
       * @param {string} value The value to convert to an IRI.
       * @param {IActiveTag} activeTag The active tag.
       * @return {NamedNode} an IRI.
       */
      valueToUri(value, activeTag) {
        return this.uriToNamedNode((0, relative_to_absolute_iri_1.resolve)(value, activeTag.baseIRI));
      }
      /**
       * Convert the given value URI string to a named node.
       *
       * This throw an error if the URI is invalid.
       *
       * @param {string} uri A URI string.
       * @return {NamedNode} a named node.
       */
      uriToNamedNode(uri) {
        const uriValidationResult = (0, validate_iri_1.validateIri)(uri, this.iriValidationStrategy);
        if (uriValidationResult instanceof Error) {
          throw this.newParseError(uriValidationResult.message);
        }
        return this.dataFactory.namedNode(uri);
      }
      /**
       * Validate the given value as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName
       * If it is invalid, an error will thrown emitted.
       * @param {string} value A value.
       */
      validateNcname(value) {
        if (!_RdfXmlParser.NCNAME_MATCHER.test(value)) {
          throw this.newParseError(`Not a valid NCName: ${value}`);
        }
      }
      attachSaxListeners() {
        this.saxParser.on("error", (error2) => this.emit("error", error2));
        this.saxParser.on("opentag", this.onTag.bind(this));
        this.saxParser.on("text", this.onText.bind(this));
        this.saxParser.on("cdata", this.onText.bind(this));
        this.saxParser.on("closetag", this.onCloseTag.bind(this));
        this.saxParser.on("doctype", this.onDoctype.bind(this));
      }
      /**
       * Handle the given tag.
       * @param {SaxesTagNS} tag A SAX tag.
       */
      onTag(tag) {
        const parentTag = this.activeTagStack.length ? this.activeTagStack[this.activeTagStack.length - 1] : null;
        let currentParseType = ParseType.RESOURCE;
        if (parentTag) {
          parentTag.hadChildren = true;
          currentParseType = parentTag.childrenParseType;
        }
        if (parentTag && parentTag.childrenStringTags) {
          const tagName = tag.name;
          let attributes = "";
          for (const attributeKey in tag.attributes) {
            attributes += ` ${attributeKey}="${tag.attributes[attributeKey].value}"`;
          }
          const tagContents = `${tagName}${attributes}`;
          const tagString = `<${tagContents}>`;
          parentTag.childrenStringTags.push(tagString);
          const stringActiveTag = { childrenStringTags: parentTag.childrenStringTags };
          stringActiveTag.childrenStringEmitClosingTag = `</${tagName}>`;
          this.activeTagStack.push(stringActiveTag);
          return;
        }
        const activeTag = {};
        if (parentTag) {
          activeTag.language = parentTag.language;
          activeTag.baseIRI = parentTag.baseIRI;
        } else {
          activeTag.baseIRI = this.baseIRI;
        }
        this.activeTagStack.push(activeTag);
        if (currentParseType === ParseType.RESOURCE) {
          this.onTagResource(tag, activeTag, parentTag, !parentTag);
        } else {
          this.onTagProperty(tag, activeTag, parentTag);
        }
      }
      /**
       * Handle the given node element in resource-mode.
       * @param {SaxesTagNS} tag A SAX tag.
       * @param {IActiveTag} activeTag The currently active tag.
       * @param {IActiveTag} parentTag The parent tag or null.
       * @param {boolean} rootTag If we are currently processing the root tag.
       */
      onTagResource(tag, activeTag, parentTag, rootTag) {
        activeTag.childrenParseType = ParseType.PROPERTY;
        let typedNode = true;
        if (tag.uri === _RdfXmlParser.RDF) {
          if (!rootTag && _RdfXmlParser.FORBIDDEN_NODE_ELEMENTS.indexOf(tag.local) >= 0) {
            throw this.newParseError(`Illegal node element name: ${tag.local}`);
          }
          switch (tag.local) {
            case "RDF":
              activeTag.childrenParseType = ParseType.RESOURCE;
            case "Description":
              typedNode = false;
          }
        }
        const predicates = [];
        const objects = [];
        let activeSubjectValue = null;
        let claimSubjectNodeId = false;
        let subjectValueBlank = false;
        let explicitType = null;
        for (const attributeKey in tag.attributes) {
          const attribute = tag.attributes[attributeKey];
          if (parentTag && attribute.uri === _RdfXmlParser.RDF) {
            switch (attribute.local) {
              case "about":
                if (activeSubjectValue) {
                  throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, while ${attribute.value} and ${activeSubjectValue} where found.`);
                }
                activeSubjectValue = attribute.value;
                continue;
              case "ID":
                if (activeSubjectValue) {
                  throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, while ${attribute.value} and ${activeSubjectValue} where found.`);
                }
                this.validateNcname(attribute.value);
                activeSubjectValue = "#" + attribute.value;
                claimSubjectNodeId = true;
                continue;
              case "nodeID":
                if (activeSubjectValue) {
                  throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, while ${attribute.value} and ${activeSubjectValue} where found.`);
                }
                this.validateNcname(attribute.value);
                activeSubjectValue = attribute.value;
                subjectValueBlank = true;
                continue;
              case "bagID":
                throw this.newParseError(`rdf:bagID is not supported.`);
              case "type":
                explicitType = attribute.value;
                continue;
              case "aboutEach":
                throw this.newParseError(`rdf:aboutEach is not supported.`);
              case "aboutEachPrefix":
                throw this.newParseError(`rdf:aboutEachPrefix is not supported.`);
              case "li":
                throw this.newParseError(`rdf:li on node elements are not supported.`);
            }
          } else if (attribute.uri === _RdfXmlParser.XML) {
            if (attribute.local === "lang") {
              activeTag.language = attribute.value === "" ? null : attribute.value.toLowerCase();
              continue;
            } else if (attribute.local === "base") {
              activeTag.baseIRI = (0, relative_to_absolute_iri_1.resolve)(attribute.value, activeTag.baseIRI);
              continue;
            }
          }
          if (attribute.prefix !== "xml" && attribute.prefix !== "xmlns" && (attribute.prefix !== "" || attribute.local !== "xmlns") && attribute.uri) {
            predicates.push(this.uriToNamedNode(attribute.uri + attribute.local));
            objects.push(attribute.value);
          }
        }
        if (activeSubjectValue !== null) {
          activeTag.subject = subjectValueBlank ? this.dataFactory.blankNode(activeSubjectValue) : this.valueToUri(activeSubjectValue, activeTag);
          if (claimSubjectNodeId) {
            this.claimNodeId(activeTag.subject);
          }
        }
        if (!activeTag.subject) {
          activeTag.subject = this.dataFactory.blankNode();
        }
        if (typedNode) {
          const type = this.uriToNamedNode(tag.uri + tag.local);
          this.emitTriple(activeTag.subject, this.dataFactory.namedNode(_RdfXmlParser.RDF + "type"), type, parentTag ? parentTag.reifiedStatementId : null);
        }
        if (parentTag) {
          if (parentTag.predicate) {
            if (parentTag.childrenCollectionSubject) {
              const linkTerm = this.dataFactory.blankNode();
              this.emitTriple(parentTag.childrenCollectionSubject, parentTag.childrenCollectionPredicate, linkTerm, parentTag.reifiedStatementId);
              this.emitTriple(linkTerm, this.dataFactory.namedNode(_RdfXmlParser.RDF + "first"), activeTag.subject, activeTag.reifiedStatementId);
              parentTag.childrenCollectionSubject = linkTerm;
              parentTag.childrenCollectionPredicate = this.dataFactory.namedNode(_RdfXmlParser.RDF + "rest");
            } else {
              this.emitTriple(parentTag.subject, parentTag.predicate, activeTag.subject, parentTag.reifiedStatementId);
              for (let i2 = 0; i2 < parentTag.predicateSubPredicates.length; i2++) {
                this.emitTriple(activeTag.subject, parentTag.predicateSubPredicates[i2], parentTag.predicateSubObjects[i2], null);
              }
              parentTag.predicateSubPredicates = [];
              parentTag.predicateSubObjects = [];
              parentTag.predicateEmitted = true;
            }
          }
          for (let i2 = 0; i2 < predicates.length; i2++) {
            const object = this.dataFactory.literal(objects[i2], activeTag.datatype || activeTag.language);
            this.emitTriple(activeTag.subject, predicates[i2], object, parentTag.reifiedStatementId);
          }
          if (explicitType) {
            this.emitTriple(activeTag.subject, this.dataFactory.namedNode(_RdfXmlParser.RDF + "type"), this.uriToNamedNode(explicitType), null);
          }
        }
      }
      /**
       * Handle the given property element in property-mode.
       * @param {SaxesTagNS} tag A SAX tag.
       * @param {IActiveTag} activeTag The currently active tag.
       * @param {IActiveTag} parentTag The parent tag or null.
       */
      onTagProperty(tag, activeTag, parentTag) {
        activeTag.childrenParseType = ParseType.RESOURCE;
        activeTag.subject = parentTag.subject;
        if (tag.uri === _RdfXmlParser.RDF && tag.local === "li") {
          if (!parentTag.listItemCounter) {
            parentTag.listItemCounter = 1;
          }
          activeTag.predicate = this.uriToNamedNode(tag.uri + "_" + parentTag.listItemCounter++);
        } else {
          activeTag.predicate = this.uriToNamedNode(tag.uri + tag.local);
        }
        if (tag.uri === _RdfXmlParser.RDF && _RdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS.indexOf(tag.local) >= 0) {
          throw this.newParseError(`Illegal property element name: ${tag.local}`);
        }
        activeTag.predicateSubPredicates = [];
        activeTag.predicateSubObjects = [];
        let parseType = false;
        let attributedProperty = false;
        let activeSubSubjectValue = null;
        let subSubjectValueBlank = true;
        const predicates = [];
        const objects = [];
        for (const propertyAttributeKey in tag.attributes) {
          const propertyAttribute = tag.attributes[propertyAttributeKey];
          if (propertyAttribute.uri === _RdfXmlParser.RDF) {
            switch (propertyAttribute.local) {
              case "resource":
                if (activeSubSubjectValue) {
                  throw this.newParseError(`Found both rdf:resource (${propertyAttribute.value}) and rdf:nodeID (${activeSubSubjectValue}).`);
                }
                if (parseType) {
                  throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:resource (${propertyAttribute.value})`);
                }
                activeTag.hadChildren = true;
                activeSubSubjectValue = propertyAttribute.value;
                subSubjectValueBlank = false;
                continue;
              case "datatype":
                if (attributedProperty) {
                  throw this.newParseError(`Found both non-rdf:* property attributes and rdf:datatype (${propertyAttribute.value}).`);
                }
                if (parseType) {
                  throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${propertyAttribute.value})`);
                }
                activeTag.datatype = this.valueToUri(propertyAttribute.value, activeTag);
                continue;
              case "nodeID":
                if (attributedProperty) {
                  throw this.newParseError(`Found both non-rdf:* property attributes and rdf:nodeID (${propertyAttribute.value}).`);
                }
                if (activeTag.hadChildren) {
                  throw this.newParseError(`Found both rdf:resource and rdf:nodeID (${propertyAttribute.value}).`);
                }
                if (parseType) {
                  throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID (${propertyAttribute.value})`);
                }
                this.validateNcname(propertyAttribute.value);
                activeTag.hadChildren = true;
                activeSubSubjectValue = propertyAttribute.value;
                subSubjectValueBlank = true;
                continue;
              case "bagID":
                throw this.newParseError(`rdf:bagID is not supported.`);
              case "parseType":
                if (attributedProperty) {
                  throw this.newParseError(`rdf:parseType is not allowed when non-rdf:* property attributes are present`);
                }
                if (activeTag.datatype) {
                  throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${activeTag.datatype.value})`);
                }
                if (activeSubSubjectValue) {
                  throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID or rdf:resource (${activeSubSubjectValue})`);
                }
                if (propertyAttribute.value === "Resource") {
                  parseType = true;
                  activeTag.childrenParseType = ParseType.PROPERTY;
                  const nestedBNode = this.dataFactory.blankNode();
                  this.emitTriple(activeTag.subject, activeTag.predicate, nestedBNode, activeTag.reifiedStatementId);
                  activeTag.subject = nestedBNode;
                  activeTag.predicate = null;
                } else if (propertyAttribute.value === "Collection") {
                  parseType = true;
                  activeTag.hadChildren = true;
                  activeTag.childrenCollectionSubject = activeTag.subject;
                  activeTag.childrenCollectionPredicate = activeTag.predicate;
                  subSubjectValueBlank = false;
                } else if (propertyAttribute.value === "Literal") {
                  parseType = true;
                  activeTag.childrenTagsToString = true;
                  activeTag.childrenStringTags = [];
                }
                continue;
              case "ID":
                this.validateNcname(propertyAttribute.value);
                activeTag.reifiedStatementId = this.valueToUri("#" + propertyAttribute.value, activeTag);
                this.claimNodeId(activeTag.reifiedStatementId);
                continue;
            }
          } else if (propertyAttribute.uri === _RdfXmlParser.XML && propertyAttribute.local === "lang") {
            activeTag.language = propertyAttribute.value === "" ? null : propertyAttribute.value.toLowerCase();
            continue;
          }
          if (propertyAttribute.prefix !== "xml" && propertyAttribute.prefix !== "xmlns" && (propertyAttribute.prefix !== "" || propertyAttribute.local !== "xmlns") && propertyAttribute.uri) {
            if (parseType || activeTag.datatype) {
              throw this.newParseError(`Found illegal rdf:* properties on property element with attribute: ${propertyAttribute.value}`);
            }
            activeTag.hadChildren = true;
            attributedProperty = true;
            predicates.push(this.uriToNamedNode(propertyAttribute.uri + propertyAttribute.local));
            objects.push(this.dataFactory.literal(propertyAttribute.value, activeTag.datatype || activeTag.language));
          }
        }
        if (activeSubSubjectValue !== null) {
          const subjectParent = activeTag.subject;
          activeTag.subject = subSubjectValueBlank ? this.dataFactory.blankNode(activeSubSubjectValue) : this.valueToUri(activeSubSubjectValue, activeTag);
          this.emitTriple(subjectParent, activeTag.predicate, activeTag.subject, activeTag.reifiedStatementId);
          for (let i2 = 0; i2 < predicates.length; i2++) {
            this.emitTriple(activeTag.subject, predicates[i2], objects[i2], null);
          }
          activeTag.predicateEmitted = true;
        } else if (subSubjectValueBlank) {
          activeTag.predicateSubPredicates = predicates;
          activeTag.predicateSubObjects = objects;
          activeTag.predicateEmitted = false;
        }
      }
      /**
       * Emit the given triple to the stream.
       * @param {Term} subject A subject term.
       * @param {Term} predicate A predicate term.
       * @param {Term} object An object term.
       * @param {Term} statementId An optional resource that identifies the triple.
       *                           If truthy, then the given triple will also be emitted reified.
       */
      emitTriple(subject, predicate, object, statementId) {
        this.push(this.dataFactory.quad(subject, predicate, object, this.defaultGraph));
        if (statementId) {
          this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(_RdfXmlParser.RDF + "type"), this.dataFactory.namedNode(_RdfXmlParser.RDF + "Statement"), this.defaultGraph));
          this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(_RdfXmlParser.RDF + "subject"), subject, this.defaultGraph));
          this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(_RdfXmlParser.RDF + "predicate"), predicate, this.defaultGraph));
          this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(_RdfXmlParser.RDF + "object"), object, this.defaultGraph));
        }
      }
      /**
       * Register the given term as a node ID.
       * If one was already registered, this will emit an error.
       *
       * This is used to check duplicate occurrences of rdf:ID in scope of the baseIRI.
       * @param {Term} term An RDF term.
       */
      claimNodeId(term) {
        if (!this.allowDuplicateRdfIds) {
          if (this.nodeIds[term.value]) {
            throw this.newParseError(`Found multiple occurrences of rdf:ID='${term.value}'.`);
          }
          this.nodeIds[term.value] = true;
        }
      }
      /**
       * Handle the given text string.
       * @param {string} text A parsed text string.
       */
      onText(text) {
        const activeTag = this.activeTagStack.length ? this.activeTagStack[this.activeTagStack.length - 1] : null;
        if (activeTag) {
          if (activeTag.childrenStringTags) {
            activeTag.childrenStringTags.push(text);
          } else if (activeTag.predicate) {
            activeTag.text = text;
          }
        }
      }
      /**
       * Handle the closing of the last tag.
       */
      onCloseTag() {
        const poppedTag = this.activeTagStack.pop();
        if (poppedTag.childrenStringEmitClosingTag) {
          poppedTag.childrenStringTags.push(poppedTag.childrenStringEmitClosingTag);
        }
        if (poppedTag.childrenTagsToString) {
          poppedTag.datatype = this.dataFactory.namedNode(_RdfXmlParser.RDF + "XMLLiteral");
          poppedTag.text = poppedTag.childrenStringTags.join("");
          poppedTag.hadChildren = false;
        }
        if (poppedTag.childrenCollectionSubject) {
          this.emitTriple(poppedTag.childrenCollectionSubject, poppedTag.childrenCollectionPredicate, this.dataFactory.namedNode(_RdfXmlParser.RDF + "nil"), poppedTag.reifiedStatementId);
        } else if (poppedTag.predicate) {
          if (!poppedTag.hadChildren && poppedTag.childrenParseType !== ParseType.PROPERTY) {
            this.emitTriple(poppedTag.subject, poppedTag.predicate, this.dataFactory.literal(poppedTag.text || "", poppedTag.datatype || poppedTag.language), poppedTag.reifiedStatementId);
          } else if (!poppedTag.predicateEmitted) {
            const subject = this.dataFactory.blankNode();
            this.emitTriple(poppedTag.subject, poppedTag.predicate, subject, poppedTag.reifiedStatementId);
            for (let i2 = 0; i2 < poppedTag.predicateSubPredicates.length; i2++) {
              this.emitTriple(subject, poppedTag.predicateSubPredicates[i2], poppedTag.predicateSubObjects[i2], null);
            }
          }
        }
      }
      /**
       * Fetch local DOCTYPE ENTITY's and make the parser recognise them.
       * @param {string} doctype The read doctype.
       */
      onDoctype(doctype) {
        doctype.replace(/<!ENTITY\s+([^\s]+)\s+["']([^"']+)["']\s*>/g, (match, prefix, uri) => {
          this.saxParser.ENTITIES[prefix] = uri;
          return "";
        });
      }
    };
    exports.RdfXmlParser = RdfXmlParser2;
    RdfXmlParser2.MIME_TYPE = "application/rdf+xml";
    RdfXmlParser2.RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    RdfXmlParser2.XML = "http://www.w3.org/XML/1998/namespace";
    RdfXmlParser2.FORBIDDEN_NODE_ELEMENTS = [
      "RDF",
      "ID",
      "about",
      "bagID",
      "parseType",
      "resource",
      "nodeID",
      "li",
      "aboutEach",
      "aboutEachPrefix"
    ];
    RdfXmlParser2.FORBIDDEN_PROPERTY_ELEMENTS = [
      "Description",
      "RDF",
      "ID",
      "about",
      "bagID",
      "parseType",
      "resource",
      "nodeID",
      "aboutEach",
      "aboutEachPrefix"
    ];
    RdfXmlParser2.NCNAME_MATCHER = /^([A-Za-z\xC0-\xD6\xD8-\xF6\u{F8}-\u{2FF}\u{370}-\u{37D}\u{37F}-\u{1FFF}\u{200C}-\u{200D}\u{2070}-\u{218F}\u{2C00}-\u{2FEF}\u{3001}-\u{D7FF}\u{F900}-\u{FDCF}\u{FDF0}-\u{FFFD}\u{10000}-\u{EFFFF}_])([A-Za-z\xC0-\xD6\xD8-\xF6\u{F8}-\u{2FF}\u{370}-\u{37D}\u{37F}-\u{1FFF}\u{200C}-\u{200D}\u{2070}-\u{218F}\u{2C00}-\u{2FEF}\u{3001}-\u{D7FF}\u{F900}-\u{FDCF}\u{FDF0}-\u{FFFD}\u{10000}-\u{EFFFF}_\-.0-9#xB7\u{0300}-\u{036F}\u{203F}-\u{2040}])*$/u;
    var ParseType;
    (function(ParseType2) {
      ParseType2[ParseType2["RESOURCE"] = 0] = "RESOURCE";
      ParseType2[ParseType2["PROPERTY"] = 1] = "PROPERTY";
    })(ParseType || (exports.ParseType = ParseType = {}));
  }
});

// node_modules/rdfxml-streaming-parser/index.js
var require_rdfxml_streaming_parser = __commonJS({
  "node_modules/rdfxml-streaming-parser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_RdfXmlParser(), exports);
  }
});

// node_modules/@jcubic/wayne/index.min.js
var root_url = location.pathname.replace(/\/[^\/]+$/, "");
var root_url_re = new RegExp("^" + escape_re(root_url));
function normalize_url(url) {
  return url.replace(root_url_re, "");
}
function escape_re(str) {
  if (typeof str == "string") {
    var special = /([\^\$\[\]\(\)\{\}\+\*\.\|\?])/g;
    return str.replace(special, "\\$1");
  }
}
var HTTPResponse = class {
  constructor(resolve, reject) {
    this._resolve = resolve;
    this._reject = reject;
  }
  html(data, init) {
    this.send(data, { type: "text/html", ...init });
  }
  text(data, init) {
    this.send(data, init);
  }
  json(data, init) {
    this.send(JSON.stringify(data), { type: "application/json", ...init });
  }
  blob(blob, init = {}) {
    this._resolve(new Response(blob, init));
  }
  send(data, { type = "text/plain", ...init } = {}) {
    if (![void 0, null].includes(data)) {
      data = new Blob([data], { type });
    }
    this.blob(data, init);
  }
  async fetch(arg) {
    if (typeof arg === "string") {
      const _res = await fetch(arg);
      const type = _res.headers.get("Content-Type") ?? "application/octet-stream";
      this.send(await _res.arrayBuffer(), { type });
    } else if (arg instanceof Request) {
      return fetch(arg).then(this._resolve).catch(this._reject);
    }
  }
  download(content, { filename = "download", type = "text/plain", ...init } = {}) {
    const headers = { "Content-Disposition": `attachment; filename="${filename}"` };
    this.send(content, { type, headers, ...init });
  }
  redirect(code, url) {
    if (url === void 0) {
      url = code;
      code = 302;
    }
    if (!url.match(/https?:\/\//)) {
      url = root_url + url;
    }
    this._resolve(Response.redirect(url, code));
  }
  sse({ onClose } = {}) {
    let send, close, stream, defunct;
    stream = new ReadableStream({ cancel() {
      defunct = true;
      trigger(onClose);
    }, start: (controller) => {
      send = function(event) {
        if (!defunct) {
          const chunk = createChunk(event);
          const payload = new TextEncoder().encode(chunk);
          controller.enqueue(payload);
        }
      };
      close = function close2() {
        controller.close();
        stream = null;
        trigger(onClose);
      };
    } });
    this._resolve(new Response(stream, { headers: { "Content-Type": "text/event-stream; charset=utf-8", "Transfer-Encoding": "chunked", Connection: "keep-alive" } }));
    return { send, close };
  }
};
function RouteParser() {
  const name_re = "[a-zA-Z_][a-zA-Z_0-9]*";
  const self2 = this;
  const open_tag = "{";
  const close_tag = "}";
  const glob = "*";
  const number = "\\d";
  const optional = "?";
  const open_group = "(";
  const close_group = ")";
  const plus = "+";
  const dot = ".";
  self2.route_parser = function(open, close) {
    const routes2 = {};
    const tag_re = new RegExp("(" + escape_re(open) + name_re + escape_re(close) + ")", "g");
    const tokenizer_re = new RegExp(["(", escape_re(open), name_re, escape_re(close), "|", escape_re(glob), "|", escape_re(number), "|", escape_re(dot), "|", escape_re(optional), "|", escape_re(open_group), "|", escape_re(close_group), "|", escape_re(plus), ")"].join(""), "g");
    const clear_re = new RegExp(escape_re(open) + "(" + name_re + ")" + escape_re(close), "g");
    return function(str) {
      const result = [];
      let index = 0;
      let parentheses = 0;
      str = str.split(tokenizer_re).map(function(chunk, i2, chunks2) {
        if (chunk === open_group) {
          parentheses++;
        } else if (chunk === close_group) {
          parentheses--;
        }
        if ([open_group, plus, close_group, optional, dot, number].includes(chunk)) {
          return chunk;
        } else if (chunk === glob) {
          result.push(index++);
          return "(.*?)";
        } else if (chunk.match(tag_re)) {
          result.push(chunk.replace(clear_re, "$1"));
          return "([^\\/]+)";
        } else {
          return chunk;
        }
      }).join("");
      if (parentheses !== 0) {
        throw new Error(`Wayne: Unbalanced parentheses in an expression: ${str}`);
      }
      return { re: str, names: result };
    };
  };
  const parse = self2.route_parser(open_tag, close_tag);
  self2.parse = parse;
  self2.pick = function(routes2, url) {
    let input;
    let keys;
    if (routes2 instanceof Array) {
      input = {};
      keys = routes2;
      routes2.map(function(route) {
        input[route] = route;
      });
    } else {
      keys = Object.keys(routes2);
      input = routes2;
    }
    const results = [];
    for (let i2 = keys.length; i2--; ) {
      const pattern = keys[i2];
      const parts = parse(pattern);
      const m = url.match(new RegExp("^" + parts.re + "$"));
      if (m) {
        const matched = m.slice(1);
        const data = {};
        if (matched.length) {
          parts.names.forEach((name, i3) => {
            data[name] = matched[i3];
          });
        }
        results.push({ pattern, data });
      }
    }
    return results;
  };
}
function html(content) {
  return ["<!DOCTYPE html>", "<html>", "<head>", '<meta charset="UTF-8">', "<title>Wayne Service Worker</title>", "</head>", "<body>", ...content, "</body>", "</html>"].join("\n");
}
function error500(error2) {
  var output = html(["<h1>Wayne: 500 Server Error</h1>", "<p>Service worker give 500 error</p>", `<p>${error2.message || error2}</p>`, `<pre>${error2.stack || ""}</pre>`]);
  return [output, { status: 500, statusText: "500 Server Error" }];
}
function createChunk({ data, event, retry, id }) {
  return Object.entries({ event, id, data, retry }).filter(([, value]) => value).map(([key, value]) => `${key}: ${value}`).join("\n") + "\n\n";
}
function trigger(maybeFn, ...args) {
  if (typeof maybeFn === "function") {
    maybeFn(...args);
  }
}
function chain_handlers(handlers, callback) {
  if (handlers.length) {
    return new Promise((resolve, reject) => {
      let i2 = 0;
      (async function recur() {
        const handler = handlers[i2];
        if (!handler) {
          return resolve();
        }
        try {
          await callback(handler, function next() {
            i2++;
            recur();
          });
        } catch (error2) {
          reject(error2);
        }
      })();
    });
  }
}
var Wayne = class {
  constructor() {
    this._er_handlers = [];
    this._middlewares = [];
    this._routes = {};
    this._timeout = 5 * 60 * 1e3;
    this._parser = new RouteParser();
    self.addEventListener("fetch", (event) => {
      const promise = new Promise(async (resolve, reject) => {
        const req = event.request;
        try {
          const res = new HTTPResponse(resolve, reject);
          await chain_handlers(this._middlewares, function(fn, next) {
            return fn(req, res, next);
          });
          const method = req.method;
          const url = new URL(req.url);
          const path = normalize_url(url.pathname);
          const routes2 = this._routes[method];
          if (routes2) {
            const match = this._parser.pick(routes2, path);
            if (match.length) {
              const [first_match] = match;
              const fns = [...this._middlewares, ...routes2[first_match.pattern]];
              req.params = first_match.data;
              setTimeout(function() {
                reject("Timeout Error");
              }, this._timeout);
              await chain_handlers(fns, (fn, next) => {
                return fn(req, res, next);
              });
              return;
            }
          }
          if (event.request.cache === "only-if-cached" && event.request.mode !== "same-origin") {
            return;
          }
          fetch(event.request).then(resolve).catch(reject);
        } catch (error2) {
          this._handle_error(resolve, req, error2);
        }
      });
      event.respondWith(promise.catch(() => {
      }));
    });
    ["GET", "POST", "DELETE", "PATCH", "PUT"].forEach((method) => {
      this[method.toLowerCase()] = this.method(method);
    });
  }
  _handle_error(resolve, req, error2) {
    const res = new HTTPResponse(resolve);
    if (this._er_handlers.length) {
      chain_handlers(this._er_handlers, function(handler, next) {
        handler(error2, req, res, next);
      }, function(error3) {
        res.html(...error500(error3));
      });
    } else {
      res.html(...error500(error2));
    }
  }
  use(...fns) {
    fns.forEach((fn) => {
      if (typeof fn === "function") {
        if (fn.length === 4) {
          this._er_handlers.push(fn);
        } else if (fn.length === 3) {
          this._middlewares.push(fn);
        }
      }
    });
  }
  method(method) {
    return function(url, fn) {
      if (!this._routes[method]) {
        this._routes[method] = {};
      }
      const routes2 = this._routes[method];
      if (!routes2[url]) {
        routes2[url] = [];
      }
      routes2[url].push(fn);
      return this;
    };
  }
};

// src/library/ldsparql.js
var import_query_sparql_rdfjs = __toESM(require_index_browser2());

// node_modules/@rdfjs/dataset/DatasetCore.js
function isString(s) {
  return typeof s === "string" || s instanceof String;
}
var xsdString = "http://www.w3.org/2001/XMLSchema#string";
function termToId(term) {
  if (typeof term === "string") {
    return term;
  }
  if (!term) {
    return "";
  }
  if (typeof term.id !== "undefined" && term.termType !== "Quad") {
    return term.id;
  }
  let subject, predicate, object, graph;
  switch (term.termType) {
    case "NamedNode":
      return term.value;
    case "BlankNode":
      return `_:${term.value}`;
    case "Variable":
      return `?${term.value}`;
    case "DefaultGraph":
      return "";
    case "Literal":
      if (term.language) {
        return `"${term.value}"@${term.language}`;
      }
      return `"${term.value}"${term.datatype && term.datatype.value !== xsdString ? `^^${term.datatype.value}` : ""}`;
    case "Quad":
      subject = escapeQuotes(termToId(term.subject));
      predicate = escapeQuotes(termToId(term.predicate));
      object = escapeQuotes(termToId(term.object));
      graph = term.graph.termType === "DefaultGraph" ? "" : ` ${termToId(term.graph)}`;
      return `<<${subject} ${predicate} ${object}${graph}>>`;
    default:
      throw new Error(`Unexpected termType: ${term.termType}`);
  }
}
var escapedLiteral = /^"(.*".*)(?="[^"]*$)/;
function escapeQuotes(id) {
  return id.replace(escapedLiteral, (_, quoted) => `"${quoted.replace(/"/g, '""')}`);
}
var DatasetCore = class {
  constructor(quads) {
    this._size = 0;
    this._graphs = /* @__PURE__ */ Object.create(null);
    this._id = 0;
    this._ids = /* @__PURE__ */ Object.create(null);
    this._ids["><"] = 0;
    this._entities = /* @__PURE__ */ Object.create(null);
    this._quads = /* @__PURE__ */ new Map();
    if (quads) {
      for (const quad of quads) {
        this.add(quad);
      }
    }
  }
  get size() {
    let size = this._size;
    if (size !== null) {
      return size;
    }
    size = 0;
    const graphs = this._graphs;
    let subjects, subject;
    for (const graphKey in graphs) {
      for (const subjectKey in subjects = graphs[graphKey].subjects) {
        for (const predicateKey in subject = subjects[subjectKey]) {
          size += Object.keys(subject[predicateKey]).length;
        }
      }
    }
    this._size = size;
    return this._size;
  }
  add(quad) {
    let subject = termToId(quad.subject);
    let predicate = termToId(quad.predicate);
    let object = termToId(quad.object);
    const graph = termToId(quad.graph);
    let graphItem = this._graphs[graph];
    if (!graphItem) {
      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };
      Object.freeze(graphItem);
    }
    const ids = this._ids;
    const entities = this._entities;
    subject = ids[subject] || (ids[entities[++this._id] = subject] = this._id);
    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);
    object = ids[object] || (ids[entities[++this._id] = object] = this._id);
    this._addToIndex(graphItem.subjects, subject, predicate, object);
    this._addToIndex(graphItem.predicates, predicate, object, subject);
    this._addToIndex(graphItem.objects, object, subject, predicate);
    this._setQuad(subject, predicate, object, graph, quad);
    this._size = null;
    return this;
  }
  delete(quad) {
    let subject = termToId(quad.subject);
    let predicate = termToId(quad.predicate);
    let object = termToId(quad.object);
    const graph = termToId(quad.graph);
    const ids = this._ids;
    const graphs = this._graphs;
    let graphItem, subjects, predicates;
    if (!(subject = ids[subject]) || !(predicate = ids[predicate]) || !(object = ids[object]) || !(graphItem = graphs[graph]) || !(subjects = graphItem.subjects[subject]) || !(predicates = subjects[predicate]) || !(object in predicates)) {
      return this;
    }
    this._removeFromIndex(graphItem.subjects, subject, predicate, object);
    this._removeFromIndex(graphItem.predicates, predicate, object, subject);
    this._removeFromIndex(graphItem.objects, object, subject, predicate);
    if (this._size !== null) {
      this._size--;
    }
    this._deleteQuad(subject, predicate, object, graph);
    for (subject in graphItem.subjects) {
      return this;
    }
    delete graphs[graph];
    return this;
  }
  has(quad) {
    const subject = termToId(quad.subject);
    const predicate = termToId(quad.predicate);
    const object = termToId(quad.object);
    const graph = termToId(quad.graph);
    const graphItem = this._graphs[graph];
    if (!graphItem) {
      return false;
    }
    const ids = this._ids;
    let subjectId, predicateId, objectId;
    if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object])) {
      return false;
    }
    return this._countInIndex(graphItem.objects, objectId, subjectId, predicateId) === 1;
  }
  match(subject, predicate, object, graph) {
    return this._createDataset(this._match(subject, predicate, object, graph));
  }
  [Symbol.iterator]() {
    return this._match()[Symbol.iterator]();
  }
  // ## Private methods
  // ### `_addToIndex` adds a quad to a three-layered index.
  // Returns if the index has changed, if the entry did not already exist.
  _addToIndex(index0, key0, key1, key2) {
    const index1 = index0[key0] || (index0[key0] = {});
    const index2 = index1[key1] || (index1[key1] = {});
    const existed = key2 in index2;
    if (!existed) {
      index2[key2] = null;
    }
    return !existed;
  }
  // ### `_removeFromIndex` removes a quad from a three-layered index
  _removeFromIndex(index0, key0, key1, key2) {
    const index1 = index0[key0];
    const index2 = index1[key1];
    delete index2[key2];
    for (const key in index2) {
      return;
    }
    delete index1[key1];
    for (const key in index1) {
      return;
    }
    delete index0[key0];
  }
  // ### `_findInIndex` finds a set of quads in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  // `name0`, `name1`, and `name2` are the names of the keys at each level,
  // used when reconstructing the resulting quad
  // (for instance: _subject_, _predicate_, and _object_).
  // Finally, `graph` will be the graph of the created quads.
  // If `callback` is given, each result is passed through it
  // and iteration halts when it returns truthy for any quad.
  // If instead `array` is given, each result is added to the array.
  _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {
    let tmp, index1, index2;
    if (key0) {
      (tmp = index0, index0 = {})[key0] = tmp[key0];
    }
    for (const value0 in index0) {
      index1 = index0[value0];
      if (index1) {
        if (key1) {
          (tmp = index1, index1 = {})[key1] = tmp[key1];
        }
        for (const value1 in index1) {
          index2 = index1[value1];
          if (index2) {
            const values = key2 ? key2 in index2 ? [key2] : [] : Object.keys(index2);
            for (let l = 0; l < values.length; l++) {
              const parts = {
                [name0]: value0,
                [name1]: value1,
                [name2]: values[l]
              };
              const quad = this._getQuad(parts.subject, parts.predicate, parts.object, graph);
              if (array) {
                array.push(quad);
              } else if (callback(quad)) {
                return true;
              }
            }
          }
        }
      }
    }
    return array;
  }
  // ### `_countInIndex` counts matching quads in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  _countInIndex(index0, key0, key1, key2) {
    let count = 0;
    let tmp, index1, index2;
    if (key0) {
      (tmp = index0, index0 = {})[key0] = tmp[key0];
    }
    for (const value0 in index0) {
      index1 = index0[value0];
      if (index1) {
        if (key1) {
          (tmp = index1, index1 = {})[key1] = tmp[key1];
        }
        for (const value1 in index1) {
          index2 = index1[value1];
          if (index2) {
            if (key2) {
              key2 in index2 && count++;
            } else {
              count += Object.keys(index2).length;
            }
          }
        }
      }
    }
    return count;
  }
  // ### `_getGraphs` returns an array with the given graph,
  // or all graphs if the argument is null or undefined.
  _getGraphs(graph) {
    if (!isString(graph)) {
      return this._graphs;
    }
    return {
      [graph]: this._graphs[graph]
    };
  }
  _match(subject, predicate, object, graph) {
    subject = subject && termToId(subject);
    predicate = predicate && termToId(predicate);
    object = object && termToId(object);
    graph = graph && termToId(graph);
    const quads = [];
    const graphs = this._getGraphs(graph);
    const ids = this._ids;
    let content, subjectId, predicateId, objectId;
    if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object])) {
      return quads;
    }
    for (const graphId in graphs) {
      content = graphs[graphId];
      if (content) {
        if (subjectId) {
          if (objectId) {
            this._findInIndex(content.objects, objectId, subjectId, predicateId, "object", "subject", "predicate", graphId, null, quads);
          } else {
            this._findInIndex(content.subjects, subjectId, predicateId, null, "subject", "predicate", "object", graphId, null, quads);
          }
        } else if (predicateId) {
          this._findInIndex(content.predicates, predicateId, objectId, null, "predicate", "object", "subject", graphId, null, quads);
        } else if (objectId) {
          this._findInIndex(content.objects, objectId, null, null, "object", "subject", "predicate", graphId, null, quads);
        } else {
          this._findInIndex(content.subjects, null, null, null, "subject", "predicate", "object", graphId, null, quads);
        }
      }
    }
    return quads;
  }
  _getQuad(subjectId, predicateId, objectId, graphId) {
    return this._quads.get(this._toId(subjectId, predicateId, objectId, graphId));
  }
  _setQuad(subjectId, predicateId, objectId, graphId, quad) {
    this._quads.set(this._toId(subjectId, predicateId, objectId, graphId), quad);
  }
  _deleteQuad(subjectId, predicateId, objectId, graphId) {
    this._quads.delete(this._toId(subjectId, predicateId, objectId, graphId));
  }
  _createDataset(quads) {
    return new this.constructor(quads);
  }
  _toId(subjectId, predicateId, objectId, graphId) {
    return `${subjectId}:${predicateId}:${objectId}:${graphId}`;
  }
};
var DatasetCore_default = DatasetCore;

// node_modules/@rdfjs/dataset/Factory.js
var Factory = class {
  dataset(quads) {
    return new DatasetCore_default(quads);
  }
};
Factory.exports = ["dataset"];
var Factory_default = Factory;

// node_modules/@rdfjs/dataset/index.js
var factory = new Factory_default();
var dataset_default = factory;

// node_modules/stream-chunks/chunks.js
async function chunks(stream) {
  const chunks2 = [];
  for await (const chunk of stream) {
    chunks2.push(chunk);
  }
  return chunks2;
}
var chunks_default = chunks;

// node_modules/stream-chunks/concatChunks.js
function concatChunks(chunks2) {
  const length = chunks2.reduce((length2, chunk) => length2 + chunk.length, 0);
  const merged = new Uint8Array(length);
  let offset = 0;
  for (const chunk of chunks2) {
    merged.set(chunk, offset);
    offset += chunk.length;
  }
  return merged;
}
var concatChunks_default = concatChunks;

// node_modules/nodeify-fetch/lib/patchRequest.browser.js
async function patch(options = {}) {
  if (!options.body || !options.body.readable) {
    return options;
  }
  const content = await chunks_default(options.body);
  if (content.length > 0) {
    if (content[0].BYTES_PER_ELEMENT === 1) {
      options.body = concatChunks_default(content);
    } else {
      options.body = content.join("");
    }
  } else {
    options.body = "";
  }
  return options;
}
var patchRequest_browser_default = patch;

// node_modules/nodeify-fetch/lib/patchResponse.browser.js
var import_readable_stream3 = __toESM(require_browser3(), 1);

// node_modules/nodeify-fetch/lib/arrayBufferToReadable.js
var import_once = __toESM(require_once(), 1);
var import_readable_stream = __toESM(require_browser3(), 1);
function arrayBufferToReadable(callback) {
  return new import_readable_stream.Readable({
    read: (0, import_once.default)(async function() {
      try {
        this.push(new Uint8Array(await callback()));
        this.push(null);
      } catch (err) {
        this.destroy(err);
      }
    })
  });
}
var arrayBufferToReadable_default = arrayBufferToReadable;

// node_modules/nodeify-fetch/lib/Patchable.js
var Patchable = class _Patchable {
  constructor(obj, patch3) {
    this.obj = obj;
    for (const [key, value] of Object.entries(patch3)) {
      this[key] = value;
    }
    for (const key of _Patchable.properties(obj)) {
      if (key in this) {
        continue;
      }
      if (typeof this.obj[key] === "function") {
        this[key] = (...args) => this.obj[key].call(obj, args);
      } else {
        Object.defineProperty(this, key, {
          get: () => {
            return this.obj[key];
          },
          set: (value) => {
            this.obj[key] = value;
          },
          enumerable: true,
          configurable: true
        });
      }
    }
  }
  static properties(obj) {
    return Object.getOwnPropertyNames(Object.getPrototypeOf(obj));
  }
};
var Patchable_default = Patchable;

// node_modules/nodeify-fetch/lib/whatwgToReadable.js
var import_readable_stream2 = __toESM(require_browser3(), 1);
function whatwgToReadable(whatwg) {
  return new import_readable_stream2.Readable({
    read: async function() {
      try {
        let chunk, full;
        do {
          chunk = await whatwg.read();
          if (chunk.done) {
            this.push(null);
          } else {
            full = !this.push(chunk.value);
          }
        } while (!chunk.done && !full);
      } catch (err) {
        this.destroy(err);
      }
    }
  });
}
var whatwgToReadable_default = whatwgToReadable;

// node_modules/nodeify-fetch/lib/patchResponse.browser.js
function patch2(res) {
  if (res.bodyUsed) {
    const body = new import_readable_stream3.Readable({
      read: () => body.destroy(new Error("body already in use"))
    });
    res.body = body;
    return res;
  }
  if (res.body && res.body.readable) {
    return res;
  }
  if (res.body && typeof res.body.getReader === "function") {
    return new Patchable_default(res, {
      // ...and replace the body with a readable stream
      body: whatwgToReadable_default(res.body.getReader())
    });
  }
  res.body = arrayBufferToReadable_default(() => res.arrayBuffer());
  return res;
}
var patchResponse_browser_default = patch2;

// node_modules/nodeify-fetch/browser.js
var Headers2 = window.Headers;
function nodeifyFetch(url, options) {
  return patchRequest_browser_default(options).then((options2) => {
    return fetch(url, options2).then((res) => {
      return patchResponse_browser_default(res);
    });
  });
}

// node_modules/@rdfjs/fetch-lite/node_modules/is-stream/index.js
function isStream(stream) {
  return stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
}
function isReadableStream(stream) {
  return isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
}

// node_modules/@rdfjs/fetch-lite/lib/patchRequest.js
var import_readable_stream4 = __toESM(require_browser3(), 1);
function patchRequest(options, formats2) {
  options.headers = new Headers2(options.headers);
  if (!options.headers.has("accept")) {
    options.headers.set("accept", [...formats2.parsers.keys()].join(", "));
  }
  if (!options.body) {
    return options;
  }
  if (typeof options.body === "string") {
    return options;
  }
  let contentType = options.headers.get("content-type");
  if (contentType && !formats2.serializers.has(contentType)) {
    throw new Error(`no serializer found for media type: ${options.headers.get("content-type")}`);
  }
  if (!contentType) {
    contentType = formats2.serializers.keys().next().value;
    options.headers.set("content-type", contentType);
  }
  if (!isReadableStream(options.body) && options.body[Symbol.iterator]) {
    options.body = import_readable_stream4.Readable.from(options.body);
  }
  options.body = formats2.serializers.import(contentType, options.body);
  return options;
}
var patchRequest_default = patchRequest;

// node_modules/@rdfjs/fetch-lite/lib/fromStream.js
async function fromStream(dataset, stream) {
  for await (const quad of stream) {
    dataset.add(quad);
  }
  return dataset;
}
var fromStream_default = fromStream;

// node_modules/@rdfjs/fetch-lite/lib/attachDataset.js
function attachDataset(res, factory3) {
  res.dataset = async () => {
    const stream = await res.quadStream();
    return fromStream_default(factory3.dataset(), stream);
  };
}
var attachDataset_default = attachDataset;

// node_modules/@rdfjs/fetch-lite/lib/jsonldContextLinkUrl.js
var linkRegExp = /<(.*)>/;
function jsonldContextLinkUrl(res, contentType) {
  if (contentType !== "application/json") {
    return null;
  }
  if (!res.headers.has("link")) {
    return null;
  }
  const links = res.headers.get("link").split(",").map((link) => link.trim());
  const contextLink = links.find((link) => link.includes('rel="http://www.w3.org/ns/json-ld#context"'));
  if (!contextLink) {
    return null;
  }
  const contextUrl = (linkRegExp.exec(contextLink) || []).slice(-1)[0];
  if (!contextUrl) {
    return null;
  }
  return new URL(contextUrl, res.url).toString();
}
var jsonldContextLinkUrl_default = jsonldContextLinkUrl;

// node_modules/@rdfjs/fetch-lite/lib/attachQuadStream.js
function attachQuadStream(res, fetch2, parsers2) {
  res.quadStream = async () => {
    if (!res.headers.get("content-type")) {
      throw new Error("Content-Type header missing: couldn't determine parser");
    }
    let contentType = res.headers.get("content-type").split(";")[0];
    const contextLinkUrl = jsonldContextLinkUrl_default(res, contentType);
    if (contextLinkUrl) {
      contentType = "application/ld+json";
    }
    if (!parsers2.has(contentType)) {
      return Promise.reject(new Error(`unknown content type: ${contentType}`));
    }
    let jsonldContext;
    if (contextLinkUrl) {
      jsonldContext = await fetch2(contextLinkUrl).then((res2) => res2.json());
    }
    return parsers2.import(contentType, res.body, {
      baseIRI: res.url,
      context: jsonldContext
    });
  };
}
var attachQuadStream_default = attachQuadStream;

// node_modules/@rdfjs/fetch-lite/lib/patchResponse.js
function patchResponse(res, factory3, fetch2, parsers2) {
  const contentHeader = [...res.headers.keys()].some((header) => header.startsWith("content-"));
  const chunkedEncoding = res.headers.get("transfer-encoding") === "chunked";
  const hasBody = contentHeader || chunkedEncoding;
  if (hasBody) {
    attachQuadStream_default(res, fetch2, parsers2);
    if (factory3) {
      attachDataset_default(res, factory3);
    }
  }
  return res;
}
var patchResponse_default = patchResponse;

// node_modules/@rdfjs/fetch-lite/index.js
async function rdfFetch(url, options = {}) {
  const factory3 = options.factory;
  const fetch2 = options.fetch || nodeifyFetch;
  const formats2 = options.formats;
  if (!formats2) {
    throw new Error("no formats given");
  }
  options = patchRequest_default(options, formats2);
  const res = await fetch2(url, options);
  return patchResponse_default(res, factory3, fetch2, formats2.parsers);
}

// node_modules/@rdfjs/sink/index.js
var Sink = class {
  constructor(Impl, options) {
    this.Impl = Impl;
    this.options = options;
  }
  import(input, options) {
    const output = new this.Impl(input, { ...this.options, ...options });
    input.on("end", () => {
      if (!output.readable) {
        output.emit("end");
      }
    });
    input.on("error", (err) => {
      output.emit("error", err);
    });
    return output;
  }
};
var sink_default = Sink;

// node_modules/@rdfjs/data-model/lib/BlankNode.js
var BlankNode = class {
  constructor(id) {
    this.value = id;
  }
  equals(other) {
    return !!other && other.termType === this.termType && other.value === this.value;
  }
};
BlankNode.prototype.termType = "BlankNode";
var BlankNode_default = BlankNode;

// node_modules/@rdfjs/data-model/lib/DefaultGraph.js
var DefaultGraph = class {
  equals(other) {
    return !!other && other.termType === this.termType;
  }
};
DefaultGraph.prototype.termType = "DefaultGraph";
DefaultGraph.prototype.value = "";
var DefaultGraph_default = DefaultGraph;

// node_modules/@rdfjs/data-model/lib/fromTerm.js
function fromTerm(factory3, original) {
  if (!original) {
    return null;
  }
  if (original.termType === "BlankNode") {
    return factory3.blankNode(original.value);
  }
  if (original.termType === "DefaultGraph") {
    return factory3.defaultGraph();
  }
  if (original.termType === "Literal") {
    return factory3.literal(original.value, original.language || factory3.namedNode(original.datatype.value));
  }
  if (original.termType === "NamedNode") {
    return factory3.namedNode(original.value);
  }
  if (original.termType === "Quad") {
    const subject = factory3.fromTerm(original.subject);
    const predicate = factory3.fromTerm(original.predicate);
    const object = factory3.fromTerm(original.object);
    const graph = factory3.fromTerm(original.graph);
    return factory3.quad(subject, predicate, object, graph);
  }
  if (original.termType === "Variable") {
    return factory3.variable(original.value);
  }
  throw new Error(`unknown termType ${original.termType}`);
}
var fromTerm_default = fromTerm;

// node_modules/@rdfjs/data-model/lib/Literal.js
var Literal = class {
  constructor(value, language, datatype) {
    this.value = value;
    this.language = language;
    this.datatype = datatype;
  }
  equals(other) {
    return !!other && other.termType === this.termType && other.value === this.value && other.language === this.language && other.datatype.equals(this.datatype);
  }
};
Literal.prototype.termType = "Literal";
var Literal_default = Literal;

// node_modules/@rdfjs/data-model/lib/NamedNode.js
var NamedNode = class {
  constructor(iri) {
    this.value = iri;
  }
  equals(other) {
    return !!other && other.termType === this.termType && other.value === this.value;
  }
};
NamedNode.prototype.termType = "NamedNode";
var NamedNode_default = NamedNode;

// node_modules/@rdfjs/data-model/lib/Quad.js
var Quad = class {
  constructor(subject, predicate, object, graph) {
    this.subject = subject;
    this.predicate = predicate;
    this.object = object;
    this.graph = graph;
  }
  equals(other) {
    return !!other && (other.termType === "Quad" || !other.termType) && other.subject.equals(this.subject) && other.predicate.equals(this.predicate) && other.object.equals(this.object) && other.graph.equals(this.graph);
  }
};
Quad.prototype.termType = "Quad";
Quad.prototype.value = "";
var Quad_default = Quad;

// node_modules/@rdfjs/data-model/lib/Variable.js
var Variable = class {
  constructor(name) {
    this.value = name;
  }
  equals(other) {
    return !!other && other.termType === this.termType && other.value === this.value;
  }
};
Variable.prototype.termType = "Variable";
var Variable_default = Variable;

// node_modules/@rdfjs/data-model/Factory.js
var langStringDatatype = new NamedNode_default("http://www.w3.org/1999/02/22-rdf-syntax-ns#langString");
var stringDatatype = new NamedNode_default("http://www.w3.org/2001/XMLSchema#string");
var DataFactory = class {
  constructor() {
    this.init();
  }
  init() {
    this._data = {
      blankNodeCounter: 0,
      defaultGraph: new DefaultGraph_default()
    };
  }
  namedNode(value) {
    return new NamedNode_default(value);
  }
  blankNode(value) {
    value = value || "b" + ++this._data.blankNodeCounter;
    return new BlankNode_default(value);
  }
  literal(value, languageOrDatatype) {
    if (typeof languageOrDatatype === "string") {
      return new Literal_default(value, languageOrDatatype, langStringDatatype);
    } else {
      return new Literal_default(value, "", languageOrDatatype || stringDatatype);
    }
  }
  variable(value) {
    return new Variable_default(value);
  }
  defaultGraph() {
    return this._data.defaultGraph;
  }
  quad(subject, predicate, object, graph = this.defaultGraph()) {
    return new Quad_default(subject, predicate, object, graph);
  }
  fromTerm(original) {
    return fromTerm_default(this, original);
  }
  fromQuad(original) {
    return fromTerm_default(this, original);
  }
};
DataFactory.exports = [
  "blankNode",
  "defaultGraph",
  "fromQuad",
  "fromTerm",
  "literal",
  "namedNode",
  "quad",
  "variable"
];
var Factory_default2 = DataFactory;

// node_modules/@rdfjs/data-model/index.js
var factory2 = new Factory_default2();
var data_model_default = factory2;

// node_modules/duplex-to/readable.js
var blackList = /* @__PURE__ */ new Set(["_write", "_writableState", "writable"]);
function readable(duplex) {
  return new Proxy(duplex, {
    has(target, key) {
      if (blackList.has(key)) {
        return false;
      }
      return Reflect.has(...arguments);
    },
    get(target, key) {
      if (blackList.has(key)) {
        return void 0;
      }
      const result = Reflect.get(...arguments);
      if (result && typeof result.bind === "function") {
        return result.bind(target);
      }
      return result;
    },
    set(target, key, value) {
      if (blackList.has(key)) {
        return void 0;
      }
      return Reflect.set(...arguments);
    }
  });
}
var readable_default = readable;

// node_modules/@rdfjs/parser-jsonld/lib/ParserStream.js
var import_jsonld_streaming_parser = __toESM(require_jsonld_streaming_parser(), 1);
var import_readable_stream5 = __toESM(require_browser3(), 1);
var relativeIriProtocol = "null:";
function termCleanup(factory3) {
  return (term) => {
    if (term.termType !== "NamedNode") {
      return null;
    }
    if (!term.value.startsWith(relativeIriProtocol)) {
      return null;
    }
    return factory3.namedNode(term.value.slice(relativeIriProtocol.length));
  };
}
function quadCleanup(factory3) {
  const cleanup = termCleanup(factory3);
  return (quad) => {
    const subject = cleanup(quad.subject);
    const predicate = cleanup(quad.predicate);
    const object = cleanup(quad.object);
    const graph = cleanup(quad.graph);
    if (subject || predicate || object || graph) {
      return factory3.quad(
        subject || quad.subject,
        predicate || quad.predicate,
        object || quad.object,
        graph || quad.graph
      );
    }
    return quad;
  };
}
var ParserStream = class {
  constructor(input, { baseIRI = relativeIriProtocol, context = null, documentLoader, factory: factory3 = data_model_default } = {}) {
    const parser = new import_jsonld_streaming_parser.JsonLdParser({
      baseIRI,
      context,
      dataFactory: factory3,
      documentLoader,
      streamingProfile: false
    });
    input.pipe(parser);
    const cleanup = quadCleanup(factory3);
    const transform = new import_readable_stream5.Transform({
      objectMode: true,
      transform: (quad, encoding, callback) => {
        callback(null, cleanup(quad));
      }
    });
    parser.on("context", (context2) => {
      Object.entries(context2).forEach(([prefix, iri]) => {
        transform.emit("prefix", prefix, factory3.namedNode(iri));
      });
    });
    parser.on("error", (err) => transform.destroy(err));
    parser.pipe(transform);
    return readable_default(transform);
  }
};
var ParserStream_default = ParserStream;

// node_modules/@rdfjs/parser-jsonld/index.js
var Parser = class extends sink_default {
  constructor(options) {
    super(ParserStream_default, options);
  }
};
var parser_jsonld_default = Parser;

// node_modules/@rdfjs/parser-n3/lib/ParserStream.js
var import_n3 = __toESM(require_lib43(), 1);
var ParserStream2 = class {
  constructor(input, { baseIRI = "", factory: factory3 = data_model_default, ...rest } = {}) {
    const boundFactory = {
      blankNode: factory3.blankNode.bind(factory3),
      defaultGraph: factory3.defaultGraph.bind(factory3),
      literal: factory3.literal.bind(factory3),
      namedNode: factory3.namedNode.bind(factory3),
      quad: factory3.quad.bind(factory3)
    };
    const parser = new import_n3.StreamParser({ baseIRI, factory: boundFactory, ...rest });
    input.pipe(parser);
    return readable_default(parser);
  }
};
var ParserStream_default2 = ParserStream2;

// node_modules/@rdfjs/parser-n3/index.js
var Parser2 = class extends sink_default {
  constructor(options) {
    super(ParserStream_default2, options);
  }
};
var parser_n3_default = Parser2;

// node_modules/@rdfjs/serializer-ntriples/lib/SerializerStream.js
var import_to_ntriples = __toESM(require_to_ntriples(), 1);
var import_readable_stream6 = __toESM(require_browser3(), 1);
var SerializerStream = class {
  constructor(input) {
    const stream = new import_readable_stream6.Transform({
      objectMode: true,
      transform: (quad, encoding, callback) => {
        callback(null, `${(0, import_to_ntriples.default)(quad)}
`);
      }
    });
    input.pipe(stream);
    return readable_default(stream);
  }
};
var SerializerStream_default = SerializerStream;

// node_modules/@rdfjs/serializer-ntriples/index.js
var Serializer = class extends sink_default {
  constructor() {
    super(SerializerStream_default);
  }
};
var serializer_ntriples_default = Serializer;

// node_modules/@rdfjs/sink-map/index.js
var SinkMap = class extends Map {
  import(key, input, options) {
    const parser = this.get(key);
    if (!parser) {
      return null;
    }
    return parser.import(input, options);
  }
};
var sink_map_default = SinkMap;

// node_modules/@rdfjs/serializer-jsonld/lib/SerializerStream.js
var import_readable_stream7 = __toESM(require_browser3(), 1);

// node_modules/@rdfjs/serializer-jsonld/lib/ObjectEncoder.js
var ObjectEncoder = class {
  constructor(stream) {
    this.stream = stream;
    this.array = [];
  }
  push(jsonld) {
    this.array.push(jsonld);
  }
  end() {
    this.stream.push(this.array);
    this.stream.push(null);
  }
};
var ObjectEncoder_default = ObjectEncoder;

// node_modules/@rdfjs/serializer-jsonld/lib/StringEncoder.js
var StringEncoder = class {
  constructor(stream) {
    this.stream = stream;
    this.first = true;
    this.stream.push("[");
  }
  push(jsonld) {
    if (this.first) {
      this.first = false;
    } else {
      this.stream.push(",");
    }
    this.stream.push(JSON.stringify(jsonld));
  }
  end() {
    this.stream.push("]");
    this.stream.push(null);
  }
};
var StringEncoder_default = StringEncoder;

// node_modules/@rdfjs/serializer-jsonld/lib/SerializerStream.js
var SerializerStream2 = class _SerializerStream extends import_readable_stream7.Readable {
  constructor(input, { encoding = "object" } = {}) {
    super({
      objectMode: true,
      read: () => {
      }
    });
    if (encoding === "object") {
      this.encoder = new ObjectEncoder_default(this);
    }
    if (encoding === "string") {
      this.encoder = new StringEncoder_default(this);
    }
    if (!this.encoder) {
      throw new Error(`unknown encoding: ${encoding}`);
    }
    input.on("data", (quad) => {
      const jsonld = {};
      let triple = jsonld;
      if (quad.graph.termType !== "DefaultGraph") {
        jsonld["@id"] = quad.graph.value;
        jsonld["@graph"] = {};
        triple = jsonld["@graph"];
      }
      triple["@id"] = _SerializerStream.subjectValue(quad.subject);
      if (quad.predicate.value === "http://www.w3.org/1999/02/22-rdf-syntax-ns#type") {
        triple["@type"] = _SerializerStream.subjectValue(quad.object);
      } else {
        triple[quad.predicate.value] = _SerializerStream.objectValue(quad.object);
      }
      this.encoder.push(jsonld);
    });
    input.on("end", () => this.encoder.end());
    input.on("error", (err) => this.emit("error", err));
  }
  static subjectValue(subject) {
    return subject.termType === "BlankNode" ? "_:" + subject.value : subject.value;
  }
  static objectValue(object) {
    if (object.termType === "NamedNode") {
      return { "@id": object.value };
    }
    if (object.termType === "BlankNode") {
      return { "@id": "_:" + object.value };
    }
    if (object.language) {
      return { "@language": object.language, "@value": object.value };
    } else if (object.datatype && object.datatype.value !== "http://www.w3.org/2001/XMLSchema#string") {
      return { "@type": object.datatype.value, "@value": object.value };
    } else {
      return object.value;
    }
  }
};
var SerializerStream_default2 = SerializerStream2;

// node_modules/@rdfjs/serializer-jsonld/index.js
var Serializer2 = class extends sink_default {
  constructor(options) {
    super(SerializerStream_default2, options);
  }
};
var serializer_jsonld_default = Serializer2;

// node_modules/@rdfjs/formats-common/lib/CustomJsonLdSerializer.js
var CustomJsonLdSerializer = class extends serializer_jsonld_default {
  constructor({ ...args } = {}) {
    super({ encoding: "string", ...args });
  }
};
var CustomJsonLdSerializer_default = CustomJsonLdSerializer;

// node_modules/@rdfjs/formats-common/lib/CustomRdfXmlParser.js
var import_rdfxml_streaming_parser = __toESM(require_rdfxml_streaming_parser(), 1);
var CustomRdfXmlParser = class extends import_rdfxml_streaming_parser.RdfXmlParser {
  constructor({ factory: factory3, ...args } = {}) {
    super({ ...args, dataFactory: factory3 });
  }
};
var CustomRdfXmlParser_default = CustomRdfXmlParser;

// node_modules/@rdfjs/formats-common/index.js
var parsers = new sink_map_default();
var serializers = new sink_map_default();
var formats = {
  parsers,
  serializers
};
formats.parsers.set("application/ld+json", new parser_jsonld_default());
formats.parsers.set("application/trig", new parser_n3_default());
formats.parsers.set("application/n-quads", new parser_n3_default());
formats.parsers.set("application/n-triples", new parser_n3_default());
formats.parsers.set("text/n3", new parser_n3_default());
formats.parsers.set("text/turtle", new parser_n3_default());
formats.parsers.set("application/rdf+xml", new CustomRdfXmlParser_default());
formats.serializers.set("application/ld+json", new CustomJsonLdSerializer_default());
formats.serializers.set("application/n-quads", new serializer_ntriples_default());
formats.serializers.set("application/n-triples", new serializer_ntriples_default());
formats.serializers.set("text/n3", new serializer_ntriples_default());
formats.serializers.set("text/turtle", new serializer_ntriples_default());
var formats_common_default = formats;

// node_modules/@rdfjs/fetch/index.js
function rdfFetch2(url, { factory: factory3 = dataset_default, formats: formats2 = formats_common_default, ...options } = {}) {
  return rdfFetch(url, { factory: factory3, formats: formats2, ...options });
}

// src/library/ldsparql.js
var import_n32 = __toESM(require_lib43());
var import_sparqljs = __toESM(require_sparql());
formats_common_default.parsers.set("application/json", formats_common_default.parsers.get("application/ld+json"));
async function getStore(query) {
  const parser = new import_sparqljs.Parser({ skipValidation: true, factory: import_n32.DataFactory });
  const parsed = parser.parse(query);
  const store = new import_n32.Store();
  const graphs = [...parsed.from?.default ?? [], ...parsed.from?.named ?? []];
  await Promise.all(
    graphs.map(async (graph) => {
      const res = await rdfFetch2(graph.value, {
        headers: new Headers({
          accept: "application/ld+json"
        }),
        formats: formats_common_default
      });
      const stream = await res.quadStream();
      for await (const quad of stream) {
        quad.graph = graph;
        store.add(quad);
      }
    })
  );
  return store;
}
async function ldsparql(query, mimetype) {
  const engine = new import_query_sparql_rdfjs.QueryEngine();
  const store = await getStore(query);
  const result = await engine.query(query, { sources: [store] });
  const { data } = await engine.resultToString(result, mimetype);
  let output = "";
  for await (const datum of data) {
    output += datum.toString();
  }
  return output;
}

// src/service-worker/ldsparql.js
function routes(app2) {
  return app2.post("/ldsparql", async function(req, res) {
    const query = (await req.formData()).get("query");
    let mediaType = "application/sparql-results+json";
    const results = await ldsparql(query, mediaType);
    res.json(results);
  });
}
var ldsparql_default = routes;

// src/service-worker/app.js
var app = new Wayne();
ldsparql_default(app);

// src/service-worker/sw.js
self.skipWaiting();
self.addEventListener("activate", (event) => {
  event.waitUntil(clients.claim());
});
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

queue-microtask/index.js:
  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

xmlchars/xml/1.0/ed5.js:
  (**
   * Character classes and associated utilities for the 5th edition of XML 1.0.
   *
   * @author Louis-Dominique Dubeau
   * @license MIT
   * @copyright Louis-Dominique Dubeau
   *)

xmlchars/xml/1.1/ed2.js:
  (**
   * Character classes and associated utilities for the 2nd edition of XML 1.1.
   *
   * @author Louis-Dominique Dubeau
   * @license MIT
   * @copyright Louis-Dominique Dubeau
   *)

xmlchars/xmlns/1.0/ed3.js:
  (**
   * Character class utilities for XML NS 1.0 edition 3.
   *
   * @author Louis-Dominique Dubeau
   * @license MIT
   * @copyright Louis-Dominique Dubeau
   *)
*/
